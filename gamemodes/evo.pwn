#include <a_samp>
#include <a_mysql>
#include <izcmd>
#include <sscanf2>
#include <foreach>
#include <streamer>
#include <bodyparts>
#include <easydialog>
#include <a_pause>
#include <mSelection>
#include <messagebox>
#include <serverobjects>
#include <VeronaMall>
#include <h_colors>
#include <PlayerToPlayer>
#include <cuffs>
#include <strlib>
#include <crashdetect>
#include <vehicleFunctions>
#pragma dynamic 20000
main() { }
//Global Variables for querys & format messages
new msg[256], query[650], loginMsg[200], playerserial[256];
//Global Variables for querys & format messages

native gpci (playerid, serial [], len); // this is the native.
//#define function%0(%1) forward%0(%1);public%0(%1)

/*Used CheckPoints & Race CheckPoints
-----------------------------------
1-14 - License Exam.
15-24 - Flying Exam.
25 - Owned player vehicle found, or when spawn.
26 - Trucking job (Loading).
27 - Trucking job (Dropping).
28 - Trucking job (Returning).
-----------------------------------*/
//#define localhost_mysql

//MySQL Information
new dbHandle;

#if defined localhost_mysql

    #define SQL_HOST "127.0.0.1"
    #define SQL_USER "root"
    #define SQL_PASS ""
    #define SQL_DB "evorp_test"

#else

    #define SQL_HOST "127.0.0.1"
    #define SQL_USER "iulian"
    #define SQL_PASS "0zie88y7"
    #define SQL_DB "evo_rp"

#endif

//MySQL Information

//#define debugOn

#define TEMPWEAPON 1
#define PERMWEAPON 2

#define ACCEPTDEATH_SECONDS 60 // IN SECUNDE
#define MAX_DNC 20
#define DNC_COLOR 0xE0EA43FF
//WEAPONS
#define PRICE_MATS 1
#define KNIFE_MATS 75
#define COLT45_MATS 150
#define COLT45_AMMO 2
#define DEAGLE_MATS 200
#define DEAGLE_AMMO 2
#define SHOTGUN_MATS 300
#define SHOTGUN_AMMO 3
#define AK47_MATS 500
#define AK47_AMMO 5
#define SNIPER_MATS 1500
#define SNIPER_AMMO 10
//=========Bodyparts ====//
#define WEAPON_BODY_PART_CHEST 3
#define WEAPON_BODY_PART_CROTCH 4
#define WEAPON_BODY_PART_LEFT_ARM 5
#define WEAPON_BODY_PART_RIGHT_ARM 6
#define WEAPON_BODY_PART_LEFT_LEG 7
#define WEAPON_BODY_PART_RIGHT_LEG 8
#define WEAPON_BODY_PART_HEAD 9
//========Bodyparts======//
//=======Farmer Job======//
/*
FJ Pos hire vehicle is positions to rent vehicle
FJ Pos Get paddy sack is positions to get paddy sack
FJ Transport is positions to transport paddy
Time_Updatepaddy is time paddy grow default is 5000ms(5s)
*/
#define MAX_PADDYS 20

#define FJPosHireVehicle -123.0217,-32.4668,3.1172
#define FJPosGetPaddySack -109.5001,-3.3702,3.1172
#define FJPosTransport  1938.5024,165.9720,37.2813
#define FJAreaPos       -273.4105,-60.5778,-122.2512,60.6611//minx,miny,maxx,maxy

#define DIALOG_FJHIREVEHICLE        (2322)
#define DIALOG_FJGETPADDYSACK       (2323)
#define DIALOG_FJUNHIREVEHICLE      (2324)

#define TIME_UPDATEPADDY            (4000)

//=======Farmer Job======//
//=========Drugs=========//
#define DRUG_CRACK 1
#define DRUG_COCAINE 2
#define DRUG_MARIJUANA 3
#define DRUG_HEROIN 4
//=========Drugs=========//
//=========Check Points=========//
#define FLYEXAM1 15
#define FLYEXAM2 16
#define FLYEXAM3 17
#define FLYEXAM4 18
#define FLYEXAM5 19
#define FLYEXAM6 20
#define FLYEXAM7 21
#define FLYEXAM8 22
#define FLYEXAM9 23
#define FLYEXAM10 24
#define FINEVEH 25
#define TRUCKLOAD 26
#define TRUCKDROP 27
#define TRUCKRETURN 28
#define COMPSPOT 29
//=========Check Points=========//

//=========Factions=========//
#define CIVILIAN 0
#define LSPD 1
#define LSFD 2
#define GOV 3
#define NEWS 4
#define NGUARD 5
//Types
#define FACTION_LEGAL 1
#define FACTION_ILLEGAL 2
//=========Factions=========//

//=========Jobs=========//
#define JOBLESS 0
#define TRUCKER 1
#define MECHANIC 2
#define TAXI 3
#define GARBAGE 4
#define DRUGDEALER 5
#define Jobviitor 6
#define FARMER 7
#define LIBER2 8
#define LIBER 9
#define WEAPONDEALER 10
//=========Jobs=========//
//=========Truck Defines=========//
#define TRUCKER_RANK1 1
#define TRUCKER_RANK2 2
#define TRUCKER_RANK3 3
#define TRUCKER_RANK4 4
//=====================
#define BOBCAT_COMPS 1500
#define SADLER_COMPS 2500
#define YOSEMITE_COMPS 3000
#define BOXVILLE_COMPS 4000
#define YANKEE_COMPS 10000
#define LINERUNNER_COMPS 13000
#define ROADTRAIN_COMPS 15000
//=====================
#define TRUCKER_1_PAYCHECK 300
#define TRUCKER_2_PAYCHECK 700
#define TRUCKER_3_PAYCHECK 1300
#define TRUCKER_4_PAYCHECK 2000
//=====================
#define TRUCKER_TORANK_2 15
#define TRUCKER_TORANK_3 30
#define TRUCKER_TORANK_4 60
//=========Truck Defines=========//

#define KEY_HORN 2
#define KEY_ENTER 16

//=========Food Stall Menu Menus=========//
new Menu:FoodStallMenu;
#define NOODLES_PRICE 50
#define PIZZA_PRICE 25
#define CHICKEN_PRICE 80
#define HOTDOG_PRICE 40
//=========Food Stall Menu Menus=========//

#define MAX_CONNECTIONS_FROM_IP     3

//============ MAX IP PER SESSION ====//

#define INVALID_WEAPON_SLOT_ID -1
#define MAX_ZONE_NAME 28
#define MAXLEN 90
#define MAX_RANK_NAME 32
#define VEHICLES_GAS_TIMER 180000
#define HOSPITAL_WAIT 60000
//-------------------------
#define REPAIR_DEAD 0
#define REPAIR_ENGINE 1
#define REPAIR_BODY 2
#define REPAIR_PAINT 3
//-------------------------
#define BOOMBOX_PRICE 200
//-------------------------
#define VEHICLE_RENT_COST 150
#define BIKE_RENT_COST 30
#define CARLIC_PRICE 100
#define FLYLIC_PRICE 20000
//==============Dynamic Vehicle Types==============//
#define RENT_VEHICLE 1
#define DMV_VEHICLE 2
#define RENT_BIKE 3
#define DMV_HELICOPTER 4
#define POLICE_CAR 5
#define POLICE_TOWTRUCK 6
#define LSFD_CAR 7
#define TRUCKER_CAR 8
#define TAXI_CAR 9
#define FISH_RENT 10
#define LIBERCAR_2 11
#define LIBER_CAR 12
#define GOV_CAR 13
#define NEWS_CAR 14
#define GARBAGE_CAR 15
#define FARMER_CAR 16
//==============Dynamic Vehicle Types==============//
//==Admin-Levels==//
#define ADMIN_LEVEL_1 1
#define ADMIN_LEVEL_2 2
#define ADMIN_LEVEL_3 3
#define ADMIN_LEVEL_4 4
#define ADMIN_LEVEL_5 5
#define HIGH_ADMIN_LEVEL 2014
#define BIG_ADMIN_LEVEL 9999
//==Admin-Levels==//

#define PreloadAnimLib(%1,%2)   ApplyAnimation(%1,%2,"null",0.0,0,0,0,0,0)

//Updating PVars - Very useful
#define UpdateIntVar(%0,%1,%2) SetIntVar(%0, %1, (GetIntVar(%0, %1) + %2))
#define UpdateFloatVar(%0,%1,%2) SetFloatVar(%0, %1, (GetFloatVar(%0, %1) + %2))
//Updating PVars - Very useful

#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)

// VERSION: VERSION(5).MONTH.MONTH
#define GameModeVersion "5.5.8"
#define GameModeText "EVO:RP "GameModeVersion""
#if defined localhost_mysql
    #define ServerName "Evolution Role Play - Server de teste"
#else
    #define ServerName "Evolution Role Play [www.evolution-rp.ro]"
#endif
#define LANGUAGE "Romanian"

#define ShowTextDraw TextDrawShowForPlayer
#define HideTextDraw TextDrawHideForPlayer

#define SCM SendClientMessage
#define SCMALL SendClientMessageToAll

#define F_BOXING FIGHT_STYLE_BOXING
#define F_KUNGFU FIGHT_STYLE_KUNGFU
#define F_GRABKICK FIGHT_STYLE_GRABKICK
#define F_KNEEHEAD FIGHT_STYLE_KNEEHEAD
#define F_ELBOW FIGHT_STYLE_ELBOW
#define F_NORMAL FIGHT_STYLE_NORMAL

//====Defines====
#define MAX_LABELS 50
#define MAX_JOBS 10
#define MAX_DOORS 50
#define MAX_INFOS 50
#define MAX_INTERIORS 100
#define MAX_BANKS 3
#define MAX_ATMS 50
#define MAX_GAS_STATIONS 50
#define MAX_HOUSES 602 // Needs to be plus 1
#define MAX_GPS_LOCATION 50
#define MAX_BIZ 100
#define MAX_FURNITURE 100
#define MAX_HOUSE_WEAPONS 6 // Needs to be plus 1
#define MAX_VEHICLE_WEAPONS 6 // Needs to be plus 1
#define MAX_FOOD_STANDS 1
#define MAX_WEP_DROPS 100
#define MAX_RADIO_CHANNELS 100
#define MAX_RADIO_SLOTS 4 // Needs to be plus 1
#define MAX_NOTES 5
#define MAX_DEALERSHIPS 3
#define MAX_PARK_METERS 100
#define MAX_APBS 11
#define MAX_FACTIONS 11
#define MAX_FACTION_DOORS 60
#define MAX_CAR_TICKETS 10
#define MAX_PLAYER_TICKETS 10
#define MAX_OWNED_VEHICLES 6 // Needs to be plus 1
#define MAX_CONTACTS 16 // Needs to be plus 1
#define MAX_DRUGS 11 // Needs to be plus 1
#define MAX_WEAPONS 46 // Needs to be plus 1
#define MAX_PLANTS 50
#undef MAX_OBJECTS
#define MAX_OBJECTS 20000
#define MAX_TRASHBINS 100
#define MAX_SPRAYS 50
#define BANK_CARD_PRICE 500
#define flashtime 115
#define DOUBLE_CLICK_TIME 1500 // ms (tick)
//====Defines====
//******VARIABILE******//
#pragma unused DonateCars
// Farmer job
new FJArea;
// Farmer job

//anti cheat
new cheatID[MAX_PLAYERS];
new cheatImmune[MAX_PLAYERS];
//anti cheat
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS]; 
new infopickup;
new trash[MAX_PLAYERS];
new togglenews[MAX_PLAYERS];
new g_TickPushed[MAX_PLAYERS];
new Flash[MAX_VEHICLES];
new FlashTime[MAX_VEHICLES];
new fishingrod[MAX_PLAYERS];
new dmv_bike[MAX_PLAYERS];
new dmv_bikestage[MAX_PLAYERS];
new dmv_car[MAX_PLAYERS];
new dmv_carstage[MAX_PLAYERS];
new dmv_bigcar[MAX_PLAYERS];
new dmv_bigcarstage[MAX_PLAYERS];
new Float:speedlimit[MAX_PLAYERS];
//new canchangename[MAX_PLAYERS];
//new newname[MAX_PLAYERS][128];
new adeadtimer[MAX_PLAYERS];
new debugmode[MAX_PLAYERS];
new mutetimer[MAX_PLAYERS];
new enteredplane[MAX_PLAYERS];
new materials[MAX_PLAYERS];
new rubberbullet[MAX_PLAYERS];
new blockpm[MAX_PLAYERS];
new togglehud[MAX_PLAYERS];
new bhop[MAX_PLAYERS];
new bhop_timer[MAX_PLAYERS];
new bhop_warn[MAX_PLAYERS];
new dmvstage[MAX_PLAYERS];
new bag[MAX_PLAYERS];
new briefcase[MAX_PLAYERS];
new seatbelt[MAX_PLAYERS];
new Text3D:veicolo_callsign_testo[MAX_VEHICLES];
new veicolo_callsign_status[MAX_VEHICLES];

new pskinlist = mS_INVALID_LISTID;
new skinlist = mS_INVALID_LISTID;
new vehiclelist = mS_INVALID_LISTID;
new weaponlist = mS_INVALID_LISTID;
new buyable = mS_INVALID_LISTID;
//===========TextDraws===========//
new Text:ClothesText;
new PlayerText:RadioDraw[MAX_PLAYERS];
new PlayerText:ChannelDraw[MAX_PLAYERS];
new PlayerText:SlotDraw[MAX_PLAYERS];
new PlayerText:PrevButton[MAX_PLAYERS];
new PlayerText:NextButton[MAX_PLAYERS];
new PlayerText:WearButton[MAX_PLAYERS];
new PlayerText:TruckerDraw[MAX_PLAYERS];
new Text:errormsg[MAX_PLAYERS];
new PlayerText:jail_timeleft[MAX_PLAYERS];
new Text:hospital_timeleft[MAX_PLAYERS];
new Text:infotxt[MAX_PLAYERS];
new PlayerText:ModText[MAX_PLAYERS];
new PlayerText:EvoRP[MAX_PLAYERS];
new PlayerText:SSTextDraw[MAX_PLAYERS];
//===========TextDraws===========//

//anti vehicle spray
#define VW_CHEATER 8888
new normal_ovr_count = 3;
//anti vehicle spray
//Admin stuff

//Global stuff
new trashbintimer;
new checkbintimer;
new engine,lights,alarm,doors,bonnet,boot,objective;
new checkgastimer;
//new offersent[MAX_PLAYERS];
new onemintimer;
new globalsaving;
new checkstatus;
new speedtimer;
new cheatTimer;
new resettimers;
new truckertimer;
new antiafk;
//Advert System
new AdvertWait = 0;
//Advert System

// Ban System
new Player_gpci[MAX_PLAYERS];
// Ban System
new OfferSent[MAX_PLAYERS];

//PayDay System
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new timeshift = 0;
new shifthour;
//PayDay System

new bool:noooc = true;
new bool:achat = true;
new bool:tchat = true;

//================================ Security Mode ========================//

new bool:SecurityMode[MAX_PLAYERS char];



//================================ Security Mode ========================//

//Player stuff
new levelexp = 4; //Adding 4 exp every level.

//============================Tolls============================//
// Main configuration
#define TollCost (50)                   // How much it costs to pass the tolls
#define TollDelayCop (5)                // The timespace in seconds between each /toll command for all cops (To avoid spam)
#define TollOpenDistance (1.0)          // The distance in units the player can be from the icon to open the toll

// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)

#define L_sz_TollStringLocked ("Gardianul: Imi pare rau dar bariera este inchisa momentan, te rog sa revi mai tarziu.")
#define L_sz_TollStringNoMoney ("Nu ai destui bani sa platesti vama.")
#define L_sz_TollStringBye ("Gardianul: Multumesc, condu prudent.")
#define L_sz_TollStringHurryUp ("Ai 6 secunde sa treci, apoi bariera se va inchide!")
//============================Tolls============================//

//Tolls
new L_a_RequestAllowedCop, // The same timer for all /toll changes
    L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls

//Trucking variables
    new bool:Trucking[MAX_PLAYERS char],
    LoadingTruck[MAX_PLAYERS char],
    bool:DroppingOff[MAX_PLAYERS char],
    TruckVehicle[MAX_PLAYERS],
    TruckingMoney[MAX_PLAYERS],
    TruckTrailer[MAX_PLAYERS],
    Float:GatherX[MAX_PLAYERS],
    Float:GatherY[MAX_PLAYERS],
    Float:GatherZ[MAX_PLAYERS],
    Float:DropOffX[MAX_PLAYERS],
    Float:DropOffY[MAX_PLAYERS],
    Float:DropOffZ[MAX_PLAYERS];

new TruckComps[MAX_VEHICLES];
//Trucking variables

//Mechanic variables
new RepairOffer[MAX_PLAYERS],
    VehicleToRepair[MAX_PLAYERS],
    OldVehicle[MAX_PLAYERS],
    RepairService[MAX_PLAYERS][4],
    RepairTime[MAX_PLAYERS char],
    bool:GettingRepair[MAX_PLAYERS char],
    RefillPrice[MAX_PLAYERS],
    RefillOffer[MAX_PLAYERS];
//Mechanic variables

// dealership
    new CarModel2[MAX_PLAYERS];
//dealership

//Taxi variables
    new bool:TaxiDuty[MAX_PLAYERS char],
    TaxiFare[MAX_PLAYERS char],
    bool:TaxiStart[MAX_PLAYERS char],
    TaxiMoney[MAX_PLAYERS],
    TaxiMade[MAX_PLAYERS];
//Taxi variables

//Trailer Variables
	new InTrailer[MAX_PLAYERS];
//Trailer Variables

new
    bool:gOOC[MAX_PLAYERS char],
    DoorEntered[MAX_PLAYERS],
    HouseEntered[MAX_PLAYERS],
    BizEntered[MAX_PLAYERS],
    bool:maskOn[MAX_PLAYERS char],
    bool:Mask[MAX_PLAYERS char],
    Painting[MAX_PLAYERS char],
    VehColor1[MAX_PLAYERS char],
    VehColor2[MAX_PLAYERS char],
    HospitalWait[MAX_PLAYERS char],
    infotxt_expire[MAX_PLAYERS char],
    pToAccept[MAX_PLAYERS],
    vToAccept[MAX_PLAYERS],
    prToAccept[MAX_PLAYERS],
    spawnVehicle[MAX_PLAYERS],
    bool:ToolKit[MAX_PLAYERS char],
    JackingEngine[MAX_PLAYERS],
    JackingLock[MAX_PLAYERS],
    DoorJacking[MAX_PLAYERS],
    bool:IsSmoking[MAX_PLAYERS char],
    bool:IsModding[MAX_PLAYERS char],
    bool:BuyingPaintJob[MAX_PLAYERS char],
    bool:TesterChat[MAX_PLAYERS char],
    bool:OnAnim[MAX_PLAYERS char],
    PeopleBlocking[MAX_PLAYERS][MAX_PLAYERS],
    SkinSlot[MAX_PLAYERS],
    HireRequester[MAX_PLAYERS],
    FactionRequest[MAX_PLAYERS],
    JustCasinoed[MAX_PLAYERS],
    DrunkLevel[MAX_PLAYERS],
    bool:GasCan[MAX_PLAYERS char],
    bool:CopDuty[MAX_PLAYERS char],
    bool:MedicDuty[MAX_PLAYERS char],
    bool:NewsDuty[MAX_PLAYERS char],
    bool:NGuardDuty[MAX_PLAYERS char],
    bool:GOVDuty[MAX_PLAYERS char],
    bool:SwatDuty[MAX_PLAYERS char],
    bool:Cuffed[MAX_PLAYERS char],
    bool:TazerActive[MAX_PLAYERS char],
    bool:Tazed[MAX_PLAYERS char],
    bool:OnCCTV[MAX_PLAYERS char],
    MDCAdd[MAX_PLAYERS],
    TowingCar[MAX_PLAYERS],
    RoadBlocks[MAX_PLAYERS][11],
    bool:isAFK[MAX_PLAYERS char],
    PickingTime[MAX_PLAYERS char],
    PlantingTime[MAX_PLAYERS char],
    AFKTime[MAX_PLAYERS],
    PoliceObjects[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS];

//Cellphone System
new
    cellOn[MAX_PLAYERS char],
    cellRingTime[MAX_PLAYERS char];
//Cellphone System

//Player timers
new LoginTimer[MAX_PLAYERS char] = 0;
//Player timers

//Fuel & Speedo
new PlayerText:SpeedText[MAX_PLAYERS];
new PlayerText:FuelText[MAX_PLAYERS];
new Gas[MAX_VEHICLES char];

//Fuel & Speedo

//Vehicle's stuff
new bool:engineOn[MAX_VEHICLES char];
new vLocked[MAX_VEHICLES char];
new bool:adminVeh[MAX_VEHICLES char];
new Siren[MAX_VEHICLES];
new Siren2[MAX_VEHICLES];
//Vehicle's stuff

//Server-Sided Weapons
new Weapons[MAX_PLAYERS][47];
//Server-Sided Weapons

//colors
new gVehicleColors[] =
{
    0x000000AA, 0xF5F5F5AA, 0x2A77A1AA, 0x840410AA, 0x263739AA, 0x86446EAA, 0xD78E10AA, 0x4C75B7AA, 0xBDBEC6AA, 0x5E7072AA,
    0x46597AAA, 0x656A79AA, 0x5D7E8DAA, 0x58595AAA, 0xD6DAD6AA, 0x9CA1A3AA, 0x335F3FAA, 0x730E1AAA, 0x7B0A2AAA, 0x9F9D94AA,
    0x3B4E78AA, 0x732E3EAA, 0x691E3BAA, 0x96918CAA, 0x515459AA, 0x3F3E45AA, 0xA5A9A7AA, 0x635C5AAA, 0x3D4A68AA, 0x979592AA,
    0x421F21AA, 0x5F272BAA, 0x8494ABAA, 0x767B7CAA, 0x646464AA, 0x5A5752AA, 0x252527AA, 0x2D3A35AA, 0x93A396AA, 0x6D7A88AA,
    0x221918AA, 0x6F675FAA, 0x7C1C2AAA, 0x5F0A15AA, 0x193826AA, 0x5D1B20AA, 0x9D9872AA, 0x7A7560AA, 0x989586AA, 0xADB0B0AA,
    0x848988AA, 0x304F45AA, 0x4D6268AA, 0x162248AA, 0x272F4BAA, 0x7D6256AA, 0x9EA4ABAA, 0x9C8D71AA, 0x6D1822AA, 0x4E6881AA,
    0x9C9C98AA, 0x917347AA, 0x661C26AA, 0x949D9FAA, 0xA4A7A5AA, 0x8E8C46AA, 0x341A1EAA, 0x6A7A8CAA, 0xAAAD8EAA, 0xAB988FAA,
    0x851F2EAA, 0x6F8297AA, 0x585853AA, 0x9AA790AA, 0x601A23AA, 0x20202CAA, 0xA4A096AA, 0xAA9D84AA, 0x78222BAA, 0x0E316DAA,
    0x722A3FAA, 0x7B715EAA, 0x741D28AA, 0x1E2E32AA, 0x4D322FAA, 0x7C1B44AA, 0x2E5B20AA, 0x395A83AA, 0x6D2837AA, 0xA7A28FAA,
    0xAFB1B1AA, 0x364155AA, 0x6D6C6EAA, 0x0F6A89AA, 0x204B6BAA, 0x2B3E57AA, 0x9B9F9DAA, 0x6C8495AA, 0x4D8495AA, 0xAE9B7FAA,
    0x406C8FAA, 0x1F253BAA, 0xAB9276AA, 0x134573AA, 0x96816CAA, 0x64686AAA, 0x105082AA, 0xA19983AA, 0x385694AA, 0x525661AA,
    0x7F6956AA, 0x8C929AAA, 0x596E87AA, 0x473532AA, 0x44624FAA, 0x730A27AA, 0x223457AA, 0x640D1BAA, 0xA3ADC6AA, 0x695853AA,
    0x9B8B80AA, 0x620B1CAA, 0x5B5D5EAA, 0x624428AA, 0x731827AA, 0x1B376DAA, 0xEC6AAEAA, 0x000000AA, 0x177517AA, 0x210606AA,
    0x125478AA, 0x452A0DAA, 0x571E1EAA, 0x010701AA, 0x25225AAA, 0x2C89AAAA, 0x8A4DBDAA, 0x35963AAA, 0xB7B7B7AA, 0x464C8DAA,
    0x84888CAA, 0x817867AA, 0x817A26AA, 0x6A506FAA, 0x583E6FAA, 0x8CB972AA, 0x824F78AA, 0x6D276AAA, 0x1E1D13AA, 0x1E1306AA,
    0x1F2518AA, 0x2C4531AA, 0x1E4C99AA, 0x2E5F43AA, 0x1E9948AA, 0x1E9999AA, 0x999976AA, 0x7C8499AA, 0x992E1EAA, 0x2C1E08AA,
    0x142407AA, 0x993E4DAA, 0x1E4C99AA, 0x198181AA, 0x1A292AAA, 0x16616FAA, 0x1B6687AA, 0x6C3F99AA, 0x481A0EAA, 0x7A7399AA,
    0x746D99AA, 0x53387EAA, 0x222407AA, 0x3E190CAA, 0x46210EAA, 0x991E1EAA, 0x8D4C8DAA, 0x805B80AA, 0x7B3E7EAA, 0x3C1737AA,
    0x733517AA, 0x781818AA, 0x83341AAA, 0x8E2F1CAA, 0x7E3E53AA, 0x7C6D7CAA, 0x020C02AA, 0x072407AA, 0x163012AA, 0x16301BAA,
    0x642B4FAA, 0x368452AA, 0x999590AA, 0x818D96AA, 0x99991EAA, 0x7F994CAA, 0x839292AA, 0x788222AA, 0x2B3C99AA, 0x3A3A0BAA,
    0x8A794EAA, 0x0E1F49AA, 0x15371CAA, 0x15273AAA, 0x375775AA, 0x060820AA, 0x071326AA, 0x20394BAA, 0x2C5089AA, 0x15426CAA,
    0x103250AA, 0x241663AA, 0x692015AA, 0x8C8D94AA, 0x516013AA, 0x090F02AA, 0x8C573AAA, 0x52888EAA, 0x995C52AA, 0x99581EAA,
    0x993A63AA, 0x998F4EAA, 0x99311EAA, 0x0D1842AA, 0x521E1EAA, 0x42420DAA, 0x4C991EAA, 0x082A1DAA, 0x96821DAA, 0x197F19AA,
    0x3B141FAA, 0x745217AA, 0x893F8DAA, 0x7E1A6CAA, 0x0B370BAA, 0x27450DAA, 0x071F24AA, 0x784573AA, 0x8A653AAA, 0x732617AA,
    0x319490AA, 0x56941DAA, 0x59163DAA, 0x1B8A2FAA, 0x38160BAA, 0x041804AA, 0x355D8EAA, 0x2E3F5BAA, 0x561A28AA, 0x4E0E27AA,
    0x706C67AA, 0x3B3E42AA, 0x2E2D33AA, 0x7B7E7DAA, 0x4A4442AA, 0x28344EAA
};
//colors

//=================Includes=================//
#include "/EVO/Enums.inc" // PlayerInfo's and 'new' stuff
#include "/EVO/Forwards.inc" // Forward's for publics
#include "/EVO/FurnitureDialog.inc" // Handling for the furniture system
#include "/EVO/FastFoodDialog.inc" // Fast Food Dialog - Iuly
#include "/EVO/cctv.inc" // Fast Food Dialog - Iuly
#include "/EVO/Hair.inc" // Coordonate pentru Barber Shop (HAIR) - Iuly
#include "/anims.inc" // Anims
//=================Includes=================//

enum SAZONE_MAIN {
        SAZONE_NAME[28],
        Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {
    //  NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
    {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
    {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
    {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
    {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
    {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
    {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
    {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
    {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
    {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
    {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
    {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
    {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
    {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
    {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
    {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
    {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
    {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
    {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
    {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
    {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
    {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
    {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
    {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
    {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
    {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
    {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
    {"Pershing Apartments",         {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
    {"Pershing Apartments",         {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
    {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
    {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
    {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
    {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
    {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
    {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
    {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
    {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
    {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
    {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
    {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
    {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
    {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
    {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
    {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
    {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
    {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
    {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
    {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
    {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
    {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
    {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
    {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
    {"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
    {"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
    {"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
    {"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
    {"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
    {"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
    {"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
    {"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
    {"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
    {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
    {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
    {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
    {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
    {"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
    {"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
    {"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
    {"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
    {"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
    {"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
    {"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
    {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
    {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
    {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
    {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
    {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
    {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
    {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
    {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
    {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
    {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
    {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
    {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
    {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
    {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
    {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
    {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
    {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
    {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
    {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
    {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
    {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
    {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
    {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
    {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
    {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
    {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
    {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
    {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
    {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
    {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
    {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
    {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
    {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
    {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
    {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
    {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
    {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
    {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
    {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
    {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
    {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
    {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
    {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
    {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
    {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
    {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
    {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
    {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
    {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
    {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
    {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
    {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
    {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
    {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
    {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
    {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
    {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
    {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
    {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
    {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
    {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
    {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
    {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
    {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
    {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
    {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
    {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
    {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
    {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
    {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
    {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
    {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
    {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
    {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
    {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
    {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
    {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
    {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
    {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
    {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
    {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
    {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
    {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
    {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
    {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
    {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
    {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
    {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
    {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
    {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
    {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
    {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
    {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
    {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
    {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
    {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
    {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
    {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
    {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
    {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
    {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
    {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
    {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
    {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
    {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
    {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
    {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
    {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
    {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
    {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
    {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
    {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
    {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
    {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
    {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
    {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
    {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
    {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
    {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
    {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
    {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
    {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
    {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
    {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
    {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
    {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
    {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
    {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
    {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
    {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
    {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
    {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
    {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
    {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
    {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
    {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
    {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
    {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
    {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
    {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
    {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
    {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
    {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
    {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
    {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
    {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
    {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
    {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
    {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
    {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
    {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
    {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
    {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
    {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
    {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
    {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
    {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
    {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
    {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
    {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
    {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
    {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
    {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
    {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
    {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
    {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
    {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
    {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
    {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
    {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
    {"Playa Del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
    {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
    {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
    {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
    {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
    {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
    {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
    {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
    {"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
    {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
    {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
    {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
    {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
    {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
    {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
    {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
    {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
    {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
    {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
    {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
    {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
    {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
    {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
    {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
    {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
    {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
    {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
    {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
    {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
    {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
    {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
    {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
    {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
    {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
    {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
    {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
    {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
    {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
    {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
    {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
    {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
    {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
    {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
    {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
    {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
    {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
    {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
    {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
    {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
    {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
    {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
    {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
    {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
    {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
    {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
    {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
    {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
    {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
    {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
    {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
    {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
    {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
    {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
    {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
    {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
    {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
    {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
    {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
    {"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
    {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
    {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
    {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
    {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
    {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
    {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
    {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
    {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
    {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
    {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
    {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
    {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
    {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
    {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
    {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
    {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
    {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
    {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
    {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
    {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
    {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
    {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
    {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
    {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
    {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
    {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
    {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
    {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
    {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
    {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
    {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
    {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
    {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
    {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
    {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
    {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
    // Main Zones
    {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
    {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
    {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
    {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
    {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
    {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
    {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
    {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
    {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock ConnectMySQL()
{
	mysql_option(LOG_TRUNCATE_DATA, false);
    mysql_log(LOG_ERROR | LOG_DEBUG | LOG_WARNING, LOG_TYPE_HTML);
	//mysql_log(LOG_ERROR, LOG_TYPE_TEXT);
    dbHandle = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
    return 1;
}


public OnGameModeInit()
{
    ConnectMySQL();
    AddLabelsFromFile();
    AddDoorsFromFile();
    AddFactionDoors();
    AddDynamicGates();
    AddATMFromFile();
    AddAdminTeleports();
    AddDynamicObjects();
    AddDynamicInfos();
    AddDynamicGasStations();
    AddDynamicBanks();
    AddDynamicVehicles();
    AddDynamicHouses();
    AddDynamicBiz();
    AddDynamicStands();
    AddDynamicMeters();
    LoadApbs();
    AddDynamicFactions();
    AddDynamicJobs();
    AddMoveDoorsFromFile();
    AddDynamicCCTV();
    LoadDealerShips();
    LoadWeaponDamages();
    AddRadios();
    TextDraws_Init();
    SetCurrentTime();
    CreateAllMenus();
    AddTolls();
    AddPlants();
    LoadFarmStuff();
	AddBinsFromFile();
	LoadSpray();
    LoadGPSMySQL();
    DisableInteriorEnterExits();
    ShowPlayerMarkers(0);
    ManualVehicleEngineAndLights();
    AllowInteriorWeapons(1);
    EnableStuntBonusForAll(0);
    SetNameTagDrawDistance(22.5);
    SendRconCommand("weburl www.evolution-rp.ro");
    SetGameModeText(GameModeText);
    format(msg, sizeof(msg), "hostname %s", ServerName);
    SendRconCommand(msg);
    format(msg, sizeof(msg), "language %s", LANGUAGE);
    SendRconCommand(msg);
    AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
    //Loading model stuff to the skin menu
    skinlist = LoadModelSelectionMenu("skins.txt");
    pskinlist = LoadModelSelectionMenu("playerskins.txt");
    vehiclelist = LoadModelSelectionMenu("vehicles.txt");
    weaponlist = LoadModelSelectionMenu("guns.txt");
    buyable = LoadModelSelectionMenu("buyable.txt");
    //Loading model stuff to the skin menu
    AddObjects();
    AddHousesInteriors();
//  offersent = SetTimerEx("ResetOfferSent", 240000, 1);
    checkgastimer = SetTimer("CheckGas", VEHICLES_GAS_TIMER, 1);
    onemintimer = SetTimer("OneMinuteTimer", 60000, 1);
    globalsaving = SetTimer("GlobalSaving", 600000, 1);
    checkstatus = SetTimer("CheckStatus", 1000, 1);
	cheatTimer = SetTimer("CheatTimer", 5000, 1);
    resettimers = SetTimer("resettimers", 1800000, 1);
    truckertimer = SetTimer("TruckerTimer", 1000, 1);
	checkbintimer = SetTimer("CheckBins", 30000, 1);
	trashbintimer = SetTimer("BinTimer", 240000, 1);
    antiafk = SetTimer("AntiAFK", 60000, 1);
    speedtimer = SetTimer("SpeedTimer", 300, 1);
    for(new c = 0; c < MAX_VEHICLES; c++)
    {
        Gas{c} = 100;
        handbrake[c][hOn] = 0;
        handbrake[c][hPosX] = 0;
        handbrake[c][hPosY] = 0;
        handbrake[c][hPosZ] = 0;
        handbrake[c][hAngle] = 0;
    }
    //Reseting player vehicle key & slot
    format(query, sizeof(query), "UPDATE `users` SET `carkey` = '0', `vehslot` = '0'");
    mysql_function_query(dbHandle, query, false, "", "");
    //Reseting player vehicle key & slot
	
    //TEXTRAW1649.8198,-2239.6956,13.5105
    infopickup = CreatePickup(2894, 1, 1649.8198,-2239.6956,13.5105, -1);
    return 1;
}

//======================== Farmer Job functions ===============================//
function LoadFarmStuff()
{
	FJArea = CreateDynamicRectangle(FJAreaPos);
	CreateDynamic3DTextLabel("Cara sacii aici si apasa 'H' ca sa-i vinzi!",-1,FJPosTransport,5.0);
	//CreateDynamic3DTextLabel("Press 'Y' to rent a farm vehicle.",-1,FJPosHireVehicle,5.0);
	CreateDynamic3DTextLabel("Apasa 'Y' ca sa iei un sac cu seminte.",-1,FJPosGetPaddySack,5.0);
	//CreateDynamicPickup(1318,1,FJPosHireVehicle);
	CreateDynamicPickup(1318,1,FJPosGetPaddySack);
	CreateDynamicPickup(1318,1,FJPosTransport);
	return 1;
}

function AddPaddyObjectToVehicle(playerid)
{
	switch(FarmInfo[playerid][pPaddyHarvestInVehicle])	
	{
	    case 1:
	    {
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][0] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][0],FarmInfo[playerid][pVehicleHire], -0.375000,-1.275000,0.150000,0.000000,0.000000,0.000000);
		}
		case 2:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][1] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][1],FarmInfo[playerid][pVehicleHire], -0.375000,-1.725000,0.150000,0.000000,0.000000,0.000000);
		}
		case 3:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][2] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][2],FarmInfo[playerid][pVehicleHire], -0.375000,-2.250000,0.150000,0.000000,0.000000,0.000000);
		}
		case 4:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][3] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][3],FarmInfo[playerid][pVehicleHire], 0.524999,-1.875000,0.150000,0.000000,0.000000,89.099983);
		}
		case 5:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][4] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][4],FarmInfo[playerid][pVehicleHire], 0.149999,-1.875000,0.375000,0.000000,0.000000,89.099990);
		}
		case 6:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][5] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][4],FarmInfo[playerid][pVehicleHire], 0.149999,-1.875000,0.375000,0.000000,0.000000,89.099990);
		}
		case 7:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][6] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][4],FarmInfo[playerid][pVehicleHire], 0.149999,-1.875000,0.375000,0.000000,0.000000,89.099990);
		}
		case 8:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][7] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][4],FarmInfo[playerid][pVehicleHire], 0.149999,-1.875000,0.375000,0.000000,0.000000,89.099990);
		}
		case 9:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][8] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][4],FarmInfo[playerid][pVehicleHire], 0.149999,-1.875000,0.375000,0.000000,0.000000,89.099990);
		}
		case 10:
		{
			FarmInfo[playerid][pPaddyHarvestInVehicleObject][9] = CreateObject(2060,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FarmInfo[playerid][pPaddyHarvestInVehicleObject][4],FarmInfo[playerid][pVehicleHire], 0.149999,-1.875000,0.375000,0.000000,0.000000,89.099990);
		}
	}
	return 1;
}

function UpdatePaddy(playerid)
{
	for(new i =0;i<MAX_PADDYS;i++)
	{
	    if(FarmInfo[playerid][pPaddyUsed][i] == 1)
	    {
	        if(FarmInfo[playerid][pPaddyProgress][i] < 220)
			{
			    FarmInfo[playerid][pPaddyProgress][i]++;
				if(FarmInfo[playerid][pPaddyProgress][i] == 50)
				{
					new Float:x,Float:y,Float:z;
					GetDynamicObjectPos(FarmInfo[playerid][pPaddyObject][i],x,y,z);
					MoveDynamicObject(FarmInfo[playerid][pPaddyObject][i],x,y,z+0.6,2);
					DestroyDynamic3DTextLabel(FarmInfo[playerid][pPaddyText][i]);
					FarmInfo[playerid][pPaddyText][i]=CreateDynamic3DTextLabel("",-1,x,y,z+2,5.0);
				}
				new string[128];
			    format(string,sizeof(string),"Proprietar: %s\nSlot: %d\nProgres: {00f6ff}%d",GetName(playerid),i,FarmInfo[playerid][pPaddyProgress][i]);
			    UpdateDynamic3DTextLabelText(FarmInfo[playerid][pPaddyText][i],-1,string);
			    if(FarmInfo[playerid][pPaddyProgress][i] > 100 && FarmInfo[playerid][pPaddyProgress][i] < 200)
				{
					format(string,sizeof(string),"GATA DE RECOLTAT\nProprietar: %s\nSlot: %d\nProgres: {00f6ff}%d",GetName(playerid),i,FarmInfo[playerid][pPaddyProgress][i]);
					UpdateDynamic3DTextLabelText(FarmInfo[playerid][pPaddyText][i],-1,string);
				}
				if(FarmInfo[playerid][pPaddyProgress][i] > 200 && FarmInfo[playerid][pPaddyProgress][i] < 220)
				{
					format(string,sizeof(string),"PLANTA S-A OFILIT! \nProprietar: %s\nSlot: %d\nProgres: {00f6ff}%d",GetName(playerid),i,FarmInfo[playerid][pPaddyProgress][i]);
					UpdateDynamic3DTextLabelText(FarmInfo[playerid][pPaddyText][i],-1,string);
					FarmInfo[playerid][pPaddyWithered][i] = 1;
				}
				if(FarmInfo[playerid][pPaddyProgress][i] == 220)
				{
					DestroyPaddy(playerid, i);
				}
			}
			
	    }
	}
	return 1;
}

function CarrySack(playerid)
{
	ApplyAnimation(playerid, "CARRY", "CRRY_PRTIAL", 4.0, 0, 0, 0, 1, 200); // dangrinh
    return 1;
}
function AttachTrailer(vehicleid,trailerid)
{
    AttachTrailerToVehicle(trailerid,vehicleid);
    return 1;
}
function CheckPaddyFreeSlot(playerid,type)
{
    for(new i =0;i<MAX_PADDYS;i++)
    {
        switch(type)
        {
            case 1:
            {
                if(FarmInfo[playerid][pPaddyUsed][i] == 0)
                {
                    return i;
                }
            }
            case 2:
            {
                if(FarmInfo[playerid][pPaddyHarvestUsed][i] == 0)
                {
                    return i;
                }
            }
        }
    }
    return -1;
}
function CreatePaddyHarvest(playerid,id,Float:x,Float:y,Float:z)
{
	if(FarmInfo[playerid][pPaddyHarvestUsed][id] == 1) return 1;
	FarmInfo[playerid][pPaddyHarvestUsed][id] = 1;
    FarmInfo[playerid][pPaddyHarvestPosX][id] = x;
    FarmInfo[playerid][pPaddyHarvestPosY][id] = y;
    FarmInfo[playerid][pPaddyHarvestPosZ][id] = z;
    FarmInfo[playerid][pPaddyHarvestObject][id] = CreateDynamicObject(2060,x,y,z,0.0,0.0,0.0);
    new string[128];
    format(string,sizeof(string),"{fff600}Sac de orez - Proprietar: %s\nSlot %d\n{ffffff}Apasa 'N' ca sa-l ridici.",GetName(playerid),id);
    FarmInfo[playerid][pPaddyHarvestText][id] = CreateDynamic3DTextLabel(string,-1,x,y,z,5.0);
	return 1;
}
function DestroyPaddyHarvest(playerid,id)
{
    if(FarmInfo[playerid][pPaddyHarvestUsed][id] == 0) return 1;
    FarmInfo[playerid][pPaddyHarvestUsed][id] = 0;
    FarmInfo[playerid][pPaddyHarvestPosX][id] = 0.0;
    FarmInfo[playerid][pPaddyHarvestPosY][id] = 0.0;
    FarmInfo[playerid][pPaddyHarvestPosZ][id] = 0.0;
    if(IsValidDynamic3DTextLabel(FarmInfo[playerid][pPaddyHarvestText][id])) DestroyDynamic3DTextLabel(FarmInfo[playerid][pPaddyHarvestText][id]);
    if(IsValidDynamicObject(FarmInfo[playerid][pPaddyHarvestObject][id])) DestroyDynamicObject(FarmInfo[playerid][pPaddyHarvestObject][id]);
    return 1;
}
function CreatePaddy(playerid,id,progress,Float:x,Float:y,Float:z)
{
    if(FarmInfo[playerid][pPaddyUsed][id] == 1) return 1;
    FarmInfo[playerid][pPaddyUsed][id] = 1;
    FarmInfo[playerid][pPaddyPosX][id] = x;
    FarmInfo[playerid][pPaddyPosY][id] = y;
    FarmInfo[playerid][pPaddyPosZ][id] = z;
    FarmInfo[playerid][pPaddyProgress][id] = progress;
    FarmInfo[playerid][pPaddyObject][id] = CreateDynamicObject(19473,x,y,z,0.0,0.0,0.0);
    new string[128];
    format(string,sizeof(string),"{fff600}Proprietar %s\nSlot %d\nProgres :{00f6ff}%d",GetName(playerid),id,FarmInfo[playerid][pPaddyProgress][id]);
    FarmInfo[playerid][pPaddyText][id] = CreateDynamic3DTextLabel(string,-1,x,y,z,5.0);
    return 1;
}
function DestroyPaddy(playerid,id)
{
    if(FarmInfo[playerid][pPaddyUsed][id] == 0) return 1;
    FarmInfo[playerid][pPaddyUsed][id] = 0;
    FarmInfo[playerid][pPaddyPosX][id] = 0.0;
    FarmInfo[playerid][pPaddyPosY][id] = 0.0;
    FarmInfo[playerid][pPaddyPosZ][id] = 0.0;
    FarmInfo[playerid][pPaddyProgress][id] = 0;
    if(IsValidDynamic3DTextLabel(FarmInfo[playerid][pPaddyText][id])) DestroyDynamic3DTextLabel(FarmInfo[playerid][pPaddyText][id]);
    if(IsValidDynamicObject(FarmInfo[playerid][pPaddyObject][id])) DestroyDynamicObject(FarmInfo[playerid][pPaddyObject][id]);
    return 1;
}

//======================== Farmer Job ===============================//
public AddTolls() // Needs to be called in the OnGameModeInit function!
{
    /* Richman */
    CreateDynamicObject( 8168, 612.73895263672, -1191.4602050781, 20.294105529785, 0.000000, 5, 318.31237792969, -1 );
    CreateDynamicObject( 8168, 620.47265625, -1188.49609375, 20.044105529785, 0.000000, 352.99621582031, 138.94409179688, -1 );
    CreateDynamicObject( 966, 613.97229003906, -1197.7174072266, 17.475030899048, 0.000000, 0.000000, 23.81982421875, -1 );
    CreateDynamicObject( 997, 614.33209228516, -1194.3870849609, 17.709369659424, 0.000000, 0.000000, 266.70568847656, -1 );
    CreateDynamicObject( 973, 602.98425292969, -1202.1643066406, 18.000516891479, 0.000000, 0.000000, 19.849853515625, -1 );
    L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
    CreateDynamicObject( 966, 619.42913818359, -1181.6597900391, 18.725030899048, 0.000000, 0.000000, 214.37744140625, -1 );
    CreateDynamicObject( 973, 629.68823242188, -1176.0551757813, 19.500516891479, 0.000000, 0.000000, 21.831787109375, -1 );
    CreateDynamicObject( 997, 619.26574707031, -1181.6518554688, 18.709369659424, 0.000000, 0.000000, 268.68908691406, -1 );
    L_a_TollObject[1] = CreateDynamicObject( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );
    /* End of Richman */

    /* Flint */
    CreateDynamicObject( 8168, 61.256042480469, -1533.3946533203, 6.1042537689209, 0.000000, 0.000000, 9.9252624511719, -1 );
    CreateDynamicObject( 8168, 40.966598510742, -1529.5725097656, 6.1042537689209, 0.000000, 0.000000, 188.5712890625, -1 );
    L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
    CreateDynamicObject( 966, 35.889751434326, -1526.0096435547, 4.2410612106323, 0.000000, 0.000000, 270.67565917969, -1 );
    CreateDynamicObject( 966, 67.093727111816, -1536.8275146484, 3.9910612106323, 0.000000, 0.000000, 87.337799072266, -1 );
    L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );
    CreateDynamicObject( 973, 52.9794921875, -1531.9252929688, 5.090488910675, 0.000000, 0.000000, 352.06005859375, -1 );
    CreateDynamicObject( 973, 49.042072296143, -1531.5065917969, 5.1758694648743, 0.000000, 0.000000, 352.05688476563, -1 );
    CreateDynamicObject( 997, 68.289916992188, -1546.6020507813, 4.0626411437988, 0.000000, 0.000000, 119.09942626953, -1 );
    CreateDynamicObject( 997, 34.5198097229, -1516.1402587891, 4.0626411437988, 0.000000, 0.000000, 292.50622558594, -1 );
    CreateDynamicObject( 997, 35.903915405273, -1525.8717041016, 4.0626411437988, 0.000000, 0.000000, 342.13012695313, -1 );
    CreateDynamicObject( 997, 63.914081573486, -1535.7126464844, 4.0626411437988, 0.000000, 0.000000, 342.130859375, -1 );
    /* End of Flint */

    /* LV */
    CreateDynamicObject( 8168, 1789.83203125, 703.189453125, 15.846367835999, 0.000000, 3, 99.24951171875, -1 );
    CreateDynamicObject( 8168, 1784.8334960938, 703.94799804688, 16.070636749268, 0.000000, 357, 278.61096191406, -1 );
    CreateDynamicObject( 966, 1781.4122314453, 697.32531738281, 14.636913299561, 0.000000, 0.000000, 348.09008789063, -1 );
    CreateDynamicObject( 996, 1767.3087158203, 700.50506591797, 15.281567573547, 0.000000, 0.000000, 346.10510253906, -1 );
    CreateDynamicObject( 997, 1781.6832275391, 697.34796142578, 14.698781013489, 0.000000, 3, 77.41455078125, -1 );
    CreateDynamicObject( 997, 1792.7745361328, 706.38543701172, 13.948781013489, 0.000000, 2.999267578125, 81.379638671875, -1 );
    CreateDynamicObject( 966, 1793.4289550781, 709.87982177734, 13.636913299561, 0.000000, 0.000000, 169.43664550781, -1 );
    CreateDynamicObject( 996, 1800.8060302734, 708.38299560547, 14.281567573547, 0.000000, 0.000000, 346.10229492188, -1 );
    L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
    L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );
    /* End of LV */

    /* Blueberry right */
    CreateDynamicObject(966, 614.42188, 350.81711, 17.92480,   0.00000, 0.00000, 35.00000);
    CreateDynamicObject(966, 602.91162, 342.59781, 17.92480,   0.00000, 0.00000, 215.92000);
    L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520,   0.00000, -90.00000, 35.00000);
    L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520,   0.00000, -90.00000, 215.92000);
    /* Blueberry right */

    /* Blueberry left */
    CreateDynamicObject(966, -190.35580, 254.64290, 11.07090,   0.00000, 0.00000, 345.00000);
    CreateDynamicObject(966, -204.00880, 258.30411, 11.07090,   0.00000, 0.00000, -195.00000);
    L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360,   0.00000, -90.00000, -14.94000);
    L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360,   0.00000, -90.00000, -195.00000);
    /* Blueberry right */
}

public OnGameModeExit()
{
    KillTimer(checkgastimer);
    KillTimer(onemintimer);
    KillTimer(globalsaving);
    KillTimer(checkstatus);
	KillTimer(cheatTimer);
    KillTimer(truckertimer);
    KillTimer(resettimers);
    KillTimer(antiafk);
//  KillTimer(offersent);
	KillTimer(trashbintimer);
	KillTimer(checkbintimer);
#if defined debugOn 
	printf(query);
#endif
    mysql_close(dbHandle);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    TogglePlayerSpectating(playerid, 1);
    SetPlayerCameraLookAt(playerid,-94.457,1108.659,43.872);
    SetPlayerCameraLookAt(playerid,-135.929,1147.222,43.777);
    CheckAccount(playerid);
    return 1;
}

public OnPlayerConnect(playerid)
{

    //ANIMS
    gPlayerUsingLoopingAnim[playerid] = 0;
    gPlayerAnimLibsPreloaded[playerid] = 0; 
    PreloadAnims(playerid);
	/////////////////////////
	new connecting_ip[32+1];
	GetPlayerIp(playerid,connecting_ip,32);
	/////////////////////////
	new playerip[16];
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	////////////////////////
	if(IsPlayerNPC(playerid) && strcmp("127.0.0.1", playerip) != 0)
	{
		format(msg, sizeof(msg), "[ANTI-NPC]: %s a primit kick pentru ca este NPC.", GetName(playerid));
		KickWithMSG(playerid, msg); //kick all npcs not connecting from localhost
	}
	///////////////////////
    CheckBan(playerid);
    CheckUserBan(playerid);
    CheckSerial(playerid); // Checking if the player is ban evading
	new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);
	if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP) 
	{
		format(msg, sizeof(msg), "IP-ul cu care te-ai conectat este deja in folosinta pe server!");
		printf("MAXIPs: Connecting player(%d) exceeded %d IP connections from %s.", playerid, MAX_CONNECTIONS_FROM_IP, connecting_ip);
	    SCM(playerid, COLOR_LIGHTRED, msg);
		SetTimerEx("KickPlayer",100,0,"d",playerid);
	    return 1;
	}
    if(!IsValidName(playerid))
    {
        KickEx2(playerid, "Te rog sa iti schimbi numele intr-unul roleplay, exemplu: Vincent_Leighton");
        return 1;
    }
    SetPVarInt(playerid, "JustHelped", 0);
    SetPlayerColor(playerid, COLOR_CONNECT);
//  new SAHFP = CreateObject(10184, 288.0661, 1410.3990, 19.4953, 0.0000, 0.0000, 179.9874);
//  SetObjectMaterialText(SAHFP, "SAN ANDREAS HIGH FACILITY PRISON", 0, 120, "Times New Roman", 31, 1, -8092540, 0, 1);
    RemoveObjectsFromServer(playerid);
    ResetPlayerVariables(playerid);
    CreateAllTextDraws(playerid);
    PlayerTextDrawShow(playerid, EvoRP[playerid]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
    SetIntVar(playerid, "VehicleBuyConfirm", 0);
    CreateFFDialog(playerid);
    CreateCCTV_TD(playerid);
    togglenews[playerid] = 0;
    SecurityMode[playerid] = false;

    
    AttachWep[playerid][wepID] = -1;
    AttachWep[playerid][wepAmmo] = -1;
    AttachWep[playerid][wepType] = -1;
    AttachWep[playerid][wepASlot] = -1;
    togglehud[playerid] = 1;
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    PlayerTextDrawHide(playerid, EvoRP[playerid]);

    switch(reason)
    {
        case 0: format(msg,sizeof msg,"** %s (Crashed)",GetNameEx(playerid));
        case 1: format(msg,sizeof msg,"** %s (Deconectare)",GetNameEx(playerid));
        case 2: format(msg,sizeof msg,"** %s (Kick/Ban)",GetNameEx(playerid));
    }
    // Farmer job
	KillTimer(FarmInfo[playerid][pUpdateTime]);
	if(IsValidVehicle(FarmInfo[playerid][pVehicleHire]))
	{
		SetVehicleToRespawn(FarmInfo[playerid][pVehicleHire]);
		FarmInfo[playerid][pHasHireVehicle] = 0;
	}
    new vehiclez = FarmInfo[playerid][pTrailerVehicleHire];
//	if(IsValidVehicle(FarmInfo[playerid][pTrailerVehicleHire])) DestroyVehicle(FarmInfo[playerid][pTrailerVehicleHire]);
    if(IsValidVehicle(vehiclez))
    {
        FarmInfo[playerid][pPaddyInTrailer] = 0;
        SetVehiclePos(vehiclez, CityVehicles[vehiclez][vPosX], CityVehicles[vehiclez][vPosY], CityVehicles[vehiclez][vPosZ]);
        SetVehicleZAngle(vehiclez, CityVehicles[vehiclez][vPosA]);
    }
	if(IsValidDynamic3DTextLabel(FarmInfo[playerid][pTrailerText])) DestroyDynamic3DTextLabel(FarmInfo[playerid][pTrailerText]);
	for(new i=0;i<MAX_PADDYS;i++)
	{
	    if(FarmInfo[playerid][pPaddyUsed][i] == 1)
	    {
			DestroyPaddy(playerid,i);
	    }
        if(FarmInfo[playerid][pPaddyHarvestUsed][i] == 1)
        {
			DestroyPaddyHarvest(playerid,i);
        }
	}
    for(new i=0;i<10;i++)
    {
    	if(IsValidObject(FarmInfo[playerid][pPaddyHarvestInVehicleObject][i]))
     	{
     		DestroyObject(FarmInfo[playerid][pPaddyHarvestInVehicleObject][i]);
			FarmInfo[playerid][pPaddyHarvestInVehicle] = 0;
      	}
    }
	// Farmer job
	ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
    KillTimer(LoginTimer{playerid});
    dmv_bike[playerid] = 0;
    dmv_bikestage[playerid] = -1;
    dmv_car[playerid] = 0;
    dmv_carstage[playerid] = -1;
    dmv_bigcar[playerid] = 0;
    dmv_bigcarstage[playerid] = -1;
    SavePlayerPos(playerid);
    debugmode[playerid] = 0;
    adeadtimer[playerid] = 0;
    RemoveFFObject(playerid);
    blockpm[playerid] = 0;
    togglehud[playerid] = 1;
    enteredplane[playerid] = 0;
    KillTimer(bhop_timer[playerid]);
    Player_gpci[playerid] = 0;
    OfferSent[playerid] = 0;
    SecurityMode[playerid] = false;
    if(GetIntVar(playerid, "RegisterPart") != 0)
    {
        DeletePlayerAccount(GetName(playerid));
    }
    else
    {
        if(PlayerLogged(playerid))
        {
            KillAllTimers(playerid);
            //========================================
            if(GetIntVar(playerid, "JustDied") == 1 || GetIntVar(playerid, "LoggedInDead") == 1)
                PlayerInfo[playerid][pDied] = 1;
            else
                PlayerInfo[playerid][pDied] = 0;
            //========================================
            if(GetIntVar(playerid, "RentedCar") == 1)
            {
                RespawnVehicle(GetIntVar(playerid, "RentVehKey"));
                FixVehicle(GetIntVar(playerid, "RentVehKey"));
            }
            //========================================
            new caller = GetIntVar(playerid, "CallWith");
            if(PlayerIsOn(caller))
            {
                if(GetIntVar(caller, "OnCall") == 1 && GetIntVar(playerid, "OnCall") == 1)
                {
                    CellMSG(caller, "Linia este moarta.");
                    SetIntVar(playerid, "CallCost", GetIntVar(playerid, "callTime")/10);
                    format(msg, sizeof(msg), "~w~Cost Apel~n~~r~$%d",GetIntVar(caller, "CallCost"));
                    GameTextForPlayer(caller, msg, 5000, 1);
                    GiveCash(caller, -GetIntVar(playerid, "CallCost"));
                    phoneAnim(caller, 0);
                    RemoveVar(caller, "CallCost");
                    RemoveVar(caller, "CallTime");
                    RemoveVar(caller, "CallWith");
                    RemoveVar(caller, "GettingCall");
                    RemoveVar(caller, "OnCall");
                    RemoveVar(caller, "IsCalling");
                    RemoveVar(playerid, "CallCost");
                    RemoveVar(playerid, "CallTime");
                    RemoveVar(playerid, "CallWith");
                    RemoveVar(playerid, "GettingCall");
                    RemoveVar(playerid, "OnCall");
                    RemoveVar(playerid, "IsCalling");
                }
            }
            //========================================
            if(reason == 0)
            {
                PlayerInfo[playerid][pCrashed] = 1;
            }
            //========================================
            if(PlayerInfo[playerid][pHouseKey] != -1) UpdateHouseInfo(PlayerInfo[playerid][pHouseKey]);
            if(PlayerInfo[playerid][pBizKey] != -1) UpdateBizInfo(PlayerInfo[playerid][pBizKey]);
            if(PlayerInfo[playerid][pCarKey] != 0)
            {
                SaveVehicle(PlayerInfo[playerid][pCarKey]);
            }
            else
            {
                PlayerInfo[playerid][pCarKey] = 0;
                PlayerInfo[playerid][pVehSlot] = 0;
            }
            RemovePlayerBoomBox(playerid);
            CheckPMBlockList(playerid);
            //========================================
            for(new i = 0; i < 11; i++)
            {
                if(RoadBlocks[playerid][i] != INVALID_OBJECT_ID)
                {
                    DestroyDynamicObject(RoadBlocks[playerid][i]);
                }
            }
            //========================================
            if(Trucking{playerid})
            {
                new vehicle = TruckVehicle[playerid];
                if(TruckComps[vehicle] > 0)
                {
                    PlacePlayerTicket(playerid, (TruckComps[vehicle] * 5) / 10);
                }
                TruckComps[vehicle] = 0;
                if(!VehicleInfo[vehicle][carOwned])
                {
                    RespawnVehicle(TruckVehicle[playerid]);
                }
            }
            format(query, sizeof(query), "UPDATE `users` SET `isOnline` = '0' WHERE `name` = '%s'", GetName(playerid));
            mysql_function_query(dbHandle, query, false, "", "");
			#if defined debugOn
				print("OnPlDisconnect - IsOnline");
				printf(query);
			#endif
            //========================================
            SavePlayerStats(playerid);
            //========================================
        }
    }
    return 1;
}

/* =================== Stocks =================== */
stock IsPlayerInWater(playerid)
{
        new Float:Z;
        GetPlayerPos(playerid,Z,Z,Z);
        if(Z < 0.7) switch(GetPlayerAnimationIndex(playerid)) { case 1543,1538,1539: return 1; }
        if(GetPlayerDistanceFromPoint(playerid,-965,2438,42) <= 700 && Z < 45)return 1;
        static Float:water_places[20][4] =
		{
			{30.0,                        2313.0,                -1417.0,        23.0},
			{15.0,                        1280.0,                -773.0,                1083.0},
			{25.0,                        2583.0,                2385.0,                15.0},
			{20.0,                        225.0,                -1187.0,        74.0},
			{50.0,                        1973.0,                -1198.0,        17.0},
			{180.0,                        1937.0,         1589.0,                9.0},
			{55.0,                        2142.0,                1285.0,         8.0},
			{45.0,                        2150.0,                1132.0,                8.0},
			{55.0,                        2089.0,                1915.0,                10.0},
			{32.0,                        2531.0,                1567.0,                9.0},
			{21.0,                        2582.0,                2385.0,                17.0},
			{33.0,                        1768.0,                2853.0,                10.0},
			{47.0,                        -2721.0,        -466.0,                3.0},
			{210.0,                        -671.0,                -1898.0,        6.0},
			{45.0,                        1240.0,                -2381.0,        9.0},
			{50.0,                        1969.0,                -1200.0,        18.0},
			{10.0,                        513.0,                -1105.0,        79.0},
			{20.0,                        193.0,                -1230.0,        77.0},
			{30.0,                        1094.0,                -672.0,                113.0},
			{20.0,                        1278.0,                -805.0,                87.0}
		};
        for(new t=0; t < sizeof water_places; t++)
			if(GetPlayerDistanceFromPoint(playerid,water_places[t][1],water_places[t][2],water_places[t][3]) <= water_places[t][0]) return 1;
        return 0;
}

stock IsInLowRider(playerid) 
{
    new pveh = GetPlayerVehicleID(playerid);
    switch(GetVehicleModel(pveh)) 
    {
        case 536, 575, 567: return 1;
    }
    return 0;
}

stock Procent(x, y)
{
    x = x+y;
    return 1;
}

stock GiveWeapon(playerid, wep, ammo)
{
    Weapons[playerid][wep] = 1;
    return GivePlayerWeapon(playerid, wep, ammo);
}

stock ProxDetector(Float:radi, playerid, string[],color)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    foreach(new i : Player)
    {
        if(IsPlayerInRangeOfPoint(i,radi,x,y,z) && GetWorld(i) == GetWorld(playerid))
        {
            SCM(i,color,string);
        }
    }
}

stock PlayerNearPlayer(Float:radi, playerid, targetid) {
    new Float: fp_playerPos[3];
    GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
    if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetWorld(targetid) == GetWorld(playerid))
    {
        return 1;
    }
    return 0;
}

stock CheckPlayerRemoteJacking( playerid )
{
    new iVehicle = GetPlayerVehicleID( playerid );

    if( !IsPlayerInAnyVehicle( playerid ) )
        GetPlayerPos( playerid, g_carjackData[ playerid ] [ E_LAST_X ], g_carjackData[ playerid ] [ E_LAST_Y ], g_carjackData[ playerid ] [ E_LAST_Z ] );

    if( ( iVehicle != g_carjackData[ playerid ] [ E_LAST_VEH ] ) && ( iVehicle != 0 ) && ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) )
    {
        new
            Float: fDistance = GetVehicleDistanceFromPoint( iVehicle, g_carjackData[ playerid ] [ E_LAST_X ], g_carjackData[ playerid ] [ E_LAST_Y ], g_carjackData[ playerid ] [ E_LAST_Z ] ),
            Float: fOffset = 10.0
        ;

        if( ( GetVehicleModel( iVehicle ) == 577 ) || ( GetVehicleModel( iVehicle ) == 592 )) fOffset = 25.0; // Andromanda | AT-400

        if( fDistance > fOffset)
        {
            if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
            {
                format(msg,sizeof(msg), "ANTI-CHEAT: %s (ID: %d) este posibil sa foloseasca CLEO-MODE.", GetName(playerid), playerid);
                AMSG(COLOR_LIGHTRED, msg);
                FreezePlayer(playerid);
                RemoteJackKick(playerid);
            }
        }

        GetPlayerPos( playerid, g_carjackData[ playerid ] [ E_LAST_X ], g_carjackData[ playerid ] [ E_LAST_Y ], g_carjackData[ playerid ] [ E_LAST_Z ] );
        g_carjackData[ playerid ] [ E_LAST_VEH ] = iVehicle;
    }
}

stock Float:PlayerPosX(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y ,z);
    return x;
}

stock Float:PlayerPosY(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y ,z);
    return y;
}

stock Float:PlayerPosZ(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y ,z);
    return z;
}

stock StopPlayerSpec(playerid)
{
    TogglePlayerSpectating(playerid, 0);
    SetCameraBehindPlayer(playerid);
    return 1;
}

stock PlayerSpec(playerid)
{
    TogglePlayerSpectating(playerid, 1);
    return 1;
}

stock StartPlayerSpec(playerid, otherid)
{
    TogglePlayerSpectating(playerid, 1);
    if(PlayerInCar(otherid))
    {
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherid));

    }
    else
    {
        PlayerSpectatePlayer(playerid, otherid);
    }
    SetInterior(playerid,GetInterior(otherid));
    SetWorld(playerid, GetWorld(otherid));
    return 1;
}

stock SavePlayerPos(playerid)
{
    new Float:a;
    GetPlayerFacingAngle(playerid, a);
    PlayerInfo[playerid][pPosX] = PlayerPosX(playerid);
    PlayerInfo[playerid][pPosY] = PlayerPosY(playerid);
    PlayerInfo[playerid][pPosZ] = PlayerPosZ(playerid);
    PlayerInfo[playerid][pPosA] = a;
    PlayerInfo[playerid][pWorld] = GetWorld(playerid);
    PlayerInfo[playerid][pInt] = GetInterior(playerid);
    return 1;
}

stock OnPlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || Tazed{playerid}) return 1;
        OnAnim{playerid} = true;
        ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
        return 1;
    }
    return 0;
}

stock ChatAnimation(playerid, length)
{
    if(GetPlayerAnimationIndex(playerid) > 0) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !OnAnim{playerid})
    {
        if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return 1;
        new chatstyle = PlayerInfo[playerid][pTalk];
        OnAnim{playerid} = true;
        if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1); }
        else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,1,0,0,1,1); }
        else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,1,0,0,1,1); }
        else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,1,0,0,1,1);}
        else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);}
        else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,1,0,0,1,1);}
        else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);}
        else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);}
        else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);}
        SetTimerEx("TalkTimer",floatround(length/9)*1600, 0, "i", playerid);

    }
    return 1;
}

stock StopPlayerAnims(playerid)
{
    if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || Tazed{playerid}) return 1;
    OnAnim{playerid} = false;
    ClearAnimations(playerid);
    return 1;
}

stock SetFightStyle(playerid, styleid)
{
    PlayerInfo[playerid][pFightStyle] = styleid;
    return SetPlayerFightingStyle(playerid, styleid);
}

stock CheckAccount(playerid)
{
    format(query, sizeof(query), "SELECT `id` AND `password` FROM `users` WHERE `name` = '%s'", GetName(playerid));
    mysql_function_query(dbHandle, query, true, "OnAccountCheck", "d", playerid);
	#if defined debugOn
		printf(query);
	#endif
    return 1;
}

stock CreatePlayerAccount(playerid, password[])
{
    new escapename[MAX_PLAYER_NAME], IP[100], OR[256];
    mysql_real_escape_string(GetName(playerid), escapename);
    format(OR, sizeof(OR), "None");
    GetPlayerIp(playerid, IP, sizeof(IP));
    gpci(playerid,playerserial,sizeof(playerserial));
    format(query, sizeof(query), "INSERT INTO `users` (name, password, registered, origin, admin, helper, playerIP, playerSerial) VALUES ('%s', '%s', 0, '%s', '0', '0', '%s', '%s')",escapename,password,OR,IP,playerserial);
    mysql_function_query(dbHandle, query, true, "OnPlayerCreateAccount", "d", playerid);
#if defined debugOn 
    printf(query);
#endif
    return 1;
}

stock CreatePlayerAccount2(playerid)
{
    new escapename[MAX_PLAYER_NAME], IP[100], OR[256];
    format(OR, sizeof(OR), "None");
    GetPlayerIp(playerid, IP, sizeof(IP));
    gpci(playerid,playerserial,sizeof(playerserial));
    format(query, sizeof(query), "INSERT INTO `users` (registered, origin, admin, helper, playerIP, playerSerial) VALUES (0, '%s', '0', '0', '%s', '%s')",OR,IP,playerserial);
    mysql_function_query(dbHandle, query, true, "OnPlayerCreateAccount", "d", playerid);
#if defined debugOn 
    printf(query);
#endif
    return 1;
}

stock InsertPlayerSecretWord(playerid, email[])
{
    format(query, sizeof(query), "UPDATE `users` SET `secret` = '%s' WHERE `name` = '%s'", email, GetName(playerid));
    mysql_function_query(dbHandle, query, true, "ContinueRegisterSex", "i", playerid);
	#if defined debugOn
		print("InsterPlayerSecret Word");
		printf(query);
	#endif
    return 1;
}

stock GetName(playerid)
{
    new pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, sizeof(pName));
    return pName;
}

stock GetNameEx(playerid)
{
    new pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, sizeof(pName));
    strreplace(pName, '_', ' ');
    return pName;
}

stock GetNameWithMask(playerid)
{
    if(maskOn{playerid})
    {
        format(msg, sizeof(msg), "[Masca_%d]", GetMaskID(playerid));
    }
    else
    {
        GetPlayerName(playerid, msg, sizeof(msg));
        strreplace(msg, '_', ' ');
    }
    return msg;
}

stock GetMaskID(playerid) return GetIntVar(playerid, "MaskID");

stock strreplace(string[], find, replace)
{
    for(new i=0; string[i]; i++)
    {
        if(string[i] == find)
        {
            string[i] = replace;
        }
    }
}

stock LeftServerMSG(playerid)
{
    return ServerMSG(playerid, "Ai parasit serverul.");
}

stock NotAuthMSG(playerid)
{
    return ServerMSG(playerid, "Nu esti autorizat sa folosesti aceasta comanda.");
}

stock SetInterior(playerid, int)
{
    PlayerInfo[playerid][pInt] = int;
    return SetPlayerInterior(playerid, int);
}

stock GetInterior(playerid)
{
    return PlayerInfo[playerid][pInt];
}

stock SetWorld(playerid, world)
{
    PlayerInfo[playerid][pWorld] = world;
    return SetPlayerVirtualWorld(playerid, world);
}

stock GetWorld(playerid)
{
    return PlayerInfo[playerid][pWorld];
}

stock SetSkin(playerid, skinid)
{
    SetSpawnInfo(playerid, 0, skinid, 2273.6077,-81.1484,26.5420, 1.0, -1, -1, -1, -1, -1, -1);
    PlayerInfo[playerid][pSkin] = skinid;
    SetPlayerSkin(playerid, skinid);
    return SetPlayerSkin(playerid, skinid);
}

stock GetSkin(playerid) return PlayerInfo[playerid][pSkin];
///////////////////////////Savings///////////////////////////////////
stock GiveSavings(playerid, cash)
{
    PlayerInfo[playerid][pSavings] = PlayerInfo[playerid][pSavings] + cash;
    return 1;
}
stock ResetSavings(playerid)
{
    PlayerInfo[playerid][pSavings] = 0;
    return 1;
}
stock SetSavings(playerid, cash)
{
    PlayerInfo[playerid][pSavings] = cash;
    return 1;
}
stock GetSavings(playerid) return PlayerInfo[playerid][pSavings];
///////////////////////////Savings///////////////////////////////////

///////////////////////////Bank///////////////////////////////////
stock GiveBankCash(playerid, cash)
{
    PlayerInfo[playerid][pBank] = PlayerInfo[playerid][pBank] + cash;
    return 1;
}
stock ResetBankCash(playerid)
{
    PlayerInfo[playerid][pBank] = 0;
    return 1;
}
stock SetBankCash(playerid, cash)
{
    PlayerInfo[playerid][pBank] = cash;
    return 1;
}
stock GetBankCash(playerid) return PlayerInfo[playerid][pBank];
///////////////////////////Bank///////////////////////////////////

///////////////////////////Cash///////////////////////////////////
public GiveCash(playerid, cash)
{
    new oldcash = GetPlayerMoney(playerid);
    if(oldcash < PlayerInfo[playerid][pCash] && oldcash > -1) PlayerInfo[playerid][pCash] = oldcash;
    PlayerInfo[playerid][pCash] += cash;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
    return 1;
}

public ResetCash(playerid)
{
    PlayerInfo[playerid][pCash] = 0;
    ResetPlayerMoney(playerid);
    return 1;
}

public SetCash(playerid, cash)
{
    PlayerInfo[playerid][pCash] = cash;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, cash);
    return 1;
}

public GetCash(playerid) return PlayerInfo[playerid][pCash];

stock GetFancyCash(playerid)
{
    new mstr[128], nstr[128], l=0, i;
    format(mstr, sizeof(mstr), "%d", GetCash(playerid));
    for(i=strlen(mstr)-1;i>=0;i--)
    {
        strcat(nstr, mstr[i]);
        l++;
        if(l==3) strcat(nstr, ",");
    }
    strcat(nstr, "%");
    strdel(mstr, 0, 128);
    for(i=0;i<=strlen(nstr);i++)
    {
        strcat(mstr, nstr[i]);
    }
    return mstr;
}
///////////////////////////Cash///////////////////////////////////

// Garbage Job
forward ResetBins();
public ResetBins()
{
	for(new i = 0; i < MAX_TRASHBINS; i++)
	{
		if(BinInfo[i][TrashPicked] == 1)
		{
			BinInfo[i][TrashPicked] = 0;
		}
	}
	return 1;
}

forward CheckBins();
public CheckBins()
{
	for(new i = 0; i < MAX_TRASHBINS; i++)
	{
		if(BinInfo[i][TrashPicked] == 1)
		{
			UpdateDynamic3DTextLabelText(Text3D:BinInfo[i][binLabel] , -1, "GOL");
		}
		else
		{
			UpdateDynamic3DTextLabelText(Text3D:BinInfo[i][binLabel] , -1, "FULL");
		}
	}
}
//Garbage Job
stock strvalEx( const string[] ) // fix for strval-bug with > 50 letters.
{
    // written by mabako in less than a minute :X
    if( strlen( string ) >= 50 ) return 0; // It will just return 0 if the string is too long
    return strval(string);
}

stock ShowStats(playerid, id)
{
    new cash = PlayerInfo[id][pCash];
    new bank = PlayerInfo[id][pBank];
    new paycheck = PlayerInfo[id][pPayCheckMoney];
    new level = PlayerInfo[id][pLevel];
    new exp = PlayerInfo[id][pExp];
    new nxtlevel = PlayerInfo[id][pLevel]+1;
    new expamount = nxtlevel*levelexp;
    new hours = PlayerInfo[id][pHours];
    new sex = PlayerInfo[id][pSex];
    new age = PlayerInfo[id][pAge];
    new donate = PlayerInfo[id][pDonateRank];
    new warns = PlayerInfo[id][pWarns];
    new admin = PlayerInfo[id][pAdmin];
    new tester = PlayerInfo[id][pHelper];
    new number = PlayerInfo[id][pNumber];
    new cell = PlayerInfo[id][pCellPhone];
    new savings = PlayerInfo[id][pSavings];
    new housekey = PlayerInfo[id][pHouseKey];
    new bizkey = PlayerInfo[id][pBizKey];
//  new Float:shealth = PlayerInfo[id][pSHealth];
    new vehkey = PlayerInfo[id][pCarKey];
    new sparekey = PlayerInfo[id][pSpareKey];
    new workkey = PlayerInfo[id][pWorkOn];
    new faction = PlayerInfo[id][pFaction];
    new rank = PlayerInfo[id][pRank];
    new job = PlayerInfo[id][pJob];
    new sidejob = PlayerInfo[id][pSideJob];

    new ammo1 = PlayerInfo[id][pAmmo1];
    new ammo2 = PlayerInfo[id][pAmmo2];

    new wstring1[56], gunname1[32];
    GetWeaponName(PlayerInfo[id][pPerm1],gunname1,sizeof(gunname1));
    if(PlayerInfo[id][pPerm1] == 0) { wstring1 = "Fara"; }
    else if(PlayerInfo[id][pPerm1] > 0) { wstring1 = gunname1; }
    else { wstring1 = "Fara"; }

    new wstring2[56], gunname2[32];
    GetWeaponName(PlayerInfo[id][pPerm2],gunname2,sizeof(gunname2));
    if(PlayerInfo[id][pPerm2] == 0) { wstring2 = "Fara"; }
    else if(PlayerInfo[id][pPerm2] > 0) { wstring2 = gunname2; }
    else { wstring2 = "Fara"; }

    new wstring3[56], gunname3[32];
    GetWeaponName(PlayerInfo[id][pMeleeWep],gunname3,sizeof(gunname3));
    if(PlayerInfo[id][pMeleeWep] == 0) { wstring3 = "Fara"; }
    else if(PlayerInfo[id][pMeleeWep] > 0) { wstring3 = gunname3; }
    else { wstring3 = "Fara"; }

    new nums[64];
    if(cell == 0) {
    nums = "Fara";
    } else {
    format(nums, sizeof(nums), "%d", number);
    }

    new houses[64];
    if(housekey == -1) {
    houses = "Fara";
    } else {
    format(houses, sizeof(houses), "%d", housekey);
    }

    new bizs[64];
    if(bizkey == -1) {
    bizs = "Fara";
    } else {
    format(bizs, sizeof(bizs), "%d", bizkey);
    }

    new rents[11];
    if(GetIntVar(id, "RentVehKey") == 0) {
    rents = "Fara";
    } else {
    format(rents, sizeof(rents), "%d", GetIntVar(id, "RentVehKey"));
    }

    new vehs[11];
    if(vehkey == 0) {
    vehs = "Fara";
    } else {
    format(vehs, sizeof(vehs), "%d", vehkey);
    }

    new works[64];
    if(workkey == -1) {
    works = "Fara";
    } else {
    format(works, sizeof(works), "%d-%s", workkey, BizInfo[workkey][bizName]);
    }

    new spares[11];
    if(sparekey == 0) {
    spares = "Fara";
    } else {
    format(spares, sizeof(spares), "%d", sparekey);
    }

    new radios[11];
    if(PlayerInfo[id][pRadio] == 0) {
    radios = "Nu";
    } else {
    radios = "Da";
    }

    new sexr[11];
    if(sex == 1) format(sexr,11,"Masculin");
    else if(sex == 2) format(sexr,11,"Feminin");

    new drank[11];
    if(donate == 0) format(drank,11,"Fara");
    else if(donate == 1) format(drank,11,"Bronze");
    else if(donate == 2) format(drank,11,"Silver");
    else if(donate == 3) format(drank,11,"Gold");
    else if(donate == 4) format(drank,11,"Diamond");

    new fname[128];
    if(faction == 0) format(fname,128,"Fara");
    else format(fname,128,"%s",GetShortFactionName(faction));

    new rname[128];
    if(rank == 0) format(rname,128,"Fara");
    else format(rname,128,"%s",GetRankName(id));

    new jname[128];
    if(job == 0) format(jname,128,"fara");
    else format(jname,128,"%s",GetJobName(job));

    new sjname[128];
    if(sidejob == 0) format(sjname,128,"Fara");
    else format(sjname,128,"%s",GetJobName(sidejob));

    format(msg, sizeof(msg),"|_______________________%s - data %s__________________________|",GetName(id),GetFullDate());
    SCM(playerid, COLOR_GREEN,msg);
    format(msg, sizeof(msg), "Factiune: %s | Rank: %s | Sex: %s | Origine: %s | Varsta: %d | Telefon: %s ", fname, rname, sexr,PlayerInfo[id][pOrigin],age,nums);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg), "Melee: %s | Primary: %s | Ammo: %d | Secondary: %s | Ammo: %d ", wstring3, wstring1,ammo1,wstring2,ammo2);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg), "Level: %d | Exp:%d/%d Ore: %d | Donator: %s ", level,exp,expamount,hours,drank);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg), "Bani: %d$ | Banca: %d$ | Savings: %d$ | PayCheck: %d$ ", cash, bank, savings, paycheck);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg), "Lucreaza la: %s | HouseKey: %s | BizKey: %s | Job: %s | Job Secundar: %s ", works, houses, bizs, jname, sjname);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg), "VehKey: %s | DuplicateKey: %s | RentKey: %s | Radio: %s ", vehs, spares, rents, radios);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg), "FightStyle: %s | Avertismente: %d | AdminLVL: %d | Moderator: %d ", GetFightStyleName(id), warns, admin, tester);
    SCM(playerid, COLOR_GREY,msg);
    format(msg, sizeof(msg),"______________________________________________________________________________________",GetName(id),GetFullDate());
    SCM(playerid, COLOR_GREEN,msg);
    return 1;
}

stock SyntaxMSG(playerid, message[])
{
    format(msg, sizeof(msg), "Foloseste: %s", message);
    return SCM(playerid, COLOR_GREY, msg);
}

stock NoteMSG(playerid, message[])
{
    format(msg, sizeof(msg), "[Nota] %s", message);
    return SCM(playerid, COLOR_HOUSE, msg);
}

stock RadioMSG(playerid, message[])
{
    format(msg, sizeof(msg), "{AFAFAF}[Radio]{DADADA}: %s", message);
    return SCM(playerid, COLOR_GREY, msg);
}

stock CellMSG(playerid, message[])
{
    format(msg, sizeof(msg), "{AFAFAF}[Telefon]{FFFFFF}: %s", message);
    return SCM(playerid, COLOR_GREY, msg);
}

stock ServerMSG(playerid, message[])
{
    format(msg, sizeof(msg), "{AFAFAF}SERVER{FFFFFF}: %s", message);
    return SCM(playerid, COLOR_GREY, msg);
}

stock FishMSG(playerid, message[])
{
    format(msg, sizeof(msg), "%s", message);
    return SCM(playerid, COLOR_GREY, msg);
}

stock DmvMSG(playerid, message[])
{
    format(msg, sizeof(msg), "{AFAFAF}[DMV]{C0C0C0}: %s", message);
    return SCM(playerid, COLOR_GREY, msg);
}

stock CheckAdmin(playerid, level)
{
    if (PlayerInfo[playerid][pAdmin] >= level)
        return true;
    else
        return false;
}

stock isTester(playerid)
{
    if (PlayerInfo[playerid][pHelper] >= 1)
        return true;
    else
        return false;
}

stock isAdminDuty(playerid)
{
    if (GetIntVar(playerid, "AdminDuty") == 1)
        return 1;
    else
        return 0;
}

stock isTesterDuty(playerid)
{
    if (GetIntVar(playerid, "TesterDuty") == 1)
        return 1;
    else
        return 0;
}

stock BroadCast(color, string[])
{
    if(strlen(string) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "%.*s ...", pos, string);
        SCMALL(color, msg);
        format(msg, sizeof(msg), "... %s", string[pos]);
        SCMALL(color, msg);
    }
    else
    {
        format(msg, sizeof(msg), "%s", string);
        SCMALL(color, msg);
    }
    return 1;
}

stock AddLabelToFile(LabelID, LabelInfo[], virworld, color, gametext, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "INSERT INTO `labels` (posx, posy, posz, color, labeltext, virworld, gametext) VALUES(%f, %f, %f, %d, '%s', %d, %d)", LX, LY, LZ, color, LabelInfo, virworld, gametext);
    mysql_function_query(dbHandle, query, true, "OnLabelInsert", "d", LabelID);
    return 1;
}

stock AddDoorToFile(DoorID, DoorText[], virworld, interior, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "INSERT INTO `doors` (info, enterinterior, virtualworld, posx, posy, posz) VALUES('%s', %d, %d, %f, %f, %f)", DoorText, interior, virworld, LX, LY, LZ);
    mysql_function_query(dbHandle, query, true, "OnDoorInsert", "d", DoorID);
    return 1;
}

stock AddFactionDoorToFile(DoorID, vehicle, interior, faction, info[], Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "INSERT INTO `factiondoors` (info, withvehicle, enterinterior, faction, enterx, entery, enterz) VALUES('%s', %d, %d, %d, %f, %f, %f)", info, vehicle, interior, faction, LX, LY, LZ);
    mysql_function_query(dbHandle, query, true, "OnFactionDoorInsert", "d", DoorID);
    return 1;
}

stock AddTeleToFile(teleid, mapname[], interior, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "INSERT INTO `ateles` (mapname, posx, posy, posz, interior) VALUES('%s', %f, %f, %f, %d)", mapname, LX, LY, LZ, interior);
    mysql_function_query(dbHandle, query, true, "OnTeleportInsert", "d", teleid);
    return 1;
}

stock AddInfoToFile(infoid, virworld, labeltext[], labeltext2[], otherinfo[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `infos` (posx, posy, posz, labeltext, labeltext2, otherinfo, virworld) VALUES(%f, %f, %f, '%s', '%s', '%s', %d)", x, y, z, labeltext, labeltext2, otherinfo, virworld);
    mysql_function_query(dbHandle, query, true, "OnInfoInsert", "d", infoid);
    return 1;
}

stock AddDealerShipToFile(dealerid, info[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `dealerships` (posx, posy, posz, info) VALUES(%f, %f, %f, '%s')", x, y, z, info);
    mysql_function_query(dbHandle, query, true, "OnDealerShipInsert", "d", dealerid);
    return 1;
}

stock AddBankToFile(bankid, interior, info[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `banks` (posx, posy, posz, interior, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, interior, info);
    mysql_function_query(dbHandle, query, true, "OnBankInsert", "d", bankid);
    return 1;
}

stock AddATMToFile(atmid, atminfo[], interior, Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `atms` (posx, posy, posz, interior, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, interior, atminfo);
    mysql_function_query(dbHandle, query, true, "OnATMInsert", "d", atmid);
    return 1;
}

stock AddStationToFile(stationid, stationinfo[], price, Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `gstations` (posx, posy, posz, price, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, price, stationinfo);
    mysql_function_query(dbHandle, query, true, "OnStationInsert", "d", stationid);
    return 1;
}

stock AddObjectToFile(objectid, modelid, interior, virworld, Float:x, Float:y, Float:z, name[])
{
    format(query, sizeof(query), "INSERT INTO `objects` (model, posx, posy, posz, posrx, posry, posrz, interior, virworld, objectname) VALUES(%d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",modelid,x,y,z,interior,virworld,name);
    mysql_function_query(dbHandle, query, true, "OnObjectInsert", "d", objectid);
    return 1;
}

stock AddCameraToFile(objectid, faction, interior, virworld, Float:x, Float:y, Float:z, name[])
{
    format(query, sizeof(query), "INSERT INTO `cctvs` (faction, posx, posy, posz, posrx, posry, posrz, interior, virworld, info) VALUES(%d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",faction,x,y,z,interior,virworld,name);
    mysql_function_query(dbHandle, query, true, "OnCameraInsert", "d", objectid);
    return 1;
}

stock AddMoveDoorToFile(objectid, modelid, faction, interior, virworld, Float:x, Float:y, Float:z, name[])
{
    format(query, sizeof(query), "INSERT INTO `movedoors` (model, faction, posx, posy, posz, posrx, posry, posrz, interior, virworld, name) VALUES(%d, %d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",modelid,faction,x,y,z,interior,virworld,name);
    mysql_function_query(dbHandle, query, true, "OnMoveDoorInsert", "d", objectid);
    return 1;
}

stock AddGateToFile(objectid, modelid, faction, interior, virworld, Float:x, Float:y, Float:z, Float:speed, Float:movex, Float:movey, name[])
{
    format(query, sizeof(query), "INSERT INTO `gates` (model, faction, posx, posy, posz, posrx, posry, posrz, openspeed, movex, movey, interior, virworld, name) VALUES(%d, %d, %f, %f, %f, 0.0, 0.0, 0.0, %f, %f, %f, %d, %d, '%s')",modelid,faction,x,y,z,speed,movex,movey,interior,virworld,name);
    mysql_function_query(dbHandle, query, true, "OnGateInsert", "d", objectid);
    return 1;
}

stock AddVehicleToFile(vehid, type, faction, modelid, Float:x, Float:y, Float:z, Float:a, color1, color2, info[], plate[], siren)
{
    format(query, sizeof(query), "INSERT INTO `vehicles` (model, faction, color1, color2, posx, posy, posz, posa, type, plate, info, siren) VALUES(%d, %d, %d, %d, %f, %f, %f, %f, %d, '%s', '%s', %d)",
    modelid, faction, color1, color2, x, y, z, a, type, plate, info, siren);
    mysql_function_query(dbHandle, query, true, "OnVehicleInsert", "d", vehid);
    return 1;
}

stock AddHouseToFile(houseid, level, price, houseinfo[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `houses` (posx, posy, posz, checkx, checky, checkz, info, price, levelbuy, owned, owner, cash, rentprice, rentable, locked, radio) VALUES(%f, %f, %f, %f, %f, %f, '%s', %d, %d, %d, '%s', %d, %d, %d, %d, %d)",
    x, y, z, 0.0, 0.0, 0.0, houseinfo, price, level, 0, "The State", 0, 0, 0, 1, 0);
    mysql_function_query(dbHandle, query, true, "OnHouseInsert", "d", houseid);
    return 1;
}

stock AddBizToFile(bizid, level, price, type, owner[], name[], entermsg[], info[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `business` (posx, posy, posz, name, info, entermsg, owner, owned, locked, price, levelbuy, cash, world, type) VALUES(%f, %f, %f, '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d, %d, %d)",
    x, y, z, name, info, entermsg, owner, 0, 1, price, level, 0, bizid, type);
    mysql_function_query(dbHandle, query, true, "OnBizInsert", "d", bizid);
    return 1;
}

stock AddFactionToFile(factionid, name[], color, type, rankamount, chaton)
{
    format(query, sizeof(query), "INSERT INTO `factions` (factionid, name, color, type, rankamount, chaton) VALUES(%d, '%s', %d, %d, %d, %d)", factionid, name, color, type, rankamount, chaton);
    mysql_function_query(dbHandle, query, true, "OnFactionInsert", "d", factionid);
    return 1;
}

stock AddJobToFile(jobid, name[], sidejob, rankamount, highrank, Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `jobs` (jobid, name, sidejob, ranks, highrank, posx, posy, posz) VALUES(%d, '%s', %d, %d, %d, %f, %f, %f)", jobid, name, sidejob, rankamount, highrank, x, y, z);
    mysql_function_query(dbHandle, query, true, "OnJobInsert", "d", jobid);
    return 1;
}

stock AddFoodStandToFile(standid, standinfo[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `foodstands` (posx, posy, posz, info) VALUES(%f, %f, %f, '%s')",
    x, y, z, standinfo);
    mysql_function_query(dbHandle, query, true, "OnFoodStandInsert", "d", standid);
    return 1;
}

stock AddParkMeterToFile(parkid, parkinfo[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `parkmeters` (posx, posy, posz, posrx, posry, posrz, minutes, name) VALUES(%f, %f, %f, %f, %f, %f, %d, '%s')",
    x, y, z, 0.0, 0.0, 0.0, 0, parkinfo);
    mysql_function_query(dbHandle, query, true, "OnParkMeterInsert", "d", parkid);
    return 1;
}

stock SaveEditedObject(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `objects` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,ObjectsInfo[objectid][oID]);
    mysql_function_query(dbHandle, query, true, "OnEditedObject", "d", objectid);
    return 1;
}

stock SaveEditedCamera(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `cctvs` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,CCTVInfo[objectid][tvID]);
    mysql_function_query(dbHandle, query, true, "OnEditedCamera", "d", objectid);
    return 1;
}

stock SaveEditedMoveDoor(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `movedoors` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Doors[objectid][doorID]);
    mysql_function_query(dbHandle, query, true, "OnEditedMoveDoor", "d", objectid);
    return 1;
}

stock SaveEditedGate(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `gates` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Gates[objectid][gateID]);
    mysql_function_query(dbHandle, query, true, "OnEditedGate", "d", objectid);
    return 1;
}

stock SaveEditedFoodStand(standid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `foodstands` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,FoodStand[standid][fID]);
    mysql_function_query(dbHandle, query, true, "OnEditedFoodStand", "d", standid);
    return 1;
}

stock SaveEditedParkMeter(parkid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `parkmeters` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,ParkMeters[parkid][parkID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock AddDoorExit(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "UPDATE `doors` SET `exitinterior` = %d, `exitx` = %f, `exity` = %f, `exitz` = %f WHERE `id` = %d", interior, LX, LY, LZ, DoorInfo[doorid][dID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock AddDoorEnter(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "UPDATE `doors` SET `enterinterior` = %d, `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", interior, LX, LY, LZ, DoorInfo[doorid][dID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock AddFactionDoorExit(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "UPDATE `factiondoors` SET `exitinterior` = %d, `exitx` = %f, `exity` = %f, `exitz` = %f WHERE `id` = %d", interior, LX, LY, LZ, FactionDoors[doorid][dID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock AddFactionDoorEnter(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
    format(query, sizeof(query), "UPDATE `factiondoors` SET `enterinterior` = %d, `enterx` = %f, `entery` = %f, `enterz` = %f WHERE `id` = %d", interior, LX, LY, LZ, FactionDoors[doorid][dID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock AddLabelsFromFile()
{
    format(query, sizeof(query), "SELECT * FROM `labels`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicLabels", "");
    return 1;
}

stock AddDoorsFromFile()
{
    format(query, sizeof(query), "SELECT * FROM `doors`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicDoors", "");
    return 1;
}

stock AddFactionDoors()
{
    format(query, sizeof(query), "SELECT * FROM `factiondoors`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicFactionDoors", "");
    return 1;
}

stock AddDynamicGates()
{
    format(query, sizeof(query), "SELECT * FROM `gates`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicGates", "");
    return 1;
}

stock AddMoveDoorsFromFile()
{
    format(query, sizeof(query), "SELECT * FROM `movedoors`");
    mysql_function_query(dbHandle, query, true, "LoadMoveDoors", "");
#if defined debugOn 
	printf(query);
#endif
    return 1;
}
//Garbage Job
stock AddBinsFromFile()
{
	format(query, sizeof(query), "SELECT * FROM `trashbins`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicBins", "");
	return 1;
}
// Garbage Job
stock AddATMFromFile()
{
    format(query, sizeof(query), "SELECT * FROM `atms`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicATMS", "");
    return 1;
}

stock AddAdminTeleports()
{
    format(query, sizeof(query), "SELECT * FROM `ateles`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicTeles", "");
    return 1;
}

stock AddDynamicObjects()
{
    format(query, sizeof(query), "SELECT * FROM `objects`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicObjects", "");
    return 1;
}

stock AddDynamicCCTV()
{
    format(query, sizeof(query), "SELECT * FROM `cctvs`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicCCTV", "");
    return 1;
}

stock AddDynamicInfos()
{
    format(query, sizeof(query), "SELECT * FROM `infos`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicCPT", "");
    return 1;
}

stock AddDynamicGasStations()
{
    format(query, sizeof(query), "SELECT * FROM `gstations`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicGasStations", "");
    return 1;
}

stock AddDynamicBanks()
{
    format(query, sizeof(query), "SELECT * FROM `banks`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicBanks", "");
    return 1;
}

stock AddDynamicVehicles()
{
    format(query, sizeof(query), "SELECT * FROM `vehicles`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicVehicles", "");
    return 1;
}

stock AddDynamicHouses()
{
    format(query, sizeof(query), "SELECT * FROM `houses`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicHouses", "");
    return 1;
}

stock AddDynamicBiz()
{
    format(query, sizeof(query), "SELECT * FROM `business`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicBiz", "");
    return 1;
}

stock AddDynamicStands()
{
    format(query, sizeof(query), "SELECT * FROM `foodstands`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicStands", "");
    return 1;
}

stock AddDynamicMeters()
{
    format(query, sizeof(query), "SELECT * FROM `parkmeters`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicMeters", "");
    return 1;
}

stock LoadApbs()
{
    format(query, sizeof(query), "SELECT * FROM `apbs`");
    mysql_function_query(dbHandle, query, true, "OnLoadApbs", "");
    return 1;
}

stock AddDynamicFactions()
{
    format(query, sizeof(query), "SELECT * FROM `factions` ORDER BY `factionid`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicFactions", "");
    return 1;
}

stock AddDynamicJobs()
{
    format(query, sizeof(query), "SELECT * FROM `jobs` ORDER BY `jobid`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicJobs", "");
    return 1;
}

stock AddRadios()
{
    format(query, sizeof(query), "SELECT * FROM `radios`");
    mysql_function_query(dbHandle, query, true, "LoadRadios", "");
    return 1;
}

stock LoadDealerShips()
{
    format(query, sizeof(query), "SELECT * FROM `dealerships`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicDealerShips", "");
    return 1;
}

stock LoadWeaponDamages()
{
    format(query, sizeof(query), "SELECT * FROM `weapondmg`");
    mysql_function_query(dbHandle, query, true, "LoadDynamicWepDamage", "");
    return 1;
}

stock CreateAllMenus()
{
    //Food Stall Menu
    FoodStallMenu = CreateMenu("~y~Food Stall - Menu", 1,20,120,150,40);
    AddMenuItem(FoodStallMenu, 0, "Noodles");
    AddMenuItem(FoodStallMenu, 0, "Pizza");
    AddMenuItem(FoodStallMenu, 0, "Aripioare Pui");
    AddMenuItem(FoodStallMenu, 0, "Hot Dog");
    AddMenuItem(FoodStallMenu, 0, "Anuleaza");
    //Food Stall Menu
    return 1;
}

public UnFreezePlayer(playerid)
{
    RemoveVar(playerid, "isFrozen");
    TogglePlayerControllable(playerid, true);
    return 1;
}

public FreezePlayer(playerid)
{
    SetIntVar(playerid, "isFrozen", 1);
    TogglePlayerControllable(playerid, false);
    return 1;
}

stock isFrozen(playerid)
{
    if(GetIntVar(playerid, "isFrozen") == 1)
        return true;
    else
        return false;
}


stock TextDraws_Init()
{
    ClothesText = TextDrawCreate(310.000000,361.000000,"Selecteaza caracterul~n~foloseste ~r~mouse keys~w~ pentru a schimba");
    TextDrawAlignment(ClothesText,2);
    TextDrawBackgroundColor(ClothesText,0x000000ff);
    TextDrawFont(ClothesText,3);
    TextDrawLetterSize(ClothesText,0.399999,1.800000);
    TextDrawColor(ClothesText,0xffffffff);
    TextDrawSetOutline(ClothesText,1);
    TextDrawSetProportional(ClothesText,1);
    TextDrawSetShadow(ClothesText,1);
    return 1;
}

stock ShowHudTextDraws(playerid, toggle)
{
    if(toggle)
    {
        ShowRadioTextDraw(playerid);
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vehicle = GetPlayerVehicleID(playerid);
            new kmh = GetVehicleSpeed(vehicle);
            new string[64];
            format(string, 64, "~b~km/h: ~h~~g~%d", kmh);
            PlayerTextDrawSetString(playerid, SpeedText[playerid], string);
            format(string, 64, "~b~Fuel: ~h~~g~%d", Gas{vehicle});
            PlayerTextDrawSetString(playerid, FuelText[playerid], string);
        }
    }
    else
    {
        HideRadioTextDraw(playerid);
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(!IsBike(GetPlayerVehicleID(playerid)))
            {
                PlayerTextDrawShow(playerid, SpeedText[playerid]);
                PlayerTextDrawShow(playerid, FuelText[playerid]);
            }
        }
    }
    return 1;
}

stock ShowSkinMenu(playerid)
{
    ShowModelSelectionMenu(playerid, skinlist, "Skinuri");
    SelectTextDraw(playerid, 0xACCBF1FF);
    return 1;
}

stock ShowPSkinMenu(playerid)
{
    ShowModelSelectionMenu(playerid, pskinlist, "Skinuri");
    SelectTextDraw(playerid, 0xACCBF1FF);
    return 1;
}

stock ShowVehicleMenu(playerid)
{
    ShowModelSelectionMenu(playerid, vehiclelist, "Vehicule");
    SelectTextDraw(playerid, 0xACCBF1FF);
    return 1;
}

stock ShowWeaponsMenu(playerid)
{
    ShowModelSelectionMenu(playerid, weaponlist, "Arme");
    SelectTextDraw(playerid, 0xACCBF1FF);
    return 1;
}

stock ShowBuyableCars(playerid)
{
    ShowModelSelectionMenu(playerid, buyable, "Dealership", 0x00000055, 0x19191988 , 0xD1D1D1AA);
    SelectTextDraw(playerid, 0xD1D1D1AA);
    return 1;
}

stock TMSG(color, string[])
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pHelper] > 0)
        {
            SCM(i, color, string);
        }
    }
    return 1;
}

stock ARESTMSG(color, string[])
{
    for(new i=0;i<=GetPlayerPoolSize();i++)
        if(PlayerInfo[i][pFaction] == 1) SCM(i, color, string);
    return 1;
}

stock NEWSMSG(color, string[])
{
    for(new i=0;i<=GetPlayerPoolSize();i++)
        if(togglenews[i] == 0) SCM(i, color, string);
    return 1;
}

stock AMSG(color, string[])
{
    foreach(new i : Player)
    {
        if(CheckAdmin(i, 1))
        {
            SCM(i, color, string);
        }
    }
    return 1;
}

stock AWARNMSG(color, string[])
{
    foreach(new i : Player)
    {
        if(CheckAdmin(i, 1) && GetPVarInt(i, "AWarnSpam") == 1)
        {
            SCM(i, color, string);
        }
    }
    return 1;
}

stock LOCALAMSG(playerid, Float:range, color, string[])
{
    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    foreach(new i : Player)
    {
        if(PlayerToPoint(range, i, X, Y, Z) && PlayerInfo[i][pAdmin] == 0) SCM(i, color, string);
    }
    AMSG(color, string);
    TMSG(color, string);
    return 1;
}

stock StaffMSG(color, string[])
{
    foreach(new i : Player)
    {
        if(CheckAdmin(i, 1) || PlayerInfo[i][pHelper] > 0)
        {
            SCM(i, color, string);
        }
    }
    return 1;
}

stock KickWithMSG(playerid, message[])
{
    LOCALAMSG(playerid, 20.0, 0xFF4444FF, message);
    SetTimerEx("KickPlayer",100,0,"d",playerid);
}

stock BanWithMSG(playerid, message[])
{
    PlayerInfo[playerid][pBanned] = 1;
    LOCALAMSG(playerid, 20.0, 0xFF4444FF, message);
    SetTimerEx("BanPlayer",100,0,"d",playerid);
}


public BanWithMSGEx(playerid, message[])
{
    PlayerInfo[playerid][pBanned] = 1;
    LOCALAMSG(playerid, 20.0, 0xFF4444FF, message);
    SetTimerEx("BanPlayerEx",100,0,"i",playerid);
}

stock KickEx(playerid, message[])
{
    LOCALAMSG(playerid, 20.0, COLOR_LIGHTRED, message);
    SetTimerEx("KickPlayer",100,0,"d",playerid);
}

stock KickEx2(playerid, message[])
{
    SCM(playerid, COLOR_LIGHTRED, message);
    SetTimerEx("KickPlayer",100,0,"d",playerid);
}

stock PutPlayer(playerid, Float:x, Float:y, Float:z)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
    }
    else
    {
        SetPlayerPos(playerid, x, y ,z);
    }
}

stock PlayerIsOn(playerid)
{
    if(PlayerLogged(playerid) && playerid != INVALID_PLAYER_ID)
        return true;
    else
        return false;
}

stock NotConnectedMSG(playerid)
{
    return ServerMSG(playerid, "Jucatorul nu este conectat.");
}

stock NotNearPlayerMSG(playerid)
{
    return ServerMSG(playerid, "Jucatorul nu este langa tine.");
}

stock PlayerInCar(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
        return true;
    else
        return false;
}

stock NotInCarMSG(playerid)
{
    return SCM(playerid, -1, "{AFAFAF}[ERROR]{FFFFFF}: Trebuie sa fi in vehicul.");
}

stock SetCurrentTime()
{
    gettime(ghour, gminute, gsecond);
    FixHour(ghour);
    ghour = shifthour;
    SetWorldTime(ghour);
    return 1;
}

stock randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}

stock SendStaffMessage(color, string[])
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pHelper] == 1 || CheckAdmin(i, 1))
        {
            if(TesterChat{i})
            {
                SCM(i, color, string);
            }
        }
    }
    return 1;
}

stock PlaySound(playerid, soundid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    PlayerPlaySound(playerid, soundid, x, y, z);
}

stock GetLevel(playerid)
{
    return PlayerInfo[playerid][pLevel];
}

stock GetPlayerIP(playerid)
{
    new IP[100];
    GetPlayerIp(playerid, IP, sizeof(IP));
    return IP;
}

stock ShowLicenses(playerid, targetid)
{
    new carlic[126], weplic[126], flylic[126], bikelic[126], biglic[126];
    if(PlayerInfo[playerid][pCarLic]) { carlic = "Da"; } else { carlic = "Nu"; }
    if(PlayerInfo[playerid][pBikeLic]) { bikelic = "Da"; } else { bikelic = "Nu"; }
    if(PlayerInfo[playerid][pBigLic]) { biglic = "Da"; } else { biglic = "Nu"; }
    if(PlayerInfo[playerid][pWepLic]) { weplic = "Da"; } else { weplic = "Nu"; }
    if(PlayerInfo[playerid][pFlyLic]) { flylic = "Da"; } else { flylic = "Nu"; }

    SCMEx(targetid, COLOR_GREEN2, "__________ID: %s__________", GetName(playerid));
    format(msg, sizeof(msg), "Nume %s, Varsta %d", GetName(playerid), PlayerInfo[playerid][pAge]);
    SCM(targetid, COLOR_GREY, msg);
    format(msg, sizeof(msg), "Licenta de tip A: {B1C8FB}%s{AFAFAF}. {FF8C8C}Avertizari: (%d)", bikelic, PlayerInfo[playerid][pDriveWarns]);
    SCM(targetid, COLOR_GREY, msg);
    format(msg, sizeof(msg), "Licenta de tip B: {B1C8FB}%s{AFAFAF}. {FF8C8C}Avertizari: (%d)", carlic, PlayerInfo[playerid][pDriveWarns]);
    SCM(targetid, COLOR_GREY, msg);
    format(msg, sizeof(msg), "Licenta de tip C: {B1C8FB}%s{AFAFAF}. {FF8C8C}Avertizari: (%d)", biglic, PlayerInfo[playerid][pDriveWarns]);
    SCM(targetid, COLOR_GREY, msg);
    format(msg, sizeof(msg), "Permis de port arma: {B1C8FB}%s{AFAFAF}.", weplic);
    SCM(targetid, COLOR_GREY, msg);
    format(msg, sizeof(msg), "Brevet de pilot: {B1C8FB}%s{AFAFAF}.", flylic);
    SCM(targetid, COLOR_GREY, msg);
    if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
    {
        format(msg, sizeof(msg), "Numar inmatriculare: {00FF00}%s{FFFFFF}.", VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate]);
        SCM(targetid, COLOR_WHITE, msg);
    }
    SCM(targetid, COLOR_GREEN2, "_________________________________");
}

stock PlayerIsWounded(playerid)
{
    if(GetIntVar(playerid, "JustAcceptedDeath") == 1 || GetIntVar(playerid, "JustDied") == 1 || PlayerInfo[playerid][pDied] == 1 || GetIntVar(playerid, "LoggedInDead") == 1)
    {
        return true;
    }
    else
    {
        return false;
    }
}

stock CheckFightStyle(playerid)
{
    return SetFightStyle(playerid, PlayerInfo[playerid][pFightStyle]);
}

stock CarIsRented(vehicle, playerid)
{
    foreach(new i : Player)
    {
        if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicle && i != playerid) return RentMSG(playerid, "Vehicul nu este inchiriabil, cineva deja l-a inchiriat.");
    }
    if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") == vehicle)
    {
        RentMSG(playerid, "Bine ai venit in masina inchiriata de tine!");
    }
    else
    {
        new strinfo[128];
        format(strinfo, sizeof(strinfo), "Acest vehicul este inchiriabil pentru {33CC33}%d$", VEHICLE_RENT_COST);
        ShowDialog(playerid, Show:<RENTCAR>, DIALOG_STYLE_MSGBOX, "INCHIRIAZA O MASINA", strinfo, "Inchiriaza", "Anuleaza");
    }
    return 1;
}

stock BikeIsRented(vehicle, playerid)
{
    foreach(new i : Player)
    {
        if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicle && i != playerid) return RentMSG(playerid, "Bicicleta nu este inchiriabila, cineva deja a inchiriat-o.");
    }
    if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") == vehicle)
    {
        RentMSG(playerid, "Aceasta este bicicleta inchiriata de tine!");
    }
    else
    {
        format(msg, sizeof(msg), "{FFFFFF}Bicicleta este inchiriabila pentru {33CC33}$%d{FFFFFF}, '/rentbike'.", BIKE_RENT_COST);
        RentMSG(playerid, msg);
    }
    return 1;
}

stock RentMSG(playerid, message[])
{
    format(msg, sizeof(msg), "{AFAFAF}[RENT-COMPANY]{FFFFFF}: %s", message);
    return SCM(playerid, -1, msg);
}

stock NoCashMSG(playerid)
{
    return SCM(playerid, -1, "{AFAFAF}[ERROR]{FFFFFF}: Nu ai destui bani.");
}

stock RespawnVehicle(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
    VehicleEngine(vehicleid, false);
    ToggleVehicleLock(vehicleid, false);
    return 1;
}

stock ToggleVehicleLock(vehicleid, bool:toggle)
{
    if(toggle == true)
    {
        foreach(new i : Player)
        {
            SetVehicleParamsForPlayer(vehicleid,i,0,1);
        }
        vLocked{vehicleid} = 1;
    }
    else if(toggle == false)
    {
        foreach(new i : Player)
        {
            SetVehicleParamsForPlayer(vehicleid,i,0,0);
        }
        vLocked{vehicleid} = 0;
    }
    return 1;
}

stock ToggleVehicleLockForPlayer(playerid, vehicleid, bool:toggle)
{
    if(toggle == true)
    {
        SetVehicleParamsForPlayer(vehicleid,playerid,0,1);
    }
    else if(toggle == false)
    {
        SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
    }
    return 1;
}

stock VehicleEngine(vehicleid, bool:toggle)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(toggle == true)
    {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
        engineOn{vehicleid} = true;
    }
    else
    {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
        engineOn{vehicleid} = false;
    }
    return 1;
}

stock ToggleVehicleEngine(vehicleid, playerid)
{
    if(vehicleid == 0) return 1;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(!engineOn{vehicleid})
    {
        new Float:hp;
        GetVehicleHealth(vehicleid, hp);
        new start = randomEx(1, 7);
        if(hp < 700)
        {
            if(start == 1 || start == 6)
            {
                GameTextForPlayer(playerid, "~r~Motorul nu a pornit din cauza avariilor.", 3000, 4);
                return 1;
            }
        }
        if(hp < 500)
        {
            if(start == 1 || start == 2 || start == 5 || start == 6)
            {
                GameTextForPlayer(playerid, "~r~Motorul nu a pornit din cauza avariilor.", 3000, 4);
                return 1;
            }
        }
        if(hp < 300)
        {
            if(start == 1 || start == 2 || start == 3 || start == 5 || start == 6)
            {
                GameTextForPlayer(playerid, "~r~Motorul nu a pornit din cauza avariilor.", 3000, 4);
                return 1;
            }
        }
        format(msg, sizeof(msg), "~g~MOTOR PORNIT");
        GameTextForPlayer(playerid, msg, 2500, 4);
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
        format(msg, sizeof(msg), "a pornit motorul vehiculului %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
        ActionMessage(playerid,15.0,msg);
//       SetPlayerBubble(playerid, msg);
        engineOn{vehicleid} = true;
    }
    else if(engineOn{vehicleid})
    {
        format(msg, sizeof(msg), "~r~MOTOR OPRIT");
        GameTextForPlayer(playerid, msg, 2500, 4);
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
        format(msg, sizeof(msg), "a oprit motorul vehiculului %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
        ActionMessage(playerid,15.0,msg);
//        SetPlayerBubble(playerid, msg);
        engineOn{vehicleid} = false;
    }
    return 1;
}

stock SetCheckPoint(playerid, value, Float:x, Float:y, Float:z, Float:size)
{
    SetIntVar(playerid, "PlayerCP", value);
    SetPlayerCheckpoint(playerid, x, y, z, size);
    return 1;
}

stock SetRaceCheckPoint(playerid, value, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size)
{
    SetIntVar(playerid, "PlayerCP", value);
    SetPlayerRaceCheckpoint(playerid, type, x, y, z, nextx, nexty, nextz, size);
    return 1;
}

stock RemoveCheckPoint(playerid)
{
    RemoveVar(playerid, "PlayerCP");
    DisablePlayerCheckpoint(playerid);
    return 1;
}

stock RemoveRaceCheckPoint(playerid)
{
    RemoveVar(playerid, "PlayerCP");
    DisablePlayerRaceCheckpoint(playerid);
    return 1;
}

stock HandleFlyingExam(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsADMVHeli(vehicleid) && GetIntVar(playerid, "InFlyTest") == 1)
    {
        if(GetIntVar(playerid, "PlayerCP") >= 15 && GetIntVar(playerid, "PlayerCP") <= 24) //Playing sound when entering a checkpoint.
            PlaySound(playerid, 1138);
        if(GetIntVar(playerid, "PlayerCP") == 15)
        {
            SetIntVar(playerid, "LessonStarted", 1);
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM2, 3, 1735.2058,-2151.1125,64.9770, 1722.7869,-1964.8521,69.8375, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 16)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM3, 3, 1722.7869,-1964.8521,69.8375, 1772.3292,-1808.5341,76.2515, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 17)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM4, 3, 1772.3292,-1808.5341,76.2515, 1871.6609,-1725.9799,64.2006, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 18)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM5, 3, 1871.6609,-1725.9799,64.2006, 1935.5216,-1594.7958,63.1090, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 19)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM6, 3, 1935.5216,-1594.7958,63.1090, 1847.6520,-1477.8009,64.2859, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 20)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM7, 3, 1847.6520,-1477.8009,64.2859, 1697.8094,-1411.9990,111.9126, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 21)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM8, 3, 1697.8094,-1411.9990,111.9126, 1582.0636,-1322.9044,104.7356, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 22)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM9, 3, 1582.0636,-1322.9044,104.7356, 1492.8091,-1264.3616,113.7795, 6.0);
        }
        else if(GetIntVar(playerid, "PlayerCP") == 23)
        {
            RemoveRaceCheckPoint(playerid);
            SetRaceCheckPoint(playerid, FLYEXAM10, 4, 1492.8091,-1264.3616,113.7795, 1492.8091,-1264.3616,113.7795, 6.0);
            SCM(playerid, COLOR_YELLOWG, "Te rog parcheaza elicopterul corespunzator.");
        }
        else if(GetIntVar(playerid, "PlayerCP") == 24)
        {
            RemoveRaceCheckPoint(playerid);
            if(GetIntVar(playerid, "LessonSeconds") <= 120)
            {
                if(GetIntVar(playerid, "InFlyTest") == 1)
                {
                    PlayerInfo[playerid][pFlyLic] = 1;
                    DmvMSG(playerid, "Aici este licenta de zbor, condu prudent!");
                    GiveCash(playerid, -FLYLIC_PRICE);
                    RemoveVar(playerid, "LessonStarted");
                    RemoveVar(playerid, "LessonSeconds");
                    RemoveVar(playerid, "InFlyTest");
                    SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
                    SetPlayerWeapons(playerid);
                }
            }
            else
            {
                DmvMSG(playerid, "Zborul rapid este interzis.");
                RemoveVar(playerid, "LessonStarted");
                RemoveVar(playerid, "LessonSeconds");
                RemoveVar(playerid, "InFlyTest");
                SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
                SetPlayerWeapons(playerid);
            }
            RespawnVehicle(vehicleid);
        }
    }
}

stock GetClosestHouse(playerid)
{
    new i=1;
    while(i != MAX_HOUSES)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
        {
            return i;
        }
        i++;
    }
    return -1;
}


stock GetClosestDoor(playerid)
{
    new i=0;
    while(i != MAX_OBJECTS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 6.0, Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ]) && Doors[i][doorObjectOn])
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestGate(playerid)
{
    new i=0;
    while(i != MAX_OBJECTS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 8.0, Gates[i][gatePosX], Gates[i][gatePosY], Gates[i][gatePosZ]) && Gates[i][gateObjectOn])
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextLabelID()
{
    new i=0;
    while(i != MAX_LABELS)
    {
        if(LabelsInfo[i][tLabelOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestLabelID(playerid)
{
    new i=0;
    while(i != MAX_LABELS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]) && LabelsInfo[i][tLabelOn] == 1)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextStationID()
{
    new i=0;
    while(i != MAX_ATMS)
    {
        if(GasStation[i][gStationOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestStationID(playerid)
{
    new i=0;
    while(i != MAX_GAS_STATIONS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, GasStation[i][gPosX], GasStation[i][gPosY], GasStation[i][gPosZ]) && GasStation[i][gStationOn])
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestHouseID(playerid)
{
    new i=1;
    while(i != MAX_HOUSES)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) && HouseInfo[i][hHouseOn])
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextHouseID()
{
    new i=1;
    while(i != MAX_HOUSES)
    {
        if(HouseInfo[i][hHouseOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextFactionID()
{
    new i=1;
    while(i != MAX_FACTIONS)
    {
        if(Factions[i][fON] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextFactionDoorID()
{
    new i=0;
    while(i != MAX_FACTION_DOORS)
    {
        if(FactionDoors[i][dDoorOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestFactionDoorID(playerid)
{
    new i=0;
    while(i != MAX_FACTION_DOORS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]) && FactionDoors[i][dDoorOn])
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextDynamicDoorID()
{
    new i=0;
    while(i != MAX_DOORS)
    {
        if(DoorInfo[i][dDoorOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextBizID()
{
    new i=0;
    while(i != MAX_BIZ)
    {
        if(BizInfo[i][bizOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestBizID(playerid)
{
    new i=0;
    while(i != MAX_BIZ)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && BizInfo[i][bizOn])
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextParkMeterID()
{
    new i=0;
    while(i != MAX_PARK_METERS)
    {
        if(ParkMeters[i][parkOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestParkMeter(playerid)
{
    new i=0;
    while(i != MAX_PARK_METERS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.5, ParkMeters[i][parkPosX], ParkMeters[i][parkPosY], ParkMeters[i][parkPosZ]) && ParkMeters[i][parkOn] == 1)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextDealerShipID()
{
    new i=0;
    while(i != MAX_DEALERSHIPS)
    {
        if(DealersInfo[i][dealerOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestDealerShip(playerid)
{
    new i=0;
    while(i != MAX_DEALERSHIPS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15.0, DealersInfo[i][dealerPosX], DealersInfo[i][dealerPosY], DealersInfo[i][dealerPosZ]) && DealersInfo[i][dealerOn] == 1)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextFoodStandID()
{
    new i=0;
    while(i != MAX_FOOD_STANDS)
    {
        if(FoodStand[i][fStandOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestFoodStandID(playerid)
{
    new i=0;
    while(i != MAX_FOOD_STANDS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ]) && FoodStand[i][fStandOn] == 1)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetNextATMID()
{
    new i=0;
    while(i != MAX_ATMS)
    {
        if(ATMInfo[i][atmAtmOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestATMID(playerid)
{
    new i=0;
    while(i != MAX_ATMS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ]) && ATMInfo[i][atmAtmOn] == 1)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetPlayerSpeed(playerid)
{
    new Float:x, Float:y, Float:z;
    new Float:speed, final_speed;
    GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
    speed = floatsqroot(((x*x)+(y*y))+(z*z))*100;
    final_speed = floatround(speed,floatround_round);
    return final_speed;
}

stock SetVehicleSpeed(vehicleid,speed) //Miles Per Hour
{
        new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
        GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
        DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
        if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
        {
                multiple = ((speed + DV * 170) / (DV * 170)); //Multiplying DV by 100 calculates speed in MPH
                return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
        }
        return 0;
}

stock GetVehicleSpeed(vehicleid)
{
    new Float:xPos[3];
    GetVehicleVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
    return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

stock KillAllTimers(playerid)
{
    KillTimer(LoginTimer{playerid});
    return 1;
}

stock IsValidName(playerid)
{
    if (IsPlayerConnected(playerid))
    {
        new player[MAX_PLAYER_NAME];
        GetPlayerName(playerid,player,sizeof(player));
        for(new n = 0; n < strlen(player); n++)
        {
            if (player[n] == '_' && player[n+1] >= 'A' && player[n+1] <= 'Z') return 1;
            if (player[n] == ']' || player[n] == '[') return 0;
        }
    }
    return 0;
}

stock GetFightStyleName(playerid)
{
    switch(GetPlayerFightingStyle(playerid))
    {
        case F_BOXING:
            format(msg, sizeof(msg), "Boxing");
        case F_KUNGFU:
            format(msg, sizeof(msg), "Kungfu");
        case F_GRABKICK:
            format(msg, sizeof(msg), "Grabkick");
        case F_KNEEHEAD:
            format(msg, sizeof(msg), "Kneehead");
        case F_ELBOW:
            format(msg, sizeof(msg), "Elbow");
        case F_NORMAL:
            format(msg, sizeof(msg), "Normal");
    }
    return msg;
}

stock phoneAnim(playerid, type)
{
    if(type == 1)
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        SetPlayerAttachedObject(playerid, 9, 330, 6);
    }
    else
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(playerid, 9);
    }
    return 1;
}

stock PlayRingSoundTwice(playerid)
{
    PlaySound(playerid, 1138);
    SetTimerEx("PlayRingSound", 500, 0, "i", playerid);
    return 1;
}

stock UpdateHouseText(houseid)
{
    if(HouseInfo[houseid][hOwned] == 0)
        format(msg, sizeof(msg), "[Casa de vanzare]\nAdresa: %d\n%s\nPret: $%d\nLevel: %d", houseid, HouseInfo[houseid][hInfo], HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
    else
        format(msg, sizeof(msg), "[Casa]: %d\n%s", houseid, HouseInfo[houseid][hInfo]);
    UpdateDynamic3DTextLabelText(Text3D:HouseInfo[houseid][hLabel], -1, msg);
    return 1;
}

stock FormatHouseWeapons(house, string[])
{
    new wstr[256];
    new tmp[64];
    for(new a = 1; a < MAX_HOUSE_WEAPONS; a++)
    {
        new w = HouseInfo[house][hWeapon][a];
        new am = HouseInfo[house][hAmmo][a];
        if(a == 1)
        {
            format(tmp,sizeof(tmp),"%d=%d",w,am);
        }
        else
        {
            format(tmp,sizeof(tmp),"|%d=%d",w,am);
        }
        strins(wstr,tmp,strlen(wstr));
    }
    return format(string, 256, "%s", wstr);
}

stock UpdateHouseInfo(houseid)
{
    new weapons[256];
    FormatHouseWeapons(houseid, weapons);
    format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `price`= %d, `levelbuy`= %d, `rentprice` = %d, `rentable` = %d, `interior` = %d, `world` = %d, `cash` = %d, `furnitures` = %d WHERE `id` = %d",
    HouseInfo[houseid][hOwner],
    HouseInfo[houseid][hOwned],
    HouseInfo[houseid][hLocked],
    HouseInfo[houseid][hPrice],
    HouseInfo[houseid][hLevelbuy],
    HouseInfo[houseid][hRentprice],
    HouseInfo[houseid][hRentable],
    HouseInfo[houseid][hInterior],
    HouseInfo[houseid][hWorld],
    HouseInfo[houseid][hCash],
    HouseInfo[houseid][hFurnitures],
    HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, false, "", "");
    format(query, sizeof(query), "UPDATE `houses` SET `checkx` = %f, `checky` = %f, `checkz` = %f, `weapons` = '%s', `radio` = %d WHERE `id` = %d",
    HouseInfo[houseid][hCheckPosX],
    HouseInfo[houseid][hCheckPosY],
    HouseInfo[houseid][hCheckPosZ],
    weapons,
    HouseInfo[houseid][hRadio],
    HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock GetIDByName(playername[])
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            new pName[MAX_PLAYER_NAME];
            GetPlayerName(i, pName, sizeof(pName));
            if(strcmp(pName, playername, true, strlen(playername)) == 0)
            {
                return i;
            }
        }
    }
    return INVALID_PLAYER_ID;
}

stock GivePlayerHealth(playerid, Float:health)
{
    new Float:hp;
    GetPlayerHealth(playerid, hp);
    return SetPlayerHealth(playerid, hp+health);
}

stock GivePlayerArmour(playerid, Float:arm)
{
    new Float:armour;
    GetPlayerHealth(playerid, armour);
    return SetPlayerHealth(playerid, armour+arm);
}

stock Float:GetPlayerHP(playerid)
{
    new Float:hp;
    GetPlayerHealth(playerid, hp);
    return hp;
}

stock SetPlayerWeapons(playerid)
{
    if(PlayerIsOn(playerid))
    {
        SafeResetPlayerWeapons(playerid);
        if(PlayerInfo[playerid][pJailed] < 1)
        {
            if (PlayerInfo[playerid][pPerm1] > 0)
            {
                GiveWeapon(playerid, PlayerInfo[playerid][pPerm1], PlayerInfo[playerid][pAmmo1]);
            }
            if (PlayerInfo[playerid][pPerm2] > 0)
            {
                GiveWeapon(playerid, PlayerInfo[playerid][pPerm2], PlayerInfo[playerid][pAmmo2]);
            }
            if (PlayerInfo[playerid][pMeleeWep] > 0)
            {
                GiveWeapon(playerid, PlayerInfo[playerid][pMeleeWep], 1);
            }
        }
    }
    return 1;
}

stock FullResetPlayerWeapons(playerid)
{
    SafeResetPlayerWeapons(playerid);
    Weapons[playerid][PlayerInfo[playerid][pPerm1]] = 0;
    Weapons[playerid][PlayerInfo[playerid][pPerm2]] = 0;
    Weapons[playerid][PlayerInfo[playerid][pMeleeWep]] = 0;
    PlayerInfo[playerid][pPerm1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
    PlayerInfo[playerid][pPerm2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
    PlayerInfo[playerid][pMeleeWep] = 0;
    return 1;
}

stock GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid)
    {
        case 0,1: slot = 0;
        case 2..9: slot = 1;
        case 22..24: slot = 2;
        case 25..27: slot = 3;
        case 28,29,32: slot = 4;
        case 30,31: slot = 5;
        case 33,34: slot = 6;
        case 35..38: slot = 7;
        case 16..18,39: slot = 8;
        case 41..43: slot = 9;
        case 10..15: slot = 10;
        case 44..46: slot = 11;
        case 40: slot = 12;
        default: slot = INVALID_WEAPON_SLOT_ID;
    }
    return slot;
}

stock GetWeaponAmmo(playerid, weaponid)
{
    new weapon, ammo;
    GetPlayerWeaponData(playerid, GetWeaponSlot(weaponid), weapon, ammo);
    return ammo;
}

stock GetPrimaryWeapon(playerid)
{
    if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]) > 0)
        return PlayerInfo[playerid][pPerm1];
    else
        return 0;
}

stock GetMeleeWeapon(playerid)
{
    if(PlayerInfo[playerid][pMeleeWep] > 0)
        return PlayerInfo[playerid][pMeleeWep];
    else
        return 0;
}

stock GetSecondaryWeapon(playerid)
{
    if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]) > 0)
        return PlayerInfo[playerid][pPerm2];
    else
        return 0;
}

stock IsMeleeSlotTaken(playerid)
{
    if(PlayerInfo[playerid][pMeleeWep] > 0)
        return true;
    else
        return false;
}

stock IsPrimarySlotTaken(playerid)
{
    if(PlayerInfo[playerid][pPerm1] > 0)
        return true;
    else
        return false;
}

stock IsSecondarySlotTaken(playerid)
{
    if(PlayerInfo[playerid][pPerm2] > 0)
        return true;
    else
        return false;
}

stock IsMeleeWeapon(weaponid)
{
    if(weaponid >= 1 && weaponid <= 15)
        return true;
    else
        return false;
}

stock IsPrimaryWeapon(weaponid)
{
    if(weaponid >= 22 && weaponid <= 24)
    {
		#if defined debugOn 
			printf("primary true %d", weaponid);
		#endif
        return true;
    }
    else
    {
		#if defined debugOn 
			printf("primary false %d", weaponid);
		#endif
        return false;
    }
}


stock IsSecondaryWeapon(weaponid)
{
    if(weaponid == 25 || weaponid == 34 || weaponid >= 28 && weaponid <= 32)
    {
		#if defined debugOn 
			printf("secondary true %d", weaponid);
		#endif
        return true;
    }
    else
    {
		#if defined debugOn 
			printf("secondary false %d", weaponid);
		#endif
        return false;
    }
}

public ShowTutorialLocations(playerid)
{
    PlaySound(playerid, 1054);
    if(GetIntVar(playerid, "RegisterPart") == 7)
    {
        InfoMSG(playerid, "~p~Bine ai venit pe Evolution Roleplay,~n~ ~n~~w~spor la joc!", 10);
        GameTextForPlayer(playerid, "~w~ Foloseste ~y~SPACE~w~ pentru a te spawna.", 5000, 4);
        RemoveVar(playerid, "MovingToTutorial");
        ClearChatbox(playerid, 50);
        //SCM(playerid, COLOR_YELLOWG, "Evolution.");
        SetPlayerCameraPos(playerid, 29.1750,1207.6664,45.7377);
        SetPlayerCameraLookAt(playerid, 10.1180,1175.2678,19.4713);
    }
    if(GetIntVar(playerid, "RegisterPart") == 8)
    {
        SetIntVar(playerid, "JustDoneRegister", 1);
        RemoveVar(playerid, "RegisterPart");
        SetPlayerSpawn(playerid);
    }
    return 1;
}

stock GetNextToySlot(playerid)
{
    new i=0;
    while(i != MAX_PLAYER_TOYS)
    {
        if(PlayerToys[playerid][i][ptToyOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetTotalToySlots(playerid)
{
    new count = 0;
    for(new i = 0; i < MAX_PLAYER_TOYS; i++)
    {
        if(PlayerToys[playerid][i][ptToyOn] == 1)
        {
            count++;
        }
    }
    return count;
}

stock OnPlayerBuyToy(playerid, toyslot, model, bone, name[])
{
    format(query, sizeof(query), "INSERT INTO `playertoys` (pid, name, model, bone, player) VALUES (%d, '%s', %d, %d, %s)", PlayerInfo[playerid][pDatabaseID], name, model, bone, GetName(playerid));
    mysql_function_query(dbHandle, query, true, "OnToyInsert", "ii", playerid, toyslot);
    //================================================
    PlayerToys[playerid][toyslot][ptModelID] = model;
    PlayerToys[playerid][toyslot][ptBoneID] = bone;
    format(PlayerToys[playerid][toyslot][ptName], 128, "%s", name);
    PlayerToys[playerid][toyslot][ptToyOn] = 1;
    return 1;
}

stock UpdatePlayerToy(playerid, toyslot, bone, Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ, Float:SC, Float:SY, Float:SZ)
{
    format(query, sizeof(query), "UPDATE `playertoys` SET `bone` = %d, `offestx` = %f, `offesty` = %f, `offestz` = %f, `rotx` = %f, `roty` = %f, `rotz` = %f, `scalex` = %f, `scaley` = %f, `scalez` = %f WHERE `id` = %d AND `player` = '%s'",
    bone, X, Y, Z, RX, RY, RZ, SC, SY, SZ, PlayerToys[playerid][toyslot][ptID], GetName(playerid));
    mysql_function_query(dbHandle, query, false, "", "");
	#if defined debugOn
		print("UpdatePlayerToy");
		printf(query);
	#endif
    return 1;
}

stock LoadPlayerToys(playerid)
{
    format(query, sizeof(query), "SELECT * FROM `playertoys` WHERE `player` = %d", GetName(playerid));
    mysql_function_query(dbHandle, query, true, "OnPlayerLoadToys", "i", playerid);
    return 1;
}

stock RemovePlayerToyFromSlot(playerid, toyslot)
{
    format(query, sizeof(query), "DELETE FROM `playertoys` WHERE `id` = %d", PlayerToys[playerid][toyslot][ptID]);
    mysql_function_query(dbHandle, query, true, "OnPlayerRemovedToy", "id", playerid, toyslot);
    return 1;
}

stock GiveMeleeWeapon(playerid, wepid)
{
    SafeResetPlayerWeapons(playerid);
    GiveWeapon(playerid, wepid, 1);
    PlayerInfo[playerid][pMeleeWep] = wepid;
    SetPlayerWeapons(playerid);
    return 1;
}

stock GivePermWeapon(playerid, slot, wepid, ammo)
{
    SafeResetPlayerWeapons(playerid);
    GiveWeapon(playerid, wepid, ammo);
    if(slot == 2)
    {
        PlayerInfo[playerid][pPerm1] = wepid;
        PlayerInfo[playerid][pAmmo1] = ammo;
    }
    if(slot == 3)
    {
        PlayerInfo[playerid][pPerm2] = wepid;
        PlayerInfo[playerid][pAmmo2] = ammo;
    }
    SetPlayerWeapons(playerid);
    return 1;
}

stock RemoveObjectsFromServer(playerid)
{
    //Ferma Maho Montgomery
    RemoveBuildingForPlayer(playerid, 13002, 1554.0547, -0.3125, 26.8125, 0.25);
    //Blueberry random
    RemoveBuildingForPlayer(playerid, 1351, 343.4141, -136.1016, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 143.1953, -136.0938, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 272.6250, -133.5469, 1.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 293.6406, -136.1016, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 321.9375, -147.6406, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 221.5156, -77.5234, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 176.7734, -60.9609, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 243.6875, -66.1641, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 288.5469, -82.4453, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 221.5156, -27.6953, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 238.3203, 37.7266, 1.3672, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 214.0703, -292.0703, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 188.6563, -222.2344, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 176.7734, -201.0625, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 126.6172, -201.0625, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 238.5000, -222.2344, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 226.6172, -201.0625, 0.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 276.7422, -201.0625, 0.4609, 0.25);
    //Garaj BlueBerry
    RemoveBuildingForPlayer(playerid, 13298, 207.804, -249.148, 7.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 222.796, -253.296, 1.851, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 222.796, -258.570, 1.851, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 223.445, -246.828, 0.617, 0.250);
    RemoveBuildingForPlayer(playerid, 13295, 207.804, -249.148, 7.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 222.781, -248.023, 1.851, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 192.914, -238.976, 1.820, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 222.804, -238.945, 1.851, 0.250);
    RemoveBuildingForPlayer(playerid, 13437, 210.937, -245.140, 10.023, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 215.000, -224.000, 2.023, 0.250);
    //Blueberry Junkyard
    RemoveBuildingForPlayer(playerid, 13064, 360.5156, -97.2344, 3.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1440, 346.2344, -103.7656, 0.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 13060, 360.5156, -97.2344, 3.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1440, 344.2188, -78.9063, 0.8906, 0.25);
    //skatepark Blueberry
    RemoveBuildingForPlayer(playerid, 13029, 93.4063, -173.8281, 1.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 13189, 92.1250, -164.9141, 1.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 13196, 111.4453, -188.8594, 0.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 13197, 93.2422, -188.8594, 0.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 79.9219, -176.5234, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 1449, 111.8672, -174.7891, 1.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 12927, 93.4063, -173.8281, 1.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 12942, 92.1250, -164.9141, 1.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 12943, 92.1250, -164.9141, 1.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 1482, 93.0391, -159.1094, 2.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 1684, 81.1250, -152.7344, 3.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 1426, 97.9141, -148.6563, 1.6563, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, 121.6953, -148.6016, 0.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 1426, 94.2188, -148.6563, 1.6563, 0.25);
    RemoveBuildingForPlayer(playerid, 1294, 101.8281, -203.3047, 5.0313, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, 82.4219, -197.1094, 0.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1426, 106.1094, -195.5938, 0.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 1684, 81.1250, -190.9844, 2.0938, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 106.0859, -192.8828, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 106.0859, -190.8672, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 1449, 97.4609, -190.1875, 0.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1482, 99.2188, -190.2031, 1.8516, 0.25);
    RemoveBuildingForPlayer(playerid, 1426, 116.5078, -191.0938, 0.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 12925, 111.4453, -188.8594, 0.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 106.2188, -184.8828, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 12928, 93.2422, -188.8594, 0.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 12929, 93.2422, -188.8594, 0.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 90.7813, -186.5625, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 12930, 93.0859, -186.3594, 1.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, 116.6484, -188.0234, 0.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, 98.4766, -186.8750, 0.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 79.9219, -182.7813, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 79.9219, -180.7656, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 92.6406, -182.2813, 1.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 1685, 90.6641, -182.3047, 1.2891, 0.25);
    //Prison EXT
    RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 16619, 199.3359, 1943.8750, 18.2031, 0.25);
    RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
    RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 16093, 211.6484, 1810.1563, 20.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 16638, 211.7266, 1809.1875, 18.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 262.0938, 1807.6719, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 113.3828, 1814.4531, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 165.9531, 1849.9922, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 103.8906, 1901.1016, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 161.9063, 1933.0938, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 16323, 199.3359, 1943.8750, 18.2031, 0.25);
    RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 233.4297, 1934.8438, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 3279, 267.0625, 1895.2969, 16.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 3267, 15.6172, 1719.1641, 22.4141, 0.25);
    RemoveBuildingForPlayer(playerid, 3267, 237.6953, 1696.8750, 22.4141, 0.25);

    //Primarie Palomino
    RemoveBuildingForPlayer(playerid, 13026, 2261.4219, -71.8125, 25.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 781, 2253.7734, -79.5313, 25.4922, 0.25);
    RemoveBuildingForPlayer(playerid, 12959, 2261.4219, -71.8125, 25.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 1688, 2269.0938, -68.6094, 31.6875, 0.25);
    RemoveBuildingForPlayer(playerid, 1691, 2262.2031, -69.4297, 30.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 956, 2271.7266, -76.4609, 25.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 781, 2259.3906, -79.4141, 25.4922, 0.25);
    RemoveBuildingForPlayer(playerid, 781, 2266.0859, -79.4141, 25.4922, 0.25);
    RemoveBuildingForPlayer(playerid, 1440, 2274.6641, -69.8438, 26.0781, 0.25);
    RemoveBuildingForPlayer(playerid, 1294, 2285.0234, -89.4453, 29.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 669, 2248.6250, -65.6797, 25.8125, 0.25);
    //Scrapyard Red County (GarbageJob + Impound)
    RemoveBuildingForPlayer(playerid, 3295, 1099.1172, -358.4766, 77.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 3347, 1114.2969, -353.8203, 72.7969, 0.25);
    RemoveBuildingForPlayer(playerid, 3347, 1107.5938, -358.5156, 72.7969, 0.25);
    RemoveBuildingForPlayer(playerid, 3376, 1070.4766, -355.1641, 77.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 3404, 1019.3828, -300.2422, 72.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 3404, 1045.5625, -300.6016, 72.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1012.2891, -282.5391, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1023.4219, -279.9063, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 1503, 1019.3203, -282.7891, 73.2031, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1047.3125, -280.3359, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1059.2266, -281.2656, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1082.9922, -283.6797, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 13451, 1146.1406, -369.1328, 49.3281, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1042.9688, -374.4766, 72.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 3425, 1015.0938, -361.1016, 84.0391, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1007.6719, -361.6250, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1007.6250, -349.8984, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1007.5234, -326.4453, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1007.4766, -314.7188, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1007.4297, -302.9922, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1007.3828, -291.2578, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3402, 1019.3828, -300.2422, 72.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1083.6641, -368.5313, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1071.9375, -368.5156, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1060.2109, -368.4922, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3375, 1070.4766, -355.1641, 77.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1092.7109, -327.0625, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1095.3984, -329.8203, 73.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1095.3828, -327.4766, 73.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1092.7969, -321.4844, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1092.9063, -315.9688, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1093.1953, -299.2969, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 3402, 1045.5625, -300.6016, 72.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 13206, 1072.9531, -289.1797, 72.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1093.3047, -293.7813, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1096.1563, -291.2656, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);
    RemoveBuildingForPlayer(playerid, 3286, 1099.1172, -358.4766, 77.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 3175, 1107.5938, -358.5156, 72.7969, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1107.1172, -368.5703, 73.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3253, 1106.6406, -319.8750, 73.7422, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1106.4922, -330.0234, 73.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1100.9141, -329.9297, 73.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1106.5469, -328.1641, 73.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 3250, 1110.2422, -298.9453, 73.0391, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1101.6719, -291.3750, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1107.2656, -291.4609, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 672, 1097.4688, -314.2109, 73.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 3175, 1114.2969, -353.8203, 72.7969, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1117.5781, -330.2109, 73.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1112.0000, -330.1250, 73.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 656, 1116.4453, -326.7578, 72.9375, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1112.7813, -291.5703, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1118.3750, -291.6641, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1120.4297, -327.7656, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1121.0234, -294.5234, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1120.6250, -316.7344, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1120.9297, -300.1172, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1120.8203, -305.6328, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1120.7344, -311.2188, 73.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 1120.5391, -322.2500, 73.5703, 0.25);
    //Palomino Creek random
    RemoveBuildingForPlayer(playerid, 1351, 2218.4453, 52.2734, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2234.1328, 97.2188, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2283.5625, 36.0313, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2283.5625, 36.0313, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2283.5625, 86.3594, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2304.3438, 97.0781, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2469.3516, 31.4609, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2404.2109, 47.0078, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2458.6797, 51.9063, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2539.2188, 31.4609, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2528.5469, 51.9063, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 3408, 2213.7734, -83.9609, 25.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1419, 2236.2500, -108.3594, 25.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1419, 2242.0313, -108.3594, 25.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1419, 2244.1172, -110.4531, 26.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 1419, 2244.1172, -114.5469, 26.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 3407, 2244.6328, -108.7188, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3408, 2267.1016, -108.5078, 25.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2288.5078, -88.1016, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 3408, 2295.0391, -108.6094, 25.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1407, 2311.6875, -108.4219, 26.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 1407, 2306.2344, -108.4219, 26.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 1407, 2316.4297, -108.4219, 26.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 3407, 2323.2969, -108.7188, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3407, 2213.4375, -57.0547, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3407, 2213.4375, -50.1641, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2349.3047, -38.5703, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2283.5625, -34.1641, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1418, 2253.1563, -18.2656, 26.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1418, 2256.7188, -18.2656, 26.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1418, 2264.6016, -18.2656, 26.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1418, 2261.0391, -18.2656, 26.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1418, 2275.0156, -18.2656, 26.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1418, 2268.1172, -18.2656, 26.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3407, 2282.8750, -18.2031, 25.4688, 0.25);
    RemoveBuildingForPlayer(playerid, 3408, 2243.8750, -18.0703, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2338.4297, -17.8516, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1407, 2431.6563, -38.5078, 26.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 1407, 2451.1797, -38.5078, 26.2266, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2388.1328, -17.8516, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 2474.4453, -2.9922, 25.4375, 0.25);
    //Ferma Palomino
    RemoveBuildingForPlayer(playerid, 13108, 1984.4141, 157.2656, 43.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 3376, 1925.1250, 160.0938, 40.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1912.9297, 151.4141, 37.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1899.5078, 164.2734, 37.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 698, 1891.6875, 176.0234, 39.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1889.1563, 179.8047, 35.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1898.8672, 174.1094, 36.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1907.7656, 181.7813, 36.9922, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1935.1875, 142.8984, 37.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 3375, 1925.1250, 160.0938, 40.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1919.2969, 179.1328, 37.0313, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, 1944.2656, 172.2891, 37.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 790, 1959.4141, 151.1094, 35.6875, 0.25);
    RemoveBuildingForPlayer(playerid, 1428, 1982.4766, 154.2344, 33.3438, 0.25);
    RemoveBuildingForPlayer(playerid, 1428, 1984.2656, 154.3438, 34.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 1428, 1981.3125, 154.7344, 45.0313, 0.25);
    RemoveBuildingForPlayer(playerid, 13109, 1984.4141, 157.2656, 43.5000, 0.25);
    //Montgomery random
    RemoveBuildingForPlayer(playerid, 1351, 1248.7969, 184.3203, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1244.6875, 257.5156, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1277.5000, 248.2031, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1288.2500, 261.0078, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1290.3125, 237.1953, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1301.3516, 250.4688, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1318.7344, 301.2656, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1305.9297, 312.2656, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1316.6719, 325.0703, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1334.1484, 240.6797, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1329.7734, 314.5391, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1380.2266, 220.3125, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1364.4609, 281.1328, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1227.1719, 341.6094, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1270.9063, 345.2344, 18.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1351, 1325.9297, 358.0781, 18.4766, 0.25);
    //MALL
    RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 10.0);
    RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 10.0);
    RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);
    RemoveBuildingForPlayer(playerid, 615, 1147.6016, -1416.8750, 13.9531, 0.25);//POD
    //LSPD - EXTERIOR
    RemoveBuildingForPlayer(playerid, 647, 1541.4766, -1648.4531, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.7422, -1638.9141, 14.4375, 0.25);
    //GANTON - TYRANDE
    RemoveBuildingForPlayer(playerid, 1307, 2263.5234, -1742.1953, 12.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 1307, 2295.7031, -1742.1953, 12.7500, 0.25);
    //SPITAL - IULY
    RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1320.8594, 15.9453, 0.25);

    //MAIN STREET SOUTH
    RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1753.5859, 12.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1729.9375, 12.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1780.1094, 12.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1808.4922, 12.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1839.8672, 12.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 6253, 1305.4688, -1619.7422, 13.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1304.1172, -1696.7969, 12.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1305.6719, -1669.8984, 12.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1305.5625, -1641.5313, 12.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1305.5625, -1614.8281, 12.2891, 0.25);
    RemoveBuildingForPlayer(playerid, 6046, 1305.4688, -1619.7422, 13.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1305.6719, -1583.7031, 12.5859, 0.25);
    //24-7 GARA - IULY
    RemoveBuildingForPlayer(playerid, 4983, 1961.0313, -1871.4063, 23.7734, 0.25);

    //primarie
    RemoveBuildingForPlayer(playerid, 713, 1407.1953, -1749.3125, 13.0938, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1405.2344, -1821.1172, 13.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1417.9766, -1832.5313, 11.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1405.5781, -1831.6953, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 4174, 1435.7656, -1823.6641, 15.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1404.9141, -1765.2656, 12.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 4173, 1427.2734, -1756.1797, 15.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1415.3125, -1748.5625, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1429.5313, -1748.4219, 12.9063, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1438.0313, -1747.9375, 13.4453, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1447.9063, -1748.2266, 12.9063, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1516.0000, -1748.6016, 13.0078, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1549.5313, -1832.3125, 12.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1555.6641, -1830.5938, 13.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 4175, 1524.4141, -1823.8516, 15.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1554.8203, -1816.1563, 13.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1553.2578, -1764.8125, 12.7969, 0.25);
    RemoveBuildingForPlayer(playerid, 4172, 1534.7656, -1756.1797, 15.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1533.2656, -1749.0234, 12.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1522.1641, -1748.5703, 13.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1553.7031, -1747.9375, 13.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.4453, -1713.3047, 14.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.2969, -1702.6016, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1693.3906, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1687.1016, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1664.6250, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1658.3438, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.4766, -1648.4531, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.7422, -1638.9141, 14.4375, 0.25);
    //LITTLE ITALY
    RemoveBuildingForPlayer(playerid, 1227, 1092.0078, -1881.2813, 13.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 1092.8438, -1879.6016, 12.8594, 0.25);
    RemoveBuildingForPlayer(playerid, 1635, 1091.8828, -1878.3750, 16.0391, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 1093.5391, -1878.6094, 12.8594, 0.25);
    RemoveBuildingForPlayer(playerid, 1227, 1175.3828, -1877.5625, 13.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1227, 1091.9844, -1876.8281, 13.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1227, 1101.9922, -1874.9766, 13.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1227, 1117.4688, -1874.9766, 13.3047, 0.25);
    //PARCARE CONFERENCE CENTER
    RemoveBuildingForPlayer(playerid, 713, 1109.6953, -1752.6172, 11.8516, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1098.4141, -1725.7422, 12.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1055.2813, -1725.7422, 12.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1775.6094, 13.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1049.7891, -1757.1172, 12.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1752.2500, 13.9766, 0.25);
    
    return 1;   
}


stock AddHousesInteriors()
{
    //2 Room house
    CreateDynamicObject(14755, -79.76019, 1375.42126, 1079.20508,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, -80.68050, 1382.76636, 1077.94690,   0.00000, 0.00000, 0.00000); //Door
    //2 Room house

    //2 Room house
    CreateDynamicObject(14756, -48.48457, 1458.49207, 1086.61377,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, -47.69450, 1457.73669, 1084.60840,   0.00000, 0.00000, 90.00000); //Door
    //2 Room house

    //3 Room house
    CreateDynamicObject(14748, 41.38534, 1440.95935, 1083.41199,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 46.51220, 1438.62793, 1081.40894,   0.00000, 0.00000, 90.00000); //Door
    //3 Room house

    //3 Room house & two story
    CreateDynamicObject(14750, 11.03331, 1314.19482, 1088.33093,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 6.96000, 1304.85022, 1081.82263,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house & two story

    //4 Room house & two story
    CreateDynamicObject(14754, 85.66241, 1280.42249, 1082.82739,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 82.19940, 1271.31091, 1078.86523,   0.00000, 0.00000, 0.00000); //Door
    //4 Room house & two story

    //4 Room house & two story (More expensive)
    CreateDynamicObject(14758, 155.35648, 1409.17212, 1087.30750,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 154.62061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
    CreateDynamicObject(1506, 156.12061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
    //4 Room house & two story (More expensive)

    //3 Room house
    CreateDynamicObject(14714, 289.94763, 1509.23218, 1079.22510,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 289.17270, 1501.17688, 1077.42126,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house

    //3 Room house
    CreateDynamicObject(14700, 329.35416, 1516.43005, 1086.31531,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 328.56949, 1512.34375, 1084.81165,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house

    //2 Room house
    CreateDynamicObject(14711, 382.01254, 1498.42480, 1080.69409,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 391.08289, 1505.09924, 1079.09644,   0.00000, 0.00000, 90.00000); //Door
    //2 Room house

    //3 Room house
    CreateDynamicObject(14710, 366.74869, 1381.78625, 1080.31787,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 376.35840, 1377.81616, 1078.80579,   0.00000, 0.00000, 90.00000); //Door
    //3 Room house

    //3 Room house
    CreateDynamicObject(14701, 448.67178, 1363.61853, 1083.28748,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 447.54770, 1353.26965, 1081.21570,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house

    //4 Room house & 2 story
    CreateDynamicObject(14703, 506.95187, 1366.91003, 1080.07947,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1504, 508.85950, 1353.45654, 1075.78345,   0.00000, 0.00000, 0.00000); //Door
    CreateDynamicObject(14722, 510.94690, 1363.57544, 1078.67737,   0.00000, 0.00000, 0.00000); //Stairs
    CreateDynamicObject(14724, 510.99319, 1363.60266, 1078.67590,   0.00000, 0.00000, 0.00000); //Stairs
    CreateDynamicObject(14715, 510.92340, 1363.51001, 1078.70215,   0.00000, 0.00000, 0.00000); //Stairs
    CreateDynamicObject(14723, 510.91971, 1363.70605, 1078.84021,   0.00000, 0.00000, 0.00000); //Stairs
    //4 Room house & 2 story

    //3 Room house & strip
    CreateDynamicObject(14736, 755.25836, 1419.45801, 1102.58032,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(14738, 753.20190, 1415.76831, 1104.04199,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1504, 744.47321, 1411.75403, 1101.42236,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house & strip

    //2 Room house
    CreateDynamicObject(14713, 289.97849, 1289.53406, 1079.25183,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 294.37189, 1284.51709, 1077.43616,   0.00000, 0.00000, 0.00000); //Door
    //2 Room house

    //2 Room house
    CreateDynamicObject(14718, 188.29053, 1293.25732, 1081.13208,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 190.53439, 1288.35291, 1081.13416,   0.00000, 0.00000, 0.00000); //Door
    //2 Room house

    //2 Room house
    CreateDynamicObject(14712, 287.90448, 1249.52588, 1083.25146,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 290.09601, 1241.95874, 1081.70117,   0.00000, 0.00000, 0.00000); //Door
    //2 Room house

    //2 Room house
    CreateDynamicObject(14709, 245.01108, 1155.45520, 1081.63599,   0.00000, 0.00000, 0.00000); //Interior
    //2 Room house

    //3 Room house
    CreateDynamicObject(14735, 342.67169, 1081.66528, 1082.87891,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 325.45471, 1074.26355, 1081.25549,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house

    //Richman house 5 rooms & 2 bathrooms
    CreateDynamicObject(14708, 200.11450, 1119.56934, 1083.97693,   0.00000, 0.00000, 0.00000); //Interior
    //Richman house 5 rooms & 2 bathrooms

    //Richman house 5 rooms & 2 bathrooms
    CreateDynamicObject(14706, 277.86502, 1069.62952, 1085.65552,   0.00000, 0.00000, 0.00000); //Interior
    //Richman house 5 rooms & 2 bathrooms

    //Richman house 5 rooms & 2 bathrooms
    CreateDynamicObject(14707, 275.53461, 992.44232, 1087.27319,   0.00000, 0.00000, 0.00000); //Interior
    //Richman house 5 rooms & 2 bathrooms

    //2 Room house (Small)
    CreateDynamicObject(15029, 2265.87500, -1122.75220, 1049.62781,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1535, 2260.34570, -1121.88794, 1047.87683,   0.00000, 0.00000, 90.00000); //Door
    //2 Room house (Small)

    //1 Room house (Small)
    CreateDynamicObject(15031, 2281.78003, -1121.99768, 1049.92285,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1535, 2284.04028, -1126.90771, 1049.91650,   0.00000, 0.00000, 0.00000); //Door
    //1 Room house (Small)

    //3 Room house
    CreateDynamicObject(15055, 2374.03271, -1102.76465, 1049.87073,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1504, 2369.77124, -1094.13245, 1048.61951,   0.00000, 0.00000, 0.00000); //Door
    //3 Room house

    //1 Room house (Very Small)
    CreateDynamicObject(15042, 2318.45508, -1230.66187, 1048.40820,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1501, 2312.65112, -1231.38013, 1046.40540,   0.00000, 0.00000, 0.00000); //Door
    //1 Room house (Very Small)

    //2 Room house (Small)
    CreateDynamicObject(15053, 2243.98071, -1024.30042, 1048.01758,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1535, 2243.21191, -1027.78198, 1046.76501,   0.00000, 0.00000, 0.00000); //Door
    //2 Room house (Small)

    //3 Room house
    CreateDynamicObject(15054, 2260.93286, -1251.45007, 1051.05786,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 2273.48657, -1243.43054, 1047.59131,   0.00000, 0.00000, 90.00000); //Door
    //3 Room house

    //4 Room house
    CreateDynamicObject(15041, 2158.54736, -1220.96997, 1050.11694,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 2149.11328, -1216.07935, 1048.11365,   0.00000, 0.00000, 0.00000); //Door
    //4 Room house

    //2 Room house
    CreateDynamicObject(15046, 2364.22144, -1082.74231, 1048.01733,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1498, 2363.47827, -1075.46021, 1046.76379,   0.00000, 0.00000, 0.00000); //Door
    //2 Room house

    //4 Room house (Rich man big)
    CreateDynamicObject(15048, 2364.55444, -1179.42346, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(15059, 2364.56909, -1179.41418, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1506, 2372.00317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
    CreateDynamicObject(1506, 2373.50317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
    //4 Room house (Rich man big)

    //Only one room (TINY for las colinas)
    CreateDynamicObject(14859, 245.20708, 321.97745, 1000.59143,   0.00000, 0.00000, 0.00000); //Interior
    //Only one room (TINY for las colinas)

    //Only one room (TINY for las colinas)
    CreateDynamicObject(14865, 269.22012, 322.22049, 998.14349,   0.00000, 0.00000, 0.00000); //Interior
    //Only one room (TINY for las colinas)

    //Only one room (TINY for las colinas)
    CreateDynamicObject(14889, 363.51450, 304.98868, 998.14722,   0.00000, 0.00000, 0.00000); //Interior
    //Only one room (TINY for las colinas)

    //Only one room (TINY for las colinas)
    CreateDynamicObject(15033, 2177.35718, -1069.85181, 1049.47449,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1535, 2190.13110, -1074.29504, 1049.47742,   0.00000, 0.00000, 90.00000); //Door
    //Only one room (TINY for las colinas)

    //Only two rooms (TINY for las colinas)
    CreateDynamicObject(15034, 2254.38940, -1108.71704, 1049.87268,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(1535, 2254.09644, -1113.33044, 1048.11633,   0.00000, 0.00000, 0.00000); //Door
    //Only two rooms (TINY for las colinas)

    //Only two rooms (TINY for las colinas)
    CreateDynamicObject(15030, 2293.09204, -1092.09229, 1049.62341,   0.00000, 0.00000, 0.00000); //Interior
    CreateDynamicObject(2904, 2298.69800, -1093.70605, 1048.97290,   0.00000, 0.00000, 90.00000); //Door
    CreateDynamicObject(1535, 2298.64600, -1094.47375, 1047.87195,   0.00000, 0.00000, 90.00000); //Door
    //Only two rooms (TINY for las colinas)

}

stock FullResetPlayerClothes(playerid)
{
    for(new i = 0; i < MAX_PLAYER_TOYS; i++)
    {
        if(PlayerToys[playerid][i][ptToyOn])
        {
            RemovePlayerToyFromSlot(playerid, i);
        }
    }
    return 1;
}

stock MakePlayerWounded(playerid)
{
    if(PlayerInfo[playerid][pJailed] == 0)
    {
        SetIntVar(playerid, "JustDied", 1);
        PlayerInfo[playerid][pDied] = 1;
        SavePlayerPos(playerid);
    }
    return 1;
}

stock CheckPlayerCurrentCall(playerid)
{
    new caller = GetIntVar(playerid, "CallWith");
    if(PlayerIsOn(caller))
    {
        if(GetIntVar(caller, "OnCall") == 1 && GetIntVar(playerid, "OnCall") == 1)
        {
            CellMSG(caller, "Linia este moarta.");
            SetIntVar(playerid, "CallCost", GetIntVar(playerid, "callTime")/10);
            format(msg, sizeof(msg), "~w~Cost Apel~n~~r~$%d",GetIntVar(caller, "CallCost"));
            GameTextForPlayer(caller, msg, 5000, 1);
            GiveCash(caller, -GetIntVar(playerid, "CallCost"));
            phoneAnim(caller, 0);
            RemoveVar(caller, "CallCost");
            RemoveVar(caller, "CallTime");
            RemoveVar(caller, "CallWith");
            RemoveVar(caller, "GettingCall");
            RemoveVar(caller, "OnCall");
            RemoveVar(caller, "IsCalling");
            RemoveVar(playerid, "CallCost");
            RemoveVar(playerid, "CallTime");
            RemoveVar(playerid, "CallWith");
            RemoveVar(playerid, "GettingCall");
            RemoveVar(playerid, "OnCall");
            RemoveVar(playerid, "IsCalling");
        }
    }
    return 1;
}

stock RemovePlayerBoomBox(playerid)
{
    if(GetIntVar(playerid, "BoomBoxOn") == 1)
    {
        StopBoomBoxMusic(playerid);
        DestroyDynamicArea(GetIntVar(playerid, "BoomBoxArea"));
        DestroyDynamicObject(GetIntVar(playerid, "BoomBoxObject"));
    }
}

stock ShowBoomBoxStations(playerid)
{
    new str[2000];
    for(new x; x < sizeof(BoomBoxInfo); x++)
    {
        format(str, sizeof(str), "%s"EMBED_YELLOW"%s\n", str, BoomBoxInfo[x][boomboxUrlName]);
    }
    ShowDialog(playerid, Show:<ChangeBoomBoxURL>, DIALOG_STYLE_LIST, "{FF0000}Selecteaza una dintre statiile urmatoare", str, "Cumpara", "Renunta");
    return 1;
}

stock PlayPlayerBoomBoxURL(playerid, urlname[], url[])
{
    if(GetIntVar(playerid, "SelectingHouseRadio") == 1)
    {
        new house = HouseEntered[playerid];
        format(msg, sizeof(msg), "> %s a pornit statia de radio pe canalul %s.", GetNameWithMask(playerid), urlname);
        SetPlayerChatBubble(playerid, msg, COLOR_GREEN2, 15.0, 10000);
        SCM(playerid, COLOR_GREEN2, msg);
        HouseInfo[house][hRadioOn] = 1;
        format(HouseInfo[house][hRadioURL], 256, "%s", url);
        StartMusicInHouse(house, url);
    }
    else if(GetIntVar(playerid, "SelectingBusinessRadio") == 1)
    {
        new biz = BizEntered[playerid];
        format(msg, sizeof(msg), "> %s a pornit statia de radio pe canalul %s.", GetNameWithMask(playerid), urlname);
        SetPlayerChatBubble(playerid, msg, COLOR_GREEN2, 15.0, 10000);
        SCM(playerid, COLOR_GREEN2, msg);
        BizInfo[biz][bizRadioOn] = 1;
        format(BizInfo[biz][bizRadioURL], 256, "%s", url);
        StartMusicInBusiness(biz, url);
    }
    else if(GetIntVar(playerid, "SelectingCarRadio") == 1)
    {
        new vehicle = GetPlayerVehicleID(playerid);
        format(msg, sizeof(msg), "> %s a pornit statia de radio pe canalul %s.", GetNameWithMask(playerid), urlname);
        SetPlayerChatBubble(playerid, msg, COLOR_GREEN2, 15.0, 10000);
        SCM(playerid, COLOR_GREEN2, msg);
        VehicleInfo[vehicle][carRadioOn] = 1;
        format(VehicleInfo[vehicle][carRadioURL], 256, "%s", url);
        StartMusicInVehicle(vehicle, url);
    }
    else
    {
        format(msg, sizeof(msg), "> %s a pornit statia de radio pe canalul %s.", GetNameWithMask(playerid), urlname);
        SetPlayerChatBubble(playerid, msg, COLOR_GREEN2, 15.0, 10000);
        SCM(playerid, COLOR_GREEN2, msg);
        SetStringVar(playerid, "BoomBoxURL", url);
        SetIntVar(playerid, "BoomBoxMusicOn", 1);
        StartMusicNearBoomBox(playerid, url);
    }
    return 1;
}

stock StartMusicInVehicle(vehicle, url[])
{
    if(VehicleInfo[vehicle][carRadioOn] == 1)
    {
        foreach(new i : Player)
        {
            if(GetPlayerVehicleID(i) == vehicle)
            {
                StopAudioStreamForPlayer(i);
                PlayAudioStreamForPlayer(i, url);
            }
        }
    }
    return 1;
}

stock StartMusicInHouse(house, url[])
{
    if(HouseInfo[house][hRadioOn] == 1)
    {
        foreach(new i : Player)
        {
            if(HouseEntered[i] == house)
            {
                StopAudioStreamForPlayer(i);
                PlayAudioStreamForPlayer(i, url);
            }
        }
    }
    return 1;
}

stock StartMusicInBusiness(biz, url[])
{
    if(BizInfo[biz][bizRadioOn] == 1)
    {
        foreach(new i : Player)
        {
            if(BizEntered[i] == biz)
            {
                StopAudioStreamForPlayer(i);
                PlayAudioStreamForPlayer(i, url);
            }
        }
    }
    return 1;
}

stock StartMusicNearBoomBox(playerid, url[])
{
    if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea") && GetIntVar(playerid, "BoomBoxOn") == 1))
    {
        foreach(new i : Player)
        {
            if(IsPlayerInDynamicArea(i, GetIntVar(playerid, "BoomBoxArea")))
            {
                StopAudioStreamForPlayer(i);
                PlayAudioStreamForPlayer(i, url, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"), 50.0, 1);
            }
        }
    }
    return 1;
}

// Gamemode restart
forward GameModeRestart();
public GameModeRestart()
{
    new string[128];
    format(string, sizeof(string), "Serverul se restarteaza in 10 secunde!");
    foreach(new i : Player)
    {
        DisablePlayerCheckpoint(i);
        GameTextForPlayer(i, string, 4000, 5);
        SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
        SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
        GlobalSaving();
    }
    SetTimer("GameModeRestartFunction", 6000, 0);
    return 1;
}

forward GameModeRestartFunction();
public GameModeRestartFunction()
{
    GameModeExit();
}

stock StopBoomBoxMusic(playerid)
{
    if(GetIntVar(playerid, "BoomBoxOn") == 1)
    {
        foreach(new i : Player)
        {
            if(IsPlayerInDynamicArea(i, GetIntVar(playerid, "BoomBoxArea")))
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

stock StopCarBoomBox(vehicle)
{
    if(VehicleInfo[vehicle][carRadioOn] == 1)
    {
        VehicleInfo[vehicle][carRadioOn] = 0;
        foreach(new i : Player)
        {
            if(GetPlayerVehicleID(i) == vehicle)
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

stock StopHouseBoomBox(house)
{
    if(HouseInfo[house][hRadioOn] == 1)
    {
        HouseInfo[house][hRadioOn] = 0;
        foreach(new i : Player)
        {
            if(HouseEntered[i] == house)
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

stock StopBusinessBoomBox(biz)
{
    if(BizInfo[biz][bizRadioOn] == 1)
    {
        BizInfo[biz][bizRadioOn] = 0;
        foreach(new i : Player)
        {
            if(BizEntered[i] == biz)
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

stock LoadHouseFurnitures(houseid)
{
    format(query, sizeof(query), "SELECT * FROM `furnitures` WHERE `houseid` = %d", HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, true, "OnFurnituresLoad", "i", houseid);
    return 1;
}

stock GetNextVehicleTrunkSlot(vehicleid)
{
    new i=1;
    while(i != MAX_VEHICLE_WEAPONS)
    {
        if(VehicleInfo[vehicleid][carTrunkWep][i] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetVehicleTrunkWeps(vehicleid)
{
    new count = 0;
    for(new i = 1; i < MAX_VEHICLE_WEAPONS; i++)
    {
        if(VehicleInfo[vehicleid][carTrunkWep][i] != 0)
        {
            count++;
        }
    }
    return count;
}

stock GetNextFurnitureSlot(houseid)
{
    new i=1;
    while(i != MAX_FURNITURE)
    {
        if(FurnitureInfo[houseid][i][fOn] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetHouseFurnitures(houseid)
{
    new count = 1;
    for(new i = 1; i < MAX_FURNITURE; i++)
    {
        if(FurnitureInfo[houseid][i][fOn] == 1)
        {
            count++;
        }
    }
    return count;
}
//================ APB System =============================
stock OnApbCreate(number, charge[], suspect[], name[])
{
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `apbs` (id, charge, suspect, officer) VALUES (%d, '%s', '%s', '%s')", number, charge, suspect, name);
    mysql_tquery(dbHandle, query);
	#if defined debugOn 
		printf(query);
	#endif
    return 1;
}

stock OnPlayerBuyFurniture(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z)
{
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `furnitures` (model, name, houseid, interior, virworld, marketprice, posx, posy, posz) VALUES (%d, '%s', %d, %d, %d, %d, %f, %f, %f)",
    model, name, HouseInfo[houseid][hID], interior, world, price, x, y ,z);
    mysql_tquery(dbHandle, query, "OnFurnitureInsert", "ii", houseid, furnitureslot);
    //=================================================================================================//
    FurnitureInfo[houseid][furnitureslot][fHouseID] = houseid;
    FurnitureInfo[houseid][furnitureslot][fInterior] = interior;
    FurnitureInfo[houseid][furnitureslot][fVirtualWorld] = world;
    FurnitureInfo[houseid][furnitureslot][fMarketPrice] = price;
    FurnitureInfo[houseid][furnitureslot][fModel] = model;
    FurnitureInfo[houseid][furnitureslot][fPosX] = x;
    FurnitureInfo[houseid][furnitureslot][fPosY] = y;
    FurnitureInfo[houseid][furnitureslot][fPosZ] = z;
    FurnitureInfo[houseid][furnitureslot][fPosRX] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosRY] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosRZ] = 0.0;
    format(FurnitureInfo[houseid][furnitureslot][fName], 128, "%s", name);
    FurnitureInfo[houseid][furnitureslot][fOn] = 1;
    //===================================================================================================//
    return 1;
}

stock OnPlayerEditedFurniture(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    format(query, sizeof(query), "UPDATE `furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",
    x, y, z, rx, ry, rz, FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fID]);
    mysql_function_query(dbHandle, query, true, "OnFurnitureUpdatePos", "iiffffff", playerid, furnitureslot, x, y, z, rx, ry, rz);
    return 1;
}

stock OnPlayerSellFurniture(houseid, furnitureslot)
{
    //===========================================================
    FurnitureInfo[houseid][furnitureslot][fInterior] = 0;
    FurnitureInfo[houseid][furnitureslot][fVirtualWorld] = 0;
    FurnitureInfo[houseid][furnitureslot][fMarketPrice] = 0;
    FurnitureInfo[houseid][furnitureslot][fModel] = 0;
    FurnitureInfo[houseid][furnitureslot][fPosX] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosY] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosZ] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosRX] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosRY] = 0.0;
    FurnitureInfo[houseid][furnitureslot][fPosRZ] = 0.0;
    format(FurnitureInfo[houseid][furnitureslot][fName], 128, "Null");
    FurnitureInfo[houseid][furnitureslot][fOn] = 0;
    HouseInfo[houseid][hFurnitures] -= 1;
    UpdateHouseInfo(houseid);
    format(query, sizeof(query), "DELETE FROM `furnitures` WHERE `id` = %d", FurnitureInfo[houseid][furnitureslot][fID]); // initial query
    mysql_function_query(dbHandle, query, false, "", "");
	#if defined debugOn 
		printf(query);
	#endif
    return 1;
}

stock GetWeaponNameEx(weaponid)
{
    new wname[64];
    GetWeaponName(weaponid, wname, sizeof(wname));
    return wname;
}

stock SetPlayerBubble(playerid, text[])
{
    new string[128];
    new string2[128];
    format(string2, sizeof(string2) , "%s", text);
    format(string, sizeof(string), "* %s %s", GetNameWithMask(playerid), string2);
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 15.0, 10000);
    SCM(playerid, COLOR_PURPLE, string);
    return 1;
}

stock CheckPrimaryWeapon(playerid)
{
    if(IsPrimarySlotTaken(playerid) && IsPrimaryWeapon(GetPlayerWeapon(playerid)) && GetWeaponAmmo(playerid, GetPrimaryWeapon(playerid)) > PlayerInfo[playerid][pAmmo1])
        return false;
    else
        return true;
}

stock CheckSecondaryWeapon(playerid)
{
    if(IsSecondarySlotTaken(playerid) && IsSecondaryWeapon(GetPlayerWeapon(playerid)) && GetWeaponAmmo(playerid, GetSecondaryWeapon(playerid)) > PlayerInfo[playerid][pAmmo2])
        return false;
    else
        return true;
}

stock PlayerHoldingWeapon(playerid, weaponid)
{
    if(GetPlayerWeapon(playerid) == weaponid && Weapons[playerid][weaponid] == 1)
        return true;
    else
        return false;
}

stock GetWeaponHolding(playerid)
{
    new wepid = GetPlayerWeapon(playerid);
    if(wepid > 0 && Weapons[playerid][wepid] == 1)
        return wepid;
    else
        return 0;
}

stock IsPlayerHoldingWeapon(playerid)
{
    new wepid = GetPlayerWeapon(playerid);
    if(wepid > 0 && Weapons[playerid][wepid] == 1)
        return true;
    else
        return false;
}

stock CheckWeapon(playerid, weaponid)
{
    if(Weapons[playerid][weaponid] == 1)
        return true;
    else
        return false;
}

stock GetNextWepDropID()
{
    new i=0;
    while(i != MAX_WEP_DROPS)
    {
        if(WeaponDropInfo[i][gunDropped] == 0)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock GetClosestDroppedGun(playerid)
{
    new i=0;
    while(i != MAX_WEP_DROPS)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, WeaponDropInfo[i][gunPosX], WeaponDropInfo[i][gunPosY], WeaponDropInfo[i][gunPosZ]+1) && WeaponDropInfo[i][gunDropped] == 1)
        {
            return i;
        }
        i++;
    }
    return -1;
}

stock SetPlayerChannel(playerid, channel, slot)
{
    PlayerInfo[playerid][pChannels][slot] = channel;
    if(slot == GetPlayerSlot(playerid))
    {
        SetRadioSlot(playerid, slot);
    }
    return 1;
}

stock GetChannelFromSlot(playerid, slot)
{
    return PlayerInfo[playerid][pChannels][slot];
}

stock SetRadioSlot(playerid, slot)
{
    format(msg, sizeof(msg), "~b~Canal: ~h~~g~%d", PlayerInfo[playerid][pChannels][slot]);
    PlayerTextDrawSetString(playerid, ChannelDraw[playerid], msg);
    format(msg, sizeof(msg), "~b~Slot: ~h~~g~%d", slot);
    PlayerTextDrawSetString(playerid, SlotDraw[playerid], msg);
    PlayerInfo[playerid][pSlot] = slot;
    return 1;
}

stock GetPlayerChannel(playerid) return PlayerInfo[playerid][pChannels][GetPlayerSlot(playerid)];
stock GetPlayerSlot(playerid) return PlayerInfo[playerid][pSlot];

stock AuthPassCorrect(channel, authpass[])
{
    if(CompareStrings(authpass, RadiosInfo[channel][radioPass]))
        return true;
    else
        return false;
}

stock ResetPlayerChannel(playerid, slot)
{
    PlayerInfo[playerid][pChannels][slot] = 0;
    if(slot == GetPlayerSlot(playerid))
    {
        SetRadioSlot(playerid, slot);
    }
    return 1;
}

stock HasRadioChannel(playerid, channel)
{
    for(new i = 1; i < MAX_RADIO_SLOTS; i++)
    {
        if(PlayerInfo[playerid][pChannels][i] == channel)
            return true;
    }
    return false;
}

stock GetSlotFromChannel(playerid, channel)
{
    for(new i = 1; i < MAX_RADIO_SLOTS; i++)
    {
        if(PlayerInfo[playerid][pChannels][i] == channel)
            return i;
    }
    return 0;
}

stock ShowRadioTextDraw(playerid)
{
    PlayerTextDrawShow(playerid, RadioDraw[playerid]);
    PlayerTextDrawShow(playerid, ChannelDraw[playerid]);
    PlayerTextDrawShow(playerid, SlotDraw[playerid]);
    SetRadioSlot(playerid, GetPlayerSlot(playerid));
    return 1;
}

stock HideRadioTextDraw(playerid)
{
    PlayerTextDrawHide(playerid, RadioDraw[playerid]);
    PlayerTextDrawHide(playerid, ChannelDraw[playerid]);
    PlayerTextDrawHide(playerid, SlotDraw[playerid]);
    return 1;
}

stock StringHasSymbols(string[])
{
    for(new i = 0; i < strlen(string); i++)
    {
        switch(string[i])
        {
            case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return true;
            default: continue;
        }
    }
    return false;
}

stock StringHasLetters(string[])
{
    for(new i = 0; i < strlen(string); i++)
    {
        switch(string[i])
        {
            case 'a', 'b', 'c', 'd','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z': return true;
            default: continue;
        }
    }
    return false;
}

stock FixVehicle(vehicleid)
{
    SetVehicleHealth(vehicleid, 1000.0);
    RepairVehicle(vehicleid);
    return 1;
}

stock PutPlayerInOldCar(playerid)
{
    new seatid = GetPlayerVehicleSeat(playerid);
    new vehicleid = GetPlayerVehicleID(playerid);
    PutPlayerInVehicle(playerid, vehicleid, seatid);
    return 1;
}

stock PlayerLogged(playerid)
{
    if(GetIntVar(playerid, "gLogged") == 1)
        return true;
    else
        return false;
}

stock ShowPlayerName(playerid, bool:show)
{
    if(show)
    {
        foreach(new i : Player)
        {
            ShowPlayerNameTagForPlayer(i, playerid, 1);
        }
    }
    else
    {
        foreach(new i : Player)
        {
            ShowPlayerNameTagForPlayer(i, playerid, 0);
        }
    }
    return 1;
}

stock RemovePlayerMask(playerid)
{
    PlayerInfo[playerid][pMask] = 0;
    Mask{playerid} = false;
    maskOn{playerid} = false;
    ShowPlayerName(playerid, true);
    return 1;
}

stock CompareStrings(string[], string2[])
{
    if(!strcmp(string, string2, true))
        return true;
    else
        return false;
}

//============================== Security Mode ==========================================//

stock LoadSerials()
{
    new playerSerial[100];
    foreach(new i : Player)
    {
        gpci(i, playerSerial, sizeof(playerSerial));
        format(query, sizeof (query), "SELECT * FROM `bans` WHERE `playerSerial` = '%s'", playerSerial);
        mysql_function_query(dbHandle, query, true, "LoadPlayerSerials", "s", playerSerial);
		#if defined debugOn 
			printf(query);
		#endif
    }
    return 1;
}

stock CheckSerial(playerid)
{
    new playerSerial[100];
    gpci(playerid,playerSerial,sizeof(playerSerial));
    format(query, sizeof (query), "SELECT * FROM `bans` WHERE `playerSerial` = '%s'", playerSerial);
    mysql_function_query(dbHandle, query, true, "OnSerialCheck", "i", playerid);
    return 1;
}

//================================================ Security Mode =========================================//

stock CheckBan(playerid)
{
    new Split_Ip[2];
    new playerip3[16];
    GetPlayerIp(playerid, playerip3, sizeof(playerip3));
    gpci(playerid,playerserial,sizeof(playerserial));
    sscanf(playerip3, "p<.>ii{ii}", Split_Ip[0], Split_Ip[1]);
    format(query, sizeof (query), "SELECT * FROM `bans` WHERE `playerSerial` = '%s' AND `playerIP` LIKE '%i.%i.%%' LIMIT 1", playerserial, Split_Ip[0], Split_Ip[1]);
    mysql_function_query(dbHandle, query, true, "OnBanCheck", "i", playerid);
    return 1;
}

stock CheckUserBan(playerid)
{
    format(query, sizeof (query), "SELECT `banned` FROM `users` WHERE `name` = '%s'", GetName(playerid));
    mysql_function_query(dbHandle, query, true, "OnUserBanCheck", "i", playerid);
    return 1;
}

stock SetPlayerToLogin(playerid)
{
    new Split_Ip[2];
    new playerip3[16];
    GetPlayerIp(playerid, playerip3, sizeof(playerip3));
    gpci(playerid,playerserial,sizeof(playerserial));
    sscanf(playerip3, "p<.>ii{ii}", Split_Ip[0], Split_Ip[1]);
    format(query, sizeof (query), "SELECT * FROM `bans` WHERE `playerSerial` = '%s' AND `playerIP` LIKE '%i.%i.%%' LIMIT 1", playerserial, Split_Ip[0], Split_Ip[1]);
    mysql_function_query(dbHandle, query, true, "OnPlayerAttemptLogin", "i", playerid);
	#if defined debugOn
		printf(query);
	#endif
    return 1;
}

stock SetPlayerToLogin2(playerid)
{
    new IP[100];
    GetPlayerIp(playerid, IP, sizeof(IP));
    format(query, sizeof(query), "SELECT * FROM `users` WHERE `playerIP` = '%s'", IP);
    mysql_function_query(dbHandle, query, true, "OnPlayerAttemptLogin2", "i", playerid);
    return 1;
}

stock AddPlayerNotes(playerid)
{
    format(query, sizeof(query), "SELECT * FROM `player_notes` WHERE `pid` = %d", PlayerInfo[playerid][pDatabaseID]);
    mysql_function_query(dbHandle, query, true, "OnPlayerLoadNotes", "i", playerid);
    return 1;
}

stock ResetPlayerVariables(playerid)
{
    //-----------------------------------------------------------------
    gOOC{playerid} = true; DoorEntered[playerid] = -1; HouseEntered[playerid] = -1; cellOn{playerid} = 1;  HospitalWait{playerid} = 0;
    maskOn{playerid} = false; Mask{playerid} = false; SkinSlot[playerid] = 0; VehColor1{playerid} = 0; VehColor2{playerid} = 0; Painting{playerid} = 0;
    pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0; spawnVehicle[playerid] = 0;
    JackingEngine[playerid] = 0; JackingLock[playerid] = 0;  DoorJacking[playerid] = 0; ToolKit{playerid} = false; IsSmoking{playerid} = false;
    IsModding{playerid} = false; BuyingPaintJob{playerid} = false; BizEntered[playerid] = -1; HireRequester[playerid] = INVALID_PLAYER_ID;
    TesterChat{playerid} = true; OnAnim{playerid} = false; JustCasinoed[playerid] = 0; DrunkLevel[playerid] = 0; GasCan{playerid} = false; FactionRequest[playerid] = INVALID_PLAYER_ID;
    CopDuty{playerid} = false; Cuffed{playerid} = false; TazerActive{playerid} = false; Tazed{playerid} = false; OnCCTV{playerid} = false; MDCAdd[playerid] = INVALID_PLAYER_ID;
    TowingCar[playerid] = INVALID_VEHICLE_ID; SwatDuty{playerid} = false; MedicDuty{playerid} = false; Trucking{playerid} = false; LoadingTruck{playerid} = 0; DroppingOff{playerid} = false;
    TruckVehicle[playerid] = INVALID_VEHICLE_ID; TruckTrailer[playerid] = INVALID_VEHICLE_ID; TruckingMoney[playerid] = 0; RefillPrice[playerid] = 0; RefillOffer[playerid] = INVALID_PLAYER_ID;
    RepairOffer[playerid] = INVALID_PLAYER_ID; VehicleToRepair[playerid] = INVALID_VEHICLE_ID; OldVehicle[playerid] = INVALID_VEHICLE_ID; RepairTime{playerid} = 0; GettingRepair{playerid} = false;
    TaxiDuty{playerid} = false; TaxiFare{playerid} = 2; TaxiStart{playerid} = false; TaxiMoney[playerid] = 0; TaxiMade[playerid] = 0; isAFK{playerid} = false; AFKTime[playerid] = 0; CarModel2[playerid] = -1;
    PickingTime{playerid} = 0; PlantingTime{playerid} = 0; Player_gpci[playerid] = 0; OfferSent[playerid] = 0; cheatID[playerid] = 0;
    //-----------------------------------------------------------------
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
        PeopleBlocking[playerid][i] = INVALID_PLAYER_ID;
    //-----------------------------------------------------------------
    for(new i = 0; i < 3; i++)
        RepairService[playerid][i] = 0;
    //-----------------------------------------------------------------
    for(new i = 0; i < 11; i++)
        RoadBlocks[playerid][i] = INVALID_OBJECT_ID;
    //-----------------------------------------------------------------
    for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
        PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
    //-----------------------------------------------------------------
    for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
        PlayerInfo[playerid][pTickets][i] = 0;
    //-----------------------------------------------------------------
    for(new i = 1; i < MAX_DRUGS; i++)
    {
        PlayerInfo[playerid][pDrug][i] = 0;
        PlayerInfo[playerid][pDrugAmount][i] = 0;
    }
    //-----------------------------------------------------------------
    for(new i = 1; i < MAX_OWNED_VEHICLES; i++)
    {
        PlayerInfo[playerid][pVehs][i] = 0;
    }
    //-----------------------------------------------------------------
    for(new i = 1; i < MAX_CONTACTS; i++)
    {
        PlayerInfo[playerid][pContacts][i] = 0;
    }
    //-----------------------------------------------------------------
    for(new i = 1; i < MAX_RADIO_SLOTS; i++)
    {
        PlayerInfo[playerid][pChannels][i] = 0;
        PlayerInfo[playerid][pAuthed][i] = 0;
    }
    //-----------------------------------------------------------------
    for(new i = 1; i < MAX_NOTES; i++)
    {
        format(PlayerNotes[playerid][i][nNote], 128, "Fara");
    }
    //-----------------------------------------------------------------
    for (new i = 0; i < 47; i ++)
        Weapons[playerid][i] = 0;
    //-----------------------------------------------------------------
    PlayerInfo[playerid][pRegistered] = 0;
    PlayerInfo[playerid][pCash] = 0;
    PlayerInfo[playerid][pBank] = 0;
    PlayerInfo[playerid][pSkin] = 0;
    PlayerInfo[playerid][pSex] = 0;
    PlayerInfo[playerid][pAge] = 0;
    format(PlayerInfo[playerid][pOrigin],256,"Fara");
    PlayerInfo[playerid][pSkin] = 0;
    PlayerInfo[playerid][pLevel] = 0;
    PlayerInfo[playerid][pExp] = 0;
    PlayerInfo[playerid][pHours] = 0;
    PlayerInfo[playerid][pAdmin] = 0;
    PlayerInfo[playerid][pHelper] = 0;
    PlayerInfo[playerid][pInt] = 0;
    PlayerInfo[playerid][pWorld] = 0;
    PlayerInfo[playerid][pJailed] = 0;
    PlayerInfo[playerid][pJailTime] = 0;
    PlayerInfo[playerid][pBanned] = 0;
    PlayerInfo[playerid][pWarns] = 0;
    PlayerInfo[playerid][pDonateRank] = 0;
    PlayerInfo[playerid][pCarLic] = 0;
    PlayerInfo[playerid][pWepLic] = 0;
    PlayerInfo[playerid][pFlyLic] = 0;
    PlayerInfo[playerid][pPosX] = 0.0;
    PlayerInfo[playerid][pPosY] = 0.0;
    PlayerInfo[playerid][pPosZ] = 0.0;
    PlayerInfo[playerid][pPosA] = 0.0;
    PlayerInfo[playerid][pDied] = 0;
    PlayerInfo[playerid][pFightStyle] = 0;
    PlayerInfo[playerid][pPen] = 0;
    format(PlayerInfo[playerid][pAttributes],64,"Fara");
    PlayerInfo[playerid][pPayCheckMade] = 0;
    PlayerInfo[playerid][pPayCheckMoney] = 0;
//  PlayerInfo[playerid][pUpgrade] = 0;
    PlayerInfo[playerid][pPayDayTime] = 0;
    PlayerInfo[playerid][pSHealth] = 0.0;
    PlayerInfo[playerid][pCellPhone] = 0;
    PlayerInfo[playerid][pNumber] = 0;
    PlayerInfo[playerid][pSavings] = 0;
    PlayerInfo[playerid][pHouseKey] = -1;
    PlayerInfo[playerid][pMeleeWep] = 0;
    PlayerInfo[playerid][pPerm1] = 0;
    PlayerInfo[playerid][pPerm2] = 0;
    PlayerInfo[playerid][pAmmo1] = 0;
    PlayerInfo[playerid][pAmmo2] = 0;
    PlayerInfo[playerid][pRadio] = 0;
    PlayerInfo[playerid][pCrashed] = 0;
    PlayerInfo[playerid][pMask] = 0;
    PlayerInfo[playerid][pBMX] = 0;
    PlayerInfo[playerid][pCarKey] = 0;
    PlayerInfo[playerid][pVehicles] = 0;
    PlayerInfo[playerid][pVehSlot] = 0;
    PlayerInfo[playerid][pSpareKey] = 0;
    PlayerInfo[playerid][pLighter] = 0;
    PlayerInfo[playerid][pCigars] = 0;
    PlayerInfo[playerid][pBizKey] = -1;
    PlayerInfo[playerid][pWorkOn] = -1;
    PlayerInfo[playerid][pWalk] = 0;
    PlayerInfo[playerid][pArmour] = 0.0;
    PlayerInfo[playerid][pHasArmour] = 0;
    PlayerInfo[playerid][pFaction] = 0;
    PlayerInfo[playerid][pRank] = 0;
    PlayerInfo[playerid][pBadgeNumber] = 0;
    PlayerInfo[playerid][pDriveWarns] = 0;
    PlayerInfo[playerid][pJailTime2] = 0;
    PlayerInfo[playerid][pArrested] = 0;
    PlayerInfo[playerid][pTalk] = 0;
    PlayerInfo[playerid][pSwat] = 0;
    PlayerInfo[playerid][pJob] = 0;
    PlayerInfo[playerid][pJobRank] = 0;
    PlayerInfo[playerid][pCareer] = 0;
    PlayerInfo[playerid][pSideJob] = 0;
    PlayerInfo[playerid][pSpawnType] = 0;
    PlayerInfo[playerid][pPrisoned] = 0;
    PlayerInfo[playerid][pSeeds] = 0;
    PlayerInfo[playerid][pSoda] = 0;
    PlayerInfo[playerid][pPowder] = 0;
    PlayerInfo[playerid][pAlcohol] = 0;
    PlayerInfo[playerid][pSlot] = 0;
    PlayerInfo[playerid][pIPaddress] = 0;
    PlayerInfo[playerid][pSerial] = 0;
    PlayerInfo[playerid][pTaxiLic] = 0;
    PlayerInfo[playerid][pWepMats] = 0;
    PlayerInfo[playerid][pCard] = 0;
    PlayerInfo[playerid][pFName] = 0;
    PlayerInfo[playerid][pForumName] = 0;
    PlayerInfo[playerid][pNameChg] = 0;
    PlayerInfo[playerid][pPhoneChg] = 0;
    PlayerInfo[playerid][pSexChg] = 0;
    PlayerInfo[playerid][pCKChg] = 0;
    PlayerInfo[playerid][pBikeLic] = 0;
    PlayerInfo[playerid][pBigLic] = 0;
    PlayerInfo[playerid][pFishingRod] = 0;
    PlayerInfo[playerid][pHairCut] = 0;
    PlayerInfo[playerid][pWanted] = 0;
    PlayerInfo[playerid][pMaskID] = 0;
    //-----------------------------------------------------------------
    return 1;
}

stock CreateAllTextDraws(playerid)
{

    SSTextDraw[playerid] = CreatePlayerTextDraw(playerid, -4.666687, 203.514572, "usebox");
    PlayerTextDrawLetterSize(playerid, SSTextDraw[playerid], -0.301333, -23.066957);
    PlayerTextDrawTextSize(playerid, SSTextDraw[playerid], 344.666900, 13.688921);
    PlayerTextDrawAlignment(playerid, SSTextDraw[playerid], 1);
    PlayerTextDrawColor(playerid, SSTextDraw[playerid], 255);
    PlayerTextDrawUseBox(playerid, SSTextDraw[playerid], true);
    PlayerTextDrawBoxColor(playerid, SSTextDraw[playerid], 255);
    PlayerTextDrawSetShadow(playerid, SSTextDraw[playerid], 0);
    PlayerTextDrawSetOutline(playerid, SSTextDraw[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, SSTextDraw[playerid], 255);
    PlayerTextDrawFont(playerid, SSTextDraw[playerid], 0);

    EvoRP[playerid] = CreatePlayerTextDraw(playerid, 575.999877, 437.214843, "Evolution Roleplay");
    PlayerTextDrawLetterSize(playerid, EvoRP[playerid], 0.199331, 0.969479);
    PlayerTextDrawAlignment(playerid, EvoRP[playerid], 1);
    PlayerTextDrawColor(playerid, EvoRP[playerid], -1);
    PlayerTextDrawSetShadow(playerid, EvoRP[playerid], 0);
    PlayerTextDrawSetOutline(playerid, EvoRP[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, EvoRP[playerid], 51);
    PlayerTextDrawFont(playerid, EvoRP[playerid], 1);
    PlayerTextDrawSetProportional(playerid, EvoRP[playerid], 1);

    RadioDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 103.000000, "~b~Radio Info");
    PlayerTextDrawBackgroundColor(playerid, RadioDraw[playerid], 0x000000ff);
    PlayerTextDrawFont(playerid, RadioDraw[playerid], 3);
    PlayerTextDrawLetterSize(playerid, RadioDraw[playerid], 0.40, 1.0);
    PlayerTextDrawColor(playerid, RadioDraw[playerid], 0xffffffff);
    PlayerTextDrawSetShadow(playerid, RadioDraw[playerid], 1);

    ChannelDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 112.000000, "~b~Canal: ~h~~g~0");
    PlayerTextDrawBackgroundColor(playerid, ChannelDraw[playerid], 0x000000ff);
    PlayerTextDrawFont(playerid, ChannelDraw[playerid], 3);
    PlayerTextDrawLetterSize(playerid, ChannelDraw[playerid], 0.40, 1.0);
    PlayerTextDrawColor(playerid, ChannelDraw[playerid], 0xffffffff);
    PlayerTextDrawSetShadow(playerid, ChannelDraw[playerid], 1);

    SlotDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 121.000000, "~b~Slot: ~h~~g~0");
    PlayerTextDrawBackgroundColor(playerid, SlotDraw[playerid], 0x000000ff);
    PlayerTextDrawFont(playerid, SlotDraw[playerid], 3);
    PlayerTextDrawLetterSize(playerid, SlotDraw[playerid], 0.40, 1.0);
    PlayerTextDrawColor(playerid, SlotDraw[playerid], 0xffffffff);
    PlayerTextDrawSetShadow(playerid, SlotDraw[playerid], 1);
    // ---------
    SpeedText[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 135.000000, " ");
    PlayerTextDrawBackgroundColor(playerid, SpeedText[playerid], 0x000000ff);
    PlayerTextDrawFont(playerid, SpeedText[playerid], 3);
    PlayerTextDrawLetterSize(playerid, SpeedText[playerid], 0.40, 1.0);
    PlayerTextDrawColor(playerid, SpeedText[playerid], 0xffffffff);
    PlayerTextDrawSetShadow(playerid, SpeedText[playerid], 1);

    FuelText[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 144.000000, " ");
    PlayerTextDrawBackgroundColor(playerid, FuelText[playerid], 0x000000ff);
    PlayerTextDrawFont(playerid, FuelText[playerid], 3);
    PlayerTextDrawLetterSize(playerid, FuelText[playerid], 0.40, 1.0);
    PlayerTextDrawColor(playerid, FuelText[playerid], 0xffffffff);
    PlayerTextDrawSetShadow(playerid, FuelText[playerid], 1);
    // ---------
    TruckerDraw[playerid] = CreatePlayerTextDraw(playerid, 95.000000, 292.000000, "Incarcare...");
    PlayerTextDrawBackgroundColor(playerid, TruckerDraw[playerid], 255);
    PlayerTextDrawFont(playerid, TruckerDraw[playerid], 1);
    PlayerTextDrawLetterSize(playerid, TruckerDraw[playerid], 0.290000, 1.099999);
    PlayerTextDrawColor(playerid, TruckerDraw[playerid], -1);
    PlayerTextDrawSetOutline(playerid, TruckerDraw[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TruckerDraw[playerid], 1);

    errormsg[playerid] = TextDrawCreate(318.000000,112.000000,"~r~Eroare");
    TextDrawAlignment(errormsg[playerid],2);
    TextDrawBackgroundColor(errormsg[playerid],0x000000ff);
    TextDrawFont(errormsg[playerid],1);
    TextDrawLetterSize(errormsg[playerid],0.299999,1.300000);
    TextDrawColor(errormsg[playerid],0xffffffff);
    TextDrawSetOutline(errormsg[playerid],1);
    TextDrawSetProportional(errormsg[playerid],1);
    TextDrawSetShadow(errormsg[playerid],1);

    jail_timeleft[playerid] = CreatePlayerTextDraw(playerid, 277.000000,371.000000,"~p~timp ramas: ~w~Incarcare...");
    PlayerTextDrawAlignment(playerid, jail_timeleft[playerid],0);
    PlayerTextDrawBackgroundColor(playerid, jail_timeleft[playerid],0x000000ff);
    PlayerTextDrawFont(playerid, jail_timeleft[playerid],3);
    PlayerTextDrawLetterSize(playerid, jail_timeleft[playerid],0.299999,1.200000);
    PlayerTextDrawColor(playerid, jail_timeleft[playerid],0xffffffff);
    PlayerTextDrawSetOutline(playerid, jail_timeleft[playerid],1);
    PlayerTextDrawSetProportional(playerid, jail_timeleft[playerid],1);
    PlayerTextDrawSetShadow(playerid, jail_timeleft[playerid],1);

    hospital_timeleft[playerid] = TextDrawCreate(10.000000,100.000000,"~b~iti revi in: ~w~Incarcare...");
    TextDrawAlignment(hospital_timeleft[playerid],0);
    TextDrawBackgroundColor(hospital_timeleft[playerid],0x000000ff);
    TextDrawFont(hospital_timeleft[playerid],3);
    TextDrawLetterSize(hospital_timeleft[playerid],0.399999,1.37777);
    TextDrawColor(hospital_timeleft[playerid],0xffffffff);
    TextDrawSetOutline(hospital_timeleft[playerid],1);
    TextDrawSetProportional(hospital_timeleft[playerid],1);
    TextDrawSetShadow(hospital_timeleft[playerid],1);

    infotxt[playerid] = TextDrawCreate(145.000000,145.000000,"Incarcare...");
    TextDrawUseBox(infotxt[playerid],1);
    TextDrawBoxColor(infotxt[playerid],0x00000066);
    TextDrawTextSize(infotxt[playerid],0.000000,252.000000);
    TextDrawAlignment(infotxt[playerid],2);
    TextDrawBackgroundColor(infotxt[playerid],0x000000ff);
    TextDrawFont(infotxt[playerid],3);
    TextDrawLetterSize(infotxt[playerid],0.299999,1.200000);
    TextDrawColor(infotxt[playerid],0xffffffff);
    TextDrawSetOutline(infotxt[playerid],1);
    TextDrawSetProportional(infotxt[playerid],1);
    TextDrawSetShadow(infotxt[playerid],1);

    ModText[playerid] = CreatePlayerTextDraw(playerid, 259.000000, 299.000000, "Incarcare...");
    PlayerTextDrawBackgroundColor(playerid, ModText[playerid], 255);
    PlayerTextDrawFont(playerid, ModText[playerid], 3);
    PlayerTextDrawLetterSize(playerid, ModText[playerid], 0.570000, 1.799999);
    PlayerTextDrawColor(playerid, ModText[playerid], -65281);
    PlayerTextDrawSetOutline(playerid, ModText[playerid], 1);

    PrevButton[playerid] = CreatePlayerTextDraw(playerid, 222.000000, 297.000000, "< Prev");
    PlayerTextDrawBackgroundColor(playerid, PrevButton[playerid], 65320);
    PlayerTextDrawFont(playerid, PrevButton[playerid], 3);
    PlayerTextDrawLetterSize(playerid, PrevButton[playerid], 0.569999, 1.799998);
    PlayerTextDrawColor(playerid, PrevButton[playerid], -65281);
    PlayerTextDrawSetOutline(playerid, PrevButton[playerid], 1);
    PlayerTextDrawSetProportional(playerid, PrevButton[playerid], 1);
    PlayerTextDrawUseBox(playerid, PrevButton[playerid], 1);
    PlayerTextDrawBoxColor(playerid, PrevButton[playerid], 65330);
    PlayerTextDrawTextSize(playerid, PrevButton[playerid], 292.000000, 57.000000);
    PlayerTextDrawSetSelectable(playerid, PrevButton[playerid], 1);

    NextButton[playerid] = CreatePlayerTextDraw(playerid, 350.000000, 297.000000, "Next >");
    PlayerTextDrawBackgroundColor(playerid, NextButton[playerid], 65320);
    PlayerTextDrawFont(playerid, NextButton[playerid], 3);
    PlayerTextDrawLetterSize(playerid, NextButton[playerid], 0.569999, 1.799998);
    PlayerTextDrawColor(playerid, NextButton[playerid], -65281);
    PlayerTextDrawSetOutline(playerid, NextButton[playerid], 1);
    PlayerTextDrawSetProportional(playerid, NextButton[playerid], 1);
    PlayerTextDrawUseBox(playerid, NextButton[playerid], 1);
    PlayerTextDrawBoxColor(playerid, NextButton[playerid], 65330);
    PlayerTextDrawTextSize(playerid, NextButton[playerid], 424.000000, 298.000000);
    PlayerTextDrawSetSelectable(playerid, NextButton[playerid], 1);

    WearButton[playerid] = CreatePlayerTextDraw(playerid, 293.000000, 327.000000, "Imbraca");
    PlayerTextDrawBackgroundColor(playerid, WearButton[playerid], 65320);
    PlayerTextDrawFont(playerid, WearButton[playerid], 3);
    PlayerTextDrawLetterSize(playerid, WearButton[playerid], 0.569999, 1.799998);
    PlayerTextDrawColor(playerid, WearButton[playerid], -65281);
    PlayerTextDrawSetOutline(playerid, WearButton[playerid], 1);
    PlayerTextDrawSetProportional(playerid, WearButton[playerid], 1);
    PlayerTextDrawUseBox(playerid, WearButton[playerid], 1);
    PlayerTextDrawBoxColor(playerid, WearButton[playerid], 65330);
    PlayerTextDrawTextSize(playerid, WearButton[playerid], 350.000000, 17.000000);
    PlayerTextDrawSetSelectable(playerid, WearButton[playerid], 1);

    return 1;
}

stock IsDriver(playerid)
{
    if(PlayerInCar(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        return true;
    else
        return false;
}

stock DestoryCar(vehicleid)
{
    VehicleEngine(vehicleid, false);
    ToggleVehicleLock(vehicleid, false);
    DestroyVehicle(vehicleid);
    return 1;
}

stock VehicleEmpty(vehicleid)
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(IsPlayerInVehicle(i, vehicleid)) return 0;
    }
    return 1;
}

stock GetVehicleZone(vehicleid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock GetCoords2DZone(Float:x, Float:y, zone[], len)
{
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock GetPlayer2DZone(playerid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock ErrorMsg(playerid, message[])
{
    format(ErrorInfo[playerid][0][eMsg],80,"%s",ErrorInfo[playerid][1][eMsg]);
    ErrorInfo[playerid][0][eExpire] = ErrorInfo[playerid][1][eExpire];
    format(ErrorInfo[playerid][1][eMsg],80,"%s",ErrorInfo[playerid][2][eMsg]);
    ErrorInfo[playerid][1][eExpire] = ErrorInfo[playerid][2][eExpire];
    format(ErrorInfo[playerid][2][eMsg],80,"%s",message);
    ErrorInfo[playerid][2][eExpire] = 11;
    PlaySound(playerid,1085);
    RefreshErrorMsg(playerid);
    return 1;
}

stock InfoMSG(playerid, message[], delay)
{
    TextDrawSetString(infotxt[playerid], message);
    ShowTextDraw(playerid, infotxt[playerid]);
    infotxt_expire{playerid} = delay;
    return 1;
}

stock InfoMSG2(playerid, header[], message[], delay)
{
    TD_SendMessage(playerid, message, header, delay, 12840, 10.0000, 100.000000, 300.000000, strlen(message));
    return 1;
}

stock RefreshErrorMsg(playerid)
{
    new sendstr[256];
    new tmp[80];
    new display = false;
    if(ErrorInfo[playerid][0][eExpire] || ErrorInfo[playerid][1][eExpire] || ErrorInfo[playerid][2][eExpire]) { display = true; }
    format(sendstr,sizeof(sendstr),"~r~");
    if(ErrorInfo[playerid][2][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][2][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
    if(ErrorInfo[playerid][1][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][1][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
    if(ErrorInfo[playerid][0][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][0][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
    TextDrawSetString(errormsg[playerid],sendstr);
    if(display) { ShowTextDraw(playerid,errormsg[playerid]); } else { HideTextDraw(playerid,errormsg[playerid]); }
}


stock GetOwnedVehicles(playerid) return PlayerInfo[playerid][pVehicles];

stock FirstNameLetters(name[MAX_PLAYER_NAME])
{
    new
        strpos = strfind(name, "_", true),
        string[4];

    format(string, sizeof(string), "%c%c", name[0], name[strpos+1]);
    return string;
}

stock OnOwnedVehicleInsert(vehid)
{
    VehicleInfo[vehid][carID] = cache_insert_id(dbHandle);
    return 1;
}

stock UpdateVehicleStatus(playerid, vehicle)
{
    new slot = PlayerInfo[playerid][pVehSlot];
    VehicleStatus[playerid][slot][carAlarm] = VehicleInfo[vehicle][carAlarm];
    VehicleStatus[playerid][slot][carLock] = VehicleInfo[vehicle][carLock];
    VehicleStatus[playerid][slot][carImmob] = VehicleInfo[vehicle][carImmob];
    VehicleStatus[playerid][slot][carInsurances] = VehicleInfo[vehicle][carInsurances];
    VehicleStatus[playerid][slot][carDestroyed] = VehicleInfo[vehicle][carDestroyed];
    VehicleStatus[playerid][slot][carGps] = VehicleInfo[vehicle][carGps];
    format(VehicleStatus[playerid][slot][carPlate], 128, "%s", VehicleInfo[vehicle][carPlate]);
    return 1;
}

stock GetInsurancePrice(vehicle)
{
    new modelid = GetVehicleModel(vehicle);
    for(new i = 0; i < sizeof(InsurancesPrice); i++)
    {
        if(modelid == InsurancesPrice[i][insuranceModel])
        {
            if(VehicleInfo[vehicle][carDestroyed] == 0)
                return InsurancesPrice[i][insurancePrice];
            else
                return InsurancesPrice[i][insurancePrice] * VehicleInfo[vehicle][carDestroyed];
        }
    }
    return 0;
}

stock GetInsurancePrice2(playerid, slot)
{
    new modelid = VehicleStatus[playerid][slot][carModel];
    for(new i = 0; i < sizeof(InsurancesPrice); i++)
    {
        if(modelid == InsurancesPrice[i][insuranceModel])
        {
            if(VehicleStatus[playerid][slot][carDestroyed] == 0)
                return InsurancesPrice[i][insurancePrice];
            else
                return InsurancesPrice[i][insurancePrice] * VehicleStatus[playerid][slot][carDestroyed];
        }
    }
    return 0;
}

stock OnPlayerEnterParkingSpot(playerid)
{
    if(GetIntVar(playerid, "PlayerCP") == 25)
    {
        GameTextForPlayer(playerid, "~r~Ai gasit masina", 3000, 3);
        PlaySound(playerid, 1138);
        RemoveCheckPoint(playerid);
    }
}

stock GetVehiclePrice(model)
{
    for(new i = 0; i < sizeof(CarsPrices); i++)
    {
        if(model == CarsPrices[i][dCarModel])
            return CarsPrices[i][dCarPrice];
    }
    return 0;
}

stock VehicleDealerExist(model)
{
    for(new i = 0; i < sizeof(CarsPrices); i++)
    {
        if(model == CarsPrices[i][dCarModel])
            return true;
    }
    return false;
}

stock PlayerOwnVehicle(playerid, vehicleid)
{
    if(PlayerInfo[playerid][pCarKey] == vehicleid && !strcmp(GetName(playerid), VehicleInfo[vehicleid][carOwner], true))
        return true;
    else
        return false;
}

stock GetOwnedVehicleID(playerid)
{
    for(new v = 1; v <=GetVehiclePoolSize(); v++)
    {
        if (IsVehicleSpawned(v))
        {
            if(CompareStrings(VehicleInfo[v][carOwner], GetName(playerid))) return v;
        }
    }
    return INVALID_VEHICLE_ID;
}

stock IsVehicleSpawned(vehicleid)
{
    new Float:XX,Float:YY,Float:ZZ;
    GetVehiclePos(vehicleid, XX, YY, ZZ);
    if (XX == 0.0 && YY == 0.0 && ZZ == 0.0) return 0;
    return 1;
}

stock LoadVehicleFromSlot(playerid, slot)
{
    format(query, sizeof(query), "SELECT * FROM `ownedvehicles` WHERE `owner` = '%s' AND `slot` = %d", GetName(playerid), slot);
    mysql_function_query(dbHandle, query, true, "OnPlayerSpawnVehicle", "ii", playerid, slot);
    return 1;
}

//==================================Player Tickets==================================//
stock CountPlayerTickets(playerid)
{
    new count = 0;
    for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
    {
        if(PlayerInfo[playerid][pTickets][i] != 0)
        {
            count++;
        }
    }
    return count;
}

stock PlacePlayerTicket(playerid, amount)
{
    for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
    {
        if(PlayerInfo[playerid][pTickets][i] == 0)
        {
            PlayerInfo[playerid][pTickets][i] = amount;
            return 1;
        }
    }
    return 1;
}

stock AssignPlayerTickets(playerid, tickets[])
{
    new tmp[MAX_PLAYER_TICKETS][32];
    explode(tmp, tickets, "|");
    for(new i = 0; i < MAX_PLAYER_TICKETS; i ++)
    {
        PlayerInfo[playerid][pTickets][i] = strval(tmp[i]);
    }
}

stock FormatPlayerTickets(playerid, tickets[])
{
    new upstr[256];
    new tmp[64];
    for(new b = 0; b < MAX_PLAYER_TICKETS; b ++)
    {
        if(b == 0)
            format(tmp,sizeof(tmp),"%d",PlayerInfo[playerid][pTickets][b]);
        else
            format(tmp,sizeof(tmp),"|%d",PlayerInfo[playerid][pTickets][b]);
        strins(upstr,tmp,strlen(upstr));
    }
    return format(tickets, 256, "%s", upstr);
}
//==================================Player Tickets==================================//

stock CountVehicleTickets(vehicle)
{
    new count = 0;
    for(new i = 0; i < MAX_CAR_TICKETS; i++)
    {
        if(VehicleInfo[vehicle][carTicket][i] != 0)
        {
            count++;
        }
    }
    return count;
}

stock PlaceVehicleTicket(vehicle, amount)
{
    for(new i = 0; i < MAX_CAR_TICKETS; i++)
    {
        if(VehicleInfo[vehicle][carTicket][i] == 0)
        {
            VehicleInfo[vehicle][carTicket][i] = amount;
            return 1;
        }
    }
    return 1;
}

stock AssignVehicleTickets(vehicleid, tickets[])
{
    new tmp[MAX_CAR_TICKETS][32];
    explode(tmp, tickets, "|");
    for(new i = 0; i < MAX_CAR_TICKETS; i ++)
    {
        VehicleInfo[vehicleid][carTicket][i] = strval(tmp[i]);
    }
}

stock FormatVehicleTickets(vehicleid, tickets[])
{
    new upstr[256];
    new tmp[64];
    for(new b = 0; b < MAX_CAR_TICKETS; b ++)
    {
        if(b == 0)
            format(tmp,sizeof(tmp),"%d",VehicleInfo[vehicleid][carTicket][b]);
        else
            format(tmp,sizeof(tmp),"|%d",VehicleInfo[vehicleid][carTicket][b]);
        strins(upstr,tmp,strlen(upstr));
    }
    return format(tickets, 256, "%s", upstr);
}

stock FormatVehicleWeapons(vehicle, string[])
{
    new wstr[256];
    new tmp[64];
    for(new a = 1; a < MAX_VEHICLE_WEAPONS; a++)
    {
        new w = VehicleInfo[vehicle][carTrunkWep][a];
        new am = VehicleInfo[vehicle][carTrunkAmmo][a];
        if(a == 1)
        {
            format(tmp,sizeof(tmp),"%d=%d",w,am);
        }
        else
        {
            format(tmp,sizeof(tmp),"|%d=%d",w,am);
        }
        strins(wstr,tmp,strlen(wstr));
    }
    return format(string, 256, "%s", wstr);
}

stock AssignVehicleWeapons(vehicle, str[])
{
    new wtmp[MAX_VEHICLE_WEAPONS][64];
    explode(wtmp,str,"|");
    for(new z = 1; z < MAX_VEHICLE_WEAPONS; z++)
    {
        new wtmp2[2][64];
        explode(wtmp2,wtmp[z-1],"=");
        VehicleInfo[vehicle][carTrunkWep][z] = strval(wtmp2[0]);
        VehicleInfo[vehicle][carTrunkAmmo][z] = strval(wtmp2[1]);
    }
}

stock SaveVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][carOwned] == 1)
    {
        new Float:vhealth;
        GetVehicleHealth(vehicleid, vhealth);
        new tickets[256], weapons[256], drugs[256];
        FormatVehicleTickets(vehicleid, tickets);
        FormatVehicleWeapons(vehicleid, weapons);
        FormatVehicleDrugs(vehicleid, drugs);
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `color1` = %d, `color2` = %d, `parkx` = %f, `parky` = %f, `parkz` = %f, `parka` = %f WHERE `owner` = '%s' AND `id` = %d",
        VehicleInfo[vehicleid][carColor1],
        VehicleInfo[vehicleid][carColor2],
        VehicleInfo[vehicleid][carParkX],
        VehicleInfo[vehicleid][carParkY],
        VehicleInfo[vehicleid][carParkZ],
        VehicleInfo[vehicleid][carParkA],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `plate` = '%s', `owner` = '%s', `owned` = %d, `broken` = %d WHERE `owner` = '%s' AND `id` = %d",
        VehicleInfo[vehicleid][carPlate],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carOwned],
        VehicleInfo[vehicleid][carBroken],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `alarm` = %d, `lock` = %d, `immob` = %d, `insurances` = %d, `destroys` = %d, `gps` = %d, `fuel` = %d, `registered` = %d WHERE `owner` = '%s' AND `id` = %d",
        VehicleInfo[vehicleid][carAlarm],
        VehicleInfo[vehicleid][carLock],
        VehicleInfo[vehicleid][carImmob],
        VehicleInfo[vehicleid][carInsurances],
        VehicleInfo[vehicleid][carDestroyed],
        VehicleInfo[vehicleid][carGps],
        Gas{vehicleid},
        VehicleInfo[vehicleid][carRegistered],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = '%s' WHERE `owner` = '%s' AND `id` = %d",
        weapons,
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `comp0` = %d, `comp1` = %d, `comp2` = %d, `comp3` = %d, `comp4` = %d, `comp5` = %d, `comp6` = %d WHERE `owner` = '%s' AND `id` = %d",
        VehicleInfo[vehicleid][carComponent][0],
        VehicleInfo[vehicleid][carComponent][1],
        VehicleInfo[vehicleid][carComponent][2],
        VehicleInfo[vehicleid][carComponent][3],
        VehicleInfo[vehicleid][carComponent][4],
        VehicleInfo[vehicleid][carComponent][5],
        VehicleInfo[vehicleid][carComponent][6],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `comp7` = %d, `comp8` = %d, `comp9` = %d, `comp10` = %d, `comp11` = %d, `comp12` = %d, `comp13` = %d, `paintjob` = %d WHERE `owner` = '%s' AND `id` = %d",
        VehicleInfo[vehicleid][carComponent][7],
        VehicleInfo[vehicleid][carComponent][8],
        VehicleInfo[vehicleid][carComponent][9],
        VehicleInfo[vehicleid][carComponent][10],
        VehicleInfo[vehicleid][carComponent][11],
        VehicleInfo[vehicleid][carComponent][12],
        VehicleInfo[vehicleid][carComponent][13],
        VehicleInfo[vehicleid][carPaintJob],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `radio` = %d, `tickets` = '%s', `dupkey` = %d, `comps` = %d WHERE `owner` = '%s' AND `id` = %d",
        VehicleInfo[vehicleid][carRadio],
        tickets,
        VehicleInfo[vehicleid][carDupKey],
        VehicleInfo[vehicleid][carComps],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `drugs` = '%s', `faction` = %d, `panels` = %d, `doors` = %d, `lights` = %d, `tires` = %d, `health` = %f, `impound` = %d WHERE `owner` = '%s' AND `id` = %d",
        drugs,
        VehicleInfo[vehicleid][carFaction],
        VehicleInfo[vehicleid][carPanels],
        VehicleInfo[vehicleid][carDoors],
        VehicleInfo[vehicleid][carLights],
        VehicleInfo[vehicleid][carTires],
        vhealth,
        VehicleInfo[vehicleid][carImpound],
        VehicleInfo[vehicleid][carOwner],
        VehicleInfo[vehicleid][carID]);
        mysql_function_query(dbHandle, query, false, "", "");
        //=====================================================================================
		#if defined debugOn
			printf(query);
		#endif

    }
    return 1;
}

stock SaveFaction(factionid)
{
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `name` = '%s', `spawnx` = %f, `spawny` = %f, `spawnz` = %f WHERE `id` = %d",
    Factions[factionid][fName],
    Factions[factionid][fX],
    Factions[factionid][fY],
    Factions[factionid][fZ],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank1` = '%s', `rank2` = '%s', `rank3` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank1],
    Factions[factionid][fRank2],
    Factions[factionid][fRank3],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank4` = '%s', `rank5` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank4],
    Factions[factionid][fRank5],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank6` = '%s', `rank7` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank6],
    Factions[factionid][fRank7],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank8` = '%s', `rank9` = '%s', `rank10` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank8],
    Factions[factionid][fRank9],
    Factions[factionid][fRank10],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank11` = '%s', `rank12` = '%s', `rank13` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank11],
    Factions[factionid][fRank12],
    Factions[factionid][fRank13],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank14` = '%s', `rank15` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank14],
    Factions[factionid][fRank15],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank16` = '%s', `rank17` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank16],
    Factions[factionid][fRank17],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `rank18` = '%s', `rank19` = '%s', `rank20` = '%s' WHERE `id` = %d",
    Factions[factionid][fRank18],
    Factions[factionid][fRank19],
    Factions[factionid][fRank20],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `joinrank` = %d, `type` = %d, `rankamount` = %d, `chaton` = %d, `color` = %d WHERE `id` = %d",
    Factions[factionid][fJoinRank],
    Factions[factionid][fType],
    Factions[factionid][fRankAmount],
    Factions[factionid][fChatON],
    Factions[factionid][fColor],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `factions` SET `uniformx` = %f, `uniformy` = %f, `uniformz` = %f, `spawnint` = %d, `leaderrank` = %d WHERE `id` = %d",
    Factions[factionid][fUniformX],
    Factions[factionid][fUniformY],
    Factions[factionid][fUniformZ],
    Factions[factionid][fSpawnInt],
    Factions[factionid][fLeaderRank],
    Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock SaveJob(jobid)
{
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `jobs` SET `name` = '%s', `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d",
    JobsInfo[jobid][jobName],
    JobsInfo[jobid][jobX],
    JobsInfo[jobid][jobY],
    JobsInfo[jobid][jobZ],
    JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `jobs` SET `rank1` = '%s', `rank2` = '%s', `rank3` = '%s' WHERE `id` = %d",
    JobsInfo[jobid][jobRank1],
    JobsInfo[jobid][jobRank2],
    JobsInfo[jobid][jobRank3],
    JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `jobs` SET `rank4` = '%s', `rank5` = '%s' WHERE `id` = %d",
    JobsInfo[jobid][jobRank4],
    JobsInfo[jobid][jobRank5],
    JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `jobs` SET `rank6` = '%s', `rank7` = '%s' WHERE `id` = %d",
    JobsInfo[jobid][jobRank6],
    JobsInfo[jobid][jobRank7],
    JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `jobs` SET `rank8` = '%s', `rank9` = '%s', `rank10` = '%s' WHERE `id` = %d",
    JobsInfo[jobid][jobRank8],
    JobsInfo[jobid][jobRank9],
    JobsInfo[jobid][jobRank10],
    JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=====================================================================================
    format(query, sizeof(query), "UPDATE `jobs` SET `ranks` = %d, `highrank` = %d WHERE `id` = %d",
    JobsInfo[jobid][jobRanks],
    JobsInfo[jobid][jobHighRank],
    JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock SaveParkMeter(parkid)
{
    format(query, sizeof(query), "UPDATE `parkmeters` SET `minutes` = %d WHERE `id` = %d", ParkMeters[parkid][parkMinutes], ParkMeters[parkid][parkID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
    if(PlayerIsOn(playerid))
    {
        new Float:PX,Float:PY,Float:PZ,Float:CX,Float:CY,Float:CZ;
        GetPlayerPos(playerid,PX,PY,PZ);
        GetVehiclePos(vehicleid, CX,CY,CZ);
        new Float:CDistance = (CX-PX)*(CX-PX)+(CY-PY)*(CY-PY)+(CZ-PZ)*(CZ-PZ);
        if(CDistance <= radi*radi)
        {
            return 1;
        }
    }
    return 0;
}

stock PlayerBehindVehicle(playerid)
{
    new Float:vX, Float:vY, Float:vZ, Float:vA;
    for(new i = 1; i <= GetVehiclePoolSize(); i++)
    {
        if(VehicleInfo[i][carOwned] == 1)
        {
            GetVehiclePos(i, vX, vY, vZ);
            GetVehicleZAngle(i, vA);
            if(vA >= 270 && vA <= 360 && IsPlayerInRangeOfPoint(playerid, 2.0, vX-3.0, vY, vZ))
                return i;
            if(vA >= 180 && vA <= 270 && IsPlayerInRangeOfPoint(playerid, 2.0, vX, vY-3.0, vZ))
                return i;
            if(vA >= 90 && vA <= 180 && IsPlayerInRangeOfPoint(playerid, 2.0, vX+3.0, vY, vZ))
                return i;
            if(vA >= 0 && vA <= 90 && IsPlayerInRangeOfPoint(playerid, 2.0, vX, vY-3.0, vZ))
                return i;
        }
    }
    return INVALID_VEHICLE_ID;
}

stock AlarmOn(vehicleid)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
    return 1;
}

stock AlarmOff(vehicleid)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
    return 1;
}

stock ResetVariables(playerid)
{
    IsSmoking{playerid} = false;
//  CopDuty{playerid} = false;
//  MedicDuty{playerid} = false;
//  SwatDuty{playerid} = false;
    PlayerInfo[playerid][pHasArmour] = 0;
    PlayerInfo[playerid][pArmour] = 0.0;
    return 1;
}

stock HasWeapon(playerid, weaponid)
{
    if(IsMeleeWeapon(weaponid))
    {
        if(PlayerInfo[playerid][pMeleeWep] == weaponid)
            return 1;
    }
    else if(IsPrimaryWeapon(weaponid))
    {
        if(PlayerInfo[playerid][pPerm1] == weaponid)
            return 1;
    }
    else if(IsSecondaryWeapon(weaponid))
    {
        if(PlayerInfo[playerid][pPerm2] == weaponid)
            return 1;
    }
    return 0;
}

stock ResetVehicleStuff(vehicleid)
{
    for(new i = 1; i < MAX_VEHICLE_WEAPONS; i++)
    {
        VehicleInfo[vehicleid][carTrunkWep][i] = 0;
        VehicleInfo[vehicleid][carTrunkAmmo][i] = 0;
    }
    for(new i = 1; i < MAX_DRUGS; i++)
    {
        VehicleInfo[vehicleid][carDrug][i] = 0;
        VehicleInfo[vehicleid][carDrugAmount][i] = 0;
    }
    VehicleInfo[vehicleid][carComponent][0] = 0;
    VehicleInfo[vehicleid][carComponent][1] = 0;
    VehicleInfo[vehicleid][carComponent][2] = 0;
    VehicleInfo[vehicleid][carComponent][3] = 0;
    VehicleInfo[vehicleid][carComponent][4] = 0;
    VehicleInfo[vehicleid][carComponent][5] = 0;
    VehicleInfo[vehicleid][carComponent][6] = 0;
    VehicleInfo[vehicleid][carComponent][7] = 0;
    VehicleInfo[vehicleid][carComponent][8] = 0;
    VehicleInfo[vehicleid][carComponent][9] = 0;
    VehicleInfo[vehicleid][carComponent][10] = 0;
    VehicleInfo[vehicleid][carComponent][11] = 0;
    VehicleInfo[vehicleid][carComponent][12] = 0;
    VehicleInfo[vehicleid][carComponent][13] = 0;
    VehicleInfo[vehicleid][carPaintJob] = 3;
    VehicleInfo[vehicleid][carRadio] = 0;
    VehicleInfo[vehicleid][carComps] = 0;
    VehicleInfo[vehicleid][carFaction] = 0;
    SaveVehicle(vehicleid);
    return 1;
}

stock IsModdedAble(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
    if(model == 483 || model == 534 || model == 535 || model == 536 || model == 558 || model == 559
    || model == 560 || model == 561 || model == 562 || model == 565 || model == 567 || model == 575 || model == 576)
        return 1;
    return 0;
}

    new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
    };

stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for(new i = 0; i < 17; i++)
    {
        if (modelid == wheelmodels[i])
            return true;
    }
    return false;
}

stock IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
    for(new i = 0; i < 29; i++)
    {
        if (carmodel == illegalvehs[i])
            return true;
    }
    return false;
}

stock ModFitsForCar(vehicleide, componentid)
{
    new modok = false;
    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {
        new nosblocker = IllegalCarNitroIde(vehicleide);
        if (!nosblocker)
            modok = true;
    } else {
        // check if the specified model CAN use this particular mod.
            for(new i = 0; i < sizeof(legalmods); i++) {
            if (legalmods[i][0] == vehicleide) { // first is car IDE

                for(new j = 1; j < 22; j++) { // start with 1
                    if (legalmods[i][j] == componentid)
                        modok = true;
                }
            }
        }
    }
    return modok;
}

stock HandleComponentText(playerid, vehicle)
{
    if(!HasComponent(vehicle, GetIntVar(playerid, "CompID")))
    {
        if(ModFitsForCar(GetVehicleModel(vehicle), GetIntVar(playerid, "CompID")))
        {
            SetModText(playerid, GetStringVar(playerid, "CompType"), GetIntVar(playerid, "CompPrice"), GetStringVar(playerid, "CompName"), 0, 1);
            AddVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
        }
        else
        {
            SetModText(playerid, GetStringVar(playerid, "CompType"), GetIntVar(playerid, "CompPrice"), GetStringVar(playerid, "CompName"), 0, 0);
        }
    }
    else
    {
        SetModText(playerid, GetStringVar(playerid, "CompType"), GetIntVar(playerid, "CompPrice"), GetStringVar(playerid, "CompName"), 1, 1);
        AddVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
    }
}

stock HandlePaintJobText(playerid, vehicle)
{
    if(!HasPaintJob(vehicle, GetIntVar(playerid, "OnPaint")))
    {
        SetModText(playerid, "PaintJob", 10000, "PaintJob", 0, 1);
        ChangeVehiclePaintjob(vehicle, GetIntVar(playerid, "OnPaint"));
    }
    else
    {
        SetModText(playerid, "PaintJob", 10000, "PaintJob", 1, 1);
        ChangeVehiclePaintjob(vehicle, GetIntVar(playerid, "OnPaint"));
    }
}

stock BackToDealerShip(playerid, vehicle)
{
    SetVehiclePos(vehicle, 1705.2166, -1512.1454, 13.1163);
    SetCameraBehindPlayer(playerid);
    SetInterior(playerid, 0);
    SetWorld(playerid, 0);
    LinkVehicleToInterior(vehicle, 0);
    SetVehicleVirtualWorld(vehicle, 0);
    UnFreezePlayer(playerid);
    HideModText(playerid);
    return 1;
}

stock HasPaintJob(vehicleid, paintid)
{
    for(new i = 0; i < 3; i++)
    {
        if(VehicleInfo[vehicleid][carPaintJob] == paintid)
            return true;
    }
    return false;
}

stock HasComponent(vehicleid, compid)
{
    for(new i = 0; i < 14; i++)
    {
        if(VehicleInfo[vehicleid][carComponent][i] == compid)
            return true;
    }
    return false;
}

stock ComponentSlotTaken(vehicleid, slot)
{
    if(VehicleInfo[vehicleid][carComponent][slot] != 0)
        return 1;
    return 0;
}

stock CountComponents(vehicleid)
{
    new count = 0;
    for(new i = 0; i < 14; i++)
    {
        if(VehicleInfo[vehicleid][carComponent][i] != 0)
            count++;
    }
    return count;
}

stock SetVehicleComponent(vehicleid, component, slot)
{
    VehicleInfo[vehicleid][carComponent][slot] = component;
    AddVehicleComponent(vehicleid, component);
    SaveVehicle(vehicleid);
    return 1;
}

stock SetVehiclePaintJob(vehicleid, paintid)
{
    VehicleInfo[vehicleid][carPaintJob] = paintid;
    VehicleInfo[vehicleid][carColor1] = 1;
    VehicleInfo[vehicleid][carColor2] = 1;
    ChangeVehicleColor(vehicleid, 1, 1);
    ChangeVehiclePaintjob(vehicleid, paintid);
    SaveVehicle(vehicleid);
    return 1;
}

stock SetModText(playerid, type[], price, name[], exists, compatible)
{
    new str[500];
    if(exists == 1)
        format(str, sizeof(str), "~w~<%s>~n~---------------~n~~y~Pret:~w~$%d~n~~y~Nume:~w~%s~n~~r~ai deja asta~n~~w~APASA [~y~y~w~] sa ~y~confirmi~w~.~n~APASA [~y~n~w~] pentru a ~y~iesi~w~.", type, price, name);
    else
        if(compatible == 1)
            format(str, sizeof(str), "~w~<%s>~n~---------------~n~~y~Pret:~w~$%d~n~~y~Nume:~w~%s~n~~y~asta iti va inlocui modul prezent~n~~w~APASA [~y~y~w~] sa ~y~confirmi~w~.~n~APASA [~y~n~w~] pentru a ~y~iesi~w~.", type, price, name);
        else
            format(str, sizeof(str), "~w~<%s>~n~---------------~n~~y~Pret:~w~$%d~n~~y~Nume:~w~%s~n~~r~nu este compatibil cu masina ta~n~~w~APASA [~y~y~w~] sa ~y~confirmi~w~.~n~APASA [~y~n~w~] pentru a ~y~iesi~w~.", type, price, name);
    PlayerTextDrawSetString(playerid, ModText[playerid], str);
    return 1;
}

stock HideModText(playerid)
{
    PlayerTextDrawHide(playerid, ModText[playerid]);
    return 1;
}

stock ShowModText(playerid)
{
    PlayerTextDrawShow(playerid, ModText[playerid]);
    return 1;
}

stock GetComponentName(component)
{
    new modname[50];
    switch(component)
    {
       case 1000: format(modname, sizeof(modname), "Pro Spoiler");
       case 1001: format(modname, sizeof(modname), "Win Spoiler");
       case 1002: format(modname, sizeof(modname), "Drag Spoiler");
       case 1003: format(modname, sizeof(modname), "Alpha Spoiler");
       case 1004: format(modname, sizeof(modname), "Champ Scoop");
       case 1005: format(modname, sizeof(modname), "Fury Scoop");
       case 1006: format(modname, sizeof(modname), "Roof Scoop");
       case 1007: format(modname, sizeof(modname), "Right Sideskirt");
       case 1008: format(modname, sizeof(modname), "Nitrous x5");
       case 1009: format(modname, sizeof(modname), "Nitrous x2");
       case 1010: format(modname, sizeof(modname), "Nitrous x10");
       case 1011: format(modname, sizeof(modname), "Race Scoop");
       case 1012: format(modname, sizeof(modname), "Worx Scoop");
       case 1013: format(modname, sizeof(modname), "Round Fog Lights");
       case 1014: format(modname, sizeof(modname), "Champ Spoiler");
       case 1015: format(modname, sizeof(modname), "Race Spoiler");
       case 1016: format(modname, sizeof(modname), "Worx Spoiler");
       case 1017: format(modname, sizeof(modname), "Left Sideskirt");
       case 1018: format(modname, sizeof(modname), "Upswept Exhaust");
       case 1019: format(modname, sizeof(modname), "Twin Exhaust");
       case 1020: format(modname, sizeof(modname), "Large Exhaust");
       case 1021: format(modname, sizeof(modname), "Medium Exhaust");
       case 1022: format(modname, sizeof(modname), "Small Exhaust");
       case 1023: format(modname, sizeof(modname), "Fury Spoiler");
       case 1024: format(modname, sizeof(modname), "Square Fog Lights");
       case 1025: format(modname, sizeof(modname), "Offroad Wheels");
       case 1026, 1036, 1047, 1056, 1069, 1090: format(modname, sizeof(modname), "Right Alien Sideskirt");
       case 1027, 1040, 1051, 1062, 1071, 1094: format(modname, sizeof(modname), "Left Alien Sideskirt");
       case 1028, 1034, 1046, 1064, 1065, 1092: format(modname, sizeof(modname), "Alien Exhaust");
       case 1029, 1037, 1045, 1059, 1066, 1089: format(modname, sizeof(modname), "X-Flow Exhaust");
       case 1030, 1039, 1048, 1057, 1070, 1095: format(modname, sizeof(modname), "Right X-Flow Sideskirt");
       case 1031, 1041, 1052, 1063, 1072, 1093: format(modname, sizeof(modname), "Left X-Flow Sideskirt");
       case 1032, 1038, 1054, 1055, 1067, 1088: format(modname, sizeof(modname), "Alien Roof Vent");
       case 1033, 1035, 1053, 1061, 1068, 1091: format(modname, sizeof(modname), "X-Flow Roof Vent");
       case 1042: format(modname, sizeof(modname), "Right Chrome Sideskirt");
       case 1099: format(modname, sizeof(modname), "Left Chrome Sideskirt");
       case 1043, 1105, 1114, 1127, 1132, 1135: format(modname, sizeof(modname), "Slamin Exhaust");
       case 1044, 1104, 1113, 1126, 1129, 1136: format(modname, sizeof(modname), "Chrome Exhaust");
       case 1050, 1058, 1139, 1146, 1158, 1163: format(modname, sizeof(modname), "X-Flow Spoiler");
       case 1049, 1060, 1138, 1147, 1162, 1164: format(modname, sizeof(modname), "Alien Spoiler");
       case 1073: format(modname, sizeof(modname), "Shadow Wheels");
       case 1074: format(modname, sizeof(modname), "Mega Wheels");
       case 1075: format(modname, sizeof(modname), "Rimshine Wheels");
       case 1076: format(modname, sizeof(modname), "Wires Wheels");
       case 1077: format(modname, sizeof(modname), "Classic Wheels");
       case 1078: format(modname, sizeof(modname), "Twist Wheels");
       case 1079: format(modname, sizeof(modname), "Cutter Wheels");
       case 1080: format(modname, sizeof(modname), "Stitch Wheels");
       case 1081: format(modname, sizeof(modname), "Grove Wheels");
       case 1082: format(modname, sizeof(modname), "Import Wheels");
       case 1083: format(modname, sizeof(modname), "Dollar Wheels");
       case 1084: format(modname, sizeof(modname), "Trance Wheels");
       case 1085: format(modname, sizeof(modname), "Atomic Wheels");
       case 1086: format(modname, sizeof(modname), "Stereo");
       case 1087: format(modname, sizeof(modname), "Hydraulics");
       case 1096: format(modname, sizeof(modname), "Ahab Wheels");
       case 1097: format(modname, sizeof(modname), "Virtual Wheels");
       case 1098: format(modname, sizeof(modname), "Access Wheels");
       case 1100: format(modname, sizeof(modname), "Chrome Grill");
       case 1101: format(modname, sizeof(modname), "Left Chrome Flames Sideskirt");
       case 1102, 1107: format(modname, sizeof(modname), "Left Chrome Strip Sideskirt");
       case 1103: format(modname, sizeof(modname), "Convertible Roof");
       case 1106, 1124, 1137: format(modname, sizeof(modname), "Left Chrome Arches Sideskirt");
       case 1108, 1133, 1134: format(modname, sizeof(modname), "Right Chrome Strip Sideskirt");
       case 1109: format(modname, sizeof(modname), "Chrome Rear Bullbars");
       case 1110: format(modname, sizeof(modname), "Slamin Rear Bullbars");
       case 1111, 1112: format(modname, sizeof(modname), "Front Sign");
       case 1115: format(modname, sizeof(modname), "Chrome Front Bullbars");
       case 1116: format(modname, sizeof(modname), "Slamin Front Bullbars");
       case 1117, 1174, 1179, 1182, 1189, 1191: format(modname, sizeof(modname), "Chrome Front Bumper");
       case 1175, 1181, 1185, 1188, 1190: format(modname, sizeof(modname), "Slamin Front Bumper");
       case 1176, 1180, 1184, 1187, 1192: format(modname, sizeof(modname), "Chrome Rear Bumper");
       case 1177, 1178, 1183, 1186, 1193: format(modname, sizeof(modname), "Slamin Rear Bumper");
       case 1118: format(modname, sizeof(modname), "Right Chrome Trim Sideskirt");
       case 1119: format(modname, sizeof(modname), "Right Wheelcovers Sideskirt");
       case 1120: format(modname, sizeof(modname), "Left Chrome Trim Sideskirt");
       case 1121: format(modname, sizeof(modname), "Left Wheelcovers Sideskirt");
       case 1122: format(modname, sizeof(modname), "Right Chrome Flames Sideskirt");
       case 1123: format(modname, sizeof(modname), "Bullbar Chrome Bars");
       case 1125: format(modname, sizeof(modname), "Bullbar Chrome Lights");
       case 1128: format(modname, sizeof(modname), "Vinyl Hardtop Roof");
       case 1130: format(modname, sizeof(modname), "Hardtop Roof");
       case 1131: format(modname, sizeof(modname), "Softtop Roof");
       case 1140, 1148, 1151, 1156, 1161, 1167: format(modname, sizeof(modname), "X-Flow Rear Bumper");
       case 1141, 1149, 1150, 1154, 1159, 1168: format(modname, sizeof(modname), "Alien Rear Bumper");
       case 1142: format(modname, sizeof(modname), "Left Oval Vents");
       case 1143: format(modname, sizeof(modname), "Right Oval Vents");
       case 1144: format(modname, sizeof(modname), "Left Square Vents");
       case 1145: format(modname, sizeof(modname), "Right Square Vents");
       case 1152, 1157, 1165, 1170, 1172, 1173: format(modname, sizeof(modname), "X-Flow Front Bumper");
       case 1153, 1155, 1160, 1166, 1169, 1171: format(modname, sizeof(modname), "Alien Front Bumper");

    }
    return modname;
}

stock PutPlayerInModShop(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
    PutPlayer(playerid, 1398.5208,-20.3816,1000.9159);
    SetInterior(playerid, 1);
    SetWorld(playerid, playerid);
    LinkVehicleToInterior(vehicle, 1);
    SetVehicleVirtualWorld(vehicle, playerid);
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicle, x, y, z);
    SetPlayerCameraPos(playerid, x+6, y-2.5, z+4);
    SetPlayerCameraLookAt(playerid, x, y, z);
    FreezePlayer(playerid);
}

stock GetDriver(vehicleid)
{
    foreach(new i : Player)
    {
        if(IsPlayerInVehicle(i, vehicleid) && IsDriver(i))
            return i;
    }
    return -1;
}

stock CheckPMBlockList(playerid)
{
    for(new i=0;i<=GetPlayerPoolSize();i++)
    {
        if(i!=playerid)
        {
            for(new y=0;i<=GetPlayerPoolSize();i++)
            {
                if(PeopleBlocking[i][y] == playerid)
                {
                    SCMEx(i, COLOR_GREY, "%s s-a deconectat de pe server si a fost sters din lista ta de persoane blocate la PM.", GetNameEx(playerid));
                    PeopleBlocking[i][y] = INVALID_PLAYER_ID;
                }
            }
        }
    }
/*  new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        for(new z = 0; z <= MaxPlayers; z++)
        {
            if(PeopleBlocking[i][z] == playerid)
            {
                format(msg, sizeof(msg), "%s s-a deconectat de pe server si a fost sters din lista ta de persoane blocate la PM.", GetName(playerid), playerid);
                SCM(i, COLOR_INFO, msg);
                PeopleBlocking[i][z] = INVALID_PLAYER_ID;
            }
        }
    }*/
}

stock SetBizType(bizid, type)
{
    new businesstype[128];
    switch(type)
    {
        case 1: businesstype = "Restaurant";
        case 2: businesstype = "Casino";
        case 3: businesstype = "24-7 Store";
        case 4: businesstype = "Ammunation";
        case 5: businesstype = "Clothes Store";
        case 6: businesstype = "Bar/Club";
        case 7: businesstype = "Sex Shop";
        case 8: businesstype = "Boxing Club";
        case 9: businesstype = "Electronic Store";
        case 10: businesstype = "Tattoo";
        case 11: businesstype = "Disco";
        case 12: businesstype = "Betting Place";
        case 13: businesstype = "Barber Shop";
        case 14: businesstype = "Pay&Spray";
    }
    BizInfo[bizid][bizType] = type;
    format(BizInfo[bizid][bizInfo], 128, "%s", businesstype);
    SetBizEnterMSG(bizid);
    return 1;
}

stock SetBizEnterMSG(bizid)
{
    new type = BizInfo[bizid][bizType];
    new businesstype[256];
    switch(type)
    {
        case 1: businesstype = "HINT: Foloseste /meal pentru a manca ceva.";
        case 2: businesstype = "HINT: Nu folosi masinile GTA-ului, foloseste /casino pentru comenzi.";
        case 3: businesstype = "HINT: /buy pentru a cumpara din magazin.";
        case 4: businesstype = "HINT: /buygun pentru a cumpara o arma.";
        case 5: businesstype = "HINT: /buyclothes pentru a cumpara accesorii.";
        case 6: businesstype = "HINT: /buydrink pentru a cumpara racoritoare.";
        case 7: businesstype = "Bine ai venit in Sex Shop.";
        case 8: businesstype = "Bine ai venit la Clubul de Box";
        case 9: businesstype = "HINT: /buy pentru a cumpara din magazin.";
        case 10: businesstype = "Bine ai venit la Tatto Shop.";
        case 11: businesstype = "HINT: /buydrink pentru a cumpara racoritoare.";
        case 12: businesstype = "Bine ai venit la magazinul de pariuri, poti juca blackjack.";
        case 13: businesstype = "Bine ai venit la Barber Shop, foloseste /haircut.";
        case 14: businesstype =  "Bine ai venit in Pay&Spray!";
    }
    format(BizInfo[bizid][bizEnterMSG], 128, "%s", businesstype);
    return 1;
}

stock UpdateBizInfo(bizid)
{
    format(query, sizeof(query), "UPDATE `business` SET `owned` = %d, `locked` = %d, `price`= %d, `levelbuy`= %d, `interior` = %d, `world` = %d, `cash` = %d, `type` = %d, `entrance` = %d WHERE `id` = %d",
    BizInfo[bizid][bizOwned],
    BizInfo[bizid][bizLocked],
    BizInfo[bizid][bizPrice],
    BizInfo[bizid][bizLevelbuy],
    BizInfo[bizid][bizInterior],
    BizInfo[bizid][bizWorld],
    BizInfo[bizid][bizCash],
    BizInfo[bizid][bizType],
    BizInfo[bizid][bizEntrance],
    BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=============================================================================
    format(query, sizeof(query), "UPDATE `business` SET `owner` = '%s', `info` = '%s', `name` = '%s', `entermsg` = '%s' WHERE `id` = %d",
    BizInfo[bizid][bizOwner],
    BizInfo[bizid][bizInfo],
    BizInfo[bizid][bizName],
    BizInfo[bizid][bizEnterMSG],
    BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, false, "", "");
    //=============================================================================
    format(query, sizeof(query), "UPDATE `business` SET `posx` = %f, `posy` = %f, `posz` = %f, `exitx` = %f, `exity` = %f, `exitz` = %f, `radio` = %d WHERE `id` = %d",
    BizInfo[bizid][bizPosX],
    BizInfo[bizid][bizPosY],
    BizInfo[bizid][bizPosZ],
    BizInfo[bizid][bizExitX],
    BizInfo[bizid][bizExitY],
    BizInfo[bizid][bizExitZ],
    BizInfo[bizid][bizRadio],
    BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock SetBusinessInterior(playerid, bizid, int)
{
    if(int == 1)
    {
        BizInfo[bizid][bizExitX] = -794.806030;
        BizInfo[bizid][bizExitY] = 491.686004;
        BizInfo[bizid][bizExitZ] = 1376.194946;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Marcos Bistro", bizid);
    }
    else if(int == 2)
    {
        BizInfo[bizid][bizExitX] = 1212.019897;
        BizInfo[bizid][bizExitY] = -28.663099;
        BizInfo[bizid][bizExitZ] = 1001.089966;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Big Spread Ranch Strip Club", bizid);
    }
    else if(int == 3)
    {
        BizInfo[bizid][bizExitX] = 366.923980;
        BizInfo[bizid][bizExitY] = -72.929359;
        BizInfo[bizid][bizExitY] = 1001.507812;
        BizInfo[bizid][bizInterior] = 10;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Burger Shot", bizid);
    }
    else if(int == 4)
    {
        BizInfo[bizid][bizExitX] = 365.672974;
        BizInfo[bizid][bizExitY] = -10.713200;
        BizInfo[bizid][bizExitZ] = 1001.869995;
        BizInfo[bizid][bizInterior] = 9;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Cluckin Bell", bizid);
    }
    else if(int == 5)
    {
        BizInfo[bizid][bizExitX] = 372.351990;
        BizInfo[bizid][bizExitY] = -131.650986;
        BizInfo[bizid][bizExitZ] = 1001.449951;
        BizInfo[bizid][bizInterior] = 5;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Well Stacked Pizza", bizid);
    }
    else if(int == 6)
    {
        BizInfo[bizid][bizExitX] = 377.098999;
        BizInfo[bizid][bizExitY] = -192.439987;
        BizInfo[bizid][bizExitZ] = 1000.643982;
        BizInfo[bizid][bizInterior] = 17;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Rusty Brown Dohnuts", bizid);
    }
    else if(int == 7)
    {
        BizInfo[bizid][bizExitX] = 460.099976;
        BizInfo[bizid][bizExitY] = -88.428497;
        BizInfo[bizid][bizExitZ] = 999.621948;
        BizInfo[bizid][bizInterior] = 4;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Jays Diner", bizid);
    }
    else if(int == 8)
    {
        BizInfo[bizid][bizExitX] = 681.474976;
        BizInfo[bizid][bizExitY] = -451.150970;
        BizInfo[bizid][bizExitZ] = -25.616798;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Pump Truck Stop Diner", bizid);
    }
    else if(int == 9)
    {
        BizInfo[bizid][bizExitX] = 476.068328;
        BizInfo[bizid][bizExitY] = -14.893922;
        BizInfo[bizid][bizExitZ] = 1003.695312;
        BizInfo[bizid][bizInterior] = 17;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Alhambra", bizid);
    }
    else if(int == 10)
    {
        BizInfo[bizid][bizExitX] = 501.980988;
        BizInfo[bizid][bizExitY] = -69.150200;
        BizInfo[bizid][bizExitZ] = 998.834961;
        BizInfo[bizid][bizInterior] = 11;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Mistys", bizid);

    }
    else if(int == 11)
    {
        BizInfo[bizid][bizExitX] = -227.028000;
        BizInfo[bizid][bizExitY] = 1401.229980;
        BizInfo[bizid][bizExitZ] = 27.769798;
        BizInfo[bizid][bizInterior] = 18;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Lil' Probe Inn", bizid);
    }
    else if(int == 12)
    {
        BizInfo[bizid][bizExitX] = 204.332993;
        BizInfo[bizid][bizExitY] = -166.694992;
        BizInfo[bizid][bizExitZ] = 1000.578979;
        BizInfo[bizid][bizInterior] = 14;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: EXcLusive", bizid);
    }
    else if(int == 13)
    {
        BizInfo[bizid][bizExitX] = 207.737991;
        BizInfo[bizid][bizExitY] = -109.019997;
        BizInfo[bizid][bizExitZ] = 1005.269958;
        BizInfo[bizid][bizInterior] = 15;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Binco", bizid);
    }
    else if(int == 14)
    {
        BizInfo[bizid][bizExitX] = 207.054993;
        BizInfo[bizid][bizExitY] = -138.804993;
        BizInfo[bizid][bizExitZ] = 1003.519958;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: ProLaps", bizid);
    }
    else if(int == 15)
    {
        BizInfo[bizid][bizExitX] = 203.778000;
        BizInfo[bizid][bizExitY] = -48.492397;
        BizInfo[bizid][bizExitZ] = 1001.799988;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: SubUrban", bizid);
    }
    else if(int == 16)
    {
        BizInfo[bizid][bizExitX] = 226.293991;
        BizInfo[bizid][bizExitY] = -7.431530;
        BizInfo[bizid][bizExitZ] = 1002.259949;
        BizInfo[bizid][bizInterior] = 5;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Victim", bizid);
    }
    else if(int == 17)
    {
        BizInfo[bizid][bizExitX] = 161.391006;
        BizInfo[bizid][bizExitY] = -93.159156;
        BizInfo[bizid][bizExitZ] = 1001.804687;
        BizInfo[bizid][bizInterior] = 18;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Zip", bizid);
    }
    else if(int == 18)
    {
        BizInfo[bizid][bizExitX] = 1133.069946;
        BizInfo[bizid][bizExitY] = -9.573059;
        BizInfo[bizid][bizExitZ] = 1000.750000;
        BizInfo[bizid][bizInterior] = 12;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Small Casino in Redsands West", bizid);
    }
    else if(int == 19)
    {
        BizInfo[bizid][bizExitX] = 833.818970;
        BizInfo[bizid][bizExitY] = 7.418000;
        BizInfo[bizid][bizExitZ] = 1004.179993;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Off Track Betting", bizid);
    }
    else if(int == 20)
    {
        BizInfo[bizid][bizExitX] = -100.325996;
        BizInfo[bizid][bizExitY] = -22.816500;
        BizInfo[bizid][bizExitZ] = 1000.741943;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Sex Shop", bizid);
    }
    else if(int == 21)
    {
        BizInfo[bizid][bizExitX] = -2239.569824;
        BizInfo[bizid][bizExitY] = 130.020996;
        BizInfo[bizid][bizExitZ] = 1035.419922;
        BizInfo[bizid][bizInterior] = 6;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Zero's RC Shop", bizid);
    }
    else if(int == 22)
    {
        BizInfo[bizid][bizExitX] = 286.148987;
        BizInfo[bizid][bizExitY] = -40.644398;
        BizInfo[bizid][bizExitZ] = 1001.569946;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Ammunation 1", bizid);
    }
    else if(int == 23)
    {
        BizInfo[bizid][bizExitX] = 286.800995;
        BizInfo[bizid][bizExitY] = -82.547600;
        BizInfo[bizid][bizExitZ] = 1001.539978;
        BizInfo[bizid][bizInterior] = 4;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Ammunation 2", bizid);
    }
    else if(int == 24)
    {
        BizInfo[bizid][bizExitX] = 296.919983;
        BizInfo[bizid][bizExitY] = -108.071999;
        BizInfo[bizid][bizExitZ] = 1001.569946;
        BizInfo[bizid][bizInterior] = 6;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Ammunation 3", bizid);
    }
    else if(int == 25)
    {
        BizInfo[bizid][bizExitX] = 316.524994;
        BizInfo[bizid][bizExitY] = -167.706985;
        BizInfo[bizid][bizExitZ] = 999.661987;
        BizInfo[bizid][bizInterior] = 6;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Ammunation 4", bizid);
    }
    else if(int == 26)
    {
        BizInfo[bizid][bizExitX] = -2637.449951;
        BizInfo[bizid][bizExitY] = 1404.629883;
        BizInfo[bizid][bizExitZ] = 906.457947;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Jizzys", bizid);
    }
    else if(int == 27)
    {
        BizInfo[bizid][bizExitX] = -25.884499;
        BizInfo[bizid][bizExitY] = -185.868988;
        BizInfo[bizid][bizExitZ] = 1003.549988;
        BizInfo[bizid][bizInterior] = 17;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: 24-7 1", bizid);
    }
    else if(int == 28)
    {
        BizInfo[bizid][bizExitX] = 6.091180;
        BizInfo[bizid][bizExitY] = -29.271898;
        BizInfo[bizid][bizExitZ] = 1003.549988;
        BizInfo[bizid][bizInterior] = 10;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: 24-7 2", bizid);
    }
    else if(int == 29)
    {
        BizInfo[bizid][bizExitX] = -30.946699;
        BizInfo[bizid][bizExitY] = -89.609596;
        BizInfo[bizid][bizExitZ] = 1003.549988;
        BizInfo[bizid][bizInterior] = 18;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: 24-7 3", bizid);
    }
    else if(int == 30)
    {
        BizInfo[bizid][bizExitX] = -25.132599;
        BizInfo[bizid][bizExitY] = -139.066986;
        BizInfo[bizid][bizExitZ] = 1003.549988;
        BizInfo[bizid][bizInterior] = 16;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: 24-7 4", bizid);
    }
    else if(int == 31)
    {
        BizInfo[bizid][bizExitX] = -27.312300;
        BizInfo[bizid][bizExitY] = -29.277599;
        BizInfo[bizid][bizExitZ] = 1003.549988;
        BizInfo[bizid][bizInterior] = 4;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: 24-7 5", bizid);
    }
    else if(int == 32)
    {
        BizInfo[bizid][bizExitX] = -26.691599;
        BizInfo[bizid][bizExitY] = -55.714897;
        BizInfo[bizid][bizExitZ] = 1003.549988;
        BizInfo[bizid][bizInterior] = 6;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: 24-7 6", bizid);
    }
    else if(int == 33)
    {
        BizInfo[bizid][bizExitX] = 1494.430053;
        BizInfo[bizid][bizExitY] = 1305.63004;
        BizInfo[bizid][bizExitZ] = 1093.290039;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Advertising/Phone Network", bizid);
    }
    else if(int == 34)
    {
        BizInfo[bizid][bizExitX] = 965.1851;
        BizInfo[bizid][bizExitY] = -53.2832;
        BizInfo[bizid][bizExitZ] = 1001.1246;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Bothel", bizid);
    }
    else if(int == 35)
    {
        BizInfo[bizid][bizExitX] = 2018.0131;
        BizInfo[bizid][bizExitY] = 1017.8541;
        BizInfo[bizid][bizExitZ] = 996.8750;
        BizInfo[bizid][bizInterior] = 10;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Four Dragons Casino", bizid);
    }
    else if(int == 36)
    {
        BizInfo[bizid][bizExitX] = 617.5380;
        BizInfo[bizid][bizExitY] = -1.9900;
        BizInfo[bizid][bizExitZ] = 1000.6829;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Bikers Garage", bizid);
    }
    else if(int == 37)
    {
        BizInfo[bizid][bizExitX] = 772.112000;
        BizInfo[bizid][bizExitY] = -3.898650;
        BizInfo[bizid][bizExitZ] = 1000.687988;
        BizInfo[bizid][bizInterior] = 5;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Ganton Gym", bizid);
    }
    else if(int == 38) // Tattoo 1
    {
        BizInfo[bizid][bizExitX] = -204.439987;
        BizInfo[bizid][bizExitY] = -8.469599;
        BizInfo[bizid][bizExitZ] = 1002.273437;
        BizInfo[bizid][bizInterior] = 17;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Tattoo 1", bizid);
    }
    else if(int == 39) // Tattoo 2
    {
        BizInfo[bizid][bizExitX] = -204.439987;
        BizInfo[bizid][bizExitY] = -43.652496;
        BizInfo[bizid][bizExitZ] = 1002.273437;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Tattoo 2", bizid);
    }
    else if(int == 40) // Tattoo 3
    {
        BizInfo[bizid][bizExitX] = -204.439987;
        BizInfo[bizid][bizExitY] = -26.453998;
        BizInfo[bizid][bizExitZ] = 1002.273437;
        BizInfo[bizid][bizInterior] = 12;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Tattoo 3", bizid);
    }
    else if(int == 41)
    {
        BizInfo[bizid][bizExitX] = 318.564972;
        BizInfo[bizid][bizExitY] = 1118.209961;
        BizInfo[bizid][bizExitZ] = 1083.979980;
        BizInfo[bizid][bizInterior] = 5;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Crack Den", bizid);
    }
    else if(int == 42)
    {
        BizInfo[bizid][bizExitX] = -2240.468505;
        BizInfo[bizid][bizExitY] = 137.060440;
        BizInfo[bizid][bizExitZ] = 1035.414062;
        BizInfo[bizid][bizInterior] = 6;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Zero RC shop", bizid);
    }
    else if(int == 43)
    {
        BizInfo[bizid][bizExitX] = 245.2307;
        BizInfo[bizid][bizExitY] = 304.7632;
        BizInfo[bizid][bizExitZ] = 999.1484;
        BizInfo[bizid][bizInterior] = 0;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: Record Studio", bizid);
    }
    else if(int == 44)
    {
        BizInfo[bizid][bizExitX] = 1506.24609375;
        BizInfo[bizid][bizExitY] = -1815.40039062;
        BizInfo[bizid][bizExitZ] = -43.72590637;
        BizInfo[bizid][bizInterior] = 0;
        format(msg, sizeof msg, "Biz ID: %d - Descriere: LS Court Room", bizid);
    }
    else if(int == 45)
    {
        BizInfo[bizid][bizExitX] = 963.418762;
        BizInfo[bizid][bizExitY] = 2108.292480;
        BizInfo[bizid][bizExitZ] = 1011.030273;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof(msg), "Biz ID: %d - Descriere: Meat Factory", bizid);
    }
    else if(int == 46)
    {
        BizInfo[bizid][bizExitX] = -2154.34155;
        BizInfo[bizid][bizExitY] = 618.79169;
        BizInfo[bizid][bizExitZ] = 1055.45166;
        BizInfo[bizid][bizInterior] = 1;
        format(msg, sizeof(msg), "Biz ID: %d - Descriere: Betting Place", bizid);
    }
    else if(int == 47)
    {
        BizInfo[bizid][bizExitX] = 418.6547;
        BizInfo[bizid][bizExitY] = -83.6987;
        BizInfo[bizid][bizExitZ] = 1001.8047;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof(msg), "Biz ID: %d - Descriere: Barber Shop", bizid);
    }
    else if(int == 48)
    {
        BizInfo[bizid][bizExitX] = -2640.762939;
        BizInfo[bizid][bizExitY] = 1406.682006;
        BizInfo[bizid][bizExitZ] = 906.460937;
        BizInfo[bizid][bizInterior] = 3;
        format(msg, sizeof(msg), "Biz ID: %d - Descriere: Pleasure Domes", bizid);
    }
    UpdateBizInfo(bizid);
    SCM(playerid, COLOR_INFO, msg);
    return 1;
}

stock OnBizGiveMoney(cash, owner[])
{
    format(query, sizeof(query), "UPDATE `users` SET `cash` = %d WHERE `name` = '%s'", cash, owner);
    mysql_function_query(dbHandle, query, false, "", "");
}

stock OwnBusiness(playerid)
{
    if(PlayerInfo[playerid][pBizKey] != -1 && !strcmp(GetName(playerid), BizInfo[PlayerInfo[playerid][pBizKey]][bizOwner]))
        return true;
    return false;
}

stock NearBusiness(playerid)
{
    new key = PlayerInfo[playerid][pBizKey];
    if(PlayerToPoint(2.0,playerid, BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ]))
    {
        return true;
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "ERROR: Trebuie sa fi la intrarea afacerii!");
        return false;
    }
}

stock InBusiness(playerid)
{
    new key = PlayerInfo[playerid][pBizKey];
    new workon = PlayerInfo[playerid][pWorkOn];
    if(BizEntered[playerid] == key && GetWorld(playerid) == key || BizEntered[playerid] == workon && GetWorld(playerid) == workon)
    {
        return true;
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "ERROR: Trebuie sa fi inauntrul cladirii!");
        return false;
    }
}

stock Float:GetArmour(playerid)
{
    new Float:armour;
    GetPlayerArmour(playerid, armour);
    return armour;
}

stock GetRankName(playerid)
{
    new ranktext[MAX_RANK_NAME];
    switch(PlayerInfo[playerid][pRank])
    {
        case 0: format(ranktext, MAX_RANK_NAME, "Civil");
        case 1: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank1]);
        case 2: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank2]);
        case 3: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank3]);
        case 4: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank4]);
        case 5: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank5]);
        case 6: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank6]);
        case 7: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank7]);
        case 8: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank8]);
        case 9: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank9]);
        case 10: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank10]);
        case 11: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank11]);
        case 12: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank12]);
        case 13: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank13]);
        case 14: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank14]);
        case 15: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank15]);
        case 16: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank16]);
        case 17: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank17]);
        case 18: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank18]);
        case 19: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank19]);
        case 20: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank20]);
    }
    return ranktext;
}

stock ShowBadgeToPlayer(playerid, toplayerid)
{
    new szFactionName[64];
    format(szFactionName, 32, "%s", Factions[PlayerInfo[playerid][pFaction]][fName]);
    if(PlayerNearPlayer(3.0, playerid, toplayerid))
    {
        SCM(toplayerid, COLOR_LSPDNEW, "_______________________");
        SCM(toplayerid, COLOR_WHITE, szFactionName);
        format(szFactionName, 1+MAX_PLAYER_NAME+MAX_RANK_NAME, "%s - %s", GetRankName(playerid), GetNameWithMask(playerid));
        SCM(toplayerid, COLOR_WHITE, szFactionName);
        format(szFactionName, 21, "Numarul insignei: %d", PlayerInfo[playerid][pBadgeNumber]);
        SCM(toplayerid, COLOR_WHITE, szFactionName);
        SCM(toplayerid, COLOR_LSPDNEW, "_______________________");
        ActionMessageToPlayer(playerid,toplayerid,20.0,"scoate insigna si i-o arata lui");
    }
    else return NotNearPlayerMSG(playerid);
    return 1;
}

stock GetPlayerLastName(playerid)
{
    new namestring[2][MAX_PLAYER_NAME];
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
    split(name, namestring, '_');
    return namestring[1];
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

public OnFurnitureInsert(houseid, furnitureslot)
{
    FurnitureInfo[houseid][furnitureslot][fID] = cache_insert_id();
    return 1;
}

public ActionMessageToPlayer(playerid,targetid,Float:radius,message[])
{
    new str[128];
    format(str, sizeof(str), "%s", message);
    format(msg, sizeof(msg), "* %s %s %s", GetNameWithMask(playerid), str, GetNameWithMask(targetid));
    ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
    return 1;
}

stock GetShortFactionName(factionid)
{
    new short[24];
    format(short, sizeof(short), "%s", Factions[factionid][fShortName]);
    return short;
}

stock GetJobName(jobid)
{
    new job[64];
    if(jobid == DRUGDEALER)
    {
        job = "Drug Dealer";
    }
    else if(jobid == WEAPONDEALER)
    {
        job = "Weapon Dealer";
    }
    else
    {
        format(job, sizeof(job), "%s", JobsInfo[jobid][jobName]);
    }
    return job;
}

stock GetJobRank(playerid)
{
    new ranktext[MAX_RANK_NAME];
    switch(PlayerInfo[playerid][pJobRank])
    {
        case 0: format(ranktext, MAX_RANK_NAME, "None");
        case 1: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank1]);
        case 2: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank2]);
        case 3: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank3]);
        case 4: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank4]);
        case 5: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank5]);
        case 6: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank6]);
        case 7: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank7]);
        case 8: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank8]);
        case 9: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank9]);
        case 10: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank10]);
    }
    return ranktext;
}

stock SendFactionMessage(faction, color, string[])
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == faction)
        {
            SCM(i, color, string);
        }
    }
    return 1;
}

stock SendAllFactionsMessage(color, string[])
{
    for(new z = 0; z < MAX_FACTIONS; z++)
    {
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pFaction] == z)
            {
                SCM(i, color, string);
            }
        }
    }
    return 1;
}

stock SafeResetPlayerWeapons(playerid)
{
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 47; i++)
        Weapons[playerid][i] = 0;
    return 1;
}

stock isHighCommand(playerid)
{
    if(PlayerInfo[playerid][pRank] >= Factions[PlayerInfo[playerid][pFaction]][fLeaderRank]-2 && PlayerInfo[playerid][pRank] <= Factions[PlayerInfo[playerid][pFaction]][fLeaderRank])
        return true;
    return false;
}

stock isLeader(playerid)
{
    if(PlayerInfo[playerid][pRank] == Factions[PlayerInfo[playerid][pFaction]][fLeaderRank])
        return true;
    return false;
}

stock AddCriminalRecord(playerid, szCharge[], iOfficer)
{
    if(strlen(szCharge) < 5)
    {
        SCM(iOfficer, COLOR_LIGHTRED, "ERROR: Motivul arestarii trebuie sa contina mai multe litere / motive.");
        return 0;
    }
    else
    {
        format(query, sizeof(query),"INSERT INTO `criminalrecords` (userid, charge, date, officer) VALUES(%d, '%s', '%s', %d)", PlayerInfo[playerid][pDatabaseID], szCharge, GetFullDate(), PlayerInfo[iOfficer][pDatabaseID]);
        mysql_function_query(dbHandle, query, false, "", "");
        return 1;
    }
}

stock FindVehicleByPlate(plate[])
{
    for(new i = 1; i <=GetVehiclePoolSize(); i++)
    {
        if(CompareStrings(plate, VehicleInfo[i][carPlate]) && VehicleInfo[i][carOwned] == 1 && VehicleInfo[i][carSpawned] == 1)
        {
            return true;
        }
    }
    return false;
}

stock GetVehicleByPlate(plate[])
{
    for(new i = 1; i <=GetVehiclePoolSize(); i++)
    {
        if(CompareStrings(plate, VehicleInfo[i][carPlate]) && VehicleInfo[i][carOwned] == 1 && VehicleInfo[i][carSpawned] == 1)
        {
            return i;
        }
    }
    return INVALID_VEHICLE_ID;
}

stock PutPlayerInCell(playerid)
{
    new cell = randomEx(1, 5);
    switch(cell)
    {
        case 1:
        {
            SetPlayerPos(playerid, 227.4369,110.2468,999.0156);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 227.4369,110.2468,999.0156, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 2:
        {
            SetPlayerPos(playerid, 223.4676,110.3705,999.0156);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 223.4676,110.3705,999.0156, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 3:
        {
            SetPlayerPos(playerid, 219.4929,110.2554,999.0156);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 219.4929,110.2554,999.0156, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 4:
        {
            SetPlayerPos(playerid, 215.4898,110.2842,999.0156);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 215.4898,110.2842,999.0156, 1.0, -1, -1, -1, -1, -1, -1);
        }
    }
    return 1;
}

stock PutPlayerInPrisonCell(playerid)
{
    new cell = randomEx(1, 13);
    switch(cell)
    {
        case 1:
        {
            SetPlayerPos(playerid, 1778.4320,-1581.6472,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1778.4320,-1581.6472,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 2:
        {
            SetPlayerPos(playerid, 1774.2881,-1582.2438,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1774.2881,-1582.2438,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 3:
        {
            SetPlayerPos(playerid, 1769.9882,-1582.2438,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1769.9882,-1582.2438,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 4:
        {
            SetPlayerPos(playerid, 1765.7943,-1582.0508,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1765.7943,-1582.0508,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 5:
        {
            SetPlayerPos(playerid, 1761.5165,-1582.1844,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1761.5165,-1582.1844,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 6:
        {
            SetPlayerPos(playerid, 1757.1665,-1582.1844,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1757.1665,-1582.1844,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 7:
        {
            SetPlayerPos(playerid, 1778.5205,-1564.2029,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1778.5205,-1564.2029,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 8:
        {
            SetPlayerPos(playerid, 1774.1705,-1564.2029,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1774.1705,-1564.2029,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 9:
        {
            SetPlayerPos(playerid, 1769.8306,-1564.2029,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1769.8306,-1564.2029,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 10:
        {
            SetPlayerPos(playerid, 1765.6345,-1564.3988,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1765.6345,-1564.3988,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 11:
        {
            SetPlayerPos(playerid, 1761.2845,-1564.3988,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1761.2845,-1564.3988,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
        case 12:
        {
            SetPlayerPos(playerid, 1756.9346,-1564.3988,1734.9430);
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1756.9346,-1564.3988,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
        }
    }
    SCMEx(playerid, COLOR_GRAD2, "{FFFFFF}[{FFFF00}PRISON{FFFFFF}]: {FFFF00}Ai fost pus automat in inchisoare, esti in celula cu numarul %d.", cell);
    return 1;
}

stock CreateStrip(Float:x, Float:y, Float:z, Float:angle)
{
    new object;
    object = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, angle-90);
    SpikeInfo[object][sCreated] = 1;
    SpikeInfo[object][sX] = x;
    SpikeInfo[object][sY] = y;
    SpikeInfo[object][sZ] = z-0.9;
    SpikeInfo[object][sObject] = object;
    return 1;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(SpikeInfo[i][sCreated] == 1)
        {
            SpikeInfo[i][sCreated] = 0;
            SpikeInfo[i][sX] = 0.0;
            SpikeInfo[i][sY] = 0.0;
            SpikeInfo[i][sZ] = 0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
        }
    }
    return 0;
}

stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
            if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                return 1;
            }
        }
    }
    return 0;
}

stock CountHouseTrunk(house)
{
    new count;
    for(new i = 1; i < MAX_HOUSE_WEAPONS; i++)
    {
        if(HouseInfo[house][hWeapon][i] != 0)
        {
            count++;
        }
    }
    return count;
}

stock GetNextHouseTrunkSlot(house)
{
    for(new i = 1; i < MAX_HOUSE_WEAPONS; i++)
    {
        if(HouseInfo[house][hWeapon][i] == 0)
        {
            return i;
        }
    }
    return -1;
}

stock PlaySoundForAll(soundid, Float:x, Float:y, Float:z)
{
    foreach(new i : Player)
    {
        if(PlayerToPoint(20.0, i, x, y ,z))
        {
            PlayerPlaySound(i, soundid, x, y, z);
        }
    }
}

stock VehicleTrunk(vehicle, bool:toggle)
{
    GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
    if(toggle)
    {
        SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
        VehicleInfo[vehicle][carTrunkLock] = 1;
    }
    else
    {
        SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
        VehicleInfo[vehicle][carTrunkLock] = 0;
    }
    return 1;
}

stock SCMEx(playerid, colour, const fmat[], va_args<>)
{
    new str[145];
    va_format(str, sizeof (str), fmat, va_start<3>);
    return SendClientMessage(playerid, colour, str);
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx2,Float:cy2,Float:cz2,Float:fx2,Float:fy2,Float:fz2;
    GetPlayerCameraPos(playerid, cx2, cy2, cz2);
    GetPlayerCameraFrontVector(playerid, fx2, fy2, fz2);
    return (radius >= DistanceCameraTargetToLocation(cx2, cy2, cz2, x, y, z, fx2, fy2, fz2));
}

stock HasAttachedObject(playerid, objectid)
{
    for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
        if(PoliceObjects[playerid][i] == objectid)
            return true;
    }
    return false;
}

stock SendPMToPlayer(playerid, PID, text[])
{
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        if(GetPVarInt(playerid, "AdminDuty") == 0)
        {
            format(msg, sizeof(msg), "(( PM de la %s(ID:%d): %.*s ...", GetName(playerid), playerid, pos, (text));
            SCM(PID, COLOR_PMIN, msg);
            format(msg, sizeof(msg), "... %s ))", (text)[pos]);
            SCM(PID, COLOR_PMIN, msg);
            format(msg, sizeof(msg), "(( PM catre %s(ID:%d): %.*s ...", GetName(PID), PID, pos, (text));
            SCM(playerid, COLOR_PMOUT, msg);
            format(msg, sizeof(msg), "... %s ))", (text)[pos]);
            SCM(playerid, COLOR_PMOUT, msg);
        }
        else
        {
            format(msg, sizeof(msg), "(( PM de la {FF8000}%s{F6EA51}(ID:%d): %.*s ...", GetName(playerid), playerid, pos, (text));
            SCM(PID, COLOR_PMIN, msg);
            format(msg, sizeof(msg), "(( ... %s ))", (text)[pos]);
            SCM(PID, COLOR_PMIN, msg);
            format(msg, sizeof(msg), "(( PM catre %s(ID:%d): %.*s ... ))", GetName(PID), PID, pos, (text));
            SCM(playerid, COLOR_PMOUT, msg);
            format(msg, sizeof(msg), "(( ... %s ))", (text)[pos]);
            SCM(playerid, COLOR_PMOUT, msg);
        }
    }
    else
    {
        if(GetPVarInt(playerid, "AdminDuty") == 0)
        {
            format(msg, sizeof(msg), "(( PM de la %s(ID:%d): %s ))", GetName(playerid), playerid, (text));
            SCM(PID, COLOR_PMIN, msg);
            format(msg, sizeof(msg), "(( PM catre %s(ID:%d): %s ))", GetName(PID), PID, (text));
            SCM(playerid, COLOR_PMOUT, msg);
        }
        else
        {
            format(msg, sizeof(msg), "(( PM de la {FF8000}%s{F6EA51}(ID:%d): %s ))", GetName(playerid), playerid, (text));
            SCM(PID, COLOR_PMIN, msg);
            format(msg, sizeof(msg), "(( PM catre %s (ID:%d): %s ))", GetName(PID), PID, (text));
            SCM(playerid, COLOR_PMOUT, msg);
        }
    }
    foreach(new i : Player)
    {
        if(GetIntVar(i, "PmSpy") == playerid && GetIntVar(i, "IsSpying") == 1 || GetIntVar(i, "IsSpyingAll") == 1)
        {
            if(strlen(text) > MAXLEN)
            {
                new pos = MAXLEN;
                if(pos < MAXLEN-1) pos = MAXLEN;
                format(msg, sizeof(msg), "(( PM Spy %s to %s(ID:%d): %.*s ... ))", GetName(playerid), GetName(PID), PID, pos, (text));
                SCM(i, COLOR_PMOUT, msg);
                format(msg, sizeof(msg), "(( ... %s ))", (text)[pos]);
                SCM(i, COLOR_PMOUT, msg);
            }
            else
            {
                format(msg, sizeof(msg), "(( PM Spy %s to %s(ID:%d): %s ))", GetName(playerid), GetName(PID), PID, text);
                SCM(i, COLOR_PMOUT, msg);
            }
        }
    }
    return 1;
}

stock RemovePlayerWeapon(playerid, weaponid)
{
    new plyWeapons[12], plyAmmo[12];
    for(new slot = 0; slot != 12; slot++)
    {
        new wep, ammo;
        GetPlayerWeaponData(playerid, slot, wep, ammo);
        if(wep != weaponid)
        {
            GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
        }
    }
    SafeResetPlayerWeapons(playerid);
    for(new slot = 0; slot != 12; slot++)
    {
        GiveWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
    }
}

stock SetLastCaller(playerid)
{
    for(new i = 0; i < sizeof(CallInfo); i++)
    {
        if(CallInfo[i][callTaken] == 0)
        {
            format(CallInfo[i][callType], 64, "%s", GetStringVar(playerid, "callType"));
            format(CallInfo[i][callSituation], 64, "%s", GetStringVar(playerid, "callSituation"));
            format(CallInfo[i][callLocation], 64, "%s", GetStringVar(playerid, "callLocation"));
            format(CallInfo[i][callTrace], 64, "%s", GetStringVar(playerid, "callTrace"));
            format(CallInfo[i][callDate], 64, "%s", GetFullDate());
            CallInfo[i][callID] = randomEx(1234, 9788);
            CallInfo[i][callCaller] = playerid;
            CallInfo[i][callTaken] = 1;
            return 1;
        }
    }
    if(ToLastCallSlot < 11)
    {
        format(CallInfo[ToLastCallSlot][callType], 64, "%s", GetStringVar(playerid, "callType"));
        format(CallInfo[ToLastCallSlot][callSituation], 64, "%s", GetStringVar(playerid, "callSituation"));
        format(CallInfo[ToLastCallSlot][callLocation], 64, "%s", GetStringVar(playerid, "callLocation"));
        format(CallInfo[ToLastCallSlot][callTrace], 64, "%s", GetStringVar(playerid, "callTrace"));
        format(CallInfo[ToLastCallSlot][callDate], 64, "%s", GetFullDate());
        CallInfo[ToLastCallSlot][callID] = randomEx(1234, 9788);
        CallInfo[ToLastCallSlot][callCaller] = playerid;
        CallInfo[ToLastCallSlot][callTaken] = 1;
        ToLastCallSlot++;
        if(ToLastCallSlot == 10)
            ToLastCallSlot = 0;
    }
    return 1;
}

stock SetLastArrest(playerid, suspect, time)
{
    for(new i = 0; i < sizeof(ArrestInfo); i++)
    {
        if(ArrestInfo[i][arrestTaken] == 0)
        {
            format(ArrestInfo[i][arrestDate], 64, "%s", GetFullDate());
            format(ArrestInfo[i][arrestLocation], 64, "%s", GetStringVar(playerid, "ArrestLocation"));
            ArrestInfo[i][arrestSuspect] = suspect;
            ArrestInfo[i][arrestOfficer] = playerid;
            ArrestInfo[i][arrestTime] = time;
            ArrestInfo[i][arrestTaken] = 1;
            return 1;
        }
    }
    if(ToLastCallSlot < 31)
    {
        format(ArrestInfo[ToLastArrestSlot][arrestDate], 64, "%s", GetFullDate());
        format(ArrestInfo[ToLastArrestSlot][arrestLocation], 64, "%s", GetStringVar(playerid, "ArrestLocation"));
        ArrestInfo[ToLastArrestSlot][arrestSuspect] = suspect;
        ArrestInfo[ToLastArrestSlot][arrestOfficer] = playerid;
        ArrestInfo[ToLastArrestSlot][arrestTime] = time;
        ArrestInfo[ToLastArrestSlot][arrestTaken] = 1;
        ToLastArrestSlot++;
        if(ToLastArrestSlot == 30)
            ToLastArrestSlot = 0;
    }
    return 1;
}

stock GetFullDate()
{
    new date[128];
    new year, month, day, hour, minute, second;
    getdate(year, month, day);
    gettime(hour, minute, second);
    format(date, sizeof(date), "%02d-%02d-%d %02d:%02d:%02d", day, month, year, hour, minute, second);
//  format(date, sizeof(date), "%d %s %02d - %d:%d:%d", day, MonthName(month), year, hour, minute, second);
    return date;
}

stock GetLocation(playerid)
{
    new string[64];
    GetCoords2DZone(PlayerPosX(playerid), PlayerPosY(playerid), string, MAX_ZONE_NAME);
    return string;
}

stock GetHouseLocation(playerid)
{
    new string[64];
    if(PlayerInfo[playerid][pHouseKey] == -1)
        string = "Unknown";
    else
        GetCoords2DZone(HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceY], string, MAX_ZONE_NAME);
    return string;
}

stock isHouseDoor(model)
{
    if(model == 1493 || model == 1494 || model == 1495 || model == 1496 || model == 1497 || model == 1498 || model == 1500 || model == 1501)
    {
        return 1;
    }
    return 0;
}

stock IsPlayerAiming(playerid) {
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
    (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
    return 0;
}

stock TruckTaken(vehicle)
{
    foreach(new i : Player)
    {
        if(TruckVehicle[i] == vehicle)
            return true;
    }
    return false;
}

stock SetTruckStage(playerid, stage)
{
    SetIntVar(playerid, "TruckStage", stage);
    SetTruckerText(playerid);
    return 1;
}

stock GetTruckStage(playerid)
{
    return GetIntVar(playerid, "TruckStage");
}

stock HideTruckText(playerid)
{
    PlayerTextDrawHide(playerid, TruckerDraw[playerid]);
    return 1;
}

stock ShowTruckText(playerid)
{
    PlayerTextDrawShow(playerid, TruckerDraw[playerid]);
    return 1;
}

stock GetMaxTruckComps(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 422)
        return BOBCAT_COMPS;
    if(model == 543)
        return SADLER_COMPS;
    if(model == 554)
        return YOSEMITE_COMPS;
    if(model == 609)
        return BOXVILLE_COMPS;
    if(model == 456)
        return YANKEE_COMPS;
    if(model == 403)
        return LINERUNNER_COMPS;
    if(model == 515)
        return ROADTRAIN_COMPS;
    return 0;
}

stock SetTruckerText(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(GetTruckStage(playerid) == 1) //Show destination
    {
        format(msg, sizeof(msg), "~w~INCARCARE: %s DE LA ~y~%s.~n~~w~DESTINATIE CURENTA: ~r~%s~n~/DROPOFF ~w~PENTRU A TERMINA MISIUNEA MAI DEVREME.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"), GetStringVar(playerid, "TruckDest"));
    }
    if(GetTruckStage(playerid) == 2) //Loading up
    {
        format(msg, sizeof(msg), "~w~INCARCI %s DE LA ~r~%s.~n~~y~%d SECUNDE, ~w~RAMASE. ~g~%d ~w~COMPONENTE", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDest"), LoadingTruck{playerid}, TruckComps[vehicle]);
    }
    if(GetTruckStage(playerid) == 3) //Max capacity
    {
        if(TruckComps[TruckVehicle[playerid]] < GetMaxTruckComps(TruckVehicle[playerid]))
        {
            format(msg, sizeof(msg), "~w~DESCARCA %s LA ~y~%s.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"));
        }
        else
        {
            format(msg, sizeof(msg), "~w~DESCARCA %s LA ~y~%s.~n~~r~ESTI LA CAPACITATE MAXIMA.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"));
        }
    }
    if(GetTruckStage(playerid) == 4) //Dropping off
    {
        format(msg, sizeof(msg), "~w~ABANDONEZI %s COMPONENTE LA ~r~%s.~n~~y~%d COMPONENTE ~w~RAMASE.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"), TruckComps[GetPlayerVehicleID(playerid)]);
    }
    if(GetTruckStage(playerid) == 5) //Returning the truck to it's original location.
    {
        format(msg, sizeof(msg), "~y~TE RUGAM RETURNEAZA VEHICULUL LA LOCUL INITIAL.");
    }
    //===============Trucker Specialist Stuff for the Trailer===============//
    if(GetTruckStage(playerid) == 6) //Has to attach a trailer before the gather location pops up.
    {
        format(msg, sizeof(msg), "~r~ATASEAZA UN TRAILER LA MASINA INAINTE DE A INCEPE MUNCA");
    }
    //===============Trucker Specialist Stuff for the Trailer===============//
//  PlayerTextDrawShow(playerid, TruckerDraw[playerid]);
//  PlayerTextDrawSetString(playerid, TruckerDraw[playerid], msg);
    JobMessage(playerid, msg, 5);
    return 1;
}

function EditDynamicObject2(playerid, object)
{
    SetTimerEx("EditDynamicObject", 1000, false, "ii", playerid, object);
    return 1;
}

function EditObject2(playerid, object)
{
    SetTimerEx("EditObject", 1000, false, "ii", playerid, object);
    return 1;
}

forward JustReported(playerid);
public JustReported(playerid)
{
    SetPVarInt(playerid, "JustReported", 0);
    return 1;
}


//DMV - Iuly
forward IsAtDMVCP(playerid, type);
public IsAtDMVCP(playerid, type)
{
    if(type == 1) if(IsPlayerInRangeOfPoint(playerid, 2, DMVBike[dmv_bikestage[playerid]][dX], DMVBike[dmv_bikestage[playerid]][dY], DMVBike[dmv_bikestage[playerid]][dZ]) && IsDriver(playerid)) return true;
    if(type == 2) if(IsPlayerInRangeOfPoint(playerid, 4, DMV[dmv_carstage[playerid]][dX], DMV[dmv_carstage[playerid]][dY], DMV[dmv_carstage[playerid]][dZ]) && IsDriver(playerid)) return true;
    if(type == 3) if(IsPlayerInRangeOfPoint(playerid, 5, DMVBig[dmv_bigcarstage[playerid]][dX], DMVBig[dmv_bigcarstage[playerid]][dY], DMVBig[dmv_bigcarstage[playerid]][dZ]) && IsDriver(playerid)) return true;
    return false;
}

forward HandleDMV(playerid);
public HandleDMV(playerid)
{
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul.");
    PlaySound(playerid, 1138);
    if(dmv_bike[playerid] == 1)
    {
        if(dmv_bikestage[playerid] == 26)
        {
            PlayerInfo[playerid][pBikeLic] = 1;
            SCM(playerid, COLOR_GREEN, "Felicitari! Ai obtinut licenta de categorie A (motociclete).");
            GiveCash(playerid, -20);
            dmv_bikestage[playerid] = -1;
            dmv_bike[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
            SetIntVar(playerid, "DMV", 0);
            return 1;
        }
        dmv_bikestage[playerid]++;
        SetPlayerCheckpoint(playerid, DMVBike[dmv_bikestage[playerid]][dX], DMVBike[dmv_bikestage[playerid]][dY], DMVBike[dmv_bikestage[playerid]][dZ], 2);
    }
    if(dmv_car[playerid] == 1)
    {
        if(dmv_carstage[playerid] == 57)
        {
            PlayerInfo[playerid][pCarLic] = 1;
            SCM(playerid, COLOR_GREEN, "Felicitari! Ai obtinut licenta de categorie B (vehicule 2/4 usi).");
            GiveCash(playerid, -100);
            dmv_carstage[playerid] = -1;
            dmv_car[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
            SetIntVar(playerid, "DMV", 0);
            return 1;
        }
        dmv_carstage[playerid]++;
        SetPlayerCheckpoint(playerid, DMV[dmv_carstage[playerid]][dX], DMV[dmv_carstage[playerid]][dY], DMV[dmv_carstage[playerid]][dZ], 4);
    }
    if(dmv_bigcar[playerid] == 1)
    {
        if(dmv_bigcarstage[playerid] == 23)
        {
            PlayerInfo[playerid][pBigLic] = 1;
            SCM(playerid, COLOR_GREEN, "Felicitari! Ai obtinut licenta de categorie C (autoutilitare + autobuze).");
            GiveCash(playerid, -200);
            dmv_bigcarstage[playerid] = -1;
            dmv_bigcar[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
            SetIntVar(playerid, "DMV", 0);
            return 1;
        }
        dmv_bigcarstage[playerid]++;
        SetPlayerCheckpoint(playerid, DMVBig[dmv_bigcarstage[playerid]][dX], DMVBig[dmv_bigcarstage[playerid]][dY], DMVBig[dmv_bigcarstage[playerid]][dZ], 5);
    }
    return 1;
}

forward DMVTimer(playerid);
public DMVTimer(playerid)
{
    new car = GetPlayerVehicleID(playerid);
    SCM(playerid, COLOR_WHITE, "Dureaza prea mult sa faci testul de condus!");
    Delete3DTextLabel(veicolo_callsign_testo[car]);
    dmvstage[playerid] = -1;
    SetPVarInt(playerid, "DMV", 0);
    ToggleVehicleEngine(car, playerid);
    SetVehicleToRespawn(car);
    DisablePlayerCheckpoint(playerid);
    PlayerInfo[playerid][pCarLic] = 0;
    return 1;
}

//End of DMV CHECKS

stock SetRandomDestination(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(IsATruckFour(vehicle) && !IsTrailerAttachedToVehicle(vehicle))
    {
        SetTruckStage(playerid, 6);
    }
    else
    {
        new drop, gather, item;
        drop = random(sizeof(TruckDropInfo));
        gather = random(sizeof(TruckInfo));
        item = random(sizeof(TruckItems));
        GatherX[playerid] = TruckInfo[gather][tDesX];
        GatherY[playerid] = TruckInfo[gather][tDesY];
        GatherZ[playerid] = TruckInfo[gather][tDesZ];
        DropOffX[playerid] = TruckDropInfo[drop][tDesX];
        DropOffY[playerid] = TruckDropInfo[drop][tDesY];
        DropOffZ[playerid] = TruckDropInfo[drop][tDesZ];
        SetStringVar(playerid, "TruckGather", TruckItems[item][tGather]);
        SetStringVar(playerid, "TruckDrop", TruckDropInfo[drop][tDestination]);
        SetStringVar(playerid, "TruckDest", TruckInfo[gather][tDestination]);
        SetTruckStage(playerid, 1);
        SetCheckPoint(playerid, TRUCKLOAD, GatherX[playerid], GatherY[playerid], GatherZ[playerid], 9.0);
    }
    return 1;
}

stock TruckCompatible(playerid, vehicle)
{
    new rank = PlayerInfo[playerid][pJobRank];
    if(IsATruckOne(vehicle) && rank >= TRUCKER_RANK1) return true;
    if(IsATruckTwo(vehicle) && rank >= TRUCKER_RANK2) return true;
    if(IsATruckThree(vehicle) && rank >= TRUCKER_RANK3) return true;
    if(IsATruckFour(vehicle) && rank >= TRUCKER_RANK4) return true;
    return false;
}

stock GetTruckRank(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 422)
        return TRUCKER_RANK1;
    if(model == 543)
        return TRUCKER_RANK1;
    if(model == 554)
        return TRUCKER_RANK1;
    if(model == 609 || model == 498)
        return TRUCKER_RANK2;
    if(model == 456)
        return TRUCKER_RANK3;
    if(model == 403)
        return TRUCKER_RANK4;
    if(model == 515)
        return TRUCKER_RANK4;
    return 0;
}

stock SetRandomDestination2(playerid)
{
    new gather;
    gather = random(sizeof(TruckInfo));
    GatherX[playerid] = TruckInfo[gather][tDesX];
    GatherY[playerid] = TruckInfo[gather][tDesY];
    GatherZ[playerid] = TruckInfo[gather][tDesZ];
    SetStringVar(playerid, "TruckDest", TruckInfo[gather][tDestination]);
    SetTruckStage(playerid, 1);
    LoadingTruck{playerid} = 0;
    SetCheckPoint(playerid, TRUCKLOAD, GatherX[playerid], GatherY[playerid], GatherZ[playerid], 9.0);
    return 1;
}

stock JobMessage(playerid, string[], length)
{
    PlayerTextDrawShow(playerid, TruckerDraw[playerid]);
    PlayerTextDrawSetString(playerid, TruckerDraw[playerid], string);
    SetIntVar(playerid, "JobTimer", length);
    return 1;
}

stock GetMaxPayCheck(playerid)
{
    new rank = PlayerInfo[playerid][pJobRank];
    new job = PlayerInfo[playerid][pJob];
    if(job == TRUCKER)
    {
        if(rank == TRUCKER_RANK1)
            return TRUCKER_1_PAYCHECK;
        if(rank == TRUCKER_RANK2)
            return TRUCKER_2_PAYCHECK;
        if(rank == TRUCKER_RANK3)
            return TRUCKER_3_PAYCHECK;
        if(rank == TRUCKER_RANK4)
            return TRUCKER_4_PAYCHECK;
    }
    return 0;
}

stock HandleTruckCheckPoint(playerid)
{
    if(Trucking{playerid} && GetTruckStage(playerid) == 1 && GetIntVar(playerid, "PlayerCP") == 26)
    {
        LoadingTruck{playerid} = 19;
        SetTruckStage(playerid, 2);
    }
    if(Trucking{playerid} && GetTruckStage(playerid) == 3 && GetIntVar(playerid, "PlayerCP") == 27)
    {
        DroppingOff{playerid} = true;
        SetTruckStage(playerid, 4);
    }
    if(Trucking{playerid} && GetTruckStage(playerid) == 5 && GetIntVar(playerid, "PlayerCP") == 28)
    {
        DroppingOff{playerid} = false;
        LoadingTruck{playerid} = 0;
        Trucking{playerid} = false;
        TruckVehicle[playerid] = INVALID_VEHICLE_ID;
        TruckComps[GetPlayerVehicleID(playerid)] = 0;
        SetTruckStage(playerid, 0);
        SetPlayerPos(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+1.0);
        RespawnVehicle(GetPlayerVehicleID(playerid));
        Gas{GetPlayerVehicleID(playerid)} = 100;
        PlayerInfo[playerid][pPayCheckMade] += TruckingMoney[playerid];
        format(msg, sizeof(msg), "~g~MISIUNE COMPLETA");
        JobMessage(playerid, msg, 6);
        SCMEx(playerid, COLOR_GREEN, "Banii ii vei primi la salar (%d$)", TruckingMoney[playerid]);
        TruckingMoney[playerid] = 0;
        if(TruckTrailer[playerid] != INVALID_VEHICLE_ID)
        {
            DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            RespawnVehicle(TruckTrailer[playerid]);
            TruckTrailer[playerid] = INVALID_VEHICLE_ID;
        }
        RemoveVar(playerid, "TruckGather");
        RemoveVar(playerid, "TruckDrop");
        RemoveVar(playerid, "TruckDest");
        RemoveCheckPoint(playerid);
    }
    return 1;
}

stock ShowAPB(playerid, number)
{
    SCM(playerid, COLOR_LIGHTRED, "_________All Points Bulletin_________");
    for(new i = 0; i < MAX_APBS; i++)
    {
        if(ApbInfo[i][apbID] == number)
        {
            SCMEx(playerid, COLOR_LIGHTRED, "APB NR: %d || Creat de: %s", ApbInfo[i][apbID], ApbInfo[i][apbOfficer]);
            SCMEx(playerid, COLOR_LIGHTRED, "Suspect: %s || Acuzatii: %s ", ApbInfo[i][apbSuspect], ApbInfo[i][apbCharge]);
            SCM(playerid, COLOR_LIGHTRED, "_____________________________________");
        }
    }
    return 1;
}

stock GetJobRankName(job, rank)
{
    new ranktext[MAX_RANK_NAME];
    switch(rank)
    {
        case 0: format(ranktext, MAX_RANK_NAME, "Fara");
        case 1: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank1]);
        case 2: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank2]);
        case 3: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank3]);
        case 4: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank4]);
        case 5: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank5]);
        case 6: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank6]);
        case 7: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank7]);
        case 8: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank8]);
        case 9: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank9]);
        case 10: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank10]);
    }
    return ranktext;
}

stock AssignHouseWeapons(house, str[])
{
    new wtmp[MAX_HOUSE_WEAPONS][64];
    explode(wtmp,str,"|");
    for(new z = 1; z < MAX_HOUSE_WEAPONS; z++)
    {
        new wtmp2[2][64];
        explode(wtmp2,wtmp[z-1],"=");
        HouseInfo[house][hWeapon][z] = strval(wtmp2[0]);
        HouseInfo[house][hAmmo][z] = strval(wtmp2[1]);
    }
}

stock HoldingKey(playerid, key)
{
    new keys, ud, lr;
    GetPlayerKeys(playerid, keys, ud, lr);
    if(keys & key == key)
        return true;
    return false;
}

stock RepairVehicleBody(vehicle)
{
    new p, d, l, t;
    t = encode_tires(0, 0, 0, 0); // fix all tires
    p = encode_panels(0, 0, 0, 0, 0, 0, 0); // fix all panels
    d = encode_doors(0, 0, 0, 0, 0, 0); // fix all doors
    l = encode_lights(0, 0, 0, 0); // fix all lights
    UpdateVehicleDamageStatus(vehicle, p, d, l, t);
    return 1;
}

stock MessageJob(job, color, message[], bool:checkduty)
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pJob] == job || PlayerInfo[i][pSideJob] == job)
        {
            if(checkduty == true)
            {
                if(job == TAXI && TaxiDuty{i})
                {
                    SCM(i, color, message);
                }
            }
            else
            {
                SCM(i, color, message);
            }
        }
    }
    return 1;
}

stock SendMechanicHelp(playerid, location[])
{
    MessageJob(MECHANIC, COLOR_YELLOW, "|_________Apel Mecanic_________|", false);
    format(msg, sizeof(msg), "Apelant: %s Nr: %d", GetName(playerid), PlayerInfo[playerid][pNumber]);
    MessageJob(MECHANIC, COLOR_WHITE, msg, false);
    format(msg, sizeof(msg), "Locatie: %s", location);
    MessageJob(MECHANIC, COLOR_WHITE, msg, false);
    return 1;
}

stock SendSanNewsInfo(playerid, text[])
{
    SendFactionMessage(NEWS, COLOR_YELLOWG, "|______________SAN NEWS______________|");
    format(msg, sizeof(msg), "** (ID:%d) %s a trimis o stire.", playerid, GetName(playerid));
    SendFactionMessage(NEWS, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Stire: %s", text);
    SendFactionMessage(NEWS, COLOR_WHITE, msg);
    return 1;
}


stock SendTaxiRequest(playerid, destination[])
{
    MessageJob(TAXI, COLOR_YELLOWG, "|______________Apel Taxi______________|",true);
    format(msg, sizeof(msg), "** (ID:%d) %s cere un taxi.", playerid, GetName(playerid));
    MessageJob(TAXI, COLOR_YELLOWG, msg, true);
    format(msg, sizeof(msg), "Destinatie: %s", destination);
    MessageJob(TAXI, COLOR_YELLOWG, msg, true);
    MessageJob(TAXI, COLOR_YELLOWG, "** /taxi accept ID pentru a lua misiunea! **", true);
    return 1;
}

stock ChargePerson(playerid, driver)
{
    if(GetCash(playerid) < TaxiMoney[playerid])
    {
        SCMEx(GetVehicleDriver(OldVehicle[playerid]), COLOR_WHITE, "%s nu are destui bani pentru a plati cursa.", GetNameWithMask(playerid));
        TaxiMade[GetVehicleDriver(OldVehicle[playerid])] -= TaxiMoney[playerid];
        TaxiMoney[playerid] = 0;
    }
    else
    {
        format(msg, sizeof(msg), "[TAXI]: Ai de platit $%d.", TaxiMoney[playerid]);
        SCM(playerid, COLOR_YELLOWG, msg);
        GiveCash(playerid, -TaxiMoney[playerid]);
        GiveCash(GetVehicleDriver(OldVehicle[playerid]), TaxiMoney[playerid]);
        TaxiMade[GetVehicleDriver(OldVehicle[playerid])] -= TaxiMoney[playerid];
        TaxiMoney[playerid] = 0;
        TaxiStart{driver} = false;
    }
}

stock GetVehicleDriver(vehicle)
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(IsDriver(i) && GetPlayerVehicleID(i) == vehicle)
                return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock ShowJobMessage(playerid, message[])
{
    PlayerTextDrawShow(playerid, TruckerDraw[playerid]);
    PlayerTextDrawSetString(playerid, TruckerDraw[playerid], message);
    return 1;
}


stock CountVehiclePlayers(vehicle)
{
    new count;
    foreach(new i : Player)
    {
        if(PlayerInCar(i) && GetPlayerVehicleID(i) == vehicle && GetPlayerState(i) != PLAYER_STATE_DRIVER)
        {
            count++;
        }
    }
    return count;
}

stock CheckOwnedVehicles(playerid)
{
    format(query, sizeof(query), "SELECT * FROM `ownedvehicles` WHERE `owner` = '%s' ORDER BY `slot` LIMIT 10", GetName(playerid));
    mysql_function_query(dbHandle, query, true, "OnCheckVehicles", "i", playerid);
    return 1;
}

stock mktime(hour,minute,second,day,month,year)
{
    new timestamp2;

    timestamp2 = second + (minute * 60) + (hour * 3600);

    new days_of_month[12];

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) {
        days_of_month = {                         // Schaltjahr
            31,29,31,30,31,30,31,31,30,31,30,31
        };
    }
    else {
        days_of_month = {                         // keins
            31,28,31,30,31,30,31,31,30,31,30,31
        };
    }
    new days_this_year = 0;
    days_this_year = day;
    if(month > 1) {                               // No January Calculation, because its always the 0 past months
        for(new i=0; i<month-1;i++) {
            days_this_year += days_of_month[i];
        }
    }
    timestamp2 += days_this_year * 86400;

    for(new j=1970;j<year;j++) {
        timestamp2 += 31536000;
// Schaltjahr + 1 Tag
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )  timestamp2 += 86400;
    }

    return timestamp2;
}

stock AssignPlayerVehicles(playerid, string[])
{
    new tmp[MAX_OWNED_VEHICLES][32];
    explode(tmp, string, "|");
    for(new i = 1; i < MAX_OWNED_VEHICLES; i++)
    {
        PlayerInfo[playerid][pVehs][i] = strval(tmp[i-1]);
    }
}

stock FormatPlayerVehicles(playerid, string[])
{
    new upstr[256];
    new tmp[64];
    for(new b = 1; b < MAX_OWNED_VEHICLES; b ++)
    {
        if(b == 1)
            format(tmp,sizeof(tmp),"%d",PlayerInfo[playerid][pVehs][b]);
        else
            format(tmp,sizeof(tmp),"|%d",PlayerInfo[playerid][pVehs][b]);
        strins(upstr,tmp,strlen(upstr));
    }
    return format(string, 256, "%s", upstr);
}

stock AssignPlayerContacts(playerid, string[])
{
    new tmp[MAX_CONTACTS][32];
    explode(tmp, string, "|");
    for(new i = 1; i < MAX_CONTACTS; i++)
    {
        PlayerInfo[playerid][pContacts][i] = strval(tmp[i-1]);
    }
}

stock AssignPlayerChannels(playerid, string[])
{
    new tmp[MAX_RADIO_SLOTS][32];
    explode(tmp, string, "|");
    for(new i = 1; i < MAX_RADIO_SLOTS; i++)
    {
        PlayerInfo[playerid][pChannels][i] = strval(tmp[i-1]);
    }
}

stock AssignPlayerAuthed(playerid, string[])
{
    new tmp[MAX_RADIO_SLOTS][32];
    explode(tmp, string, "|");
    for(new i = 1; i < MAX_RADIO_SLOTS; i++)
    {
        PlayerInfo[playerid][pAuthed][i] = strval(tmp[i-1]);
    }
}

stock FormatPlayerChannels(playerid, string[])
{
    new upstr[256];
    new tmp[64];
    for(new b = 1; b < MAX_RADIO_SLOTS; b ++)
    {
        if(b == 1)
            format(tmp,sizeof(tmp),"%d",PlayerInfo[playerid][pChannels][b]);
        else
            format(tmp,sizeof(tmp),"|%d",PlayerInfo[playerid][pChannels][b]);
        strins(upstr,tmp,strlen(upstr));
    }
    return format(string, 256, "%s", upstr);
}

stock FormatPlayerAuthed(playerid, string[])
{
    new upstr[256];
    new tmp[64];
    for(new b = 1; b < MAX_RADIO_SLOTS; b ++)
    {
        if(b == 1)
            format(tmp,sizeof(tmp),"%d",PlayerInfo[playerid][pAuthed][b]);
        else
            format(tmp,sizeof(tmp),"|%d",PlayerInfo[playerid][pAuthed][b]);
        strins(upstr,tmp,strlen(upstr));
    }
    return format(string, 256, "%s", upstr);
}

stock FormatPlayerContacts(playerid, string[])
{
    new upstr[256];
    new tmp[64];
    for(new b = 1; b < MAX_CONTACTS; b ++)
    {
        if(b == 1)
            format(tmp,sizeof(tmp),"%d",PlayerInfo[playerid][pContacts][b]);
        else
            format(tmp,sizeof(tmp),"|%d",PlayerInfo[playerid][pContacts][b]);
        strins(upstr,tmp,strlen(upstr));
    }
    return format(string, 256, "%s", upstr);
}

//================================Garbage Job================================//

forward CheckGarbageCar(vehicleid);
public CheckGarbageCar(vehicleid)
{
	if(CityVehicles[vehicleid][vType] == GARBAGE_CAR) { return true; }
	else { return false; }
}

//===========================Garbage Job================================//

//================================Drugs================================//
stock FormatVehicleDrugs(vehicle, string[])
{
    new wstr[256];
    new tmp[64];
    for(new a = 1; a < MAX_DRUGS; a++)
    {
        new drug = VehicleInfo[vehicle][carDrug][a];
        new ammount = VehicleInfo[vehicle][carDrugAmount][a];
        if(a == 1)
        {
            format(tmp,sizeof(tmp),"%d=%d",drug,ammount);
        }
        else
        {
            format(tmp,sizeof(tmp),"|%d=%d",drug,ammount);
        }
        strins(wstr,tmp,strlen(wstr));
    }
    return format(string, 256, "%s", wstr);
}

stock AssignVehicleDrugs(vehicle, str[])
{
    new wtmp[MAX_DRUGS][64];
    explode(wtmp,str,"|");
    for(new z = 1; z < MAX_DRUGS; z++)
    {
        new wtmp2[2][64];
        /*Has to be minus 1, don't touch*/
        explode(wtmp2,wtmp[z-1],"=");
        VehicleInfo[vehicle][carDrug][z] = strval(wtmp2[0]);
        VehicleInfo[vehicle][carDrugAmount][z] = strval(wtmp2[1]);
    }
}

stock FormatPlayerDrugs(playerid, string[])
{
    new wstr[256];
    new tmp[64];
    for(new a = 1; a < MAX_DRUGS; a++)
    {
        new drug = PlayerInfo[playerid][pDrug][a];
        new ammount = PlayerInfo[playerid][pDrugAmount][a];
        if(a == 1)
        {
            format(tmp,sizeof(tmp),"%d=%d",drug,ammount);
        }
        else
        {
            format(tmp,sizeof(tmp),"|%d=%d",drug,ammount);
        }
        strins(wstr,tmp,strlen(wstr));
    }
    return format(string, 256, "%s", wstr);
}

stock AssignPlayerDrugs(playerid, str[])
{
    new wtmp[MAX_DRUGS][64];
    explode(wtmp,str,"|");
    for(new z = 1; z < MAX_DRUGS; z++)
    {
        new wtmp2[2][64];
        /*Has to be minus 1, don't touch*/
        explode(wtmp2,wtmp[z-1],"=");
        PlayerInfo[playerid][pDrug][z] = strval(wtmp2[0]);
        PlayerInfo[playerid][pDrugAmount][z] = strval(wtmp2[1]);
    }
}

stock GetDrugInfo(playerid, slot)
{
    new info[64];
    if(PlayerInfo[playerid][pDrug][slot] == 0)
    {
        info = "Empty";
    }
    else
    {
        format(info, sizeof(info), "%s(%d)", GetDrugName(PlayerInfo[playerid][pDrug][slot]), PlayerInfo[playerid][pDrugAmount][slot]);
    }
    return info;
}

stock GetVehicleDrugInfo(vehicle, slot)
{
    new info[64];
    if(VehicleInfo[vehicle][carDrug][slot] == 0)
    {
        info = "Empty";
    }
    else
    {
        format(info, sizeof(info), "%s(%d)", GetDrugName(VehicleInfo[vehicle][carDrug][slot]), VehicleInfo[vehicle][carDrugAmount][slot]);
    }
    return info;
}

stock GetDrugName(drugid)
{
    new drug[24];
    switch(drugid)
    {
        case DRUG_CRACK: drug = "Crack";
        case DRUG_COCAINE: drug = "Cocaina";
        case DRUG_MARIJUANA: drug = "Marijuana";
        case DRUG_HEROIN: drug = "Heroina";
    }
    return drug;
}

stock ShowVehicleDrugs(playerid, vehicle)
{
    SCMEx(playerid, COLOR_GREEN2, "___________Pachetele de droguri ale lui %s:___________", VehicleNames[GetVehicleModel(vehicle)-400]);
    for(new i = 1; i < MAX_DRUGS; i+=5)
    {
        SCMEx(playerid, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i,GetVehicleDrugInfo(vehicle, i),i+1,GetVehicleDrugInfo(vehicle, i+1),i+2,GetVehicleDrugInfo(vehicle, i+2),i+3,GetVehicleDrugInfo(vehicle, i+3),i+4,GetVehicleDrugInfo(vehicle, i+4));
    }
}

stock ShowPlayerDrugs(playerid, toplayer)
{
    SCMEx(toplayer, COLOR_GREEN2, "______________Pachetele de droguri ale lui %s:______________", GetNameEx(playerid));
    for(new i = 1; i < MAX_DRUGS; i+=5)
    {
        SCMEx(toplayer, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i,GetDrugInfo(playerid, i),i+1,GetDrugInfo(playerid, i+1),i+2,GetDrugInfo(playerid, i+2),i+3,GetDrugInfo(playerid, i+3),i+4,GetDrugInfo(playerid, i+4));
    }
    SCMEx(toplayer, COLOR_YELLOWG, "[ Seminte: %d ][ Soda: %d ][ Powder: %d ][ Alcool: %d]", PlayerInfo[playerid][pSeeds],PlayerInfo[playerid][pSoda],PlayerInfo[playerid][pPowder],PlayerInfo[playerid][pAlcohol]);
}

stock GetFreeDrugSlot(playerid)
{
    for(new i = 1; i < MAX_DRUGS; i++)
    {
        if(PlayerInfo[playerid][pDrug][i] == 0)
            return i;
    }
    return 0;
}

stock GetFreeVehicleDrugSlot(vehicle)
{
    for(new i = 1; i < MAX_DRUGS; i++)
    {
        if(VehicleInfo[vehicle][carDrug][i] == 0)
            return i;
    }
    return 0;
}

stock GivePlayerDrug(playerid, drug, amount)
{
    new slot = GetFreeDrugSlot(playerid);
    PlayerInfo[playerid][pDrug][slot] = drug;
    PlayerInfo[playerid][pDrugAmount][slot] = amount;
    return 1;
}

stock GiveVehicleDrug(vehicle, drug, amount)
{
    new slot = GetFreeVehicleDrugSlot(vehicle);
    VehicleInfo[vehicle][carDrug][slot] = drug;
    VehicleInfo[vehicle][carDrugAmount][slot] = amount;
    return 1;
}

stock RemovePlayerDrug(playerid, slot)
{
    PlayerInfo[playerid][pDrug][slot] = 0;
    PlayerInfo[playerid][pDrugAmount][slot] = 0;
    return 1;
}

stock RemovePlayerDrugs(playerid)
{
    for(new i = 1; i < MAX_DRUGS; i++)
    {
        PlayerInfo[playerid][pDrug][i] = 0;
        PlayerInfo[playerid][pDrugAmount][i] = 0;
    }
    return 1;
}

public ResetDrugEffect(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    SetPlayerWeather(playerid, 2);
    SCM(playerid, COLOR_YELLOW, "Efectul drogurilor s-a dus!");
    return 1;
}

stock GiveDrugFromPlayer(playerid, slot, drug, amount, toplayer)
{
    GivePlayerDrug(toplayer, drug, amount);
    PlayerInfo[playerid][pDrugAmount][slot] -= amount;
    if(PlayerInfo[playerid][pDrugAmount][slot] == 0)
    PlayerInfo[playerid][pDrug][slot] = 0;
    return 1;
}

stock GetNextPlantID()
{
    for(new i = 0; i < MAX_PLANTS; i++)
    {
        if(CropsInfo[i][pPlanted] == 0)
            return i;
    }
    return -1;
}

stock GetClosestPlantID(playerid)
{
    new i=0;
    new Float:x, Float:y, Float:z;
    while(i != MAX_PLANTS)
    {
        if(CropsInfo[i][pPlanted] == 1)
        {
            GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 2.5, x, y, z+0.5))
            {
                return i;
            }
        }
        i++;
    }
    return -1;
}

stock PlayerInCropArea(playerid)
{
    new i=0;
    new Float:x, Float:y, Float:z;
    while(i != MAX_PLANTS)
    {
        if(CropsInfo[i][pPlanted] == 1)
        {
            GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z+0.5))
            {
                return 1;
            }
        }
        i++;
    }
    return 0;
}

stock AddSeedToFile(plant, planter[], Float:x, Float:y, Float:z)
{
    format(query, sizeof(query), "INSERT INTO `plants` (planter, growtime, made, posx, posy, posz) VALUES ('%s', %d, %d, %f, %f, %f)", planter, 0, 0, x, y, z);
    mysql_function_query(dbHandle, query, true, "OnPlantInsert", "d", plant);
}
// Garbage Job
stock SaveBins()
{
	for(new i = 0; i < MAX_TRASHBINS; i++)
	{
		format(query, sizeof(query), "UPDATE `trashbins` SET `picked` = %d WHERE `id` = %d", BinInfo[i][TrashPicked], BinInfo[i][objectID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
}
// Garbage Job
stock SavePlants()
{
    for(new i = 0; i < MAX_PLANTS; i++)
    {
        if(CropsInfo[i][pPlanted] == 1)
        {
            format(query, sizeof(query), "UPDATE `plants` SET `growtime` = %d, `made` = %d, `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", CropsInfo[i][pGrowTime], CropsInfo[i][pMade], CropsInfo[i][pX], CropsInfo[i][pY], CropsInfo[i][pZ], CropsInfo[i][pID]);
            mysql_function_query(dbHandle, query, false, "", "");
        }
    }
}

stock AddPlants()
{
    format(query, sizeof(query), "SELECT * FROM `plants`");
    mysql_function_query(dbHandle, query, true, "OnPlantsAdd", "");
}

stock DestroyCrop(crop)
{
    if(CropsInfo[crop][pPlanted] == 1)
    {
        format(query, sizeof(query), "DELETE FROM `plants` WHERE `id` = %d", CropsInfo[crop][pID]);
        mysql_function_query(dbHandle, query, false, "", "");
        CropsInfo[crop][pGrowTime] = 0;
        CropsInfo[crop][pMade] = 0;
        CropsInfo[crop][pX] = 0.0;
        CropsInfo[crop][pY] = 0.0;
        CropsInfo[crop][pZ] = 0.0;
        CropsInfo[crop][pPlanted] = 0;
        DestroyDynamicObject(CropsInfo[crop][pObject]);
        DestroyDynamic3DTextLabel(CropsInfo[crop][pLabel]);
    }
}

//================================Drugs================================//

stock GetNextPlayerVehSlot(playerid)
{
    return PlayerInfo[playerid][pVehicles]+1;
}

stock ReAssignPlayerVehicles(playerid)
{
    for(new i = 1; i < MAX_OWNED_VEHICLES-1; i++)// What is up with -1 here?
    {
        if(PlayerInfo[playerid][pVehs][i] == 0 && PlayerInfo[playerid][pVehs][i+1] == 1)// What is up with +1 ?
        {
            PlayerInfo[playerid][pVehs][i+1] = 0; // What is up with +1 ?
            PlayerInfo[playerid][pVehs][i] = 1;
            mysql_format(dbHandle, query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = '%i' WHERE `owner` = '%e' AND `slot` > '%i' LIMIT 1", i, GetName(playerid), i - 1);
            mysql_tquery(dbHandle, query);
            mysql_function_query(dbHandle, query, false, "", "");
			#if defined debugOn
				printf(query);
			#endif
        }
    }
    return 1;
}

stock RemovePlayerContact(playerid, slot)
{
    if(PlayerInfo[playerid][pContacts][slot] != 0)
    {
        PlayerInfo[playerid][pContacts][slot] = 0;
    }
    return 1;
}

stock PlacePlayerContact(playerid, contact)
{
    PlayerInfo[playerid][pContacts][GetFreeContactSlot(playerid)] = contact;
    return 1;
}

stock GetFreeContactSlot(playerid)
{
    for(new i = 1; i < MAX_CONTACTS; i++)
    {
        if(PlayerInfo[playerid][pContacts][i] == 0) return i;
    }
    return 0;
}

stock DisplayContactList(playerid)
{
    new contacts[1000];
    for(new i = 1; i < MAX_CONTACTS; i++)
    {
        if(PlayerInfo[playerid][pContacts][i] != 0)
        {
            format(msg, sizeof(msg), "[%d] - %d\n", i, PlayerInfo[playerid][pContacts][i]);
            strcat(contacts, msg);
        }
        else
        {
            format(msg, sizeof(msg), "[%d] - None\n", i);
            strcat(contacts, msg);
        }
    }
    ShowDialog(playerid, Show:<Contacts>, DIALOG_STYLE_LIST, "Lista de contacte", contacts, "Suna", "Anuleaza");
    return 1;
}

stock PlayerCallTo(playerid, number)
{
    new currentNum;
    if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "TELEFON: Nu ai un telefon mobil!");
    if(cellOn{playerid} != 1) return CellMSG(playerid, "TELEFON: Telefonul tau este inchis (/turn_on)");
    if(GetIntVar(playerid, "GettingCall") == 1) return CellMSG(playerid, "TELEFON: Cineva te suna (/pickup sau /hangup)...");
    if(number == PlayerInfo[playerid][pNumber]) return CellMSG(playerid, "TELEFON: Nu te poti suna pe tine.");
    if(GetIntVar(playerid, "IsCalling") == 1) return CellMSG(playerid, "TELEFON: Deja suni pe cineva");
    if(GetIntVar(playerid, "OnCall") == 1) return CellMSG(playerid, "TELEFON: Esti deja intr-un apel.");
    ActionMessage(playerid, 15.0, "scoate afara un telefon mobil.");
    phoneAnim(playerid, 1);
    if(number == 911)
    {
        SetIntVar(playerid, "CallWith", 911); //caller connecting
        SetIntVar(playerid, "OnCall", 1); //player is on call
        SetIntVar(playerid, "ServiceCall", 1); //Player is on service call
        SCM(playerid, COLOR_WHITE, "HINT: Apasa T pentru a vorbi iar daca vrei sa inchei, scrie /hangup.");
        SCM(playerid, COLOR_ALLDEPT, "URGENTA: Buna ziua, ce serviciu ati dori? (politie, paramedici sau amandoua?)");
        return 1;
    }
    else if(number == 544)
    {
        SetIntVar(playerid, "CallWith", 544); //caller connecting
        SetIntVar(playerid, "OnCall", 1); //player is on call
        SetIntVar(playerid, "ServiceCall", 1); //Player is on service call
        SCM(playerid, COLOR_WHITE, "HINT: Apasa T pentru a vorbi iar daca vrei sa inchei, scrie /hangup.");
        SCM(playerid, COLOR_GREEN2, "Linia mecanicilor: Buna ziua, aveti nevoie de un mecanic? Trebuie doar sa ne spuneti locatia.");
        return 1;
    }
    else if(number == 555)
    {
        SetIntVar(playerid, "CallWith", 555); //caller connecting
        SetIntVar(playerid, "OnCall", 1); //player is on call
        SetIntVar(playerid, "ServiceCall", 1); //Player is on service call
        SCM(playerid, COLOR_WHITE, "HINT: Apasa T pentru a vorbi iar daca vrei sa inchei, scrie /hangup.");
        SCM(playerid, COLOR_YELLOW, "Linia taximetristilor: Buna ziua, aveti nevoie de un taxi? Unde ati dori sa ajungeti?");
        return 1;
    }
    else if(number == 1000)
    {
        SetIntVar(playerid, "CallWith", 1000); //caller connecting
        SetIntVar(playerid, "OnCall", 1); //player is on call
        SetIntVar(playerid, "ServiceCall", 1); //Player is on service call
        SCM(playerid, COLOR_WHITE, "HINT: Apasa T pentru a vorbi iar daca vrei sa inchei, scrie /hangup.");
        SCM(playerid, COLOR_GREEN2, "Bine ai venit la Los Santos Radio Corporation.");
        SCM(playerid, COLOR_YELLOWG, "Serviciile valabile pentru dumneavoastra sunt urmatoarele:");
        SCM(playerid, COLOR_GREEN2, "rent (Inchiriaza o frecventa) - Costa: $1000 (Doar odata gratis)");
        SCM(playerid, COLOR_GREEN2, "password (Seteaza parola frecventei) - Costa: $50 (Doar odata gratis)");
        SCM(playerid, COLOR_GREEN2, "end (Termina configurarea)");
        return 1;
    }
    else if(number == 123)
    {
        SetIntVar(playerid, "CallWith", 1000); //caller connecting
        SetIntVar(playerid, "OnCall", 1); //player is on call
        SetIntVar(playerid, "ServiceCall", 1); //Player is on service call
        SCM(playerid, COLOR_WHITE, "HINT: Apasa T pentru a vorbi iar daca vrei sa inchei, scrie /hangup.");
        SCM(playerid, COLOR_GREEN2, "Bine ai venit la San News.");
        SCM(playerid, COLOR_YELLOWG, "Spune-ne pe scurt ce stire ai pentru noi:");
    }
    else
    {
        foreach(new i : Player)
        {
            if(number == PlayerInfo[i][pNumber] && number != 0)
            {
                currentNum = i; //caller connecting
                SetIntVar(playerid, "CallWith", currentNum); //caller connecting
                SetIntVar(currentNum, "CallWith", playerid); //caller connecting
                if(PlayerIsOn(currentNum))
                {
                    if(currentNum != INVALID_PLAYER_ID)
                    {
                        if(PlayerInfo[currentNum][pJailed] != 0) return SCM(playerid, COLOR_WHITE, "Player is in jail/ajail.");
                        if(cellOn{currentNum} != 1)
                        {
                            CellMSG(playerid, "PH: Ai primit un ton ocupat.");
                            SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
                            return 1;
                        }
                        if(GetIntVar(currentNum, "OnCall") == 1)
                        {
                            CellMSG(playerid, "PH: Aceasta persoana este deja intr-un apel...");
                            SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
                            return 1;
                        }
                        if(GetIntVar(playerid, "GettingCall") == 1)
                        {
                            CellMSG(playerid, "PH: Acest jucator este deja sunat de altcineva...");
                            SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
                            return 1;
                        }
                        SetIntVar(currentNum, "GettingCall", 1);
                        SetIntVar(playerid, "IsCalling", 1);
                        SCM(playerid, COLOR_WHITE, "HINT: Apasa T pentru a vorbi iar daca vrei sa inchei, scrie /hangup");
                        format(msg, sizeof(msg), "Telefonul tau mobil suna (/pickup sau /hangup) Apelant: %d", PlayerInfo[playerid][pNumber]);
                        SCM(currentNum, COLOR_YELLOWG, msg);
                        format(msg, sizeof(msg), "* Telefonul lui %s incepe sa sune.", GetNameWithMask(currentNum));
                        ProxDetector(10.0, currentNum, msg, COLOR_PURPLE);
                        cellRingTime{currentNum} = 5;
                        //Making a ring sound for everyone is players distance
                        foreach(Player, pl)
                            if(PlayerNearPlayer(10.0, pl,currentNum))
                                PlayRingSoundTwice(pl);
                        //Making a ring sound for everyone is players distance
                        return 1;
                    }
                }
            }
        }
    }
    CellMSG(playerid, "PH: Ai primit un ton ocupat.");
    SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
    return 1;
}

stock UpdatePlayerVehicles(playerid)
{
    new str[64];
    for(new i = 1; i < MAX_OWNED_VEHICLES; i++)
    {
        format(str, sizeof(str), "%s", FirstNameLetters(GetName(playerid)), randomEx(10000, 99999));
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `plate` = '%s' WHERE `owner` = '%s' AND slot = %d", str, GetName(playerid), i);
        mysql_function_query(dbHandle, query, false, "", "");
    }
}

stock HandleCurrentNumber(playerid, text[])
{
    new str[200];
    format(str, sizeof(str), "%s spune (telefon): %s", GetNameWithMask(playerid), text);
    ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    if(GetIntVar(playerid, "CallWith") == 544)
    {
        SendMechanicHelp(playerid, text);
        SCM(playerid, COLOR_GREEN2, "Linia mecanicilor: Mecanicii nostrii au fost anuntati, va rugam asteptati");
        SCM(playerid, COLOR_GRAD2, "MECH: Au inchis.");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "CallWith");
        HangUpAnim(playerid);
        return 0;
    }
    if(GetIntVar(playerid, "CallWith") == 555)
    {
        SendTaxiRequest(playerid, text);
        SCM(playerid, COLOR_GREEN2, "Linia taximetristilor: Soferii disponibili au fost anuntati, va rugam asteptati.");
        SCM(playerid, COLOR_GRAD2, "TAXI: Au inchis.");
        SetIntVar(playerid, "NeedTaxi", 1);
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "CallWith");
        HangUpAnim(playerid);
        return 0;
    }
    if(GetIntVar(playerid, "CallWith") == 123)
    {
        SendSanNewsInfo(playerid, text);
        SCM(playerid, COLOR_GREEN2, "Multumim pentru informatii, o zi buna!");
        SCM(playerid, COLOR_GRAD2, "SANNEWS: Au inchis.");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "CallWith");
        HangUpAnim(playerid);
        return 0;
    }
    if(GetIntVar(playerid, "CallWith") == 911)
    {
        if(!strlen(text))
        {
            SCM(playerid, COLOR_ALLDEPT, "URGENTE: Ma scuzati, nu inteleg, Politie, Paramedici sau amandoua?");
            return 0;
        }
        else if ((strcmp("politie", text, true, strlen(text)) == 0) && (strlen(text) == strlen("politie")))
        {
            SetStringVar(playerid, "callType", "Police");
            SCM(playerid, COLOR_ALLDEPT, "URGENTA: Va trimitem pe linia politiei, asteptati un moment.");
            SetIntVar(playerid, "CallWith", 912);
            SCM(playerid, COLOR_LIGHTBLUE, "SASD: Buna ziua, va rugam spuneti-ne locatia dumneavoastra.");
            return 0;
        }
        else if ((strcmp("paramedici", text, true, strlen(text)) == 0) && (strlen(text) == strlen("paramedici")))
        {
            SetStringVar(playerid, "callType", "Paramedic");
            SCM(playerid, COLOR_ALLDEPT, "URGENTA: Va trimitem pe linia pompierilor, asteptati un moment.");
            SetIntVar(playerid, "CallWith", 914);
            SCM(playerid, COLOR_ALLDEPT, "LSFD: Buna ziua, va rugam spuneti-ne locatia dumneavoastra.");
            return 0;
        }
        else if ((strcmp("amandoua", text, true, strlen(text)) == 0) && (strlen(text) == strlen("amandoua")))
        {
            SetStringVar(playerid, "callType", "Both");
            SCM(playerid, COLOR_ALLDEPT, "URGENTA: Va trimitem acum pe linia celor doua departamente, asteptati un moment.");
            SetIntVar(playerid, "CallWith", 916);
            SCM(playerid, COLOR_LIGHTRED, "URGENTA: Buna ziua, va rugam spuneti-ne locatia dumneavoastra.");
            return 0;
        }
        else
        {
            SCM(playerid, COLOR_ALLDEPT, "URGENTA: Ma scuzati, nu inteleg, Politie, Paramedici sau amandoua?");
            return 0;
        }
    }
    else if(GetIntVar(playerid, "CallWith") == 912)
    {
        if(!strlen(text))
        {
            SCM(playerid, COLOR_LIGHTBLUE, "SASD: Ma scuzati, nu inteleg, puteti repeta?");
            return 0;
        }
        SetStringVar(playerid, "callLocation", text);
        SCM(playerid, COLOR_LIGHTBLUE, "SASD: Va rugam descrieti situatia.");
        SetStringVar(playerid, "CrimeLocation", text);
        SetIntVar(playerid, "CallWith", 913);
        return 0;
    }
    else if(GetIntVar(playerid, "CallWith") == 913)
    {
        new location[MAX_ZONE_NAME];
        GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        SetStringVar(playerid, "callSituation", text);
        SetStringVar(playerid, "callTrace", location);
        SCM(playerid, COLOR_LIGHTBLUE, "SASD: Am anuntat toate unitatile din zona, asteptati acum.");
        SendFactionMessage(LSPD, COLOR_LIGHTBLUE, "|__________Apel 911_________|");
        format(str, sizeof(str), "Apelant: %s, Nr: %d", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
        SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
        format(str, sizeof(str), "Locatie: %s", GetStringVar(playerid, "CrimeLocation"));
        SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
        format(str, sizeof(str), "Situatie: %s", text);
        SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
        format(str, sizeof(str), "Locatia apelului: %s",location);
        SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
        SCM(playerid, COLOR_GRAD2, "  Au inchis..");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "CallWith");
        HangUpAnim(playerid);
        SetLastCaller(playerid);
        return 0;
    }
    else if(GetIntVar(playerid, "CallWith") == 914)
    {
        if(!strlen(text))
        {
            SCM(playerid, COLOR_ALLDEPT, "LSFD: Ma scuzati, nu inteleg, puteti repeta?");
            return 0;
        }
        SetStringVar(playerid, "callLocation", text);
        SCM(playerid, COLOR_ALLDEPT, "LSFD: Va rugam descrieti situatia.");
        SetStringVar(playerid, "CrimeLocation", text);
        SetIntVar(playerid, "CallWith", 915);
        return 0;
    }
    else if(GetIntVar(playerid, "CallWith") == 915)
    {
        new location[MAX_ZONE_NAME];
        GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        SetStringVar(playerid, "callSituation", text);
        SetStringVar(playerid, "callTrace", location);
        SCM(playerid, COLOR_LIGHTBLUE, "LSFD: Am anuntat toate unitatile din zona, asteptati acum.");
        SendFactionMessage(LSFD, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
        format(str, sizeof(str), "Apelant: %s, Nr: %d", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        format(str, sizeof(str), "Locatie: %s", GetStringVar(playerid, "CrimeLocation"));
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        format(str, sizeof(str), "Situatie: %s", text);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        format(str, sizeof(str), "Locatia telefonului: %s",location);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        SCM(playerid, COLOR_GRAD2, "  Au inchis..");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "CallWith");
        HangUpAnim(playerid);
        SetLastCaller(playerid);
        return 0;
    }
    else if(GetIntVar(playerid, "CallWith") == 916)
    {
        if(!strlen(text))
        {
            SCM(playerid, COLOR_LIGHTBLUE, "URGENTA: Ma scuzati, nu inteleg, puteti repeta?");
            return 0;
        }
        SetStringVar(playerid, "callLocation", text);
        SCM(playerid, COLOR_LIGHTBLUE, "URGENTA: Va rugam descrieti situatia.");
        SetStringVar(playerid, "CrimeLocation", text);
        SetIntVar(playerid, "CallWith", 917);
        return 0;
    }
    else if(GetIntVar(playerid, "CallWith") == 917)
    {
        new location[MAX_ZONE_NAME];
        GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        SetStringVar(playerid, "callSituation", text);
        SetStringVar(playerid, "callTrace", location);
        SCM(playerid, COLOR_LIGHTBLUE, "URGENTA: Am anuntat toate unitatile din zona, asteptati acum.");
        SendFactionMessage(LSPD, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
        SendFactionMessage(LSFD, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
        format(str, sizeof(str), "Apelant: %s, Nr: %d", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
        SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        format(str, sizeof(str), "Locatie: %s", GetStringVar(playerid, "CrimeLocation"));
        SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        format(str, sizeof(str), "Situatie: %s", text);
        SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        format(str, sizeof(str), "Locatia telefonului: %s",location);
        SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
        SCM(playerid, COLOR_GRAD2, "  Au inchis..");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "CallWith");
        HangUpAnim(playerid);
        SetLastCaller(playerid);
        return 0;
    }
    else if(GetIntVar(playerid, "CallWith") == 1000)
    {
        if(CompareStrings(text, "rent"))
        {
            SCM(playerid, COLOR_YELLOW, "Buna ziua, ce canal doriti sa inchiriati ?");
            SetIntVar(playerid, "CallWith", 1001);
        }
        else if(CompareStrings(text, "password"))
        {
            SCM(playerid, COLOR_YELLOW, "Pe ce frecventa doriti sa puneti parola?");
            SetIntVar(playerid, "CallWith", 1002);
        }
        else if(CompareStrings(text, "end"))
        {
            SCM(playerid, COLOR_YELLOW, "Ce frecventa doriti sa anulati?");
            SetIntVar(playerid, "CallWith", 1004);
        }
    }
    else if(GetIntVar(playerid, "CallWith") == 1001)
    {
        if(StringHasLetters(text) || StringHasSymbols(text))
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Doar numerele sunt acceptate!");
            return 0;
        }
        new channel = strval(text);
        if(channel < 1 || channel > MAX_RADIO_CHANNELS)
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Acest canal radio nu exista.");
            return 0;
        }
        if(RadiosInfo[channel][radioOn] == 1)
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Cineva detine deja aceasta frecventa.");
            return 0;
        }
        if(GetCash(playerid) < 1000)
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Nu ai destui bani.");
            return 0;
        }
        GiveCash(playerid, -1000);
        SCMEx(playerid, COLOR_GREEN2, "Ai inchiriat cu success un canal radio, [CH: %d]", channel);
        SCM(playerid, COLOR_YELLOW, "Iti poti pune parola la frecventa apeland iar 1000.");
        format(RadiosInfo[channel][radioOwner], MAX_PLAYER_NAME, "%s", GetName(playerid));
        format(RadiosInfo[channel][radioPass], MAX_PLAYER_NAME, "None");
        RadiosInfo[channel][radioProtected] = 0;
        RadiosInfo[channel][radioOn] = 1;
        AddChannelToFile(playerid, channel);
        SCM(playerid, COLOR_GRAD2, "  Au inchis..");
        HangUpCell(playerid);
    }
    else if(GetIntVar(playerid, "CallWith") == 1002)
    {
        if(StringHasLetters(text) || StringHasSymbols(text))
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Doar numele sunt acceptate!");
            return 0;
        }
        new channel = strval(text);
        if(channel < 1 || channel > MAX_RADIO_CHANNELS)
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Acest canal nu exista.");
            return 0;
        }
        if(!ChannelOwner(playerid, channel))
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Nu esti proprietarul acestui canal.");
            SCM(playerid, COLOR_GRAD2, "  Au inchis..");
            HangUpCell(playerid);
            return 0;
        }
        SetIntVar(playerid, "EditChannel", channel);
        SCM(playerid, COLOR_YELLOW, "Te rog introdu parola pe care doresti sa o setezi.");
        SCM(playerid, COLOR_GREEN2, "Daca doresti sa scoti parola scrie: 'none'");
        SetIntVar(playerid, "CallWith", 1003);
    }
    else if(GetIntVar(playerid, "CallWith") == 1003)
    {
        new channel = GetIntVar(playerid, "EditChannel");
        if(StringHasSymbols(text))
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Simbolurile nu sunt acceptate!");
            return 0;
        }
        if(CompareStrings(text, "none"))
        {
            SCM(playerid, COLOR_LIGHTRED, "Parola a fost scoasa si canalul nu mai este protejat.");
            RadiosInfo[channel][radioProtected] = 0;
            SCM(playerid, COLOR_GRAD2, "  Au inchis..");
            HangUpCell(playerid);
            UpdateRadioInfo(channel);
            return 0;
        }
        else
        {
            SCM(playerid, COLOR_LIGHTRED, "Parola a fost setat si canalul este securizat.");
            SCMEx(playerid, COLOR_GREEN2, "Parola pusa: %s", text);
            RadiosInfo[channel][radioProtected] = 1;
            format(RadiosInfo[channel][radioPass], 128, "%s", text);
            SCM(playerid, COLOR_GRAD2, "  Au inchis..");
            HangUpCell(playerid);
            UpdateRadioInfo(channel);
            return 0;
        }
    }
    else if(GetIntVar(playerid, "CallWith") == 1004)
    {
        new channel = strval(text);
        if(StringHasLetters(text) || StringHasSymbols(text))
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Doar numele sunt acceptate!");
            return 0;
        }
        if(channel < 1 || channel > MAX_RADIO_CHANNELS)
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Acest canal nu exista.");
            return 0;
        }
        if(!ChannelOwner(playerid, channel))
        {
            SCM(playerid, COLOR_LIGHTRED, "ERROR: Nu esti proprietarul acestui canal.");
            SCM(playerid, COLOR_GRAD2, "  Au inchis..");
            HangUpCell(playerid);
            return 0;
        }
        SCM(playerid, COLOR_YELLOWG, "Ai renuntat la abonamentul canalului radio.");
        SCMEx(playerid, COLOR_GREY, "Frecventa: %d nu iti va mai apartine.", channel);
        OnPlayerSellChannel(channel);
        RadiosInfo[channel][radioProtected] = 0;
        RadiosInfo[channel][radioOn] = 0;
        format(RadiosInfo[channel][radioOwner], 128, "None");
        SCM(playerid, COLOR_GRAD2, "  Au inchis..");
        HangUpCell(playerid);
    }
    return 1;
}

stock OnPlayerSellChannel(channel)
{
    format(query, sizeof(query), "DELETE FROM `radios` WHERE `id` = %d", RadiosInfo[channel][radioID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock ChannelOwner(playerid, channel)
{
    if(RadiosInfo[channel][radioOn] == 0)
    {
        return false;
    }
    else if(CompareStrings(RadiosInfo[channel][radioOwner], GetName(playerid)))
    {
        return true;
    }
    return false;
}

stock HangUpCell(playerid)
{
    RemoveVar(playerid, "CallCost");
    RemoveVar(playerid, "CallTime");
    RemoveVar(playerid, "CallWith");
    RemoveVar(playerid, "GettingCall");
    RemoveVar(playerid, "OnCall");
    RemoveVar(playerid, "IsCalling");
    RemoveVar(playerid, "ServiceCall");
    phoneAnim(playerid, 0);
    return 1;
}

stock UpdateRadioInfo(channel)
{
    format(query, sizeof(query), "UPDATE `radios` SET `owner` = '%s', `pass` = '%s', `protected` = %d WHERE `id` = %d", RadiosInfo[channel][radioOwner], RadiosInfo[channel][radioPass], RadiosInfo[channel][radioProtected], RadiosInfo[channel][radioID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock AddChannelToFile(playerid, channel)
{
    format(query, sizeof(query), "INSERT INTO `radios` (channelid, owner, pass, protected) VALUES (%d, '%s', '%s', %d)", channel, GetName(playerid), "None", 0);
    mysql_function_query(dbHandle, query, true, "OnChannelInsert", "d", channel);
    return 1;
}

stock PlayerOwnHouse(playerid)
{
    new house = PlayerInfo[playerid][pHouseKey];
    if(house != -1 && CompareStrings(HouseInfo[house][hOwner], GetName(playerid)))
    {
        return true;
    }
    return false;
}

stock IsVaildWeapon(weapon)
{
    if(weapon == 18 || weapon == 19 || weapon == 20 || weapon == 21 || weapon == 43 || weapon == 44 || weapon == 45 || weapon == 46 || weapon == 40)
        return false;
    return true;
}

stock DisplayWeaponDamage(playerid)
{
    new wep[1500];
    for(new i = 1; i < MAX_WEAPONS; i++)
    {
        if(IsVaildWeapon(i))
        {
            format(msg, sizeof(msg), "%d. %s - [DMG: %d]\n", i, GetWeaponNameEx(i), WeaponDMG[i][wDamage]);
            strcat(wep, msg);
        }
        else
        {
            format(msg, sizeof(msg), "%d. Invalid weapon ID\n", i);
            strcat(wep, msg);
        }
    }
    SetIntVar(playerid, "WepDMG", 1);
    ShowDialog(playerid, Show:<WepDMG>, DIALOG_STYLE_LIST, "Dyanmic Weapon Damage", wep, "Edit", "Anuleaza");
}

stock UpdateWeaponDamage(weapon, damage)
{
    format(query, sizeof(query), "UPDATE `weapondmg` SET `damage` = %d WHERE `weapon` = %d", damage, weapon);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

stock SavePlayerToys(playerid)
{
    for(new i = 0; i < MAX_PLAYER_TOYS; i++)
    {
        if(PlayerToys[playerid][i][ptToyOn])
        {
            UpdatePlayerToy(playerid, i, PlayerToys[playerid][i][ptBoneID], PlayerToys[playerid][i][ptOffsetX],PlayerToys[playerid][i][ptOffsetY],PlayerToys[playerid][i][ptOffsetZ],PlayerToys[playerid][i][ptRotX],PlayerToys[playerid][i][ptRotY],PlayerToys[playerid][i][ptRotZ],PlayerToys[playerid][i][ptScaleX],PlayerToys[playerid][i][ptScaleY],PlayerToys[playerid][i][ptScaleZ]);
        }
    }
    return 1;
}

stock GetBoneName(boneid)
{
    new bone[64];
    switch(boneid)
    {
        case 1: bone = "Spine";
        case 2: bone = "Head";
        case 3: bone = "Left upper arm";
        case 4: bone = "Right upper arm";
        case 5: bone = "Left hand";
        case 6: bone = "Right hand";
        case 7: bone = "Left thigh";
        case 8: bone = "Right thigh";
        case 9: bone = "Left foot";
        case 10: bone = "Right foot";
        case 11: bone = "Right calf";
        case 12: bone = "Left calf";
        case 13: bone = "Left forearm";
        case 14: bone = "Right forearm";
        case 15: bone = "Left clavicle (shoulder)";
        case 16: bone = "Right clavicle (shoulder)";
        case 17: bone = "Neck";
        case 18: bone = "Jaw";
    }
    return bone;
}

stock DisplayClothing(playerid)
{
    new list[200];
    for(new i = 0; i < MAX_PLAYER_TOYS; i++)
    {
        if(PlayerToys[playerid][i][ptToyOn])
        {
            format(msg, sizeof(msg), "%s (Index %d)\n", PlayerToys[playerid][i][ptName], i);
            strcat(list, msg);
        }
        else
        {
            format(msg, sizeof(msg), "Fara (Index %d)\n", i);
            strcat(list, msg);
        }
    }
    SetIntVar(playerid, "EditStatus", 1);
    ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_LIST, "Lista haine", list, "Select", "Anuleaza");
    return 1;
}

stock EditClothing(playerid, index)
{
    if(GetIntVar(playerid, "EditingOwnedToy") == 1) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa termini de editat obiectul actual inainte sa editezi alt object.");
    format(msg, sizeof(msg), "Acum iti editezi {00FF00}%s{FFFFFF}.", PlayerToys[playerid][index][ptName]);
    SCM(playerid, -1, msg);
    SetIntVar(playerid, "ToySlotEditing", index);
    SetIntVar(playerid, "EditingOwnedToy", 1);
    if(!IsPlayerAttachedObjectSlotUsed(playerid, index))
    {
        SetPlayerAttachedObject(playerid, index, PlayerToys[playerid][index][ptModelID], PlayerToys[playerid][index][ptBoneID], PlayerToys[playerid][index][ptOffsetX], PlayerToys[playerid][index][ptOffsetY], PlayerToys[playerid][index][ptOffsetZ], PlayerToys[playerid][index][ptRotX], PlayerToys[playerid][index][ptRotY], PlayerToys[playerid][index][ptRotZ], PlayerToys[playerid][index][ptScaleX], PlayerToys[playerid][index][ptScaleY], PlayerToys[playerid][index][ptScaleZ]);
    }
    EditAttachedObject(playerid, index);
    return 1;
}

stock PlaceClothing(playerid, index)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, index))
    {
        format(msg, sizeof(msg), "Ti-ai scos {00FF00}%s{FFFFFF}.", PlayerToys[playerid][index][ptName]);
        SCM(playerid, -1, msg);
        RemovePlayerAttachedObject(playerid, index);
    }
    else
    {
        format(msg, sizeof(msg), "Ti-ai pus {00FF00}%s{FFFFFF}.", PlayerToys[playerid][index][ptName]);
        SCM(playerid, -1, msg);
        SetPlayerAttachedObject(playerid, index, PlayerToys[playerid][index][ptModelID], PlayerToys[playerid][index][ptBoneID], PlayerToys[playerid][index][ptOffsetX], PlayerToys[playerid][index][ptOffsetY], PlayerToys[playerid][index][ptOffsetZ], PlayerToys[playerid][index][ptRotX], PlayerToys[playerid][index][ptRotY], PlayerToys[playerid][index][ptRotZ], PlayerToys[playerid][index][ptScaleX], PlayerToys[playerid][index][ptScaleY], PlayerToys[playerid][index][ptScaleZ]);
    }
    return 1;
}

stock GetPlayerLocation(playerid)
{
    new location[MAX_ZONE_NAME];
    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
    return location;
}

stock GivePlayerItem(playerid, item)
{
    switch(item)
    {
        case CELL_ID:
        {
            PlayerInfo[playerid][pCellPhone] = 1;
            PlayerInfo[playerid][pNumber] = randomEx(1234567, 9999999);
        }
        case TOOL_ID:{  ToolKit{playerid} = true;}
        case RADIO_ID:{ PlayerInfo[playerid][pRadio] = 1;}
        case MASK_ID:
        {
            if(PlayerInfo[playerid][pDonateRank] > 0)
                PlayerInfo[playerid][pMask] = 1;
            else
                Mask{playerid} = true;
        }
        case LIGHTER_ID:{   PlayerInfo[playerid][pLighter] += 40;}
        case CIGGARS_ID:{   PlayerInfo[playerid][pCigars] += 20;}
        case DICE_ID:{  SetIntVar(playerid, "Dice", 1);}
        case GASCAN_ID:{    GasCan{playerid} = true;}
        case PEN_ID:{   PlayerInfo[playerid][pPen] = 1;}
        case BAT_ID:{   GiveMeleeWeapon(playerid, 5);}
        case CAMERA_ID:{    GiveWeapon(playerid, 43, 20);}
        case FISHINGROD_ID:{ PlayerInfo[playerid][pFishingRod] = 1;}
    }
    return 1;
}

stock HasNote(playerid, slot)
{
    if(PlayerNotes[playerid][slot][nOn] == 1)
        return true;
    return false;
}

stock GetFreeNoteSlot(playerid)
{
    for(new i = 1; i < MAX_NOTES; i++)
    {
        if(!HasNote(playerid, i))
            return i;
    }
    return 0;
}

stock SavePlayerNotes(playerid)
{
    for(new i = 1; i < MAX_NOTES; i++)
    {
        SaveNote(playerid, i);
    }
    return 1;
}

stock SaveNote(playerid, slot)
{
    if(HasNote(playerid, slot) && PlayerNotes[playerid][slot][nToInsert] == 1)
    {
        format(query, sizeof(query), "INSERT INTO `player_notes` (pid, note) VALUES (%d, '%s')", PlayerInfo[playerid][pDatabaseID], PlayerNotes[playerid][slot][nNote]);
        mysql_function_query(dbHandle, query, true, "OnNoteInsert", "id", slot, playerid);
        PlayerNotes[playerid][slot][nToInsert] = 0;
    }
    else if(HasNote(playerid, slot) && PlayerNotes[playerid][slot][nDatabaseID] != 0)
    {
        format(query, sizeof(query), "UPDATE `player_notes` SET `note` = '%s' WHERE `id` = %d", PlayerNotes[playerid][slot][nNote], PlayerNotes[playerid][slot][nDatabaseID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(!HasNote(playerid, slot) && PlayerNotes[playerid][slot][nToDelete] == 1)
    {
        format(query, sizeof(query), "DELETE FROM `player_notes` WHERE `id` = %d", PlayerNotes[playerid][slot][nDatabaseID]);
        mysql_function_query(dbHandle, query, false, "", "");
        PlayerNotes[playerid][slot][nToDelete] = 0;
    }
    return 1;
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new ip_count = 0;
	foreach(new x : Player) 
	{ 
		GetPlayerIp(x,against_ip,32);
		if(!strcmp(against_ip,test_ip)) ip_count++;
	}
	return ip_count;
}

/* =================== Stocks =================== */

public OnPlayerSpawn(playerid)
{
	new job = PlayerInfo[playerid][pJob];
/*    if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
    {
        if(CompareStrings(GetName(playerid), "Gigel_Tren")) //Checking if the NPC's name is MyFirstNPC
        {
            PutPlayerInVehicle(playerid, 1, 0); //Putting the NPC into the vehicle we created for it.
        }
        return 1;
    }
    if(IsPlayerNPC(playerid))
    {
        PutPlayerInVehicle(playerid, 1, 0);
        return 1;
    }*/
	// farmer job
    if(job == FARMER)
	{
		FarmInfo[playerid][pUpdateTime] = SetTimerEx("UpdatePaddy",TIME_UPDATEPADDY,1,"i",playerid);
		return 1;
	}
	// farmer job
    if(!PlayerLogged(playerid))
    {
        KickEx2(playerid, "[SERVER]: Trebuie sa te loghezi inainte de a te spawna!");
        return 1;
    }
	SetIntVar(playerid, "OldAdminPM", -1);	
    if(!PlayerInfo[playerid][pJailed])
    {
        LoadPlayerToys(playerid);
    }
    SetTimerEx("CheckWounded", 500, 0, "i", playerid);
    return 1;
}

public CheckWounded(playerid)
{
    if(GetIntVar(playerid, "JustDied") == 1)
    {
        PutPlayer(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
        SetInterior(playerid, PlayerInfo[playerid][pInt]);
        SetWorld(playerid, PlayerInfo[playerid][pWorld]);
        SetPlayerHealth(playerid, 1000.0);
        SCMEx(playerid, COLOR_YELLOW, "Ai fost ranit grav,poti astepta paramedicii sau sa folosesti '/acceptdeath' dupa %d de secunde.", ACCEPTDEATH_SECONDS);
        adeadtimer[playerid] = 1;
        FreezePlayer(playerid);
        OnAnim{playerid} = true;
        ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
    }
}

public OnPlayerDeath(playerid, killerid, reason)
{
    ResetVariables(playerid);
    CheckPlayerCurrentCall(playerid);
    if(PlayerInfo[playerid][pJailed] == 1)
	{
		format(msg, sizeof(msg), "%s a murit in admin jail.", GetName(playerid));
		AMSG(COLOR_YELLOWG, msg);
		SetPlayerPos(playerid,  2576.7861,2712.2004,22.9507);
	}
	else if(!isAdminDuty(playerid))
    {
        MakePlayerWounded(playerid);
        new weapname[28];
        GetWeaponName(reason, weapname, sizeof(weapname));
        format(msg, sizeof(msg), "((Ucis cu %s de la distanta de %d m))", weapname, floatround(GetDistanceBetweenPlayers(killerid,playerid)));
        SetPlayerChatBubble(playerid, msg, COLOR_LIGHTRED, 10.0, 180000);
    }
    else SCM(playerid, COLOR_GREY, "Ai fost scos automat din DeadTimer deoarece esti Admin-Duty.");
	
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(IsARentCar(vehicleid) || IsARentBike(vehicleid) || IsADMVCar(vehicleid)|| IsADMVHeli(vehicleid) || IsACopCar(vehicleid) || IsACopTowTruck(vehicleid))
    {
        VehicleEngine(vehicleid, false);
        ToggleVehicleLock(vehicleid, false);
    }
    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) //BIKES
    {
        VehicleEngine(vehicleid, true);
    } else {
        VehicleEngine(vehicleid, false);
    }
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    //Turning off the engine
    VehicleEngine(vehicleid, false);
    //Unlocking the vehicle
    ToggleVehicleLock(vehicleid, false);
    new veh = GetPlayerVehicleID(vehicleid);
    Delete3DTextLabel(veicolo_callsign_testo[veh]);
    veicolo_callsign_status[veh] = 0;
    if(CityVehicles[vehicleid][vCarOn] == 1)
    {
        RecreateCityVehicle(vehicleid);
    }

    if(TruckVehicle[killerid] == vehicleid && Trucking{killerid})
    {
        if(TruckComps[vehicleid] > 0)
        {
            format(msg, sizeof(msg), "~w~AI ESUAT MISIUNEA DISTRUGAND MASINA~n~AI PRIMIT O AMENDA DE ~g~$%d.", (TruckComps[vehicleid] * 2) / 100);
            JobMessage(killerid, msg, 6);
            PlacePlayerTicket(killerid, (TruckComps[vehicleid] * 2) / 100);
        }
        else HideTruckText(killerid);
        Trucking{killerid} = false;
        DroppingOff{killerid} = false;
        LoadingTruck{killerid} = 0;
        TruckComps[vehicleid] = 0;
        TruckingMoney[killerid] = 0;
        TruckVehicle[killerid] = INVALID_VEHICLE_ID;
        if(TruckTrailer[killerid] != INVALID_VEHICLE_ID)
        {
            DetachTrailerFromVehicle(GetPlayerVehicleID(killerid));
            RespawnVehicle(TruckTrailer[killerid]);
            TruckTrailer[killerid] = INVALID_VEHICLE_ID;
        }
    }
    if(PlayerOwnVehicle(killerid, vehicleid))
    {
        StopCarBoomBox(vehicleid);
        if(VehicleInfo[vehicleid][carInsurances] > 0)
        {
            VehicleInfo[vehicleid][carInsurances]--;
            VehicleInfo[vehicleid][carDestroyed]++;
            format(msg, sizeof(msg), "Masina %s a fost distrusa, distrugeri %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
            SCM(killerid, COLOR_LIGHTRED, msg);
            format(msg, sizeof(msg), "Mai ai %d asigurari ramase.",VehicleInfo[vehicleid][carInsurances]);
            SCM(killerid, COLOR_LIGHTRED, msg);
//          ResetVehicleStuff(vehicleid);
            PlayerInfo[killerid][pCarKey] = 0;
            VehicleInfo[vehicleid][carOwned] = 0;
            DestoryCar(vehicleid);
            CheckOwnedVehicles(killerid);
        }
        else
        {
            VehicleInfo[vehicleid][carDestroyed]++;
            format(msg, sizeof(msg), "Masina : %s a fost distrusa, distrugeri %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
            SCM(killerid, COLOR_LIGHTRED, msg);
            SCM(killerid, COLOR_LIGHTRED, "Nu ai mai avut asigurare asa ca motorul masinii este distrus.");
            VehicleInfo[vehicleid][carBroken] = 1;
//          ResetVehicleStuff(vehicleid);
            PlayerInfo[killerid][pCarKey] = 0;
            VehicleInfo[vehicleid][carOwned] = 0;
            DestoryCar(vehicleid);
            CheckOwnedVehicles(killerid);
        }
    }
    else
    {
        StopCarBoomBox(vehicleid);
        if(VehicleInfo[vehicleid][carOwned] == 1)
        {
            if(VehicleInfo[vehicleid][carInsurances] > 0)
            {
                VehicleInfo[vehicleid][carInsurances]--;
                VehicleInfo[vehicleid][carDestroyed]++;
                if(PlayerIsOn(GetIDByName(VehicleInfo[vehicleid][carOwner])))
                {
                    format(msg, sizeof(msg), "Masina %s a fost distrusa. Distrugeri %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
                    SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, msg);
                    format(msg, sizeof(msg), "Mai ai %d asigurari ramase.",VehicleInfo[vehicleid][carInsurances]);
                    SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, msg);
                    PlayerInfo[GetIDByName(VehicleInfo[vehicleid][carOwner])][pCarKey] = 0;
                    CheckOwnedVehicles(GetIDByName(VehicleInfo[vehicleid][carOwner]));
                }
                VehicleInfo[vehicleid][carOwned] = 0;
                ResetVehicleStuff(vehicleid);
                DestoryCar(vehicleid);
            }
            else
            {
                VehicleInfo[vehicleid][carDestroyed]++;
                if(PlayerIsOn(GetIDByName(VehicleInfo[vehicleid][carOwner])))
                {
                    format(msg, sizeof(msg), "Masina : %s a fost distrusa de cineva,distrugeri %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
                    SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, msg);
                    SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, "Nu ai mai avut asigurare asa ca motorul masinii este distrus.");
                    PlayerInfo[GetIDByName(VehicleInfo[vehicleid][carOwner])][pCarKey] = 0;
                    CheckOwnedVehicles(GetIDByName(VehicleInfo[vehicleid][carOwner]));
                }
                VehicleInfo[vehicleid][carBroken] = 1;
                VehicleInfo[vehicleid][carOwned] = 0;
                ResetVehicleStuff(vehicleid);
                DestoryCar(vehicleid);
            }
        }
    }

    if(IsARentCar(vehicleid))
    {
        if(GetIntVar(killerid, "RentedCar") == 1 && GetIntVar(killerid, "RentVehKey") == vehicleid)
        {
            RentMSG(killerid, "Ai distrus masina de rent si ai fost amendat cu $500.");
            GiveCash(killerid, -500);
            RemoveVar(killerid, "RentedCar");
            RemoveVar(killerid, "RentVehKey");
        }
        else
        {
            foreach(new i : Player)
            {
                if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicleid)
                {
                    RentMSG(i, "Masina ta de rent a fost distrusa de cineva.");
                    RemoveVar(i, "RentedCar");
                    RemoveVar(i, "RentVehKey");
                }
            }
        }
    }
    if(IsARentBike(vehicleid))
    {
        if(GetIntVar(killerid, "RentedCar") == 1 && GetIntVar(killerid, "RentVehKey") == vehicleid)
        {
            RentMSG(killerid, "Ai distrus bicicleta inchiriata si ai fost amendat cu $300.");
            GiveCash(killerid, -300);
            RemoveVar(killerid, "RentedCar");
            RemoveVar(killerid, "RentVehKey");
        }
        else
        {
            foreach(new i : Player)
            {
                if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicleid)
                {
                    RentMSG(i, "Bicicleta ta inchiriata a fost distrusa de cineva si ti-au fost returnati $500.");
                    GiveCash(i, 500);
                    RemoveVar(i, "RentedCar");
                    RemoveVar(i, "RentVehKey");
                }
            }
        }
    }
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success)
    {
        format(msg, sizeof(msg), "ERROR: Comanda {B1C8FB}'%s'{AFAFAF} nu exista in baza noastra de date, tasteaza {B1C8FB}(/help){AFAFAF}.", cmdtext);
        SCM(playerid,COLOR_GREY, msg);
        return 1;
    }
    format(query, sizeof(query), "INSERT INTO `commandlog` (player, command, date) VALUES ('%s', '%s', '%s')", GetName(playerid), cmdtext, GetFullDate());
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if(!PlayerLogged(playerid))
    {
        SCM(playerid, COLOR_GREY, "Error: Nu esti logat.");
        return 0;
    }
    return 1;
}

public OnPlayerText(playerid, text[])
{
    if(!PlayerLogged(playerid))
    {
        SCM(playerid, COLOR_GREY, "Error: Nu esti logat.");
        return 0;
    }
    if(PlayerIsWounded(playerid))
    {
        SCM(playerid, COLOR_GREY, "Error: Esti ranit.");
        return 0;
    }
    new message[200], str[200];
    if(CheckAdmin(playerid, 1) && text[0] == '#')
    {
        format(message, sizeof(message), "{0080FF}[Admin Chat]{FFFFFF}: %s: %s", GetName(playerid), text[1]);
        AMSG(-1, message);
    }
    else
    {
        if(GetIntVar(playerid, "OnCall") == 0)
        {
            if(strlen(text) > MAXLEN)
            {
                new pos = MAXLEN;
                if(pos < MAXLEN-1) pos = MAXLEN;
                format(str, sizeof(str), "%s spune: %.*s ...", GetNameWithMask(playerid), pos, text);
                ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                format(str, sizeof(str), " ... %s", text[pos]);
                ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                ChatAnimation(playerid, strlen(text));
            }
            else
            {
                format(str, sizeof(str), "%s spune: %s", GetNameWithMask(playerid), text);
                format(str, sizeof(str), "%s spune: %s", GetNameWithMask(playerid), text);
                ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                ChatAnimation(playerid, strlen(text));
            }
        }
        else
        {
            if(GetIntVar(playerid, "ServiceCall") == 1)
            {
                HandleCurrentNumber(playerid, text);
            }
            else
            {
                if(strlen(text) > MAXLEN)
                {
                    new pos = MAXLEN;
                    if(pos < MAXLEN-1) pos = MAXLEN;
                    format(str, sizeof(str), "%s spune (telefon): %.*s ...", GetNameWithMask(playerid), pos, text);
                    ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                    format(str, sizeof(str), " ... %s", text[pos]);
                    ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                }
                else
                {
                    format(str, sizeof(str), "%s spune (telefon): %s", GetNameWithMask(playerid), text);
                    ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                }
                if(PlayerIsOn(GetIntVar(playerid, "CallWith")))
                {
                    if(GetIntVar(GetIntVar(playerid, "CallWith"), "CallWith") == playerid)
                    {
                        if(strlen(text) > MAXLEN)
                        {
                            new pos = MAXLEN;
                            if(pos < MAXLEN-1) pos = MAXLEN;
                            format(str, sizeof(str), "%s spune (telefon): %.*s ...", GetNameWithMask(playerid), pos, text);
                            SCM(GetIntVar(playerid, "CallWith"), COLOR_YELLOWG, str);
                            format(str, sizeof(str), " ... %s", text[pos]);
                            SCM(GetIntVar(playerid, "CallWith"), COLOR_YELLOWG, str);
                        }
                        else
                        {
                            format(str, sizeof(str), "%s spune (telefon): %s", GetNameWithMask(playerid), text);
                            SCM(GetIntVar(playerid, "CallWith"), COLOR_YELLOWG, str);
                        }
                    }
                }
            }
        }
    }
    return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
    return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{    
    if(IsBike(vehicleid))
    {
        GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
        if(engine != VEHICLE_PARAMS_ON) { SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective); }
        speedlimit[playerid] = 60;
    }
    if(PlayerInfo[playerid][pFishingRod] == 1)
    {
        RemovePlayerAttachedObject(playerid, 0);
        fishingrod[playerid] = 0;
    }
    new vehicle = GetPlayerVehicleID(playerid);
    new kmh = GetVehicleSpeed(vehicle);
    new string[64];
    format(string, 64, "~b~km/h: ~h~~g~%d", kmh);
    PlayerTextDrawSetString(playerid, SpeedText[playerid], string);
    format(string, 64, "~b~Fuel: ~h~~g~%d", Gas{vehicle});
    PlayerTextDrawSetString(playerid, FuelText[playerid], string);
    // -
    OldVehicle[playerid] = vehicleid;
    ///////////// trucker job //////////////////////////
	if(IsATruckJob(vehicleid) && VehicleInfo[vehicleid][carOwned] == 0)
	{
		if(!TruckCompatible(playerid, vehicleid))
		{
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
			SCMEx(playerid, COLOR_GREY, "Acest camion este pentru %s.", GetJobRankName(PlayerInfo[playerid][pJob], GetTruckRank(vehicleid)));
		}
		else
		{
			SCMEx(playerid, COLOR_GRAD2, "Bine ai venit,{FFFFFF}%s %s in camionul tau.", GetJobRank(playerid), GetNameEx(playerid));
			SCM(playerid, COLOR_GRAD2, "Tine minte,fiecare camion are propriile misiuni.");
			SCM(playerid, COLOR_GREY, "-------------------------------");
			SCM(playerid, COLOR_WHITE, "{FF4646}Misiune:{FFFFFF}Incarca produse de la destinatii..");
			SCM(playerid, COLOR_WHITE, "..si livreaza-le la magazinele respective.");
			SCM(playerid, COLOR_GREY, "-------------------------------");
			SCM(playerid, COLOR_GREY, "/truckermission pentru a incepe.");
		}
	}
	/////////////////////// trucker job ///////////////////////
	// farmer job
	if(GetPVarInt(playerid,"HasPickupPaddy") == 1 || GetPVarInt(playerid,"HasGetPaddySack") == 1)
    {
        SCM(playerid, -1, "Nu poti urca in masina cu un sac in mana!");
        PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
    }
	if(CityVehicles[vehicleid][vType] == FARMER_CAR && PlayerInfo[playerid][pJob] != FARMER)
	{
		SCM(playerid, -1, "[SERVER]: Acest vehicul este doar pentru fermieri!");
		PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
		return 1;
	}
	if(CityVehicles[vehicleid][vType] == FARMER_CAR && PlayerInfo[playerid][pJob] == FARMER && GetVehicleModel(vehicleid) == 531)
	{
		if(GetIntVar(playerid, "Transporting") == 1)
		{
			SCM(playerid, -1, "[FarmerJob]: Trebuie sa folosesti /endtransport inainte de a putea folosi iar Tractorul!");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
		}
		return 1;
	}
	if(CityVehicles[vehicleid][vType] == FARMER_CAR && PlayerInfo[playerid][pJob] == FARMER && GetVehicleModel(vehicleid) == 532)
	{
		if(GetIntVar(playerid, "Sowing") == 0)
		{
			FarmInfo[playerid][pVehicleHire] = vehicleid;
			SetPVarInt(playerid, "Harvesting", 1);
			SCM(playerid, -1, "[FarmerJob]: Apasa 'ALT' pentru a recolta plantele.");
			SCM(playerid, -1, "[FarmerJob]: Nu uita sa parchezi Combina la loc cand ai terminat!");
		}
		else
		{
			SCM(playerid, -1, "[FarmerJob]: Trebuie sa folosesti /stopsow inainte de a putea folosi Combina!");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
		}
		return 1;
	}
	if(CityVehicles[vehicleid][vType] == FARMER_CAR && PlayerInfo[playerid][pJob] == FARMER && GetVehicleModel(vehicleid) == 478)
	{
		if(GetIntVar(playerid, "Harvesting") == 0)
		{
			FarmInfo[playerid][pVehicleHire] = vehicleid;
			SCM(playerid, -1, "[FarmerJob]: Cu acest vehicul poti transporta cerealele recoltate.");
			SCM(playerid, -1, "[FarmerJob]: Apasa 'N' ca sa ridici un sac si 'H' ca sa-l pui in Walton.");
		}
		else
		{
			SCM(playerid, -1, "[FarmerJob]: Trebuie sa folosesti /stopharvest inainte de a putea folosi Walton-ul!");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
		}
		return 1;
	}
	// farmer job
	// Garbage Job/////////////////////////
	if(CheckGarbageCar(vehicleid))
	{
	    if(PlayerInfo[playerid][pJob] != GARBAGE)
		{
			SCM(playerid, COLOR_GREY, "Trebuie sa ai jobul de gunoier!");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
		}
        else if(PlayerInfo[playerid][pGarbage] == 2)
        {
            SCM(playerid, COLOR_GREY, "Ai facut deja doua ture de Gunoier!");
            PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
        }
		else if(GetPVarInt(playerid, "TrashUniform") == 0)
		{
			SCM(playerid, COLOR_GREY, "Trebuie sa ai uniforma de gunoier pe tine!");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
		}
	    return 1;
	}
	// Garbage Job //////////////////
    if(CityVehicles[vehicleid][vCarOn])
    {
        if(CityVehicles[vehicleid][vFaction] != 0 && PlayerInfo[playerid][pFaction] != CityVehicles[vehicleid][vFaction] && !ispassenger)
        {
            SCM(playerid, COLOR_WHITE, "Nu ai permisiune pentru acest vehicul de factiune.");
            PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
            return 1;
        }
    }
    if(IsATaxiCar(vehicleid) && PlayerInfo[playerid][pSideJob] != TAXI && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        SCM(playerid, COLOR_GRAD1, "Nu esti taximetrist!");
        PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
    }
    if(Gas[vehicleid] <= 0)
    {
        PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
        SCM(playerid, COLOR_WHITE, "Acest vehicul nu mai are combustibil!");
        return 1;
    }
    if(vLocked{vehicleid} && ispassenger)
    {
        SCM(playerid, COLOR_LIGHTRED, "Vehiculul este inchis.");
        PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
        return 1;
    }
    if(IsAPlane(vehicleid) && !IsADMVHeli(vehicleid) && !ispassenger || !IsADMVHeli(vehicleid) && IsAHelicopter(vehicleid) && !ispassenger)
    {
        if(PlayerInfo[playerid][pFlyLic] == 0 && !IsACopCar(vehicleid) && !IsANewsCar(vehicleid) && !IsAFDCar(vehicleid) && !IsAGOVCar(vehicleid))
        {
            SCM(playerid, COLOR_LIGHTRED, "Nu ai licenta de zbor");
            PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
        }
    }
    if(ispassenger == 0)
    {
        if(IsADMVCar(vehicleid))
        {
            if(PlayerInfo[playerid][pCarLic] && !IsADMVTruck(vehicleid) && !IsABiker(vehicleid))
            {
                DmvMSG(playerid, "Ai deja permis pentru aceasta categorie.");
                PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
            }
            if(PlayerInfo[playerid][pBigLic] && IsADMVTruck(vehicleid) && !IsABiker(vehicleid))
            {
                DmvMSG(playerid, "Ai deja permis pentru aceasta categorie.");
                PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
            }
            if(PlayerInfo[playerid][pBikeLic] && !IsADMVTruck(vehicleid) && IsABiker(vehicleid))
            {
                DmvMSG(playerid, "Ai deja permis pentru aceasta categorie.");
                PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
            }
        }
        if(IsADMVHeli(vehicleid))
        {
            if(PlayerInfo[playerid][pFlyLic])
            {
                DmvMSG(playerid, "Ai deja licenta de zbor.");
                PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
            }
        }
    }
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(speedlimit[playerid] != 0.0)
    {
        speedlimit[playerid] = 0.0;
        if(!IsBike(vehicleid)) SCM(playerid, COLOR_GREY, "[AUTOPILOT] Limitatorul de viteza a fost dezactivat!");
    }
    if(seatbelt[playerid] == 1)
    {
        seatbelt[playerid] = 0;
        new seatbeltstr[128];
        format(seatbeltstr, sizeof(seatbeltstr), "si-a scos centura de siguranta.");
        ActionMessage(playerid, 15.0, seatbeltstr);
    }
    if(RepairService[playerid][REPAIR_DEAD] == 1 || RepairService[playerid][REPAIR_ENGINE] == 1 || RepairService[playerid][REPAIR_BODY] == 1 || RepairService[playerid][REPAIR_PAINT] == 1)
    {
        ShowJobMessage(playerid, "~h~~p~INCEPI SA DAI CU SPRAY PE MASINA.");
        GiveWeapon(playerid, 41, 9999);
    }
    if(IsADMVCar(vehicleid) && GetIntVar(playerid, "InDriveTest") == 1)
    {
        RemoveVar(playerid, "LessonStarted");
        RemoveVar(playerid, "LessonSeconds");
        RemoveVar(playerid, "InDriveTest");
        DmvMSG(playerid, "Ai iesit din vehicul in timpul traseului, PICAT.");
        RemoveCheckPoint(playerid);
        RespawnVehicle(vehicleid);
    }
    if(IsADMVHeli(vehicleid) && GetIntVar(playerid, "InFlyTest") == 1)
    {
        RemoveVar(playerid, "LessonStarted");
        RemoveVar(playerid, "LessonSeconds");
        RemoveVar(playerid, "InFlyTest");
        DmvMSG(playerid, "Ai iesit din elicopter in timpul traseului, PICAT.");
        RemoveRaceCheckPoint(playerid);
        RespawnVehicle(vehicleid);
        SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
        SetPlayerWeapons(playerid);
    }
    if(JackingEngine[playerid] >= 0)
    {
        JackingEngine[playerid] = 0;
    }
    if(JackingEngine[playerid] != 0)
    {
        JackingEngine[playerid] = 0;
    }
    if(VehicleInfo[vehicleid][carRadioOn] == 1)
    {
        StopAudioStreamForPlayer(playerid);
    }
    UnFreezePlayer(playerid);
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new vehicle = GetPlayerVehicleID(playerid);
    new oldvehicle = OldVehicle[playerid];
    if(newstate == PLAYER_STATE_DRIVER)
    {
        if((GetTickCount()-GetPVarInt(playerid, "cartime")) < 1000) // enters veh as driver faster than 1 once
        {
            SetPVarInt(playerid, "carspam", GetPVarInt(playerid, "carspam")+1);
            if(GetPVarInt(playerid, "carspam") >= 6) // allows 6 seconds leeway to compensate for glitching, then kicks
            {
                new name[32];
                new string128[64];
                GetPlayerName(playerid,name,24);
                format(string128,sizeof(string128),"[SERVER][%i]%s a primit kick pentru Car Spam Hack",playerid,name);
                SendClientMessageToAll(COLOR_LIGHTRED,string128);
				#if defined debugOn
					printf(string128);
				#endif
                KickWithMSG(playerid, string128);
            }
        }
        SetPVarInt(playerid, "cartime", GetTickCount());
    }
    if (newstate == PLAYER_STATE_DRIVER)
    {
        if(CityVehicles[vehicle][vFaction] != 0 && PlayerInfo[playerid][pFaction] != CityVehicles[vehicle][vFaction])
        {
            SCM(playerid, COLOR_WHITE, "[SERVER]: Nu ai permisiune pentru acest vehicul de factiune.");
            RemovePlayerFromVehicle(playerid);
        }
        if(PlayerInfo[playerid][pJob] == TRUCKER)
        {
            if(Trucking{playerid} && TruckVehicle[playerid] == vehicle)
            {
                if(Trucking{playerid} && GetTruckStage(playerid) > 0)
                {
                    if(!IsPlayerInCheckpoint(playerid) && LoadingTruck{playerid} > 0 || !IsPlayerInCheckpoint(playerid) && DroppingOff{playerid})
                    {
                        PlayerTextDrawSetString(playerid, TruckerDraw[playerid], "~y~INTOARCE-TE LA CHECKPOINT PENTRU A CONTINUA.");
                    }
                    else
                    {
                        SetTruckerText(playerid);
                    }
                }
            }
        }
    }
    if(newstate == PLAYER_STATE_ONFOOT)
    {
        new driver = GetVehicleDriver(vehicle);
        if(Trucking{playerid})
        {
            PlayerTextDrawSetString(playerid, TruckerDraw[playerid], "~r~INTOARCE-TE LA CAMION CAT MAI REPEDE POSIBIL");
        }
        if(TaxiMoney[playerid] > 0 && IsATaxi(oldvehicle))
        {
            ChargePerson(playerid, driver);
        }
    }
    if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        if(VehicleInfo[vehicle][carRadioOn] == 1)
        {
            PlayAudioStreamForPlayer(playerid, VehicleInfo[vehicle][carRadioURL]);
        }
        if(PlayerOwnVehicle(playerid, vehicle))
        {
            if(CountVehicleTickets(vehicle) > 0)
            {
                SCM(playerid, COLOR_LIGHTRED, "* Ai amenzi neplatite. (/v tickets)");
            }
        }
        if(!IsBike(vehicle))
        {
            PlayerTextDrawShow(playerid, SpeedText[playerid]);
            PlayerTextDrawShow(playerid, FuelText[playerid]);
        }
    }
    else
    {
        if(JackingEngine[playerid] >= 0)
        {
            JackingEngine[playerid] = 0;
        }
        if(JackingEngine[playerid] != 0)
        {
            JackingEngine[playerid] = 0;
        }
        UnFreezePlayer(playerid);
        PlayerTextDrawHide(playerid, SpeedText[playerid]);
        PlayerTextDrawHide(playerid, FuelText[playerid]);
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        //if(PlayerHoldingWeapon(playerid, 24)) //Anti Desert Eagle drive-by.
        //{
		SetPlayerArmedWeapon(playerid, 0);
        //}
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
        if(!engineOn{vehicle} && !IsADMVCar(vehicle) && !IsADMVHeli(vehicle) && !IsBike(vehicle))
        {
            SCM(playerid, COLOR_GREEN2,"Motorul nu este pornit (/engine).");
        }
        if(IsARentCar(vehicle))
        {
            CarIsRented(vehicle, playerid);
        }
        if(IsARentBike(vehicle))
        {
            BikeIsRented(vehicle, playerid);
        }
        if(IsADMVCar(vehicle))
        {
            if(IsADMVTruck(vehicle))
            {
                if(PlayerInfo[playerid][pBigLic] == 1 || dmv_bigcar[playerid] == 0)
                {
                    RemovePlayerFromVehicle(playerid);
                    SetVehicleToRespawn(vehicle);
                    SCM(playerid, COLOR_GREY, "Ai deja o licenta de tip C sau nu ai inceput testul.");
                }
                else if(dmv_bigcar[playerid] == 1) ToggleVehicleEngine(vehicle, playerid);
            }
            else if(IsABiker(vehicle))
            {
                if(PlayerInfo[playerid][pBikeLic] == 1 || dmv_bike[playerid] == 0)
                {
                    RemovePlayerFromVehicle(playerid);
                    SetVehicleToRespawn(vehicle);
                    SCM(playerid, COLOR_GREY, "Ai deja o licenta de tip A sau nu ai inceput testul.");
                }
                else if(dmv_bike[playerid] == 1) ToggleVehicleEngine(vehicle, playerid);
            }
            else if(!IsABiker(vehicle) && !IsADMVTruck(vehicle))
            {
                if(PlayerInfo[playerid][pCarLic] == 1 || dmv_car[playerid] == 0)
                {
                    RemovePlayerFromVehicle(playerid);
                    SetVehicleToRespawn(vehicle);
                    SCM(playerid, COLOR_GREY, "Ai deja o licenta de tip B sau nu ai inceput testul.");
                }
                else if(dmv_car[playerid] == 1) ToggleVehicleEngine(vehicle, playerid);
            }
        }
        if(IsADMVHeli(vehicle))
        {
            if(!PlayerInfo[playerid][pFlyLic])
            {
                DmvMSG(playerid, "Examenul de zbor costa, $250.000.");
                DmvMSG(playerid, "Pentru a incepe examenul, '/flyinglicenseexam'.");
            }
        }
    }

    if(newstate == PLAYER_STATE_SPAWNED)
    {
        SetPlayerHealth(playerid, 100.0+PlayerInfo[playerid][pSHealth]);
        if(PlayerInfo[playerid][pArmour] > 0.0 && PlayerInfo[playerid][pHasArmour] > 0)
        {
            SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
        }
        CheckFightStyle(playerid);
    }

    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(GetPVarInt(playerid, "GarbageFull") == 1 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
    {
        if(PlayerToPoint(5.0, playerid, 2402.4753,90.8707,27.1285))
        {
            RemoveVar(playerid, "GarbageFull");
            new Float:health, vehicleid = GetPlayerVehicleID(playerid);
            GetVehicleHealth(vehicleid, health);
            new vhealth = floatround(1000.0-health, floatround_round);
            new money = 200 - (vhealth/100);
            PlayerInfo[playerid][pPayCheckMade] += money;
            if(money == 200) SCM(playerid, COLOR_GREEN, "Felicitari! Nu ai lovit masina si ai primit 200$.");
            else if(money <= 200) SCMEx(playerid, COLOR_GREEN, "Din nefericire ai lovit masina si ai primit doar %d$.", money);
            SCM(playerid, COLOR_GREY, "Banii ii vei primi la paycheck.");
            PlayerInfo[playerid][pGarbage]++;
    		SaveJobProgress(playerid);
            trash[playerid] = 0;
    		DisablePlayerCheckpoint(playerid);
            SetVehicleToRespawn(vehicleid);
        }
    }
    if(GetPVarInt(playerid, "MatsStage") == 2 && IsWepDealerCar(GetPlayerVehicleID(playerid)))
    {
        if(PlayerToPoint(5.0, playerid, 2366.8889,-2015.3506,13.6103))
        {
            GameTextForPlayer(playerid, "~y~ASTEAPTA ~g~20 ~y~SECUNDE PENTRU A PROCESA MATERIALELE", 20000, 4);
            TogglePlayerControllable(playerid, false);
            SetTimerEx("GiveMatsFinal", 20000, false, "i", playerid);
            DisablePlayerCheckpoint(playerid);
        }
    }
    if(GetPVarInt(playerid, "MatsStage") == 1 && IsWepDealerCar(GetPlayerVehicleID(playerid)))
    {
        if(PlayerToPoint(5.0, playerid, 211.2543,-31.6185,1.4704))
        {
            GameTextForPlayer(playerid, "~y~ASTEAPTA ~g~10 ~y~SECUNDE PENTRU A INCARCA MATERIALELE", 10000, 4);
            TogglePlayerControllable(playerid, false);
            SetTimerEx("GiveMats", 10000, false, "i", playerid);
            DisablePlayerCheckpoint(playerid);
        }
    }
    if(GetPVarInt(playerid, "DMV") == 1)
    {
        if(!IsADMVCar(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "Trebuie sa fii intr-un vehicul ce apartine DMV-ului!");
        if(dmv_bike[playerid] == 1) if(IsAtDMVCP(playerid, 1)) return HandleDMV(playerid);
        if(dmv_car[playerid] == 1) if(IsAtDMVCP(playerid, 2)) return HandleDMV(playerid);
        if(dmv_bigcar[playerid] == 1) if(IsAtDMVCP(playerid, 3)) return HandleDMV(playerid);
    }
    //PlayerCP >= 1 && PlayerCP <= 14
//  HandleLicenseExam(playerid); //Driving License Exam Handling 14 checkpoints.
    //PlayerCP >= 1 && PlayerCP <= 14

    //PlayerCP == 25
    OnPlayerEnterParkingSpot(playerid); //Owned vehicle parking spot
    //PlayerCP == 25

    //PlayerCP == 26 && 27 && 28
    HandleTruckCheckPoint(playerid); //Trucking Check Point
    //PlayerCP == 26 && 27 && 28

    //Trucker componencts spot 29
    if(GetIntVar(playerid, "PlayerCP") == COMPSPOT)
    {
        RemoveCheckPoint(playerid);
    }
    //Trucker componencts spot 29
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    //PlayerCP >= 15 && PlayerCP <= 24
    HandleFlyingExam(playerid); //Flying License Exam Handling 9 race checkpoints.
    //PlayerCP >= 15 && PlayerCP <= 24
    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}

public OnRconCommand(cmd[])
{
    printf(cmd);
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    return 0;
}

public OnObjectMoved(objectid)
{
    return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(pickupid == infopickup)
    {
        format(msg, sizeof(msg), "Foloseste comanda /gps pentru aflarea locatiilor.");
        GameTextForPlayer(playerid, msg, 3500, 3);
    }
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    new slot = PlayerInfo[playerid][pVehSlot];
    if(slot != -1)
    {
        VehicleInfo[vehicleid][carColor1] = color1;
        VehicleInfo[vehicleid][carColor2] = color2;
    }
    new str[128];
    new totalc;
    totalc = GetPVarInt(playerid, "OVR") + 1;

    SetPVarInt(playerid, "OVR", totalc);

    new Float:vpox[3];
    if (totalc > normal_ovr_count)
    {
        GetVehiclePos(vehicleid, vpox[0], vpox[1], vpox[2]);
        //new insprayshop = point_in_sprayshop(Vx, Vy, Vz);
        if (!IsPlayerInRangeOfPoint(playerid, 20.0, 616.7820, -74.8151, 997.6350))
        {
            if (GetPlayerVirtualWorld(playerid) != VW_CHEATER)
            {
                format(str,sizeof(str), "[alot_ovr_inline] %s %d %d (%0.4f %0.4f %0.4f)", GetName(playerid), playerid, totalc, vpox[0], vpox[1], vpox[2]);
                AMSG(COLOR_LIGHTRED, str);
            }
        }
        else if (!IsPlayerInRangeOfPoint(playerid, 20.0, 615.2851, -124.2390, 997.6350))
        {
            if (GetPlayerVirtualWorld(playerid) != VW_CHEATER)
            {
                format(str,sizeof(str), "[alot_ovr_inline] %s %d %d (%0.4f %0.4f %0.4f)", GetName(playerid), playerid, totalc, vpox[0], vpox[1], vpox[2]);
                AMSG(COLOR_LIGHTRED, str);
            }
        }
        else if (!IsPlayerInRangeOfPoint(playerid, 20.0, 617.5380, -1.9900, 1000.6829))
        {
            if (GetPlayerVirtualWorld(playerid) != VW_CHEATER)
            {
                format(str,sizeof(str), "[alot_ovr_inline] %s %d %d (%0.4f %0.4f %0.4f)", GetName(playerid), playerid, totalc, vpox[0], vpox[1], vpox[2]);
                AMSG(COLOR_LIGHTRED, str);
            }
        }
    }
    if (totalc > 5)
    {
        if (GetPlayerVirtualWorld(playerid) != VW_CHEATER)
        {
            //SendClientMessage(playerid, COLOR_LIGHTRED, "Quick color changer cleo is a bad idea here.");
            KickWithMSG(playerid, "Schimbarea culorii folosind CLEO este interzisa!");

        }
    }

    if (GetPlayerVirtualWorld(playerid) == VW_CHEATER) // already taken care of.
    return 1;

    if (!IsPlayerInVehicle(playerid, vehicleid))
    {

        new Float:pox[3];
        GetPlayerPos(playerid, pox[0], pox[1], pox[2]);
        GetVehiclePos(vehicleid, vpox[0], vpox[1], vpox[2]);

        format(str,sizeof(str), "[OVR_INVALID] %s %d %d %d %d jucator (%0.4f %0.4f %0.4f) Car (%0.4f %0.4f %0.4f)", GetName(playerid), playerid, vehicleid, color1, color2, pox[0], pox[1], pox[2], vpox[0], vpox[1], vpox[2]);
        AMSG(COLOR_LIGHTRED, str);
        KickWithMSG(playerid, "Schimbarea culorii folosind CLEO este interzisa!");
    }
    return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new panels2,doors2,lights2,tires2;
    GetVehicleDamageStatus(vehicleid,panels2,doors2,lights2,tires2);
    VehicleInfo[vehicleid][carPanels] = panels2;
    VehicleInfo[vehicleid][carDoors] = doors2;
    VehicleInfo[vehicleid][carLights] = lights2;
    VehicleInfo[vehicleid][carTires] = tires2;
    return 1;
}

forward IsAnyPlayerInVehicle(veh);
public IsAnyPlayerInVehicle(veh)
{
    new ok;
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == veh) {ok=1;}
        }
    }
    if(ok==1) return true;
    else return false;
//  return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:CurrentMenu = GetPlayerMenu(playerid);

    //==================Food Stall Menu==================//
    if(CurrentMenu == FoodStallMenu)
    {
        switch(row)
        {
            case 0:
            {
                if(GetCash(playerid) < HOTDOG_PRICE)
                {
                    NoCashMSG(playerid);
                    UnFreezePlayer(playerid);
                    return 1;
                }
                SCM(playerid, COLOR_YELLOWG, "Ai cumparat macaroane pentru $50.");
                format(msg, sizeof(msg), "> %s a cumparat niste macaroane si le mananca.", GetNameWithMask(playerid));
                SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
                GiveCash(playerid, -50);
                UnFreezePlayer(playerid);
                OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
                SetPlayerHealth(playerid, 100);
            }
            case 1:
            {
                if(GetCash(playerid) < HOTDOG_PRICE)
                {
                    NoCashMSG(playerid);
                    UnFreezePlayer(playerid);
                    return 1;
                }
                SCM(playerid, COLOR_YELLOWG, "Ai cumparat o bucata de piza pentru $25.");
                format(msg, sizeof(msg), "> %s a cumparat o bucata de pizza si o mananca.", GetNameWithMask(playerid));
                SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
                GiveCash(playerid, -25);
                UnFreezePlayer(playerid);
                OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
                SetPlayerHealth(playerid, 100);
            }
            case 2:
            {
                if(GetCash(playerid) < HOTDOG_PRICE)
                {
                    NoCashMSG(playerid);
                    UnFreezePlayer(playerid);
                    return 1;
                }
                SCM(playerid, COLOR_YELLOWG, "Ai cumparat aripioare de pui pentru $80.");
                format(msg, sizeof(msg), "> %s a cumparat aripioare de pui si le mananca.", GetNameWithMask(playerid));
                SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
                GiveCash(playerid, -80);
                UnFreezePlayer(playerid);
                OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
                SetPlayerHealth(playerid, 100);
            }
            case 3:
            {
                if(GetCash(playerid) < HOTDOG_PRICE)
                {
                    NoCashMSG(playerid);
                    UnFreezePlayer(playerid);
                    return 1;
                }
                SCM(playerid, COLOR_YELLOWG, "Ai cumparat un hotdog pentru $40.");
                format(msg, sizeof(msg), "> %s a cumparat un hotdog si il mananca.", GetNameWithMask(playerid));
                SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
                GiveCash(playerid, -40);
                UnFreezePlayer(playerid);
                OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
                SetPlayerHealth(playerid, 100);
            }
            case 4:
            {
                HideMenuForPlayer(Menu:FoodStallMenu, playerid);
                UnFreezePlayer(playerid);
            }
        }
    }
    //==================Food Stall Menu==================//
    return 1;
}

public OnPlayerExitedMenu(playerid)
{
    UnFreezePlayer(playerid);
    return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    return 1;
}

forward RemoveBHOP(playerid);
public RemoveBHOP(playerid)
{
    bhop[playerid]--;
    return 1;
}

forward BHopWarn(playerid);
public BHopWarn(playerid)
{
    bhop_warn[playerid] = 0;
    return 1;
}

forward RepairTime2(playerid);
public RepairTime2(playerid)
{
    new Float:x, Float:y, Float:z;
    GetVehiclePos(VehicleToRepair[playerid], x, y, z);
    if(RepairService[playerid][REPAIR_ENGINE] == 1)
    {
        JobMessage(playerid, "~h~~p~MOTORUL A FOST REPARAT.", 6);
        RemovePlayerWeapon(playerid, 41);
        SetVehicleHealth(VehicleToRepair[playerid], 1000.0);
        RepairService[playerid][REPAIR_ENGINE] = 0;
        RemoveVar(playerid, "CurrentTowTruck");
    }
    if(RepairService[playerid][REPAIR_BODY] == 1)
    {
        JobMessage(playerid, "~h~~p~CAROSERIA A FOST REPARATA.", 6);
        RemovePlayerWeapon(playerid, 41);
        RepairVehicleBody(VehicleToRepair[playerid]);
        RepairService[playerid][REPAIR_BODY] = 0;
        RemoveVar(playerid, "CurrentTowTruck");
    }
    if(RepairService[playerid][REPAIR_DEAD] == 1)
    {
        JobMessage(playerid, "~h~~p~MOTORUL DISTRUS A FOST REPARAT CU SUCCES.", 6);
        RemovePlayerWeapon(playerid, 41);
        VehicleInfo[VehicleToRepair[playerid]][carBroken] = 0;
        RepairService[playerid][REPAIR_DEAD] = 0;
        RemoveVar(playerid, "CurrentTowTruck");
    }
    if(RepairService[playerid][REPAIR_PAINT] == 1)
    {
        JobMessage(playerid, "~h~~p~VEHICULUL A FOST VOPSIT CU SUCCES.", 6);
        RemovePlayerWeapon(playerid, 41);
        RepairService[playerid][REPAIR_PAINT] = 0;
        ChangeVehicleColor(VehicleToRepair[playerid], GetIntVar(playerid, "color1"), GetIntVar(playerid, "color1"));
        VehicleInfo[VehicleToRepair[playerid]][carColor1] = GetIntVar(playerid, "color1");
        VehicleInfo[VehicleToRepair[playerid]][carColor2] = GetIntVar(playerid, "color2");
        RemoveVar(playerid, "color1");
        RemoveVar(playerid, "color2");
        RemoveVar(playerid, "CurrentTowTruck");
    }
    RepairOffer[playerid] = INVALID_PLAYER_ID;
    VehicleToRepair[playerid] = INVALID_VEHICLE_ID;
    if(IsPlayerInRangeOfPoint(playerid, 4.2, x, y, z))
    {
        if(HoldingKey(playerid, KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerHoldingWeapon(playerid, 41))
        {
            new veh = GetIntVar(playerid, "CurrentTowTruck");
            if(RepairService[playerid][REPAIR_ENGINE] == 1)
            {
                format(msg, sizeof(msg), "~h~~p~SE REPARA MOTORUL.~n~~w~CAMIONUL MAI ARE ~b~%d ~w~PRODUSE RAMASE.", VehicleInfo[veh][carComps]);
                ShowJobMessage(playerid, msg);
                VehicleInfo[veh][carComps] -= 4;
            }
            if(RepairService[playerid][REPAIR_BODY] == 1)
            {
                format(msg, sizeof(msg), "~h~~p~SE REPARA CAROSERIA.~n~~w~CAMIONUL MAI ARE ~b~%d ~w~PRODUSE RAMASE.", VehicleInfo[veh][carComps]);
                ShowJobMessage(playerid, msg);
                VehicleInfo[veh][carComps] -= 5;
            }
            if(RepairService[playerid][REPAIR_DEAD] == 1)
            {
                format(msg, sizeof(msg), "~h~~p~SE RESTAUREAZA MOTORUL.~n~~w~CAMIONUL MAI ARE ~b~%d ~w~PRODUSE RAMASE.", VehicleInfo[veh][carComps]);
                ShowJobMessage(playerid, msg);
                VehicleInfo[veh][carComps] -= 5;
            }
            if(RepairService[playerid][REPAIR_PAINT] == 1)
            {
                format(msg, sizeof(msg), "~h~~p~SE VOPSESTE MASINA.~n~~w~CAMIONUL MAI ARE ~b~%d ~w~PRODUSE RAMASE.~n~~y~TIMP RAMAS: %d", VehicleInfo[veh][carComps]);
                ShowJobMessage(playerid, msg);
                VehicleInfo[veh][carComps] -= 5;
            }
        }
    }
    else
    {
        ShowJobMessage(playerid, "~h~~p~TREBUIE SA FI LANGA VEHICUL.");
    }
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    new str[500];
    new job = PlayerInfo[playerid][pJob];
    if(newkeys & KEY_CROUCH && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
    {
        new tick = GetTickCount();
        if(tick - g_TickPushed[playerid] < DOUBLE_CLICK_TIME)
        {
            ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
            SetTimerEx("ClearAnimations", 1000, false, "i", playerid);
        }
        g_TickPushed[playerid] = tick;
    }

    if((newkeys & KEY_JUMP) && !IsPlayerInAnyVehicle(playerid))
    {
        bhop[playerid]++;
        if(bhop[playerid] >= 7 && bhop_warn[playerid] == 0)
        {
            format(msg, sizeof(msg), "AdmWarn: %s [ID: %d] a fost detectat de sistem ca facea BHOP (/spec %d)!", GetName(playerid), playerid, playerid);
            bhop_warn[playerid] = 1;
            SetTimerEx("BHopWarn", 20000, false, "i", playerid);
            AWARNMSG(COLOR_LIGHTRED, msg);
        }
        bhop_timer[playerid] = SetTimerEx("RemoveBHOP", 2000, false, "i", playerid);
    }
    if(PRESSED(KEY_FIRE) && RepairOffer[playerid] != INVALID_PLAYER_ID)
    {
        if(VehicleToRepair[playerid] != INVALID_VEHICLE_ID)
        {
            if(RepairService[playerid][REPAIR_DEAD] == 1 || RepairService[playerid][REPAIR_ENGINE] == 1 || RepairService[playerid][REPAIR_BODY] == 1 || RepairService[playerid][REPAIR_PAINT] == 1)
            {
                new Float:x, Float:y, Float:z;
                GetVehiclePos(VehicleToRepair[playerid], x, y, z);
                if(!IsPlayerInRangeOfPoint(playerid, 4.2, x, y, z))
                {
                    ShowJobMessage(playerid, "~h~~p~TREBUIE SA FI LANGA VEHICUL.");
                }
                else
                {
                    RepairOffer[playerid] = INVALID_PLAYER_ID;
//                  RepairTime{playerid} = 15;
                    SetTimerEx("RepairTime2", 15000, false, "i", playerid);
                }
            }
        }
    }
    if((newkeys & KEY_FIRE) && meal[playerid] == 1)
    {
        ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
    }
    if(PRESSED(KEY_HORN))
    {
        if(PlayerInCar(playerid))
        {
            new gate = GetClosestGate(playerid);
            if(gate == -1) return 1;
            if(Gates[gate][gateFaction] != 0 && Gates[gate][gateFaction] != PlayerInfo[playerid][pFaction]) return 1;
            if(Gates[gate][gateOpened] == 1)
            {
                Gates[gate][gateOpened] = 0;
                MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], Gates[gate][gateOpenSpeed], Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
            }
            else
            {
                Gates[gate][gateOpened] = 1;
                MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX]-Gates[gate][gateMoveX], Gates[gate][gatePosY]-Gates[gate][gateMoveY], Gates[gate][gatePosZ]-Gates[gate][gateMoveZ], Gates[gate][gateOpenSpeed], Gates[gate][gatePosRX]-Gates[gate][gateMoveRX], Gates[gate][gatePosRY]-Gates[gate][gateMoveRY], Gates[gate][gatePosRZ]-Gates[gate][gateMoveRZ]);
            }
        }
    }
    if(PRESSED(KEY_HANDBRAKE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pFaction] == LSPD)
    {
        if(PlayerHoldingWeapon(playerid, 43))
        {
            new Float:x,Float:y,Float:z,vehicle;
            foreach(new i : Player)
            {
                if(PlayerInCar(i))
                {
                    vehicle = GetPlayerVehicleID(i);
                    GetPlayerPos(i,x,y,z);
                    if(IsPlayerAimingAt(playerid,x,y,z,10))
                    {
                        new string[68];
                        if(CityVehicles[vehicle][vCarOn] == 1)
                            format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~Placuta Imatriculare: ~w~%s~n~~b~Viteza: ~w~%d MPH", CityVehicles[vehicle][vPlate], GetVehicleSpeed(vehicle));
                        else
                            format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~Placuta Imatriculare: ~w~%s~n~~b~Viteza: ~w~%d MPH", VehicleInfo[vehicle][carPlate], GetVehicleSpeed(vehicle));
                        GameTextForPlayer(playerid, string, 3500, 3);
                        format(string, sizeof(string), "Placuta Imatriculare: %s. Viteza: %d MPH", VehicleInfo[vehicle][carPlate], GetVehicleSpeed(vehicle) );
                        SCM(playerid, COLOR_GRAD4, string);
                        return 1;
                    }
                }
            }
        }
    }
    if(PRESSED(KEY_FIRE))
    {
        //================= Farmer Job =====================//
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == FarmInfo[playerid][pVehicleHire])
	    {
			if(job == FARMER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 531 && IsPlayerInDynamicArea(playerid,FJArea,1))
				{
					if(FarmInfo[playerid][pPaddyInTrailer] > 0 && CheckPaddyFreeSlot(playerid,1)!= -1)
					{
						new Float:x,Float:y,Float:z;
						GetVehiclePos(FarmInfo[playerid][pTrailerVehicleHire],x,y,z);
						FarmInfo[playerid][pPaddyInTrailer] -= 1;
						new string[128];
						format(string,sizeof(string),"Proprietar: %s\nSeminte :{4cff00}%d",GetName(playerid),FarmInfo[playerid][pPaddyInTrailer]);
						UpdateDynamic3DTextLabelText(FarmInfo[playerid][pTrailerText],-1,string);
						CreatePaddy(playerid,CheckPaddyFreeSlot(playerid,1),0,x,y,z-1);
					}
					else
					{
						SendClientMessage(playerid,-1,"[FarmerJob]: Ai atins limita sau nu mai ai seminte!");
					}
				}
				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 532 && IsPlayerInDynamicArea(playerid,FJArea,1))
				{
					for(new i =0;i<MAX_PADDYS;i++)
					{
						if(FarmInfo[playerid][pPaddyUsed][i] == 1)
						{
							new Float:x,Float:y,Float:z;
							GetDynamicObjectPos(FarmInfo[playerid][pPaddyObject][i],x,y,z);
							if(IsPlayerInRangeOfPoint(playerid,4,x,y,z))
							{
								if(FarmInfo[playerid][pPaddyProgress][i] >= 100 && FarmInfo[playerid][pPaddyProgress][i] < 200)
								{
									CreatePaddyHarvest(playerid,CheckPaddyFreeSlot(playerid,2),x,y,z);
									DestroyPaddy(playerid,i);
									return 1;
								}
								else if(FarmInfo[playerid][pPaddyProgress][i] > 200)
								{
									SCM(playerid, -1, "[FarmerJob]: Aceasta planta s-a ofilit si nu mai poate fi recoltata.");
								}
								else
								{
									SendClientMessage(playerid,-1,"[FarmerJob]: Aceasta planta nu este gata de recoltare!");
								}
							}
						}
					}
				}
			}
			else
			{
				SCM(playerid, -1, "Nu esti fermier!");
			}
	    }
		//============= Farmer Job ==================//
    }
    if(RELEASED(KEY_FIRE) && !CopDuty{playerid} && !SwatDuty{playerid})
    {
        if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]) > 0)
        {
            if(IsPrimarySlotTaken(playerid)) PlayerInfo[playerid][pAmmo1] = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
        }
        else PlayerInfo[playerid][pPerm1] = 0;

        if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]) > 0)
        {
            if(IsSecondarySlotTaken(playerid)) PlayerInfo[playerid][pAmmo2] = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
        }
        else PlayerInfo[playerid][pPerm2] = 0;
    }
    if(PRESSED(KEY_SPRINT) && GetIntVar(playerid, "RegisterPart") >= 7 && GetIntVar(playerid, "MovingToTutorial") == 0)
    {
        UpdateIntVar(playerid, "RegisterPart", 1);
        ShowTutorialLocations(playerid);
    }

    if(PRESSED(KEY_HANDBRAKE) && GetIntVar(playerid, "BrowsingSkins") == 1)
    {
        if(SkinSlot[playerid] >= sizeof(StoreSkins)) return 1;
        SkinSlot[playerid]++;
        SetPlayerSkin(playerid, StoreSkins[SkinSlot[playerid]]);
        SetIntVar(playerid, "SkinBuying", StoreSkins[SkinSlot[playerid]]);
    }
    if(PRESSED(KEY_FIRE) && GetIntVar(playerid, "BrowsingSkins") == 1)
    {
        if(SkinSlot[playerid] < 1) return 1;
        SkinSlot[playerid]--;
        SetPlayerSkin(playerid, StoreSkins[SkinSlot[playerid]]);
        SetIntVar(playerid, "SkinBuying", StoreSkins[SkinSlot[playerid]]);
    }
    if(PRESSED(KEY_ANALOG_LEFT))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsModding{playerid})
        {
            if(GetIntVar(playerid, "BrowsingWheels") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == 0) return 1;
                UpdateIntVar(playerid, "CompSlot", -1);
                SetIntVar(playerid, "CompPrice", Wheels[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Wheels[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == 0) return 1;
                UpdateIntVar(playerid, "CompSlot", -1);
                SetIntVar(playerid, "CompPrice", Spoilers[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Spoilers[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingScoops") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == 0) return 1;
                UpdateIntVar(playerid, "CompSlot", -1);
                SetIntVar(playerid, "CompPrice", Scoops[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Scoops[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == 0) return 1;
                UpdateIntVar(playerid, "CompSlot", -1);
                SetIntVar(playerid, "CompPrice", Roofs[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Roofs[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == 0) return 1;
                UpdateIntVar(playerid, "CompSlot", -1);
                SetIntVar(playerid, "CompPrice", Sideskirts[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Sideskirts[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == 0) return 1;
                UpdateIntVar(playerid, "CompSlot", -1);
                SetIntVar(playerid, "CompPrice", Exhausts[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Exhausts[GetIntVar(playerid, "CompSlot")][compID]);
            }
            SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
            PlaySound(playerid, 1133);
            HandleComponentText(playerid, vehicle);
        }
        if(BuyingPaintJob{playerid})
        {
            if(GetIntVar(playerid, "BrowsingPaints") == 1)
            {
                if(GetIntVar(playerid, "OnPaint") == 0) return 1;
                UpdateIntVar(playerid, "OnPaint", -1);
                HandlePaintJobText(playerid, vehicle);
                ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), GetIntVar(playerid, "OnPaint"));
            }
        }
    }
    if(PRESSED(KEY_ANALOG_RIGHT))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsModding{playerid})
        {
            if(GetIntVar(playerid, "BrowsingWheels") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == sizeof(Wheels)-1) return 1;
                UpdateIntVar(playerid, "CompSlot", 1);
                SetIntVar(playerid, "CompPrice", Wheels[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Wheels[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == sizeof(Spoilers)-1) return 1;
                UpdateIntVar(playerid, "CompSlot", 1);
                SetIntVar(playerid, "CompPrice", Spoilers[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Spoilers[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingScoops") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == sizeof(Scoops)-1) return 1;
                UpdateIntVar(playerid, "CompSlot", 1);
                SetIntVar(playerid, "CompPrice", Scoops[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Scoops[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == sizeof(Roofs)-1) return 1;
                UpdateIntVar(playerid, "CompSlot", 1);
                SetIntVar(playerid, "CompPrice", Roofs[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Roofs[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == sizeof(Sideskirts)-1) return 1;
                UpdateIntVar(playerid, "CompSlot", 1);
                SetIntVar(playerid, "CompPrice", Sideskirts[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Sideskirts[GetIntVar(playerid, "CompSlot")][compID]);
            }
            else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
            {
                if(GetIntVar(playerid, "CompSlot") == sizeof(Exhausts)-1) return 1;
                UpdateIntVar(playerid, "CompSlot", 1);
                SetIntVar(playerid, "CompPrice", Exhausts[GetIntVar(playerid, "CompSlot")][compPrice]);
                SetIntVar(playerid, "CompID", Exhausts[GetIntVar(playerid, "CompSlot")][compID]);
            }
            SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
            PlaySound(playerid, 1133);
            HandleComponentText(playerid, vehicle);
        }
        if(BuyingPaintJob{playerid})
        {
            if(GetIntVar(playerid, "BrowsingPaints") == 1)
            {
                if(GetIntVar(playerid, "OnPaint") == 2) return 1;
                UpdateIntVar(playerid, "OnPaint", 1);
                HandlePaintJobText(playerid, vehicle);
                ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), GetIntVar(playerid, "OnPaint"));
            }
        }
    }
    if(PRESSED(KEY_YES))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsModding{playerid})
        {
            if(!ModFitsForCar(GetVehicleModel(vehicle), GetIntVar(playerid, "CompID"))) return SCM(playerid, COLOR_INFO, "You can't buy this one.");
            if(HasComponent(vehicle, GetIntVar(playerid, "CompID"))) return SCM(playerid, COLOR_INFO, "You already have this component.");
            if(GetCash(playerid) < GetIntVar(playerid, "CompPrice")) return NoCashMSG(playerid);
            if(GetIntVar(playerid, "BrowsingWheels") == 1)
            {
                format(str, sizeof(str), "Ai cumparat cu succes jenti %s pentru $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
                SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_WHEELS);
                RemoveVar(playerid, "BrowsingWheels");
            }
            else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
            {
                format(str, sizeof(str), "Ai cumparat cu succes un spoiler %s pentru $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
                SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_SPOILER);
                RemoveVar(playerid, "BrowsingSpoilers");
            }
            else if(GetIntVar(playerid, "BrowsingScoops") == 1)
            {
                format(str, sizeof(str), "Ai cumparat cu succes un scoop %s pentru $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
                SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_HOOD);
                RemoveVar(playerid, "BrowsingScoops");
            }
            else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
            {
                format(str, sizeof(str), "Ai cumparat cu succes un plafon %s pentru $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
                SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_ROOF);
                RemoveVar(playerid, "BrowsingRoofs");
            }
            else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
            {
                format(str, sizeof(str), "Ai cumparat cu succes un sideskirt %s pentru $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
                SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_SIDESKIRT);
                RemoveVar(playerid, "BrowsingSkirts");
            }
            else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
            {
                format(str, sizeof(str), "Ai cumparat cu succes un exhaust %s pentru $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
                SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_EXHAUST);
                RemoveVar(playerid, "BrowsingExhausts");
            }
            SCM(playerid, COLOR_INFO, str);
            GiveCash(playerid, -GetIntVar(playerid, "CompPrice"));
            PlaySound(playerid, 1133);
            RemoveVar(playerid, "CompPrice");
            RemoveVar(playerid, "CompType");
            RemoveVar(playerid, "CompName");
            RemoveVar(playerid, "CompID");
            RemoveVar(playerid, "CompSlot");
            IsModding{playerid} = false;
            BackToDealerShip(playerid, vehicle);
        }
        if(BuyingPaintJob{playerid})
        {
            if(GetIntVar(playerid, "BrowsingPaints") == 1)
            {
                if(HasPaintJob(vehicle, GetIntVar(playerid, "OnPaint"))) return SCM(playerid, COLOR_INFO, "You already have this paintjob.");
                if(GetCash(playerid) < 10000) return NoCashMSG(playerid);
                SetVehiclePaintJob(vehicle, GetIntVar(playerid, "OnPaint"));
                SCM(playerid, COLOR_INFO, "Ai cumparat un paintjob in valoare de $10,000");
                GiveCash(playerid, -10000);
                PlaySound(playerid, 1134);
                RemoveVar(playerid, "OnPaint");
                RemoveVar(playerid, "BrowsingPaints");
                BuyingPaintJob{playerid} = false;
                BackToDealerShip(playerid, vehicle);
            }
        }
        //=================== Farmer Job ===========================//
        if(IsPlayerInRangeOfPoint(playerid,2,FJPosGetPaddySack))
	    {
			if(job == FARMER)
			{
				if(!IsValidVehicle(FarmInfo[playerid][pVehicleHire]) ||!IsValidVehicle(FarmInfo[playerid][pTrailerVehicleHire])) return SendClientMessage(playerid,-1,"[FarmerJob]: Mai intai ia un Tractor si foloseste /startsow!");
				if(GetPVarInt(playerid,"HasGetPaddySack") == 1) return SendClientMessage(playerid,-1,"[FarmerJob]: Ai deja un sac.");
				if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "[FarmerJob]: Nu poti ridica saci cand te afli in masina!");
				if(FarmInfo[playerid][pPaddyInTrailer] != 0) return SendClientMessage(playerid,-1,"[FarmerJob]: Remorca ta deja e incarcata cu seminte!");
				ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.0, 0, 0, 0, 0,0); // nhatlenkieu1
				SetPVarInt(playerid,"HasGetPaddySack",1);
				SetTimerEx("CarrySack",1000,0,"i",playerid);
				SetPlayerAttachedObject(playerid, 9, 2060, 1, 0.170999, 0.363000, 0.000000, 0.000000, 93.700012, 0.000000, 0.713000, 0.650000, 1.000000, 0, 0);
			}
			else
			{
				SCM(playerid, -1, "Nu esti fermier!");
			}
		}
		// FARMER JOB
    }
    if(PRESSED(KEY_WALK))
    {
        if(IsValidVehicle(FarmInfo[playerid][pTrailerVehicleHire]) && GetPVarInt(playerid,"HasGetPaddySack") == 1)
		{
			new Float:x,Float:y,Float:z;
			GetVehiclePos(FarmInfo[playerid][pTrailerVehicleHire],x,y,z);
			if(job != FARMER) return SCM(playerid, -1, "Nu esti fermier!");
			if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
			{
			    if(FarmInfo[playerid][pPaddyInTrailer] == 0)
			    {
					ApplyAnimation(playerid, "CARRY", "PUTDWN105", 4.0, 0, 0, 0, 0,0); // datxuongkieu2
					FarmInfo[playerid][pPaddyInTrailer] = 10;
					RemovePlayerAttachedObject(playerid,9);
					SetPVarInt(playerid,"HasGetPaddySack",0);
					new string[128];
					format(string,sizeof(string),"Proprietar: %s\nSeminte :{4cff00}%d",GetName(playerid),FarmInfo[playerid][pPaddyInTrailer]);
					UpdateDynamic3DTextLabelText(FarmInfo[playerid][pTrailerText],-1,string);
			    }
			    else
			    {
					SendClientMessage(playerid,-1,"[FarmerJob]: Ai nevoie de mai multe seminte ca sa continui!");
			    }
			}
			else
			{
				SendClientMessage(playerid,-1,"[FarmerJob]: Esti prea departe de remorca!");
			}
		}
		//===================== Farmer Job =======================//    
	}
    if(PRESSED(KEY_NO))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsModding{playerid})
        {
            if(GetIntVar(playerid, "BrowsingWheels") == 1)
            {
                if(ComponentSlotTaken(vehicle, CARMODTYPE_WHEELS))
                    AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_WHEELS]);
                else
                    RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
                RemoveVar(playerid, "BrowsingWheels");
            }
            else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
            {
                if(ComponentSlotTaken(vehicle, CARMODTYPE_SPOILER))
                    AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_SPOILER]);
                else
                    RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
                RemoveVar(playerid, "BrowsingSpoilers");
            }
            else if(GetIntVar(playerid, "BrowsingScoops") == 1)
            {
                if(ComponentSlotTaken(vehicle, CARMODTYPE_HOOD))
                    AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_HOOD]);
                else
                    RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
                RemoveVar(playerid, "BrowsingScoops");
            }
            else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
            {
                if(ComponentSlotTaken(vehicle, CARMODTYPE_ROOF))
                    AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_ROOF]);
                else
                    RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
                RemoveVar(playerid, "BrowsingRoofs");
            }
            else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
            {
                if(ComponentSlotTaken(vehicle, CARMODTYPE_SIDESKIRT))
                    AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_SIDESKIRT]);
                else
                    RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
                RemoveVar(playerid, "BrowsingSkirts");
            }
            else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
            {
                if(ComponentSlotTaken(vehicle, CARMODTYPE_EXHAUST))
                    AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_EXHAUST]);
                else
                    RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
                RemoveVar(playerid, "BrowsingExhausts");
            }
            SCM(playerid, COLOR_INFO, "Ai anulat meniul de tuning.");
            PlaySound(playerid, 1133);
            RemoveVar(playerid, "CompPrice");
            RemoveVar(playerid, "CompType");
            RemoveVar(playerid, "CompName");
            RemoveVar(playerid, "CompID");
            RemoveVar(playerid, "CompSlot");
            IsModding{playerid} = false;
            BackToDealerShip(playerid, vehicle);
        }
        if(BuyingPaintJob{playerid})
        {
            if(GetIntVar(playerid, "BrowsingPaints") == 1)
            {
                if(VehicleInfo[vehicle][carPaintJob] != 3)
                {
                    ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);
                }
                else
                {
                    ChangeVehicleColor(vehicle, VehicleInfo[vehicle][carColor1], VehicleInfo[vehicle][carColor2]);
                    ChangeVehiclePaintjob(vehicle, 3);
                }
                SCM(playerid, COLOR_INFO, "Ai anulat meniul de tuning.");
                PlaySound(playerid, 1134);
                RemoveVar(playerid, "OnPaint");
                RemoveVar(playerid, "BrowsingPaints");
                BuyingPaintJob{playerid} = false;
                BackToDealerShip(playerid, vehicle);
            }
        }
        //======================== Farmer Job ===========================//
        if(GetPVarInt(playerid,"HasPickupPaddy") == 0)
	    {
			for(new i =0;i<MAX_PADDYS;i++)
	  		{
	    		if(FarmInfo[playerid][pPaddyHarvestUsed][i] == 1)
	   			{
			    	new Float:x,Float:y,Float:z;
					GetDynamicObjectPos(FarmInfo[playerid][pPaddyHarvestObject][i],x,y,z);
					if(IsPlayerInRangeOfPoint(playerid,3,x,y,z))
					{
						ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.0, 0, 0, 0, 0,0); // nhatlenkieu1
						SetPVarInt(playerid,"HasPickupPaddy",1);
						SetTimerEx("CarrySack",1000,0,"i",playerid);
						SetPlayerAttachedObject(playerid, 8, 2060, 1, 0.170999, 0.363000, 0.000000, 0.000000, 93.700012, 0.000000, 0.713000, 0.650000, 1.000000, 0, 0);
						DestroyPaddyHarvest(playerid,i);
						return 1;
					}
	 			}
	    	}
    	}
    	else
    	{
    	    new Float:x,Float:y,Float:z;
    	    GetPlayerPos(playerid,x,y,z);
    	    ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0,0); // datxuongkieu1
    	    RemovePlayerAttachedObject(playerid,8);
    	    CreatePaddyHarvest(playerid,CheckPaddyFreeSlot(playerid,2),x,y,z-0.8);
    	    SetPVarInt(playerid,"HasPickupPaddy",0);
    	    return 1;
    	}
		//========================================= Farmer Job =========================//
	}
    if(PRESSED(KEY_CTRL_BACK))
    {
        new Float:x,Float:y,Float:z;
		GetVehiclePos(FarmInfo[playerid][pVehicleHire],x,y,z);
		if(IsPlayerInRangeOfPoint(playerid,2,FJPosTransport))
		{
		    if(GetPVarInt(playerid,"HasPickupPaddy") == 1)
	    	{
	    	    SetPVarInt(playerid,"HasPickupPaddy",0);
	    	    ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0,0); // datxuongkieu2
	    	    RemovePlayerAttachedObject(playerid,8);
	    	    GiveCash(playerid, 15);
	    	    return 1;
	    	}
		}
		if(GetVehicleModel(FarmInfo[playerid][pVehicleHire]) == 478 && IsPlayerInRangeOfPoint(playerid,4,x,y,z))
		{
		    if(GetPVarInt(playerid,"HasPickupPaddy") == 1)
	    	{
	    	    if(FarmInfo[playerid][pPaddyHarvestInVehicle] < 10)
	    	    {
					SetPVarInt(playerid,"HasPickupPaddy",0);
					ApplyAnimation(playerid, "CARRY", "PUTDWN105", 4.0, 0, 0, 0, 0,0); // datxuongkieu2
					RemovePlayerAttachedObject(playerid,8);
					FarmInfo[playerid][pPaddyHarvestInVehicle]++;
					AddPaddyObjectToVehicle(playerid);
					format(msg, sizeof(msg), "Saci: %d/10", FarmInfo[playerid][pPaddyHarvestInVehicle]);
					InfoMSG(playerid, msg, 4);
	    	    }
	    	    else
	    	    {
					SendClientMessage(playerid,-1,"[FarmerJob]: Nu mai este loc in acest vehicul!");
	    	    }
	    	}
	    	else
	    	{
	    	    if(FarmInfo[playerid][pPaddyHarvestInVehicle] > 0)
	    	    {
					DestroyObject(FarmInfo[playerid][pPaddyHarvestInVehicleObject][FarmInfo[playerid][pPaddyHarvestInVehicle]-1]);
					FarmInfo[playerid][pPaddyHarvestInVehicle]--;
					format(msg, sizeof(msg), "Saci: %d/10", FarmInfo[playerid][pPaddyHarvestInVehicle]);
					InfoMSG(playerid, msg, 4);
					ApplyAnimation(playerid, "CARRY", "LIFTUP105", 4.0, 0, 0, 0, 0,0); // nhatlenkieu2
					SetPlayerAttachedObject(playerid, 8, 2060, 1, 0.170999, 0.363000, 0.000000, 0.000000, 93.700012, 0.000000, 0.713000, 0.650000, 1.000000, 0, 0);
					SetPVarInt(playerid,"HasPickupPaddy",1);
					SetTimerEx("CarrySack",1000,0,"i",playerid);
	    	    }
	    	    else
	    	    {
					SendClientMessage(playerid,-1,"[FarmerJob]: Nu sunt destui saci in acest vehicul.");
	    	    }
	    	}
		}
    }
//========================= Farmer Job ======================================//
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    return 1;
}

public OnPlayerUpdate(playerid)
{
    CheckPlayerRemoteJacking(playerid);
    //SEPPED LIMITER
    static s_iVehicle;
    if ( speedlimit[ playerid ] != 0.0 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
    {
        s_iVehicle = GetPlayerVehicleID( playerid );
        if ( s_iVehicle )
        {
            static
                Float:s_fX,
                Float:s_fY,
                Float:s_fZ,
                Float:s_fVX,
                Float:s_fVY,
                Float:s_fVZ
            ;
            GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
            GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
            if ( !IsPlayerInRangeOfPoint( playerid, speedlimit[ playerid ] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ ) )
            {
                static Float:s_fLength;
                s_fLength = floatsqroot( ( s_fVX * s_fVX ) + ( s_fVY * s_fVY ) + ( s_fVZ * s_fVZ ) );
                s_fVX = ( s_fVX / s_fLength ) * speedlimit[ playerid ];
                s_fVY = ( s_fVY / s_fLength ) * speedlimit[ playerid ];
                s_fVZ = ( s_fVZ / s_fLength ) * speedlimit[ playerid ];
                if ( s_iVehicle )
                    SetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
                else
                    SetPlayerVelocity( playerid, s_fVX, s_fVY, s_fVZ );
            }
        }
    }
    //END OF SPEED LIMITER
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(maskOn{playerid})
    {
        ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
    }
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    if(PlayerIsOn(playerid) && maskOn{playerid})
    {
        ShowPlayerNameTagForPlayer(playerid, playerid, false);
    }
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if(vLocked{vehicleid}) ToggleVehicleLockForPlayer(forplayerid, vehicleid, true);
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    new string[64], string2[1024], dtext[32];
    format(string, sizeof(string), "{FFFFFF}Informatii despre {FF0000}%s {FFFFFF} - (%s)", GetNameEx(clickedplayerid), GetFullDate());
    new donate = PlayerInfo[clickedplayerid][pDonateRank];
    if(donate == 0) format(dtext,11,"{FF0000}Nu");
    else if(donate == 1) format(dtext,11,"{cd7f32}Bronze");
    else if(donate == 2) format(dtext,11,"{C0C0C0}Silver");
    else if(donate == 3) format(dtext,11,"{FFD700}Gold");
    else if(donate == 4) format(dtext,11,"{4EE2EC}Diamond");

    format(msg, sizeof(msg), "{FFFFFF}Donator: %s\n{FFFFFF}Level: %d (%d ore jucate)", dtext, PlayerInfo[clickedplayerid][pLevel], PlayerInfo[clickedplayerid][pHours]);

    if(PlayerInfo[clickedplayerid][pFaction] > 0)
    {
        new fname[128];
        format(fname,128,"%s",GetShortFactionName(PlayerInfo[clickedplayerid][pFaction]));

        new rname[128];
        format(rname,128,"%s",GetRankName(clickedplayerid));

        format(string2, sizeof(string2), "\n\nFactiune: %s\nRank: %s", fname, rname);
        strcat(msg, string2);
    }

    if(PlayerInfo[playerid][pJob] > 0)
    {
        format(msg,128,"\n\nJob: %s",GetJobName(PlayerInfo[playerid][pJob]));
        strcat(msg, string2);
    }

    if(PlayerInfo[playerid][pSideJob] > 0)
    {
        format(msg,128,"\nJob secundar: %s",GetJobName(PlayerInfo[playerid][pSideJob]));
        strcat(msg, string2);
    }

    if(CheckAdmin(clickedplayerid, 1))
    {
        new admin = PlayerInfo[clickedplayerid][pAdmin];
        if(admin == 9999) admin = 2014;
        format(string2, sizeof(string2), "\n\nAdministrator: %d", admin);
        strcat(msg, string2);
    }

    if(PlayerInfo[clickedplayerid][pHelper] > 0) strcat(msg, "\nModerator: Da");

    if(clickedplayerid == playerid)
    {
        new timeleft = 60 - PlayerInfo[clickedplayerid][pPayDayTime];
        format(string2, sizeof(string2), "\n\n\n{FF0000}*Payday in %d minute.", timeleft);
        strcat(msg, string2);
    }
    
    
    ShowDialog(playerid, Show:<PlayerStats>, DIALOG_STYLE_MSGBOX, string, msg, "Inchide","");
    return 1;
}
/* =================== Publics =================== */
/*public OnPlayerAirbreak(playerid)
{
	format(msg, sizeof(msg), "[ID:%i]%s e posibil sa foloseasca Airbreak, verifica-l!", playerid, GetName(playerid));
	AMSG(COLOR_LIGHTRED, msg);
    return 1;
}*/

/*public OnQueryError(errorid, error[], callback[], query2[], connectionHandle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			printf("Lost connection to server, trying reconnect...");
			mysql_reconnect(connectionHandle);
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s", query2);
		}
		default: { printf("%s", query2); }
	}
	return 1;
}*/


forward SaveJobProgress(playerid);
public SaveJobProgress(playerid)
{
	new job = PlayerInfo[playerid][pJob];
	switch(job)
	{
		case GARBAGE:
		{
			format(query, sizeof(query), "UPDATE `users` SET `garbage` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pGarbage], GetName(playerid));
			mysql_function_query(dbHandle, query, false, "", "");
			#if defined debugOn
				print("savejobprogress chemat / garbage");
				printf(query);
			#endif
		}
	}
	return 1;
}

forward GameModeRehash();
public GameModeRehash()
{
    new string[128];
    format(string, sizeof(string), "Serverul se restarteaza! Va rugam asteptati!");
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            DisablePlayerCheckpoint(i);
            GameTextForPlayer(i, string, 6000, 5);
            SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
            SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
            SavePlayerStats(i);
        }
    }
    for(new i = 0; i <= GetVehiclePoolSize(); i++)
    {
        if(VehicleInfo[i][carOwned] == 1)
        {
            SaveVehicle(i);
        }
    }
    for(new i = 1; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hOwned] == 1)
        {
            UpdateHouseInfo(i);
        }
    }
    for(new i = 0; i < MAX_BIZ; i++)
    {
        if(BizInfo[i][bizOn] == 1)
        {
            UpdateBizInfo(i);
        }
    }
    SCMALL(COLOR_LIGHTRED, "Toate datele serverului au fost salvate!");
    SetTimer("GameModeRestartFunction", 6000, 0);
    return 1;
}

forward AntiCheatBan(playerid);
public AntiCheatBan(playerid)
{
	new cheat = cheatID[playerid];
	new gName[256], IP[100];
    FreezePlayer(playerid);
    gpci(playerid,playerserial,sizeof(playerserial));
    GetWeaponName(GetPlayerWeapon(playerid),gName,sizeof(gName));
    GetPlayerIp(playerid, IP, sizeof(IP));
	switch(cheat)
	{
		case 1: // Weaponhack ban
		{
			format(msg, sizeof(msg), "AdmCmd: %s a fost banat de sistem, Motiv: Weapon Hacks (s0beit), A spawnat %s.", GetName(playerid), gName);
			PlayerInfo[playerid][pBanned] = 1;
			BanWithMSG(playerid, msg);
			format(msg, sizeof(msg), "<Weapon Hacks-Spawned %s>", gName);
			format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial, admin, date) VALUES ('%s', '%s', '%s', '%s', 'Sistem', '%s')", GetName(playerid),msg,IP, playerserial, GetFullDate());
			mysql_function_query(dbHandle, query, false, "", "");
		}
		case 2: // Flyhack ban(swim)
		{
			format(msg, sizeof(msg), "AdmCmd: %s a fost banat de sistem, Motiv: Fly Hacks (s0beit)", GetName(playerid));
			PlayerInfo[playerid][pBanned] = 1;
			BanWithMSG(playerid, msg);
			format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial, admin, date) VALUES ('%s', '<Fly Hacks>', '%s', '%s', 'Sistem', '%s')", GetName(playerid),IP, playerserial, GetFullDate());
			mysql_function_query(dbHandle, query, false, "", "");
		}
		case 3: // Money hack ban
		{
			format(msg, sizeof(msg), "AdmCmd: %s a fost banat de la Sistem, Motiv: Money Hacks (s0beit)", GetName(playerid));
			PlayerInfo[playerid][pBanned] = 1;
			BanWithMSG(playerid, msg);
			format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial) VALUES ('%s', '%s', '%s', '%s')", GetName(playerid),"<$$ Money hacks $$>",IP, playerserial);
			mysql_function_query(dbHandle, query, false, "", "");
		}
		case 4: // jetpack hack ban
		{
			format(msg, sizeof(msg), "AdmCmd: %s a fost banat de SYSTEM. Motiv: A spawnat un JetPack.", GetName(playerid));
			PlayerInfo[playerid][pBanned] = 1;
			BanWithMSG(playerid, msg);
			format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial, admin, date) VALUES ('%s', 'A spawnat JetPack', '%s', '%s', 'SYSTEM', '%s')", GetName(playerid), GetPlayerIP(playerid), playerserial, GetFullDate());
			mysql_function_query(dbHandle, query, false, "", "");
		}
	}
	return 1;
}

/*
public WeaponHackBan(playerid)
{
    new gName[256], IP[100];
    FreezePlayer(playerid);
    gpci(playerid,playerserial,sizeof(playerserial));
    GetWeaponName(GetPlayerWeapon(playerid),gName,sizeof(gName));
    GetPlayerIp(playerid, IP, sizeof(IP));
    format(msg, sizeof(msg), "AdmCmd: %s a fost banat de sistem, Motiv: Weapon Hacks (s0beit), A spawnat %s.", GetName(playerid), gName);
    PlayerInfo[playerid][pBanned] = 1;
    BanWithMSG(playerid, msg);
    format(msg, sizeof(msg), "<Weapon Hacks-Spawned %s>", gName);
    format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial, admin, date) VALUES ('%s', '%s', '%s', '%s', 'Sistem', '%s')", GetName(playerid),msg,IP, playerserial, GetFullDate());
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}*/

forward WeaponHackKick(playerid);
public WeaponHackKick(playerid)
{
    new gName[256], IP[100];
    FreezePlayer(playerid);
    GetWeaponName(GetPlayerWeapon(playerid),gName,sizeof(gName));
    GetPlayerIp(playerid, IP, sizeof(IP));
    format(msg, sizeof(msg), "AdmCmd: %s a primit kick de sistem, Motiv: Weapon Hacks (s0beit), A spawnat %s.", GetName(playerid), gName);
    //PlayerInfo[playerid][pBanned] = 1;
    KickWithMSG(playerid, msg);
    format(msg, sizeof(msg), "<Weapon Hacks-Spawned %s>", gName);
    format(query, sizeof(query), "INSERT INTO `kicks` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", GetName(playerid),msg,IP);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

forward RemoteJackKick(playerid);
public RemoteJackKick(playerid)
{
    new IP[100];
    FreezePlayer(playerid);
    GetPlayerIp(playerid, IP, sizeof(IP));
    format(msg, sizeof(msg), "AdmCmd: %s a primit kick de sistem, Motiv: Remote Car-Jack (CLEO)", GetName(playerid));
    KickWithMSG(playerid, msg);
    format(msg, sizeof(msg), "Remote Car-Jack (CLEO)");
    format(query, sizeof(query), "INSERT INTO `kicks` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", GetName(playerid),msg,IP);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

public SetPlayerSpawn(playerid)
{
    StopPlayerSpec(playerid);
    SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1686.7380,-2242.9150,-2.6913, 1.0, -1, -1, -1, -1, -1, -1);
    SpawnPlayer(playerid);
    new house = PlayerInfo[playerid][pHouseKey];
    if(GetIntVar(playerid, "JustDoneRegister") == 1)
    {
        format(query, sizeof(query), "UPDATE `users` SET `justregister` = '0' WHERE `name` = '%s'", GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SetPlayerSpawn");
			printf(query);
		#endif
        ShowHudTextDraws(playerid, 1);
        StopAudioStreamForPlayer(playerid);
        StopPlayerSpec(playerid);
        SetIntVar(playerid, "gLogged", 1);
        RemoveVar(playerid, "JustDoneRegister");
        SetWorld(playerid, 0);
        ClearChatbox(playerid, 50);
        ClearChatbox(playerid, 100);
        ServerMSG(playerid, "Ai intrat pentru prima oara pe server.Foloseste /help pentru comenzi.");
        ServerMSG(playerid, "Poti folosi /helpme pentru a primi ajutor de la moderatori {00FF00}OnDuty{FFFFFF}.");
        PlayerInfo[playerid][pRegistered] = 1;
        PlayerInfo[playerid][pLevel] = 1;
        PlayerInfo[playerid][pMaskID] = (PlayerInfo[playerid][pDatabaseID] * 1000) + PlayerInfo[playerid][pDatabaseID];
        SetFightStyle(playerid, F_GRABKICK);
        ScoreUpdate(playerid);
        SetCash(playerid, 500);
        SetBankCash(playerid, 1000);
        SetNormalColor(playerid);
        SetInterior(playerid,0);
        PlayerInfo[playerid][pAdmin] = 0;
        PlayerInfo[playerid][pHelper] = 0;
        SetPlayerSkin(playerid, 299);
        PlayerInfo[playerid][pSkin] = 299;
        ShowPSkinMenu(playerid);
        SavePlayerStats(playerid);
        return 1;
    }
    if(PlayerInfo[playerid][pJailed] == 1) //AJAIL
    {
        SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 2576.7861,2712.2004,22.9507, 1.0, -1, -1, -1, -1, -1, -1);
        SetPlayerPos(playerid,  2576.7861,2712.2004,22.9507);
        PlayerInfo[playerid][pDied] = 0;
        RemoveVar(playerid, "JustDied");
        SetInterior(playerid,0);
        SetWorld(playerid, 0);
        ServerMSG(playerid, "Inca esti la admin jail.");
        return 1;
    }
    else if(PlayerInfo[playerid][pJailed] == 2) //LSPD PRISON
    {
        PutPlayerInCell(playerid);
        PlayerInfo[playerid][pDied] = 0;
        RemoveVar(playerid, "JustDied");
        SetInterior(playerid, 10);
        SetWorld(playerid, 0);
        SCM(playerid, COLOR_GRAD2, "Inapoi in jail.");
    }
    else if(PlayerInfo[playerid][pJailed] == 3) //SACF PRISON
    {
        FreezePlayer(playerid);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", playerid);
        SetInterior(playerid, 0);
        SetWorld(playerid, 0);
        PutPlayerInPrisonCell(playerid);
        PlayerInfo[playerid][pDied] = 0;
        RemoveVar(playerid, "JustDied");
    }
    else
    {
        if(PlayerInfo[playerid][pDied] == 1)
        {
            PutPlayer(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
            SetInterior(playerid, PlayerInfo[playerid][pInt]);
            SetWorld(playerid, PlayerInfo[playerid][pWorld]);
            SetIntVar(playerid, "LoggedInDead", 1);
            SetPlayerHealth(playerid, 1000.0);
            SetPlayerCameraPos(playerid,PlayerInfo[playerid][pPosX]+3,PlayerInfo[playerid][pPosY]+3,PlayerInfo[playerid][pPosZ]+3);
            SetPlayerCameraLookAt(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
            SetTimerEx("FreezePlayer", 100, 0, "i", playerid);
            SetTimerEx("DeadAnim", 1000, 0, "i", playerid);
            SCM(playerid, COLOR_YELLOW, "Ai fost ranit grav,poti astepta paramedicii sau sa folosesti '/acceptdeath' dupa 120 de secunde.");
            adeadtimer[playerid] = 1;
        }
        else if(PlayerInfo[playerid][pCrashed] == 1 && PlayerInfo[playerid][pFaction] == 0)
        {
            TogglePlayerControllable(playerid, false);
            PlayerInfo[playerid][pCrashed] = 0;
            PutPlayer(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
            SetInterior(playerid, PlayerInfo[playerid][pInt]);
            SetWorld(playerid, PlayerInfo[playerid][pWorld]);
            SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
        }
        else if(PlayerInfo[playerid][pSpawnType] == 0)
        {
            TogglePlayerControllable(playerid, false);
            PutPlayer(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
            SetInterior(playerid, PlayerInfo[playerid][pInt]);
            SetWorld(playerid, PlayerInfo[playerid][pWorld]);
            SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
        }
        else if(PlayerInfo[playerid][pSpawnType] == 1)
        {
            if(house != -1)
            {
                TogglePlayerControllable(playerid, false);
                PutPlayer(playerid, HouseInfo[house][hEntranceX], HouseInfo[house][hEntranceY],HouseInfo[house][hEntranceZ]);
                SetInterior(playerid,0);
                SetWorld(playerid,0);
                SetTimerEx("UnFreezePlayer", 5000, 0, "i", playerid);
            }
        }
        else if(PlayerInfo[playerid][pSpawnType] == 2)
        {
            if(PlayerInfo[playerid][pFaction] == 0)
            {
                SCM(playerid, COLOR_LIGHTRED, "Nu mai faci parte dintr-o factiune asa ca te-ai spawnat la gara.");
                PlayerInfo[playerid][pSpawnType] = 0;
                SetInterior(playerid,0);
                SetWorld(playerid, 0);
            }
            else
            {                
                PutPlayer(playerid,Factions[PlayerInfo[playerid][pFaction]][fX],Factions[PlayerInfo[playerid][pFaction]][fY],Factions[PlayerInfo[playerid][pFaction]][fZ]);
                SetInterior(playerid, Factions[PlayerInfo[playerid][pFaction]][fSpawnInt]);
                SetWorld(playerid,0);
                FreezePlayer(playerid);
                SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
            }
        }
        else if(PlayerInfo[playerid][pFaction] == 1)
        {
            new spawntype = PlayerInfo[playerid][pSpawnType];
            if(spawntype==21)
            {
                PutPlayer(playerid,Factions[PlayerInfo[playerid][pFaction]][fX],Factions[PlayerInfo[playerid][pFaction]][fY],Factions[PlayerInfo[playerid][pFaction]][fZ]);
                SetInterior(playerid, Factions[PlayerInfo[playerid][pFaction]][fSpawnInt]);
                SetWorld(playerid,0);
            }
            else if(spawntype==22)
            {
                PutPlayer(playerid,323.3177,306.8699,999.1484);
                SetInterior(playerid, 5);
                SetWorld(playerid,0);
            }
        }
    }
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    new weapon = weaponid;
    static /*Float:dmgleft, Float:armor, Float:health,*/ Float:X, Float:Y, Float:Z;
    GetPlayerPos(damagedid, X, Y, Z);
    if(weapon == WEAPON_SHOTGUN && rubberbullet[playerid] == 1)
    {
        ActionMessage(damagedid, 30.0, "a fost impuscat cu un glont de cauciuc si a cazut la pamant.");
        ApplyAnimation(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 1, 1, 1);
        ApplyAnimation(damagedid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 1, 1);
        GivePlayerHealth(damagedid, amount);
        GivePlayerHealth(damagedid, WeaponDMG[WEAPON_SHOTGUN][wDamage]);
        GivePlayerArmour(damagedid, PlayerInfo[damagedid][pArmour]);
        TogglePlayerControllable(damagedid, false);
        SetTimerEx("RubberShooted", 20000, false, "i", damagedid);
        // DEBUG
        //SCMEx(playerid, -1, "[RUBBER]Amount is: %.0f ", amount);
        //SCMEx(damagedid, -1, "[RUBBER]Amount is: %.0f ", amount);
        //SCMEx(playerid, -1,"[RUBBER]%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), GetWeaponNameEx(weapon), bodypart);
        //SCMEx(damagedid, -1,"[RUBBER]%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), GetWeaponNameEx(weapon), bodypart);
        // DEBUG
        return 1;
    }
    if(weapon == 23 && CopDuty{playerid} && IsPlayerInRangeOfPoint(playerid, 30.0, X, Y, Z))
    {
        if(!Tazed{damagedid})
        {
            FreezePlayer(playerid);
            ApplyAnimation(playerid,"COLT45","colt45_reload",4.1, 0, 1, 1, 0, 1, 1);
            UnFreezePlayer(playerid);
            ApplyAnimation(damagedid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 0, 1, 1);
            ActionMessage(damagedid, 20.0, "a fost intepat de pinii tazer-ului si a cazut la pamant.");
            Tazed{damagedid} = true;
            //GivePlayerHealth(damagedid, amount);
            GivePlayerHealth(damagedid, WeaponDMG[WEAPON_SILENCED][wDamage]);
            GivePlayerArmour(damagedid, PlayerInfo[damagedid][pArmour]);
            TogglePlayerControllable(damagedid, false);
            SetTimerEx("SetUnTazed", 20000, false, "i", damagedid);
            // DEBUG
            //SCMEx(playerid, -1, "[TAZE]Amount is: %.0f ", amount);
            //SCMEx(damagedid, -1, "[TAZE]Amount is: %.0f ", amount);
            //SCMEx(playerid, -1,"[TAZE]%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), GetWeaponNameEx(weapon), bodypart);
            //SCMEx(damagedid, -1,"[TAZE]%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), GetWeaponNameEx(weapon), bodypart);
            // DEBUG
        }
        else
        {
            SCM(playerid, COLOR_GREY, "Acest jucator este deja electrocutat.");
            //GivePlayerHealth(damagedid, amount);
            GivePlayerHealth(damagedid, WeaponDMG[WEAPON_SILENCED][wDamage]);
            GivePlayerArmour(damagedid, PlayerInfo[damagedid][pArmour]);
            // DEBUG
            //SCMEx(playerid, -1, "[TAZE]Amount is: %.0f ", amount);
            //SCMEx(damagedid, -1, "[TAZE]Amount is: %.0f ", amount);
            //SCMEx(playerid, -1,"[TAZE]%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), GetWeaponNameEx(weapon), bodypart);
            //SCMEx(damagedid, -1,"[TAZE]%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), GetWeaponNameEx(weapon), bodypart);
            // DEBUG
        }
        return 1;
    }
    if(GetWorld(playerid) == GetWorld(damagedid))
    {
        if(GetArmour(damagedid) == 0.0)
        {
            if(weapon == 0)
            {
            
                //GivePlayerHealth(damagedid, amount);
                GivePlayerHealth(damagedid, -1);
                // DEBUG
                //SCMEx(playerid, -1, "Amount is: %.0f ", amount);
                //SCMEx(damagedid, -1, "Amount is: %.0f ", amount);
                //SCMEx(playerid, -1,"%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), weaponid, bodypart);
                //SCMEx(damagedid, -1,"%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), weaponid, bodypart);
                // DEBUG
            }
            else
            {
                /*if(bodypart == 3)
                {
                    GetPlayerArmour(damagedid, armor);
                    if(armor > 0)
                    {
                        dmgleft = armor - WeaponDMG[weapon][wDamage];
                        GivePlayerArmour(damagedid, -WeaponDMG[weapon][wDamage]);                           
                        if(dmgleft < 0) GivePlayerHealth(damagedid, dmgleft);
                        SCM(playerid, -1, "Kevlar HIT!");
                    }
                }*/
                //GivePlayerHealth(damagedid, amount);
//              else GivePlayerHealth(damagedid, -WeaponDMG[weapon][wDamage]);
                // DEBUG
                //SCMEx(playerid, -1, "Amount is: %.0f ", amount);
                //SCMEx(damagedid, -1, "Amount is: %.0f ", amount);
                //SCMEx(playerid, -1,"%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), weaponid, bodypart);
                //SCMEx(damagedid, -1,"%s a primit %d damage de la %s , arma: %s, bodypart: %d", GetName(damagedid), WeaponDMG[weapon][wDamage], GetName(playerid), weaponid, bodypart);
                // DEBUG
            }
        }
    }
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
    if(PlayerIsWounded(playerid))
    {
        SetPlayerHealth(playerid, 1000.0);
    }
    return 1;
}

forward RubberShooted(playerid);
public RubberShooted(playerid)
{
    TogglePlayerControllable(playerid, true);
    SCM(playerid, COLOR_GRAY, "Ti-ai revenit dupa ce ai fost impuscat cu un glont de cauciuc!");
    return 1;
}

/*
public OnPlayerShootPlayer(Shooter,Target,Float:HealthLost,Float:ArmourLost)
{
    new weapon = GetWeaponHolding(Shooter);
    static Float:health, Float:X, Float:Y, Float:Z;
    #pragma unused health
    GetPlayerPos(Target, X, Y, Z);
    if(weapon == WEAPON_SHOTGUN && rubberbullet[Shooter] == 1)
    {
        ActionMessage(Target, 30.0, "a fost impuscat cu un glont de cauciuc si a cazut la pamant.");
        OnPlayAnim(Target, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
//      GivePlayerHealth(Target, HealthLost);
        GivePlayerHealth(Target, WeaponDMG[WEAPON_SHOTGUN][wDamage]);
        GivePlayerArmour(Target, ArmourLost);
        TogglePlayerControllable(Target, false);
        SetTimerEx("RubberShooted", 20000, false, "i", Target);
        return 1;
    }
    if(weapon == 23 && CopDuty{Shooter} && IsPlayerInRangeOfPoint(Shooter, 30.0, X, Y, Z))
    {
        if(!Tazed{Target})
        {
            OnPlayAnim(Target, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
            ActionMessage(Target, 20.0, "a fost intepat de pinii tazer-ului si a cazut la pamant.");
            Tazed{Target} = true;
            GivePlayerHealth(Target, HealthLost);
            GivePlayerArmour(Target, ArmourLost);
            TogglePlayerControllable(Target, false);
            SetTimerEx("SetUnTazed", 20000, false, "i", Target);
        }
        else
        {
            SCM(Shooter, COLOR_GREY, "Acest jucator este deja electrocutat.");
            GivePlayerHealth(Target, HealthLost);
            GivePlayerArmour(Target, ArmourLost);
        }
        return 1;
    }
    if(GetWorld(Shooter) == GetWorld(Target))
    {
        if(GetArmour(Target) == 0.0)
        {
            if(weapon == 0)
            {
                GivePlayerHealth(Target, HealthLost);
                GivePlayerHealth(Target, -1);
            }
            else
            {
                GivePlayerHealth(Target, HealthLost);
                GivePlayerHealth(Target, -WeaponDMG[weapon][wDamage]);
            }
        }
    }
    return 1;
}*/

public OnEditedObject(objectid)
{
    new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
    GetDynamicObjectPos(ObjectsInfo[objectid][oObject], x, y, z);
    GetDynamicObjectRot(ObjectsInfo[objectid][oObject], rx, ry, rz);
    ObjectsInfo[objectid][oPosX] = x;
    ObjectsInfo[objectid][oPosY] = y;
    ObjectsInfo[objectid][oPosZ] = z;
    ObjectsInfo[objectid][oPosRX] = rx;
    ObjectsInfo[objectid][oPosRY] = ry;
    ObjectsInfo[objectid][oPosRZ] = rz;
    return 1;
}

public OnEditedCamera(objectid)
{
    new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
    GetDynamicObjectPos(CCTVInfo[objectid][tvObject], x, y, z);
    GetDynamicObjectRot(CCTVInfo[objectid][tvObject], rx, ry, rz);
    CCTVInfo[objectid][tvPosX] = x;
    CCTVInfo[objectid][tvPosY] = y;
    CCTVInfo[objectid][tvPosZ] = z;
    CCTVInfo[objectid][tvPosRX] = rx;
    CCTVInfo[objectid][tvPosRY] = ry;
    CCTVInfo[objectid][tvPosRZ] = rz;
    return 1;
}

public OnEditedMoveDoor(objectid)
{
    new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
    GetDynamicObjectPos(Doors[objectid][doorObject], x, y, z);
    GetDynamicObjectRot(Doors[objectid][doorObject], rx, ry, rz);
    Doors[objectid][doorPosX] = x;
    Doors[objectid][doorPosY] = y;
    Doors[objectid][doorPosZ] = z;
    Doors[objectid][doorPosRX] = rx;
    Doors[objectid][doorPosRY] = ry;
    Doors[objectid][doorPosRZ] = rz;
    return 1;
}

public OnEditedGate(objectid)
{
    new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
    GetDynamicObjectPos(Gates[objectid][gateObject], x, y, z);
    GetDynamicObjectRot(Gates[objectid][gateObject], rx, ry, rz);
    Gates[objectid][gatePosX] = x;
    Gates[objectid][gatePosY] = y;
    Gates[objectid][gatePosZ] = z;
    Gates[objectid][gatePosRX] = rx;
    Gates[objectid][gatePosRY] = ry;
    Gates[objectid][gatePosRZ] = rz;
    return 1;
}

public OnEditedFoodStand(standid)
{
    new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
    GetDynamicObjectPos(FoodStand[standid][fObject], x, y, z);
    GetDynamicObjectRot(FoodStand[standid][fObject], rx, ry, rz);
    FoodStand[standid][fPosX] = x+1.5;
    FoodStand[standid][fPosY] = y;
    FoodStand[standid][fPosZ] = z;
    FoodStand[standid][fPosRX] = rx;
    FoodStand[standid][fPosRY] = ry;
    FoodStand[standid][fPosRZ] = rz;
    return 1;
}


public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    /*
    0 - EDIT_RESPONSE_CANCEL   // player cancelled (ESC)
    1 - EDIT_RESPONSE_FINAL    // player clicked on save
    2 - EDIT_RESPONSE_UPDATE   // player moved the object (edition did not stop at all)
    */
    new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
    GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingSprayTag") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            new id = GetIntVar(playerid, "SprayTag");
            SprayInfo[id][sX] = x;
            SprayInfo[id][sY] = y;
            SprayInfo[id][sZ] = z;
            SprayInfo[id][sRX] = rx;
            SprayInfo[id][sRY] = ry;
            SprayInfo[id][sRZ] = rz;
            RemoveVar(playerid, "EditingSprayTag");
            RemoveVar(playerid, "SprayTag");
            printf("Spraytag ID %d a fost editat. (FINAL)", id);
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            if(GetIntVar(playerid, "EditingSprayTag") == 1)
            {
                SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
                SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
                printf("Spraytag ID %d a fost editat (CANCEL).", GetIntVar(playerid, "SprayTag"));
                RemoveVar(playerid, "EditingSprayTag");                
                RemoveVar(playerid, "SprayTag");
            }
        }
    }
    //=============================================================================================================================

    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingFurniture") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            ServerMSG(playerid, "Ai anulat editarea pozitiei mobilei.");
            OnPlayerEditedFurniture(playerid, GetIntVar(playerid, "ChosenFurnitureSlot"), x, y, z, rx, ry, rz);
            RemoveVar(playerid, "EditingFurniture");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            if(GetIntVar(playerid, "EditingFurniture") == 1)
            {
                SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
                SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
                ServerMSG(playerid, "You've canceled editing the furniture position.");
                RemoveVar(playerid, "EditingFurniture");
            }
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "JustBoughtFurniture") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            ServerMSG(playerid, "Ai anulat editarea pozitiei mobilei.");
            OnPlayerEditedFurniture(playerid, GetIntVar(playerid, "ChosenFurnitureSlot"), x, y, z, rx, ry, rz);
            RemoveVar(playerid, "JustBoughtFurniture");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            new houseid = PlayerInfo[playerid][pHouseKey];
            format(msg, sizeof(msg), "Ai anulat cumpararea unui  %s si ai primit banii inapoi, ${FFFF00}%d{FFFFFF}.", FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fName], FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fMarketPrice]);
            ServerMSG(playerid, msg);
            GiveCash(playerid, FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fMarketPrice]);
            DestroyDynamicObject(FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fObject]);
            OnPlayerSellFurniture(houseid, GetIntVar(playerid, "ChosenFurnitureSlot"));
            RemoveVar(playerid, "JustBoughtFurniture");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingRB") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            RemoveVar(playerid, "EditingRB");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            EditDynamicObject(playerid, objectid);
            SCM(playerid, COLOR_WHITE, "Apasa SAVE in editor.");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "BoomBoxOn") == 1 && GetIntVar(playerid, "EditingBoomBox") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")))
            {
                RemoveVar(playerid, "BoomBoxX");
                RemoveVar(playerid, "BoomBoxY");
                RemoveVar(playerid, "BoomBoxZ");
                SetFloatVar(playerid, "BoomBoxX", x);
                SetFloatVar(playerid, "BoomBoxY", y);
                SetFloatVar(playerid, "BoomBoxZ", z);
                foreach(new i : Player)
                {
                    if(i != playerid && IsValidDynamicArea(GetIntVar(i, "BoomBoxArea")) && PlayerToPoint(70.0, playerid, GetFloatVar(i, "BoomBoxX"), GetFloatVar(i, "BoomBoxY"), GetFloatVar(i, "BoomBoxZ")))
                    {
                        SCM(playerid, COLOR_YELLOW, "Acest loc este luat de altcineva,Boomboxul tau a fost trimit la locatia veche.");
                        SetFloatVar(playerid, "BoomBoxX", oldX);
                        SetFloatVar(playerid, "BoomBoxY", oldY);
                        SetFloatVar(playerid, "BoomBoxZ", oldZ);
                        SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
                        SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
                        RemoveVar(playerid, "EditingBoomBox");
                        return 1;
                    }
                }
                DestroyDynamicArea(GetIntVar(playerid, "BoomBoxArea"));
                RemoveVar(playerid, "BoomBoxArea");
                SetIntVar(playerid, "BoomBoxArea", CreateDynamicSphere(x, y, z, 50.0, -1, -1, -1));
                SetDynamicObjectPos(objectid, x, y, z);
                SetDynamicObjectRot(objectid, rx, ry, rz);
                SetIntVar(playerid, "BoomBoxOn", 1);
                RemoveVar(playerid, "EditingBoomBox");
                ServerMSG(playerid, "Ai terminat de editat pozitia Boomboxu-ului.");
            }
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SetFloatVar(playerid, "BoomBoxX", oldX);
            SetFloatVar(playerid, "BoomBoxY", oldY);
            SetFloatVar(playerid, "BoomBoxZ", oldZ);
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            ServerMSG(playerid, "Ai anulat editarea pozitiei Boombox-ului.");
            RemoveVar(playerid, "EditingBoomBox");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingObject") == 1 && ObjectsInfo[GetIntVar(playerid, "ObjectEditing")][oObjectOn])
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SaveEditedObject(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            format(msg, sizeof(msg), "Ai terminat de editat un obiect dinamic: Position, %f, %f, %f.", x, y, z);
            ServerMSG(playerid, msg);
            RemoveVar(playerid, "EditingObject");
            RemoveVar(playerid, "ObjectEditing");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            ServerMSG(playerid, "Ai anulat editarea obiectului.");
            RemoveVar(playerid, "EditingObject");
            RemoveVar(playerid, "ObjectEditing");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingCCTV") == 1 && CCTVInfo[GetIntVar(playerid, "ObjectEditing")][tvObjectOn])
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SaveEditedCamera(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            format(msg, sizeof(msg), "Ai terminat de editat o Camera CCTV: Position, %f, %f, %f.", x, y, z);
            ServerMSG(playerid, msg);
            RemoveVar(playerid, "EditingCCTV");
            RemoveVar(playerid, "ObjectEditing");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            ServerMSG(playerid, "Ai anulat editarea camerei CCTV.");
            RemoveVar(playerid, "EditingCCTV");
            RemoveVar(playerid, "ObjectEditing");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingMoveDoor") == 1 && Doors[GetIntVar(playerid, "ObjectEditing")][doorObjectOn])
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SaveEditedMoveDoor(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            format(msg, sizeof(msg), "Ai terminat de editat o usa dinamica: Position, %f, %f, %f.", x, y, z);
            ServerMSG(playerid, msg);
            RemoveVar(playerid, "EditingMoveDoor");
            RemoveVar(playerid, "ObjectEditing");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            ServerMSG(playerid, "Ai anulat editarea usii dynamice.");
            RemoveVar(playerid, "EditingMoveDoor");
            RemoveVar(playerid, "ObjectEditing");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingGate") == 1 && Gates[GetIntVar(playerid, "ObjectEditing")][gateObjectOn])
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SaveEditedGate(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            format(msg, sizeof(msg), "Ai terminat editarea unei porti dinamice: Position, %f, %f, %f.", x, y, z);
            ServerMSG(playerid, msg);
            RemoveVar(playerid, "EditingGate");
            RemoveVar(playerid, "ObjectEditing");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            ServerMSG(playerid, "You've canceled editing the dynamic gate position.");
            RemoveVar(playerid, "EditingGate");
            RemoveVar(playerid, "ObjectEditing");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingFoodStand") == 1 && FoodStand[GetIntVar(playerid, "FoodStandEditing")][fStandOn])
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            DestroyDynamic3DTextLabel(Text3D:FoodStand[GetIntVar(playerid, "FoodStandEditing")][fLabel]);
            DestroyDynamicPickup(FoodStand[GetIntVar(playerid, "FoodStandEditing")][fPickUp]);
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            if(rz < -50.0) //Done
            {
                y += (1.2 * floatcos((-rz+90), degrees));
            }
            if(rz < -150.0) //Done
            {
                x += (1.2 * floatsin((-rz+90), degrees));
            }
            if(rz >= 0.0) //Done
            {
                x += (1.2 * floatsin((-rz+90), degrees));
            }
            if(rz > 50.0) //Done
            {
                y += (1.2 * floatcos((-rz+90), degrees));
            }
            format(msg, sizeof(msg), "{AFAFAF}/buyfood");
            FoodStand[GetIntVar(playerid, "FoodStandEditing")][fLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            FoodStand[GetIntVar(playerid, "FoodStandEditing")][fPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
            format(msg, sizeof(msg), "Finished editing a dynamic object: Position, %f, %f, %f.", x, y, z);
            ServerMSG(playerid, msg);
            format(msg, sizeof(msg), "Finished editing a dynamic object: Position, %f, %f, %f.", rx, ry, rz);
            ServerMSG(playerid, msg);
            SaveEditedFoodStand(GetIntVar(playerid, "FoodStandEditing"), x, y, z, rx, ry, rz);
            RemoveVar(playerid, "EditingFoodStand");
            RemoveVar(playerid, "FoodStandEditing");
        }
    }
    //=============================================================================================================================
    if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingParkMeter") == 1 && ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkOn])
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            DestroyDynamic3DTextLabel(Text3D:ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkLabel]);
            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);
            format(msg, sizeof(msg), "{3333FF}%d minute", ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkMinutes]);
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            format(msg, sizeof(msg), "Finished editing a dynamic park meter: Position, %f, %f, %f.", x, y, z);
            ServerMSG(playerid, msg);
            DestroyDynamicArea(ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkArea]);
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkArea] = CreateDynamicSphere(x, y, z, 1.5, -1, -1, -1);
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosX] = x;
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosY] = y;
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosZ] = z;
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosRX] = rx;
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosRY] = ry;
            ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosRZ] = rz;
            SaveEditedParkMeter(GetIntVar(playerid, "ParkMeterEditing"), x, y, z, rx, ry, rz);
            RemoveVar(playerid, "EditingParkMeter");
            RemoveVar(playerid, "ParkMeterEditing");
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            ServerMSG(playerid, "You've canceled editing the park meter position.");
            RemoveVar(playerid, "EditingParkMeter");
            RemoveVar(playerid, "ParkMeterEditing");
        }
    }
    //=============================================================================================================================
    if(GetPVarInt(playerid, "EditSiren") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
            new Float:finalx, Float:finaly;
            new Float:px, Float:py, Float:pz, Float:roz;
            new car = GetPlayerVehicleID(playerid);
            GetVehiclePos(car, px, py, pz);
            GetVehicleZAngle(car, roz);
            ofx = x-px;
            ofy = y-py;
            ofz = z-pz;
            ofaz = rz-roz;
            finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
            finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
            AttachDynamicObjectToVehicle(Siren[car], car, finalx, finaly, ofz, rx, ry, ofaz);
            return 1;
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DestroyDynamicObject(objectid);
            Siren[GetPlayerVehicleID(playerid)] = 0;
            SetPVarInt(playerid, "EditSiren", 0);
            SCM(playerid, COLOR_GREEN, "Ai detasat sirena.");
            if(debugmode[playerid] == 1) SCM(playerid, COLOR_GREEN, "EDIT_RESPONSE_CANCEL Executed!");
        }
    }
    //=============================================================================================================================
    if(GetPVarInt(playerid, "EditSiren2") == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
            new Float:finalx, Float:finaly;
            new Float:px, Float:py, Float:pz, Float:roz;
            new car = GetPlayerVehicleID(playerid);
            GetVehiclePos(car, px, py, pz);
            GetVehicleZAngle(car, roz);
            ofx = x-px;
            ofy = y-py;
            ofz = z-pz;
            ofaz = rz-roz;
            finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
            finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
            AttachDynamicObjectToVehicle(Siren2[car], car, finalx, finaly, ofz, rx, ry, ofaz);
            return 1;
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DestroyDynamicObject(objectid);
            Siren2[GetPlayerVehicleID(playerid)] = 0;
            SetPVarInt(playerid, "EditSiren2", 0);
            SCM(playerid, COLOR_GREEN, "Ai detasat sirena.");
            if(debugmode[playerid] == 1) SCM(playerid, COLOR_GREEN, "EDIT_RESPONSE_CANCEL Executed!");
        }
    }
    //=============================================================================================================================
    if(GetPVarInt(playerid, "EditFF") == 1 && IsValidDynamicObject(objectid))
    {
        if(response == EDIT_RESPONSE_FINAL) { SetPVarInt(playerid, "PlacedFF", 1); }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            SCM(playerid, COLOR_GREY, "Ai anulat pozitionarea meniului.");
            DestroyDynamicObject(meal_object[playerid]);
        }
    }
    //=============================================================================================================================
    return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        for(new i = 0; i < sizeof(HouseInfo); i++)
        {
            if(checkpointid == HouseInfo[i][hCheckPoint])
            {
                if(HouseInfo[i][hOwned] == 1 && PlayerInfo[playerid][pHouseKey] != i)
                {
                    if(HouseInfo[i][hRentable] == 1)
                    {
                        format(msg, sizeof(msg), "[Adresa %d] Esti pe veranda lui %s.",i,HouseInfo[i][hOwner]);
                        SCM(playerid, COLOR_GREEN2, msg);
                        format(msg, sizeof(msg), "[Adresa %d] Aceasta casa poate fi inchiriata, pret $%d.",i,HouseInfo[i][hRentprice]);
                        SCM(playerid, COLOR_GREEN2, msg);
                        SCM(playerid, COLOR_WHITE, "Comenzi: /enter, /rentroom, /knock, /ds(hout)");
                    }
                    else
                    {
                        format(msg, sizeof(msg), "[Adresa %d] Esti pe veranda lui %s.",i,HouseInfo[i][hOwner]);
                        SCM(playerid, COLOR_GREEN2, msg);
                        SCM(playerid, COLOR_WHITE, "Comenzi: /enter, /knock, /ds(hout)");
                    }
                }
                if(HouseInfo[i][hOwned] == 1 && PlayerInfo[playerid][pHouseKey] == i)
                {
                    format(msg, sizeof(msg), "[Adresa %d] Stai pe veranda ta.",i);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
                if(HouseInfo[i][hOwned] == 0)
                {
                    format(msg, sizeof(msg), "[Adresa %d] Aceasta casa este de vanzare.",i);
                    SCM(playerid, COLOR_GREEN2, msg);
                    format(msg, sizeof(msg), "[Adresa %d] Pretul acestei case este: $%d.",i,HouseInfo[i][hPrice]);
                    SCM(playerid, COLOR_GREEN2, msg);
                    SCM(playerid, COLOR_WHITE, "Comenzi: /buyhouse");
                }
            }
        }
    }
    return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    for(new i = 0; i < sizeof(DealersInfo); i++)
    {
        if(pickupid == DealersInfo[i][dealerPickUp])
        {
            format(msg, sizeof(msg), "~b~%s~r~ Dealership ~n~~y~/v buy ~r~pentru a vedea o lista cu masini.", DealersInfo[i][dealerInfo]);
            GameTextForPlayer(playerid, msg, 4000, 3);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(LabelsInfo); i++)
    {
        if(pickupid == LabelsInfo[i][tPickUp] && LabelsInfo[i][tGameText] == 1)
        {
            format(msg, sizeof(msg), "%s", LabelsInfo[i][tInfo]);
            GameTextForPlayer(playerid, msg, 4000, 4);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(JobsInfo); i++)
    {
        if(pickupid == JobsInfo[i][jobPickUp] && JobsInfo[i][jobOn] == 1)
        {
            if(JobsInfo[i][jobSideJob] == 1)
            {
                format(msg, sizeof(msg), "~w~%s side job~n~~y~/takejob ~w~pentru a te alatura.~n~~r~NU ITI VA INLOCUI JOBUL PRINCIPAL", JobsInfo[i][jobName]);
            }
            else
            {
                format(msg, sizeof(msg), "~w~%s job~n~~y~/takejob ~w~pentru a te alatura.", JobsInfo[i][jobName]);
            }
            GameTextForPlayer(playerid, msg, 4000, 4);
            return 1;
        }
    }
    for(new i = 0; i < MAX_FACTION_DOORS; i++)
    {
        if(pickupid == FactionDoors[i][dPickUp])
        {
            format(msg, sizeof(msg), "%s", FactionDoors[i][dInfo]);
            GameTextForPlayer(playerid, msg, 4000, 4);
            return 1;
        }
    }
    for(new i = 0; i < MAX_BIZ; i++)
    {
        if(pickupid == BizInfo[i][bizPickUp] && BizInfo[i][bizOn])
        {
            if(BizInfo[i][bizOwned] == 0)
            {
                format(msg, sizeof(msg), "~g~DE VANZARE~n~~w~%s~n~~w~Tip: %s~n~~w~Pret: ~g~$%d ~w~Level: ~g~%d~n~/enter", BizInfo[i][bizName], BizInfo[i][bizInfo], BizInfo[i][bizPrice], BizInfo[i][bizLevelbuy]);
                GameTextForPlayer(playerid, msg, 3000, 3);
                return 1;
            }
            else
            {
                format(msg, sizeof(msg), "~w~%s ~n~~w~Tip: %s~n~~w~Proprietar: %s~n~~w~Cost intrare: ~g~$%d~n~~p~/enter~w~ pentru a intra", BizInfo[i][bizName] ,BizInfo[i][bizInfo], BizInfo[i][bizOwner], BizInfo[i][bizEntrance]);
                GameTextForPlayer(playerid, msg, 3000, 3);
            }
        }
    }
    for(new i = 0; i < MAX_DOORS; i++)
    {
        if(pickupid == DoorInfo[i][dPickUp] && DoorInfo[i][dDoorOn])
        {
            format(msg, sizeof(msg), "%s", DoorInfo[i][dInfo]);
            GameTextForPlayer(playerid, msg, 5000, 4);
        }
    }
    if(pickupid == Factions[PlayerInfo[playerid][pFaction]][fPickUp])
    {
        format(msg, sizeof(msg), "~b~%s", Factions[PlayerInfo[playerid][pFaction]][fName]);
        InfoMSG2(playerid, msg, "~y~/uniform ~w~pentru a imbraca o uniforma.", 5000);
    }
    return 1;
}

public SetNormalColor(playerid)
{
    if(PlayerIsOn(playerid))
    {
        SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
    }
}

public ClearChatbox(playerid, lines)
{
    if (PlayerIsOn(playerid))
    {
        for(new i=0; i<lines; i++)
        {
            SCM(playerid, COLOR_GREY, " ");
        }
    }
    return 1;
}

//================================================ Security Mode ==============================================//

forward OnSerialCheck(playerid);
public OnSerialCheck(playerid)
{
    new rows, fields, playerSerial[100];
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {   
        cache_get_row(0, 4, playerSerial, dbHandle, 128);
        foreach(new i : Player)
        {
            if(CheckAdmin(i, ADMIN_LEVEL_1))
            {
                if(SecurityMode[i] == true)
                {
                    SCMEx(i, COLOR_OOC, "SECURITY: [%d]%s e posibil sa faca ban-evading, verifica-l!", playerid, GetName(playerid));
                    SCMEx(i, COLOR_OOC, "SECURITY: Serial: %s", playerSerial);
                }
            }
        }
    }
}

forward LoadPlayerSerials();
public LoadPlayerSerials()
{
    new szMessage[64], rows, fields, playerSerial[100];
    /*cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        for(new i = 0; i < rows; i++) 
        {
            cache_get_row(i, 4, playerSerial, dbHandle, 128);
            return playerSerial;
        }
    }*/
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {   
		#if defined debugOn
			printf("%d randuri gasite.", rows);
        #endif
        for(new CurrentRow = 0; CurrentRow < rows; CurrentRow++) 
        {
            cache_get_field_content(CurrentRow, "playerSerial", playerSerial, dbHandle);
            
            foreach(new i : Player)
            {
                if(strcmp(PlayerInfo[i][pSerial], playerSerial) == 1)
                {
                    format(szMessage, sizeof(szMessage), "[ID:%i]%s are serialul banat, verifica-l!", i, GetName(i));
                    AMSG(COLOR_LIGHTRED, szMessage);
                }
            }
        }
    }
}
//============================================== Security Mode ============================================//
function OnUserBanCheck(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        if(cache_get_row_int(0, 0) == 1)
        {
            KickEx2(playerid, "Contul tau este banat pe acest server.");
        }
    }
}

public OnBanCheck(playerid)
{
    new str[100], rows, fields, reason[50], playerIP[50], playerSerial[100];
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        cache_get_row(0, 2, reason, dbHandle, 128);
        cache_get_row(0, 3, playerIP, dbHandle, 128);
        cache_get_row(0, 4, playerSerial, dbHandle, 128);
        format(str, sizeof(str), "Motiv Ban: %s, Aplica pe forum pentru unban", reason);
        SCM(playerid, -1, str);
        format(str, sizeof(str), "IP Banat: %s.", playerIP);
        SCM(playerid, -1, str);
        KickEx2(playerid, "Esti banat pe acest server.");
    }
}

public OnPlayerAttemptLogin(playerid)
{
    new str[400], rows, fields, reason[100], playerIP[50], playerSerial[256];
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        cache_get_row(0, 2, reason, dbHandle, 128);
        cache_get_row(0, 3, playerIP, dbHandle, 128);
        cache_get_row(0, 4, playerSerial, dbHandle, 128);
        format(str, sizeof(str), "Motiv Ban: %s, Aplica pe forum pentru unban", reason);
        SCM(playerid, -1, str);
        format(str, sizeof(str), "IP Banat: %s.", playerIP);
        SCM(playerid, -1, str);
        KickEx2(playerid, "Esti banat pe acest server.");
    }
    else
    {
        SetPlayerToLogin2(playerid);
    }
}

public OnPlayerAttemptLogin2(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        format(loginMsg, sizeof(loginMsg), ""EMBED_WHITE"Bine ai revenit, "EMBED_GRAY"%s\n"EMBED_WHITE"\nAi 60 de secunde sa te loghezi\n\nIntrodu Parola", GetName(playerid));
        ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Logare"EMBED_WHITE"", loginMsg, "Logare", "Iesire");
        LoginTimer{playerid} = SetTimerEx("CheckPlayerLogged", 60000, 0, "i", playerid);
    }
    else
    {
        ShowDialog(playerid, Show:<ConfirmWord>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirmare Cuvant Secret"EMBED_WHITE"", ""EMBED_WHITE"Acest IP nu este recunoscut\npentru acest cont, te rog introdu cuvantul secret.", "Trimite", "Iesire");
    }
}

forward LoginZZ(playerid);
public LoginZZ(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        if(cache_get_row_int(0, 0) == 1)
        {
            SetPVarInt(playerid, "JustRegister", 1);
        }
    }
    SetPlayerToLogin(playerid);
    return 1;
}

public OnAccountCheck(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields, dbHandle);
    if(rows)
    {
        ServerMSG(playerid, "Te rog introdu parola cu care te-ai inregistrat.");
        format(query, sizeof(query), "SELECT `justregister` FROM `users` WHERE `name` = '%s'", GetName(playerid));
        mysql_function_query(dbHandle, query, true, "LoginZZ", "i", playerid);
		#if defined debugOn
			print("OnAccountCheck 1");
			printf(query);
		#endif
        new IP[256];
        GetPlayerIp(playerid, IP, sizeof(IP));
        gpci(playerid,playerserial,sizeof(playerserial));
        format(query, sizeof(query), "UPDATE `users` SET `playerSerial` = '%s' WHERE `name` = '%s'", playerserial, GetName(playerid));
		#if defined debugOn
			print("OnAccountCheck 2");
			printf(query);
		#endif
        mysql_function_query(dbHandle, query, false, "", "");
//      SetPlayerToLogin(playerid);
    }
    else
    {
        SCM(playerid, COLOR_GREY, "Trebuie sa te inregistrezi pe site! (www.evolution-rp.ro/register)");
        SetTimerEx("KickPlayer",500,0,"d",playerid);
        //Send registration dialog
/*      ServerMSG(playerid, "Pentru a te inregistra, introdu o parola cu care te vei loga.");
        SetIntVar(playerid, "RegisterPart", 1);
        format(msg, sizeof(msg), ""EMBED_WHITE"Bine ai venit, "EMBED_GRAY"%s\n"EMBED_WHITE"\n\nIntrodu parola", GetName(playerid));
        ShowDialog(playerid, Show:<Register>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Inregistrare"EMBED_WHITE"", msg, "Inregistrare", "Iesi");*/
        //Send registration dialog
    }
    return 1;
}

public OnPlayerCreateAccount(playerid)
{
    PlayerInfo[playerid][pDatabaseID] = cache_insert_id(dbHandle);
    SetIntVar(playerid, "RegisterPart", 2);
    ShowDialog(playerid, Show:<Secret>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", ""EMBED_WHITE"Pentru a te inregistra este nevoie sa introduci un cuvant secret.\n      "EMBED_LIGHTBLUE"Scrie asta pe computer", "Continua", "Iesire");
    return 1;
}

public ContinueRegisterSex(playerid)
{
    SetIntVar(playerid, "RegisterPart", 3);
    ShowDialog(playerid, Show:<Sex>, DIALOG_STYLE_MSGBOX, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", "Care este sexul tau?", "Masculin", "Feminin");
    return 1;
}

public DeletePlayerAccount(account[])
{
    format(query, sizeof(query), "DELETE FROM `users` WHERE `name` = '%s'", account);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

public OnCheckVehicles(playerid)
{
    new rows, fields, total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            VehicleStatus[playerid][total+1][carID] = cache_get_row_int(total, 0);
            VehicleStatus[playerid][total+1][carModel] = cache_get_row_int(total, 1);
            cache_get_row(total, 8, VehicleStatus[playerid][total+1][carPlate], dbHandle, 128);
            VehicleStatus[playerid][total+1][carAlarm] = cache_get_row_int(total, 12);
            VehicleStatus[playerid][total+1][carLock] = cache_get_row_int(total, 13);
            VehicleStatus[playerid][total+1][carImmob] = cache_get_row_int(total, 14);
            VehicleStatus[playerid][total+1][carInsurances] = cache_get_row_int(total, 15);
            VehicleStatus[playerid][total+1][carDestroyed] = cache_get_row_int(total, 16);
            VehicleStatus[playerid][total+1][carGps] = cache_get_row_int(total, 17);
            VehicleStatus[playerid][total+1][carOn] = 1;
            total++;
        }
    }
    return 1;
}

public LoginPlayer(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows)
    {
        if(GetPVarInt(playerid, "JustRegister") == 1)
        {
            ShowDialog(playerid, Show:<Sex>, DIALOG_STYLE_MSGBOX, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", "Care este sexul tau?", "Masculin", "Feminin");
        }
        else
        {
            new IP[256];
            GetPlayerIp(playerid, IP, sizeof(IP));
            gpci(playerid,playerserial,sizeof(playerserial));
            format(query, sizeof(query), "UPDATE `users` SET `playerSerial` = '%s' WHERE `name` = '%s'", playerserial, GetName(playerid));
            mysql_function_query(dbHandle, query, false, "", "");
			#if defined debugOn
				print("LoginPlayer 1");
				printf(query);
			#endif
            format(query, sizeof(query), "UPDATE `users` SET `isOnline` = '1' WHERE `name` = '%s'", GetName(playerid));
            mysql_function_query(dbHandle, query, false, "", "");
			#if defined debugOn
				print("LoginPlayer 2");
				printf(query);
			#endif
            KillTimer(LoginTimer{playerid});
            format(msg, sizeof(msg), "Esti logat sub numele de %s.", GetNameEx(playerid));
            ServerMSG(playerid, msg);
            OnAccountLoad(playerid);
            ShowHudTextDraws(playerid, 1);
            RemoveVar(playerid, "LogTries");
            SetIntVar(playerid, "gLogged", 1);
            ScoreUpdate(playerid);
            StopPlayerSpec(playerid);
            SetNormalColor(playerid);
            if(PlayerInfo[playerid][pCrashed] == 1 && PlayerInfo[playerid][pJailed] == 0 && PlayerInfo[playerid][pFaction] == 0)
            {
                GameTextForPlayer(playerid, "~p~Crashed~n~~w~te-ai intors la ultima pozitie", 5000, 1);
            }
            else
            {
                format(msg, sizeof(msg), "~w~Bine ai venit ~n~~y~   %s", GetName(playerid));
                GameTextForPlayer(playerid, msg, 5000, 1);
            }
            if(CountPlayerTickets(playerid) > 0)
            {
                SCMEx(playerid, COLOR_LIGHTRED, "* Ai %d amenzi adresate , foloseste /fine pentru a verifica.", CountPlayerTickets(playerid));
            }
            SetPlayerSpawn(playerid);
            SetPlayerWeapons(playerid);
            SetCash(playerid, PlayerInfo[playerid][pCash]);
            ShowRadioTextDraw(playerid);
            CheckOwnedVehicles(playerid);
            AddPlayerNotes(playerid);
            SetTimerEx("UpdateHaircut", 2000, false, "i", playerid);
        }
    }
    else
    {
        if(GetIntVar(playerid, "LogTries") < 3)
        {
            UpdateIntVar(playerid, "LogTries", 1);
        }
        else
        {
            KickEx2(playerid, "Ai introdus parola gresit timp de 3 ori.");
            return 1;
        }
        format(msg, sizeof(msg), ""EMBED_WHITE"Bine ai venit, "EMBED_GRAY"%s\n"EMBED_WHITE"\nAi 60 de secunde sa te loghezi\n\nIntrodu parola (%d/3)", GetName(playerid), GetIntVar(playerid, "LogTries"));
        ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Logare"EMBED_WHITE"", msg, "Logare", "Iesire");
    }
    return 1;
}

public CheckSecretWord(playerid)
{
    new rows, fields, IP[100];
    cache_get_data(rows, fields);
    if(rows)
    {
        GetPlayerIp(playerid, IP, sizeof(IP));
        format(query, sizeof(query), "UPDATE `users` SET `playerIP` = '%s' WHERE `name` = '%s'", IP, GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("CheckSecretWord");
			printf(query);
		#endif
        SCM(playerid, COLOR_YELLOWG, "Ai confirmat codul secret, te rog logheaza-te!");
        format(msg, sizeof(msg), ""EMBED_WHITE"Bine ai venit, "EMBED_GRAY"%s\n"EMBED_WHITE"\nAi 60 de secunde sa te loghezi\n\nIntrodu parola", GetName(playerid));
        ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Logare"EMBED_WHITE"", msg, "Logare", "Iesire");
        LoginTimer{playerid} = SetTimerEx("CheckPlayerLogged", 60000, 0, "i", playerid);
    }
    else
    {
        ShowDialog(playerid, Show:<ConfirmWord>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirmare Cuvant Secret"EMBED_WHITE"", ""EMBED_WHITE"Acest IP nu este recunoscut\npentru acest cont, te rog introdu cuvantul secret.\n"EMBED_RED"Combinatie Gresita!", "Confirma", "Iesire");
    }
    return 1;
}

public OnPlayerChangePass(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows)
    {
        format(query, sizeof(query), "UPDATE `users` SET `password` = '%s' WHERE `name` = '%s'", GetStringVar(playerid, "NewPassword"), GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
        format(msg, sizeof(msg), "Parola a fost schimbata: %s.", GetStringVar(playerid, "NewPassword"));
        ServerMSG(playerid, msg);
        SCM(playerid, -1, "Asigura-te ca ai facut un screenshot!");
        RemoveVar(playerid, "NewPassword");
    }
    else
    {
        ShowDialog(playerid, Show:<ChangePass>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirmare Cuvant Secret"EMBED_WHITE"", "("EMBED_RED"Combinatie gresita!"EMBED_WHITE")\n\nTe rog introdu cuvantul secret cu care te-ai inregistrat", "Modifica", "Iesire");
    }
    return 1;
}

public OnPlayerChangeSecret(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows)
    {
        format(query, sizeof(query), "UPDATE `users` SET `secret` = '%s' WHERE `name` = '%s'", GetStringVar(playerid, "NewSecret"), GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
        format(msg, sizeof(msg), "Cuvantul secret a fost schimbat: %s.", GetStringVar(playerid, "NewSecret"));
        ServerMSG(playerid, msg);
        SCM(playerid, -1, "Asigura-te ca ai facut un screenshot!");
        RemoveVar(playerid, "NewSecret");
    }
    else
    {
        ShowDialog(playerid, Show:<ChangeSecret>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirmare Cuvant Secret"EMBED_WHITE"", "("EMBED_RED"Combinatie gresita!"EMBED_WHITE")\n\nTe rog introdu cuvantul secret cu care te-ai inregistrat!", "Modifica", "Iesire");
    }
    return 1;
}

public OnDoorRemove(doorid)
{
    DoorInfo[doorid][dEnterX] = 0.0000;
    DoorInfo[doorid][dEnterY] = 0.0000;
    DoorInfo[doorid][dEnterZ] = 0.0000;
    DoorInfo[doorid][dExitX] = 0.0000;
    DoorInfo[doorid][dExitY] = 0.0000;
    DoorInfo[doorid][dExitZ] = 0.0000;
    DoorInfo[doorid][dEnterInterior] = 0;
    DoorInfo[doorid][dExitInterior] = 0;
    DoorInfo[doorid][dVirtualWorld] = 0;
    DoorInfo[doorid][dDoorOn] = 0;
    DoorInfo[doorid][dExitLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnFactionDoorRemove(doorid)
{
    FactionDoors[doorid][dEnterX] = 0.0000;
    FactionDoors[doorid][dEnterY] = 0.0000;
    FactionDoors[doorid][dEnterZ] = 0.0000;
    FactionDoors[doorid][dExitX] = 0.0000;
    FactionDoors[doorid][dExitY] = 0.0000;
    FactionDoors[doorid][dExitZ] = 0.0000;
    FactionDoors[doorid][dEnterInterior] = 0;
    FactionDoors[doorid][dExitInterior] = 0;
    FactionDoors[doorid][dVirtualWorld] = 0;
    FactionDoors[doorid][dDoorOn] = 0;
    return 1;
}

public OnJobRemove(jobid)
{
    JobsInfo[jobid][jobX] = 0.0000;
    JobsInfo[jobid][jobY] = 0.0000;
    JobsInfo[jobid][jobZ] = 0.0000;
    JobsInfo[jobid][jobOn] = 0;
    return 1;
}

public OnATMRemove(atmid)
{
    ATMInfo[atmid][atmPosX] = 0.0000;
    ATMInfo[atmid][atmPosY] = 0.0000;
    ATMInfo[atmid][atmPosZ] = 0.0000;
    ATMInfo[atmid][atmAtmOn] = 0;
    ATMInfo[atmid][atmInterior] = 0;
    ATMInfo[atmid][atmLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnHouseRemove(houseid)
{
    HouseInfo[houseid][hEntranceX] = 0.0000;
    HouseInfo[houseid][hEntranceY] = 0.0000;
    HouseInfo[houseid][hEntranceZ] = 0.0000;
    HouseInfo[houseid][hExitX] = 0.0000;
    HouseInfo[houseid][hExitY] = 0.0000;
    HouseInfo[houseid][hExitZ] = 0.0000;
    HouseInfo[houseid][hCheckPosX] = 0.0000;
    HouseInfo[houseid][hCheckPosY] = 0.0000;
    HouseInfo[houseid][hCheckPosZ] = 0.0000;
    HouseInfo[houseid][hLevelbuy] = 0;
    HouseInfo[houseid][hPrice] = 0;
    HouseInfo[houseid][hOwned] = 0;
    HouseInfo[houseid][hLocked] = 0;
    HouseInfo[houseid][hRentprice] = 0;
    HouseInfo[houseid][hRentable] = 0;
    HouseInfo[houseid][hInterior] = 0;
    HouseInfo[houseid][hWorld] = 0;
    HouseInfo[houseid][hCash] = 0;
    HouseInfo[houseid][hRadio] = 0;
    format(HouseInfo[houseid][hOwner], 256, "Stat");
    HouseInfo[houseid][hHouseOn] = 0;
    HouseInfo[houseid][hLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnBizRemove(bizid)
{
    BizInfo[bizid][bizPosX] = 0.0000;
    BizInfo[bizid][bizPosY] = 0.0000;
    BizInfo[bizid][bizPosZ] = 0.0000;
    BizInfo[bizid][bizExitX] = 0.0000;
    BizInfo[bizid][bizExitY] = 0.0000;
    BizInfo[bizid][bizExitZ] = 0.0000;
    BizInfo[bizid][bizLevelbuy] = 0;
    BizInfo[bizid][bizPrice] = 0;
    BizInfo[bizid][bizInterior] = 0;
    BizInfo[bizid][bizWorld] = 0;
    BizInfo[bizid][bizCash] = 0;
    BizInfo[bizid][bizOwned] = 0;
    BizInfo[bizid][bizType] = 0;
    BizInfo[bizid][bizEntrance] = 0;
    BizInfo[bizid][bizRadioOn] = 0;
    BizInfo[bizid][bizRadio] = 0;
    BizInfo[bizid][bizLocked] = 1;
    format(BizInfo[bizid][bizOwner], 64, "Stat");
    format(BizInfo[bizid][bizName], 64, "Afacere");
    format(BizInfo[bizid][bizInfo], 64, "Afacere");
    format(BizInfo[bizid][bizEnterMSG], 64, "");
    BizInfo[bizid][bizOn] = 0;
    return 1;
}

public OnFoodStandRemove(standid)
{
    FoodStand[standid][fPosX] = 0.0;
    FoodStand[standid][fPosY] = 0.0;
    FoodStand[standid][fPosZ] = 0.0;
    FoodStand[standid][fPosRX] = 0.0;
    FoodStand[standid][fPosRY] = 0.0;
    FoodStand[standid][fPosRZ] = 0.0;
    FoodStand[standid][fStandOn] = 0;
    FoodStand[standid][fLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnParkMeterRemove(parkid)
{
    DestroyDynamicArea(ParkMeters[parkid][parkArea]);
    ParkMeters[parkid][parkPosX] = 0.0;
    ParkMeters[parkid][parkPosY] = 0.0;
    ParkMeters[parkid][parkPosZ] = 0.0;
    ParkMeters[parkid][parkPosRX] = 0.0;
    ParkMeters[parkid][parkPosRY] = 0.0;
    ParkMeters[parkid][parkPosRZ] = 0.0;
    ParkMeters[parkid][parkOn] = 0;
    ParkMeters[parkid][parkLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnAdminSellHouse(houseid)
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pHouseKey] == houseid)
        {
            ServerMSG(i, "Casa inchiriata de tine a fost vanduta, asa ca nu mai esti chirias.");
            PlayerInfo[i][pHouseKey] = -1;
        }
    }
    HouseInfo[houseid][hOwned] = 0;
    HouseInfo[houseid][hLocked] = 1;
    HouseInfo[houseid][hRentprice] = 0;
    HouseInfo[houseid][hRentable] = 0;
    HouseInfo[houseid][hCash] = 0;
    HouseInfo[houseid][hRadio] = 0;
    HouseInfo[houseid][hCheckPosX] = 0.0000;
    HouseInfo[houseid][hCheckPosY] = 0.0000;
    HouseInfo[houseid][hCheckPosZ] = 0.0000;
    format(HouseInfo[houseid][hOwner], 256, "Stat");
    HouseInfo[houseid][hHouseOn] = 1;
    UpdateHouseText(houseid);
    return 1;
}

public OnHouseMoved(houseid, Float:x, Float:y, Float:z)
{
    HouseInfo[houseid][hEntranceX] = x;
    HouseInfo[houseid][hEntranceY] = y;
    HouseInfo[houseid][hEntranceZ] = z;
    return 1;
}

public OnHouseExitMoved(houseid, interior, world, Float:x, Float:y, Float:z)
{
    HouseInfo[houseid][hExitX] = x;
    HouseInfo[houseid][hExitY] = y;
    HouseInfo[houseid][hExitZ] = z;
    HouseInfo[houseid][hInterior] = interior;
    HouseInfo[houseid][hWorld] = world;
    return 1;
}

public OnStationRemove(stationid)
{
    GasStation[stationid][gPosX] = 0.0000;
    GasStation[stationid][gPosY] = 0.0000;
    GasStation[stationid][gPosZ] = 0.0000;
    GasStation[stationid][gStationOn] = 0;
    GasStation[stationid][gLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnTeleportRemove(teleid)
{
    HouseInteriors[teleid][aPosX] = 0.0000;
    HouseInteriors[teleid][aPosY] = 0.0000;
    HouseInteriors[teleid][aPosZ] = 0.0000;
    HouseInteriors[teleid][aTeleOn] = 0;
    return 1;
}

public OnVehicleRemove(vehid)
{
    CityVehicles[vehid][vModel] = 0;
    CityVehicles[vehid][vPosX] = 0.0;
    CityVehicles[vehid][vPosY] = 0.0;
    CityVehicles[vehid][vPosZ] = 0.0;
    CityVehicles[vehid][vPosA] = 0.0;
    CityVehicles[vehid][vColor1] = -1;
    CityVehicles[vehid][vColor2] = -1;
    CityVehicles[vehid][vType] = 0;
    format(CityVehicles[vehid][vInfo], 256, "00000");
    format(CityVehicles[vehid][vPlate], 256, "00000");
    CityVehicles[vehid][vCarOn] = 0;
    CityVehicles[vehid][vFaction] = 0;
    DestoryCar(CityVehicles[vehid][vVehicle]);
    return 1;
}

public OnObjectRemove(objectid)
{
    DestroyDynamicObject(ObjectsInfo[objectid][oObject]);
    ObjectsInfo[objectid][oPosX] = 0.0000;
    ObjectsInfo[objectid][oPosY] = 0.0000;
    ObjectsInfo[objectid][oPosZ] = 0.0000;
    ObjectsInfo[objectid][oPosRX] = 0.0000;
    ObjectsInfo[objectid][oPosRY] = 0.0000;
    ObjectsInfo[objectid][oPosRZ] = 0.0000;
    ObjectsInfo[objectid][oObjectOn] = 0;
    return 1;
}

public OnCameraRemove(objectid)
{
    DestroyDynamicObject(CCTVInfo[objectid][tvObject]);
    CCTVInfo[objectid][tvPosX] = 0.0000;
    CCTVInfo[objectid][tvPosY] = 0.0000;
    CCTVInfo[objectid][tvPosZ] = 0.0000;
    CCTVInfo[objectid][tvPosRX] = 0.0000;
    CCTVInfo[objectid][tvPosRY] = 0.0000;
    CCTVInfo[objectid][tvPosRZ] = 0.0000;
    CCTVInfo[objectid][tvObjectOn] = 0;
    return 1;
}

public OnMoveDoorRemove(objectid)
{
    DestroyDynamicObject(Doors[objectid][doorObject]);
    Doors[objectid][doorPosX] = 0.0;
    Doors[objectid][doorPosY] = 0.0;
    Doors[objectid][doorPosZ] = 0.0;
    Doors[objectid][doorPosRX] = 0.0;
    Doors[objectid][doorPosRY] = 0.0;
    Doors[objectid][doorPosRZ] = 0.0;
    Doors[objectid][doorObjectOn] = 0;
    Doors[objectid][doorInterior] = 0;
    Doors[objectid][doorFaction] = 0;
    Doors[objectid][doorOpened] = 0;
    Doors[objectid][doorVirtualWorld] = 0;
    return 1;
}

public OnGateRemove(objectid)
{
    DestroyDynamicObject(Gates[objectid][gateObject]);
    Gates[objectid][gatePosX] = 0.0;
    Gates[objectid][gatePosY] = 0.0;
    Gates[objectid][gatePosZ] = 0.0;
    Gates[objectid][gatePosRX] = 0.0;
    Gates[objectid][gatePosRY] = 0.0;
    Gates[objectid][gatePosRZ] = 0.0;
    Gates[objectid][gateOpenSpeed] = 0.0;
    Gates[objectid][gateMoveX] = 0.0;
    Gates[objectid][gateMoveY] = 0.0;
    Gates[objectid][gateMoveZ] = 0.0;
    Gates[objectid][gateMoveRX] = 0.0;
    Gates[objectid][gateMoveRY] = 0.0;
    Gates[objectid][gateMoveRZ] = 0.0;
    Gates[objectid][gateObjectOn] = 0;
    Gates[objectid][gateInterior] = 0;
    Gates[objectid][gateFaction] = 0;
    Gates[objectid][gateOpened] = 0;
    Gates[objectid][gateVirtualWorld] = 0;
    return 1;
}

public OnInfoRemove(infoid)
{
    if(IsValidDynamicCP(CPTInfo[infoid][cCheckPoint]) && IsValidDynamic3DTextLabel(Text3D:CPTInfo[infoid][cLabel])/* && IsValidDynamicPickup(CPTInfo[infoid][cPickUp])*/)
    {
        DestroyDynamicCP(CPTInfo[infoid][cCheckPoint]);
        DestroyDynamic3DTextLabel(Text3D:CPTInfo[infoid][cLabel]);
//      DestroyDynamicPickup(CPTInfo[infoid][cPickUp]);
    }
    CPTInfo[infoid][cPosX] = 0.0000;
    CPTInfo[infoid][cPosY] = 0.0000;
    CPTInfo[infoid][cPosZ] = 0.0000;
    CPTInfo[infoid][cInfoOn] = 0;
    CPTInfo[infoid][cLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

public OnDealerShipRemove(dealerid)
{
    if(IsValidDynamicPickup(DealersInfo[dealerid][dealerPickUp]))
    {
        DestroyDynamicPickup(DealersInfo[dealerid][dealerPickUp]);
    }
    DealersInfo[dealerid][dealerPosX] = 0.0000;
    DealersInfo[dealerid][dealerPosY] = 0.0000;
    DealersInfo[dealerid][dealerPosZ] = 0.0000;
    DealersInfo[dealerid][dealerOn] = 0;
    return 1;
}

public OnBankRemove(bankid)
{
    BankInfo[bankid][bPosX] = 0.0000;
    BankInfo[bankid][bPosY] = 0.0000;
    BankInfo[bankid][bPosZ] = 0.0000;
    BankInfo[bankid][bInterior] = 0;
    BankInfo[bankid][bBankOn] = 0;
    return 1;
}

public OnLabelRemove(labelid)
{
    LabelsInfo[labelid][tLabel] = Text3D:INVALID_3DTEXT_ID;
    LabelsInfo[labelid][tLabelX] = 0.0000;
    LabelsInfo[labelid][tLabelY] = 0.0000;
    LabelsInfo[labelid][tLabelZ] = 0.0000;
    LabelsInfo[labelid][tColor] = 0;
    LabelsInfo[labelid][tLabelOn] = 0;
    return 1;
}

public OnLabelRenamed(labelid, info[])
{
    UpdateDynamic3DTextLabelText(Text3D:LabelsInfo[labelid][tLabel], LabelsInfo[labelid][tColor], info);
    format(LabelsInfo[labelid][tInfo], 256, "%s", info);
    return 1;
}

public OnBankRenamed(bankid, info[])
{
    format(BankInfo[bankid][bInfo], 256, "%s", info);
    return 1;
}

public GlobalSaving()
{
    //-------------------------------------------------
    foreach(new i : Player)
    {
        SavePlayerStats(i);
    }
    //-------------------------------------------------
    for(new i = 0; i < MAX_PARK_METERS; i++)
    {
        if(ParkMeters[i][parkOn])
        {
            SaveParkMeter(i);
        }
    }
    //-------------------------------------------------
    for(new i = 1; i <= GetVehiclePoolSize(); i++)
    {
        if(VehicleInfo[i][carOwned] == 1)
        {
            SaveVehicle(i);
        }
    }
    //-------------------------------------------------
    for(new i = 1; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hHouseOn] == 1 && HouseInfo[i][hOwned] == 1)
        {
            UpdateHouseInfo(i);
        }
    }
    //-------------------------------------------------
    for(new i = 0; i < MAX_BIZ; i++)
    {
        if(BizInfo[i][bizOn] == 1)
        {
            UpdateBizInfo(i);
        }
    }
    //-------------------------------------------------
    for(new i = 0; i < MAX_FACTIONS; i++)
    {
        if(Factions[i][fON] == 1)
        {
            SaveFaction(i);
        }
    }
    //-------------------------------------------------
    SavePlants();
	SaveBins();
    return 1;
}

public SavePlayerStats(playerid)
{
    new vehicles[64], contacts[256], drugs[256], tickets[256], channels[256], authed[64];
    if(playerid != INVALID_PLAYER_ID && PlayerIsOn(playerid) && PlayerLogged(playerid))
    {
        SavePlayerPos(playerid);
        FormatPlayerTickets(playerid, tickets);
        FormatPlayerDrugs(playerid, drugs);
        FormatPlayerVehicles(playerid, vehicles);
        FormatPlayerContacts(playerid, contacts);
        FormatPlayerChannels(playerid, channels);
        FormatPlayerAuthed(playerid, authed);
        format(query, sizeof(query), "UPDATE `users` SET `registered` = %d, `cash` = %d, `bank` = %d, `skin` = %d, `sex` = %d, `age` = %d, `origin` = '%s', `level` = %d, `exp` = %d, `hours` = %d, `admin` = %d, `helper` = %d, `int` = %d, `world` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pRegistered],
        PlayerInfo[playerid][pCash],
        PlayerInfo[playerid][pBank],
        PlayerInfo[playerid][pSkin],
        PlayerInfo[playerid][pSex],
        PlayerInfo[playerid][pAge],
        PlayerInfo[playerid][pOrigin],
        PlayerInfo[playerid][pLevel],
        PlayerInfo[playerid][pExp],
        PlayerInfo[playerid][pHours],
        PlayerInfo[playerid][pAdmin],
        PlayerInfo[playerid][pHelper],
        PlayerInfo[playerid][pInt],
        PlayerInfo[playerid][pWorld],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 1");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `jailed` = %d, `jailtime` = %d, `banned` = %d, `warns` = %d, `donate` = %d, `carlic` = %d, `weplic` = %d, `flylic` = %d, `posx` = %f, `posy` = %f, `posz` = %f, `posa` = %f WHERE `name` = '%s'",
        PlayerInfo[playerid][pJailed],
        PlayerInfo[playerid][pJailTime],
        PlayerInfo[playerid][pBanned],
        PlayerInfo[playerid][pWarns],
        PlayerInfo[playerid][pDonateRank],
        PlayerInfo[playerid][pCarLic],
        PlayerInfo[playerid][pWepLic],
        PlayerInfo[playerid][pFlyLic],
        PlayerInfo[playerid][pPosX],
        PlayerInfo[playerid][pPosY],
        PlayerInfo[playerid][pPosZ],
        PlayerInfo[playerid][pPosA],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 2");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `died` = %d, `fightstyle` = %d, `pen` = %d, `attributes` = '%s', `paycheck` = %d, `paycheckmoney` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pDied],
        PlayerInfo[playerid][pFightStyle],
        PlayerInfo[playerid][pPen],
        PlayerInfo[playerid][pAttributes],
        PlayerInfo[playerid][pPayCheckMade],
        PlayerInfo[playerid][pPayCheckMoney],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 3");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `paydaytime` = %d, `spawnhealth` = %.1f, `cellphone` = %d, `number` = %d, `savings` = %d, `housekey` = %d, `melee` = %d, `wep1`= %d, `wep2` = %d, `ammo1` = %d, `ammo2`= %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pPayDayTime],
        PlayerInfo[playerid][pSHealth],
        PlayerInfo[playerid][pCellPhone],
        PlayerInfo[playerid][pNumber],
        PlayerInfo[playerid][pSavings],
        PlayerInfo[playerid][pHouseKey],
        PlayerInfo[playerid][pMeleeWep],
        GetPrimaryWeapon(playerid),
        GetSecondaryWeapon(playerid),
        GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]),
        GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]),
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 4");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `radio` = %d, `crashed` = %d, `mask` = %d, `bmx` = %d, `carkey` = %d, `vehicles` = %d, `weaponmats` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pRadio] ,
        PlayerInfo[playerid][pCrashed],
        PlayerInfo[playerid][pMask],
        PlayerInfo[playerid][pBMX],
		PlayerInfo[playerid][pCarKey],
        PlayerInfo[playerid][pVehicles],
        PlayerInfo[playerid][pWepMats],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 5");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `playervehs` = '%s', `vehslot` = %d, `sparekey` = %d, `lighter` = %d, `cigars` = %d, `bizkey` = %d, `workon` = %d, `taxilic` = %d WHERE `name` = '%s'",
        vehicles,
        PlayerInfo[playerid][pVehSlot],
        PlayerInfo[playerid][pSpareKey],
        PlayerInfo[playerid][pLighter],
        PlayerInfo[playerid][pCigars],
        PlayerInfo[playerid][pBizKey],
        PlayerInfo[playerid][pWorkOn],
        PlayerInfo[playerid][pTaxiLic],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 6");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `walk` = %d, `armour` = %.1f, `hasarmour` = %d, `faction` = %d, `rank` = %d, `badgenumber` = %d, `drivewarns` = %d, `jailtime2` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pWalk],
        GetArmour(playerid),
        PlayerInfo[playerid][pHasArmour],
        PlayerInfo[playerid][pFaction],
        PlayerInfo[playerid][pRank],
        PlayerInfo[playerid][pBadgeNumber],
        PlayerInfo[playerid][pDriveWarns],
        PlayerInfo[playerid][pJailTime2],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 7");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `arrested` = %d, `chat` = %d, `swat` = %d, `tickets` = '%s', `job` = %d, `jobrank` = %d, `career` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pArrested],
        PlayerInfo[playerid][pTalk],
        PlayerInfo[playerid][pSwat],
        tickets,
        PlayerInfo[playerid][pJob],
        PlayerInfo[playerid][pJobRank],
        PlayerInfo[playerid][pCareer],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 8");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `sidejob` = %d, `spawntype` = %d, `prisoned` = %d, `drugs` = '%s' WHERE `name` = '%s'",
        PlayerInfo[playerid][pSideJob],
        PlayerInfo[playerid][pSpawnType],
        PlayerInfo[playerid][pPrisoned],
        drugs,
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 9");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `seeds` = %d, `soda` = %d, `powder` = %d, `alcohol` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pSeeds],
        PlayerInfo[playerid][pSoda],
        PlayerInfo[playerid][pPowder],
        PlayerInfo[playerid][pAlcohol],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 10");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `contacts` = '%s', `channels` = '%s', `authed` = '%s', `slot` = %d, `fname` = %d, `forumname` = '%s', `card` = %d, `pincard` = %d WHERE `name` = '%s'",
        contacts,
        channels,
        authed,
        PlayerInfo[playerid][pSlot],
        PlayerInfo[playerid][pFName],
        PlayerInfo[playerid][pForumName],
        PlayerInfo[playerid][pCard],
        PlayerInfo[playerid][pPinCard],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 11");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `namechanges` = %d, `phonechanges` = %d, `sexchanges` = %d, `ckchanges` = %d, `bikelic` = %d, `biglic` = %d, `fishingrod` = %d, `haircut` = %d, `wanted` = '%s', `maskid` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pNameChg],
        PlayerInfo[playerid][pPhoneChg],
        PlayerInfo[playerid][pSexChg],
        PlayerInfo[playerid][pCKChg],
        PlayerInfo[playerid][pBikeLic],
        PlayerInfo[playerid][pBigLic],
        PlayerInfo[playerid][pFishingRod],
        PlayerInfo[playerid][pHairCut],
        PlayerInfo[playerid][pWanted],
        PlayerInfo[playerid][pMaskID],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 12");
			printf(query);
		#endif
        //=========================================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `garbage` = %d WHERE `name` = '%s'",
        PlayerInfo[playerid][pGarbage],
        GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("SavePlayerStats - 13");
			printf(query);
		#endif
        //=========================================================================================================
        SavePlayerToys(playerid);
        SavePlayerNotes(playerid);
    }
    return 1;
}

public OnAccountLoad(playerid)
{
    new tickets[256], drugs[256], vehicles[64], contacts[256], channels[64], authed[24];
    PlayerInfo[playerid][pDatabaseID] = cache_get_row_int(0, 0);
    PlayerInfo[playerid][pRegistered] = cache_get_row_int(0, 4);
    PlayerInfo[playerid][pCash] = cache_get_row_int(0, 5);
    PlayerInfo[playerid][pBank] = cache_get_row_int(0, 6);
    PlayerInfo[playerid][pSkin] = cache_get_row_int(0, 7);
    PlayerInfo[playerid][pSex] = cache_get_row_int(0, 8);
    PlayerInfo[playerid][pAge] = cache_get_row_int(0, 9);
    cache_get_row(0, 10, PlayerInfo[playerid][pOrigin], dbHandle, 128);
    PlayerInfo[playerid][pLevel] = cache_get_row_int(0, 11);
    PlayerInfo[playerid][pExp] = cache_get_row_int(0, 12);
    PlayerInfo[playerid][pHours] = cache_get_row_int(0, 13);
    PlayerInfo[playerid][pAdmin] = cache_get_row_int(0, 14);
    PlayerInfo[playerid][pHelper] = cache_get_row_int(0, 15);
    PlayerInfo[playerid][pInt] = cache_get_row_int(0, 16);
    PlayerInfo[playerid][pWorld] = cache_get_row_int(0, 17);
    PlayerInfo[playerid][pJailed] = cache_get_row_int(0, 18);
    PlayerInfo[playerid][pJailTime] = cache_get_row_int(0, 19);
    PlayerInfo[playerid][pBanned] = cache_get_row_int(0, 20);
    PlayerInfo[playerid][pWarns] = cache_get_row_int(0, 21);
    PlayerInfo[playerid][pDonateRank] = cache_get_row_int(0, 22);
    PlayerInfo[playerid][pCarLic] = cache_get_row_int(0, 23);
    PlayerInfo[playerid][pWepLic] = cache_get_row_int(0, 24);
    PlayerInfo[playerid][pFlyLic] = cache_get_row_int(0, 25);
    PlayerInfo[playerid][pPosX] = cache_get_row_float(0, 26);
    PlayerInfo[playerid][pPosY] = cache_get_row_float(0, 27);
    PlayerInfo[playerid][pPosZ] = cache_get_row_float(0, 28);
    PlayerInfo[playerid][pPosA] = cache_get_row_float(0, 29);
    PlayerInfo[playerid][pDied] = cache_get_row_int(0, 30);
    PlayerInfo[playerid][pFightStyle] = cache_get_row_int(0, 31);
    PlayerInfo[playerid][pPen] = cache_get_row_int(0, 32);
    cache_get_row(0, 33, PlayerInfo[playerid][pAttributes], dbHandle, 128);
    PlayerInfo[playerid][pPayCheckMade] = cache_get_row_int(0, 34);
    PlayerInfo[playerid][pPayCheckMoney] = cache_get_row_int(0, 35);
    PlayerInfo[playerid][pPayDayTime] = cache_get_row_int(0, 37);
    PlayerInfo[playerid][pSHealth] = cache_get_row_float(0, 38);
    PlayerInfo[playerid][pCellPhone] = cache_get_row_int(0, 39);
    PlayerInfo[playerid][pNumber] = cache_get_row_int(0, 40);
    PlayerInfo[playerid][pSavings] = cache_get_row_int(0, 41);
    PlayerInfo[playerid][pHouseKey] = cache_get_row_int(0, 42);
    PlayerInfo[playerid][pMeleeWep] = cache_get_row_int(0, 43);
    PlayerInfo[playerid][pPerm1] = cache_get_row_int(0, 44);
    PlayerInfo[playerid][pPerm2] = cache_get_row_int(0, 45);
    PlayerInfo[playerid][pAmmo1] = cache_get_row_int(0, 46);
    PlayerInfo[playerid][pAmmo2] = cache_get_row_int(0, 47);
    PlayerInfo[playerid][pRadio] = cache_get_row_int(0, 48);
    PlayerInfo[playerid][pCrashed] = cache_get_row_int(0, 49);
    PlayerInfo[playerid][pMask] = cache_get_row_int(0, 50);
    PlayerInfo[playerid][pBMX] = cache_get_row_int(0, 53);
    if(PlayerInfo[playerid][pHouseKey] == 0) PlayerInfo[playerid][pHouseKey] = -1;
	PlayerInfo[playerid][pCarKey] = cache_get_row_int(0, 54);
    cache_get_row(0, 55, vehicles, dbHandle, 255);
    AssignPlayerVehicles(playerid, vehicles);
    //printf("House: %i  Car %i", PlayerInfo[playerid][pHouseKey], PlayerInfo[playerid][pCarKey]);
    PlayerInfo[playerid][pVehicles] = cache_get_row_int(0, 56);
    PlayerInfo[playerid][pVehSlot] = cache_get_row_int(0, 57);
    PlayerInfo[playerid][pSpareKey] = cache_get_row_int(0, 58);
    PlayerInfo[playerid][pLighter] = cache_get_row_int(0, 59);
    PlayerInfo[playerid][pCigars] = cache_get_row_int(0, 60);
    PlayerInfo[playerid][pBizKey] = cache_get_row_int(0, 61);
    PlayerInfo[playerid][pWorkOn] = cache_get_row_int(0, 62);
    PlayerInfo[playerid][pWalk] = cache_get_row_int(0, 63);
    PlayerInfo[playerid][pArmour] = cache_get_row_float(0, 64);
    PlayerInfo[playerid][pHasArmour] = cache_get_row_int(0, 65);
    PlayerInfo[playerid][pFaction] = cache_get_row_int(0, 66);
    PlayerInfo[playerid][pRank] = cache_get_row_int(0, 67);
    PlayerInfo[playerid][pBadgeNumber] = cache_get_row_int(0, 68);
    PlayerInfo[playerid][pDriveWarns] = cache_get_row_int(0, 69);
    PlayerInfo[playerid][pJailTime2] = cache_get_row_int(0, 70);
    PlayerInfo[playerid][pArrested] = cache_get_row_int(0, 71);
    PlayerInfo[playerid][pTalk] = cache_get_row_int(0, 72);
    PlayerInfo[playerid][pSwat] = 0;
    cache_get_row(0, 74, tickets, dbHandle, 255);
    AssignPlayerTickets(playerid, tickets);
    PlayerInfo[playerid][pJob] = cache_get_row_int(0, 75);
    PlayerInfo[playerid][pJobRank] = cache_get_row_int(0, 76);
    PlayerInfo[playerid][pCareer] = cache_get_row_int(0, 77);
    PlayerInfo[playerid][pSideJob] = cache_get_row_int(0, 78);
    PlayerInfo[playerid][pSpawnType] = cache_get_row_int(0, 79);
    PlayerInfo[playerid][pPrisoned] = cache_get_row_int(0, 80);
    cache_get_row(0, 81, drugs, dbHandle, 255);
    AssignPlayerDrugs(playerid, drugs);
    PlayerInfo[playerid][pSeeds] = cache_get_row_int(0, 82);
    PlayerInfo[playerid][pSoda] = cache_get_row_int(0, 83);
    PlayerInfo[playerid][pPowder] = cache_get_row_int(0, 84);
    PlayerInfo[playerid][pAlcohol] = cache_get_row_int(0, 85);
    cache_get_row(0, 86, contacts, dbHandle, 255);
    AssignPlayerContacts(playerid, contacts);
    cache_get_row(0, 87, channels, dbHandle, 255);
    AssignPlayerChannels(playerid, channels);
    cache_get_row(0, 88, authed, dbHandle, 255);
    AssignPlayerAuthed(playerid, authed);
    PlayerInfo[playerid][pSlot] = cache_get_row_int(0, 89);
    PlayerInfo[playerid][pIPaddress] = cache_get_row_int(0, 90);
    PlayerInfo[playerid][pSerial] = cache_get_row_int(0, 91);
    PlayerInfo[playerid][pTaxiLic] = cache_get_row_int(0, 94);
    PlayerInfo[playerid][pWepMats] = cache_get_row_int(0, 95);
    PlayerInfo[playerid][pFName] = cache_get_row_int(0, 100);
    cache_get_row(0, 101, PlayerInfo[playerid][pForumName], dbHandle, 64);
    PlayerInfo[playerid][pCard] = cache_get_row_int(0, 102);
    PlayerInfo[playerid][pPinCard] = cache_get_row_int(0, 103);
    PlayerInfo[playerid][pNameChg] = cache_get_row_int(0, 104);
    PlayerInfo[playerid][pPhoneChg] = cache_get_row_int(0, 105);
    PlayerInfo[playerid][pSexChg] = cache_get_row_int(0, 106);
    PlayerInfo[playerid][pCKChg] = cache_get_row_int(0, 107);
    PlayerInfo[playerid][pBikeLic] = cache_get_row_int(0, 109);
    PlayerInfo[playerid][pBigLic] = cache_get_row_int(0, 110);
    PlayerInfo[playerid][pFishingRod] = cache_get_row_int(0, 111);
    PlayerInfo[playerid][pHairCut] = cache_get_row_int(0, 112);
    PlayerInfo[playerid][pGarbage] = cache_get_row_int(0, 117);
    cache_get_row(0, 113, PlayerInfo[playerid][pWanted], dbHandle, 256);
    PlayerInfo[playerid][pMaskID] = (PlayerInfo[playerid][pDatabaseID] * 1000) + PlayerInfo[playerid][pDatabaseID]; //DE MODIFICAT
    SetPVarInt(playerid, "MaskID", PlayerInfo[playerid][pMaskID]);
    return 1;
}

public ScoreUpdate(playerid)
{
    if(PlayerIsOn(playerid))
    {
        SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
    }
    return 1;
}

public PlayerNearVehicle(Float:radi, playerid, vehicleid)
{
    if(PlayerIsOn(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        GetVehiclePos(vehicleid, posx, posy, posz);
        tempposx = (oldposx -posx);
        tempposy = (oldposy -posy);
        tempposz = (oldposz -posz);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            return 1;
        }
    }
    return 0;
}

public ProxDetectorP(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
    if(PlayerIsOn(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        new MaxPlayers = GetPlayerPoolSize();
        for(new i = 0; i <= MaxPlayers; i++)
        {
            if(PlayerIsOn(i) && (GetWorld(playerid) == GetWorld(i)))
            {
                    GetPlayerPos(i, posx, posy, posz);
                    tempposx = (oldposx -posx);
                    tempposy = (oldposy -posy);
                    tempposz = (oldposz -posz);
                    if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
                    {
                        SCM(i, col1, string);
                    }
                    else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
                    {
                        SCM(i, col2, string);
                    }
                    else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
                    {
                        SCM(i, col3, string);
                    }
                    else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
                    {
                        SCM(i, col4, string);
                    }
                    else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
                    {
                        SCM(i, col5, string);
                    }
            }
        }
    }//not connected
    return 1;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(PlayerIsOn(playerid))
    {
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        tempposx = (oldposx -x);
        tempposy = (oldposy -y);
        tempposz = (oldposz -z);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            return 1;
        }
    }
    return 0;
}

/*forward LoadChargesFromPlayer(playerid);
public LoadChargesFromPlayer(playerid)
{
    new rows, fi
    return 1;
}*/

public LoadDynamicLabels()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            LabelsInfo[total][tID] = cache_get_row_int(total, 0);
            LabelsInfo[total][tLabelX] = cache_get_row_float(total, 1);
            LabelsInfo[total][tLabelY] = cache_get_row_float(total, 2);
            LabelsInfo[total][tLabelZ] = cache_get_row_float(total, 3);
            LabelsInfo[total][tColor] = cache_get_row_int(total, 4);
            LabelsInfo[total][tVirtualWorld] = cache_get_row_int(total, 5);
            cache_get_row(total, 6, LabelsInfo[total][tInfo], dbHandle, 128);
            LabelsInfo[total][tGameText] = cache_get_row_int(total, 7);
            LabelsInfo[total][tLabelOn] = 1;
            if(LabelsInfo[total][tGameText] == 0)
            {
                LabelsInfo[total][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[total][tInfo], LabelsInfo[total][tColor], LabelsInfo[total][tLabelX], LabelsInfo[total][tLabelY], LabelsInfo[total][tLabelZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[total][tVirtualWorld], -1, -1, 100.0);
            }
            LabelsInfo[total][tPickUp] = CreateDynamicPickup(1239, 1, LabelsInfo[total][tLabelX], LabelsInfo[total][tLabelY], LabelsInfo[total][tLabelZ], -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Au fost incarcate %d labels din baza de date MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicDoors()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            DoorInfo[total][dID] = cache_get_row_int(total, 0);
            cache_get_row(total, 1, DoorInfo[total][dInfo], dbHandle, 128);
            DoorInfo[total][dEnterX] = cache_get_row_float(total, 2);
            DoorInfo[total][dEnterY] = cache_get_row_float(total, 3);
            DoorInfo[total][dEnterZ] = cache_get_row_float(total, 4);
            DoorInfo[total][dExitX] = cache_get_row_float(total, 5);
            DoorInfo[total][dExitY] = cache_get_row_float(total, 6);
            DoorInfo[total][dExitZ] = cache_get_row_float(total, 7);
            DoorInfo[total][dEnterInterior] = cache_get_row_int(total, 8);
            DoorInfo[total][dExitInterior] = cache_get_row_int(total, 9);
            DoorInfo[total][dVirtualWorld] = cache_get_row_int(total, 10);
            DoorInfo[total][dDoorOn] = 1;
            format(msg, sizeof(msg), "{AFAFAF}/exit");
            DoorInfo[total][dExitLabel] = CreateDynamic3DTextLabel(msg, -1, DoorInfo[total][dExitX], DoorInfo[total][dExitY], DoorInfo[total][dExitZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DoorInfo[total][dVirtualWorld], -1, -1, 100.0);
            DoorInfo[total][dPickUp] = CreateDynamicPickup(1239, 1, DoorInfo[total][dEnterX], DoorInfo[total][dEnterY], DoorInfo[total][dEnterZ], -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d doors from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicFactionDoors()
{
    new rows, fields, Temp[32], total = 0;
    
    cache_get_data(rows, fields);
    
    if(rows)
    {
        while(total < rows)
        {
            FactionDoors[total][dID] = cache_get_row_int(total, 0);
            FactionDoors[total][dFaction] = cache_get_row_int(total, 1);
            cache_get_row(total, 2, FactionDoors[total][dInfo], dbHandle, 128);
            FactionDoors[total][dEnterX] = cache_get_row_float(total, 3);
            FactionDoors[total][dEnterY] = cache_get_row_float(total, 4);
            FactionDoors[total][dEnterZ] = cache_get_row_float(total, 5);
            FactionDoors[total][dExitX] = cache_get_row_float(total, 6);
            FactionDoors[total][dExitY] = cache_get_row_float(total, 7);
            FactionDoors[total][dExitZ] = cache_get_row_float(total, 8);
            FactionDoors[total][dEnterInterior] = cache_get_row_int(total, 9);
            FactionDoors[total][dExitInterior] = cache_get_row_int(total, 10);
            cache_get_field_content(total, "world", Temp), FactionDoors[total][dVirtualWorld] = strval(Temp);
            FactionDoors[total][dWithVehicle] = cache_get_row_int(total, 12);
            cache_get_field_content(total, "enterangle", Temp), FactionDoors[total][dEnterAngle] = floatstr(Temp);
            cache_get_field_content(total, "exitangle", Temp), FactionDoors[total][dExitAngle] = floatstr(Temp);
            FactionDoors[total][dDoorOn] = 1;
            FactionDoors[total][dLocked] = 1;
            FactionDoors[total][dPickUp] = CreateDynamicPickup(1239, 2, FactionDoors[total][dEnterX], FactionDoors[total][dEnterY], FactionDoors[total][dEnterZ], -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d faction doors from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadMoveDoors()
{
    new rows, fields;
    new total = 0;
    new object, id, model, faction, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:openspeed, Float:movex, Float:movey, Float:movez, interior, world, name[256];
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            id = cache_get_row_int(total, 0),
            model = cache_get_row_int(total, 1),
            faction = cache_get_row_int(total, 2),
            x = cache_get_row_float(total, 3),
            y = cache_get_row_float(total, 4),
            z = cache_get_row_float(total, 5),
            rx = cache_get_row_float(total, 6),
            ry = cache_get_row_float(total, 7),
            rz = cache_get_row_float(total, 8),
            interior = cache_get_row_int(total, 9),
            world = cache_get_row_int(total, 10),
            cache_get_row(total, 11, name, dbHandle, 128),
            openspeed = cache_get_row_float(total, 12),
            movex = cache_get_row_float(total, 13),
            movey = cache_get_row_float(total, 14),
            movez = cache_get_row_float(total, 15);
            object = CreateDynamicObject(model, x, y, z, rx, ry, rz, world, -1, -1, 200.0);
            Doors[object][doorID] = id;
            Doors[object][doorModel] = model;
            Doors[object][doorFaction] = faction;
            Doors[object][doorPosX] = x;
            Doors[object][doorPosY] = y;
            Doors[object][doorPosZ] = z;
            Doors[object][doorPosRX] = rx;
            Doors[object][doorPosRY] = ry;
            Doors[object][doorPosRZ] = rz;
            Doors[object][doorOpenSpeed] = openspeed;
            Doors[object][doorMoveX] = movex;
            Doors[object][doorMoveY] = movey;
            Doors[object][doorMoveZ] = movez;
            Doors[object][doorInterior] = interior;
            Doors[object][doorVirtualWorld] = world;
            format(Doors[object][doorName], 256, "%s", name);
            Doors[object][doorObjectOn] = 1;
            Doors[object][doorObject] = object;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic movable doors from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicGates()
{
    new rows, fields, Temp[64];
    new total = 0;
    new object, id, model, faction, Float:speed, Float:movex, Float:movey, Float:movez, Float:moverx, Float:movery, Float:moverz, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, world, name[256];
    new sound, soundlength;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            id = cache_get_row_int(total, 0),
            model = cache_get_row_int(total, 1),
            faction = cache_get_row_int(total, 2),
            x = cache_get_row_float(total, 3),
            y = cache_get_row_float(total, 4),
            z = cache_get_row_float(total, 5),
            rx = cache_get_row_float(total, 6),
            ry = cache_get_row_float(total, 7),
            rz = cache_get_row_float(total, 8),
            speed = cache_get_row_float(total, 9),
            cache_get_row (total, 10, Temp), movex = floatstr(Temp);
            cache_get_row (total, 11, Temp), movey = floatstr(Temp);
            cache_get_row (total, 12, Temp), movez = floatstr(Temp);            
            cache_get_row (total, 13, Temp), moverx = floatstr(Temp);
            cache_get_row (total, 14, Temp), movery = floatstr(Temp);
            cache_get_row (total, 15, Temp), moverz = floatstr(Temp);
            interior = cache_get_row_int(total, 16),
            world = cache_get_row_int(total, 17),
            cache_get_row(total, 18, name, dbHandle, 128),
            cache_get_row (total, 19, Temp), sound = strval(Temp);
            cache_get_row (total, 20, Temp), soundlength = strval(Temp);
            object = CreateDynamicObject(model, x, y, z, rx, ry, rz, world, -1, -1, 200.0);
            Gates[object][gateID] = id;
            Gates[object][gateModel] = model;
            Gates[object][gateFaction] = faction;
            Gates[object][gatePosX] = x;
            Gates[object][gatePosY] = y;
            Gates[object][gatePosZ] = z;
            Gates[object][gatePosRX] = rx;
            Gates[object][gatePosRY] = ry;
            Gates[object][gatePosRZ] = rz;
            Gates[object][gateOpenSpeed] = speed;
            Gates[object][gateMoveX] = movex;
            Gates[object][gateMoveY] = movey;
            Gates[object][gateMoveZ] = movez;
            Gates[object][gateMoveRX] = moverx;
            Gates[object][gateMoveRY] = movery;
            Gates[object][gateMoveRZ] = moverz;
            Gates[object][gateInterior] = interior;
            Gates[object][gateVirtualWorld] = world;
            Gates[object][gateSound] = sound;
            Gates[object][gateSoundLength] = soundlength;
            format(Gates[object][gateName], 256, "%s", name);
            Gates[object][gateObjectOn] = 1;
            Gates[object][gateObject] = object;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic gates from MySQL.", total);
	printf(msg);
    return 1;
}
//Garbage Job
forward LoadDynamicBins();
public LoadDynamicBins()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			BinInfo[total][objectID] = cache_get_row_int(total, 0);
			BinInfo[total][objectModel] = cache_get_row_int(total, 1);
			BinInfo[total][binX] = cache_get_row_float(total, 2);
			BinInfo[total][binY] = cache_get_row_float(total, 3);
			BinInfo[total][binZ] = cache_get_row_float(total, 4);
			BinInfo[total][binRX] = cache_get_row_float(total, 5);
			BinInfo[total][binRY] = cache_get_row_float(total, 6);
			BinInfo[total][binRZ] = cache_get_row_float(total, 7);
			BinInfo[total][TrashPicked] = cache_get_row_int(total, 8);
			format(msg, sizeof(msg), "FULL");
			BinInfo[total][binLabel] = CreateDynamic3DTextLabel(msg, -1, BinInfo[total][binX], BinInfo[total][binY], BinInfo[total][binZ], 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicObject(BinInfo[total][objectModel], BinInfo[total][binX], BinInfo[total][binY], BinInfo[total][binZ], BinInfo[total][binRX], BinInfo[total][binRY], BinInfo[total][binRZ]);
			total++;
		}
    }
	format(msg,sizeof(msg), "Au fost incarcate %d cosuri de gunoi din MySQL.", total);
	printf(msg);
    return 1; 
}
//Garbage Job
public LoadDynamicATMS()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            ATMInfo[total][atmID] = cache_get_row_int(total, 0);
            ATMInfo[total][atmPosX] = cache_get_row_float(total, 1);
            ATMInfo[total][atmPosY] = cache_get_row_float(total, 2);
            ATMInfo[total][atmPosZ] = cache_get_row_float(total, 3);
            ATMInfo[total][atmInterior] = cache_get_row_int(total, 4);
            cache_get_row(total, 5, ATMInfo[total][atmInfo], dbHandle, 128);
            ATMInfo[total][atmAtmOn] = 1;
            format(msg, sizeof(msg), "{AFAFAF}ATM %d\n/cardhelp", total, ATMInfo[total][atmInfo]);
            ATMInfo[total][atmLabel] = CreateDynamic3DTextLabel(msg, -1, ATMInfo[total][atmPosX], ATMInfo[total][atmPosY], ATMInfo[total][atmPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            ATMInfo[total][atmPickUp] = CreateDynamicPickup(1239, 1, ATMInfo[total][atmPosX], ATMInfo[total][atmPosY], ATMInfo[total][atmPosZ], -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d ATM's from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicTeles()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            HouseInteriors[total][atID] = cache_get_row_int(total, 0);
            cache_get_row(total, 1, HouseInteriors[total][aMapName], dbHandle, 128);
            HouseInteriors[total][aPosX] = cache_get_row_float(total, 2);
            HouseInteriors[total][aPosY] = cache_get_row_float(total, 3);
            HouseInteriors[total][aPosZ] = cache_get_row_float(total, 4);
            HouseInteriors[total][aInterior] = cache_get_row_int(total, 5);
            HouseInteriors[total][aTeleOn] = 1;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d admin teleports from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicObjects()
{
    new rows, fields;
    new total = 0;
    new object, id, model, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, world, name[256];
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            id = cache_get_row_int(total, 0);
            model = cache_get_row_int(total, 1);
            x = cache_get_row_float(total, 2);
            y = cache_get_row_float(total, 3);
            z = cache_get_row_float(total, 4);
            rx = cache_get_row_float(total, 5);
            ry = cache_get_row_float(total, 6);
            rz = cache_get_row_float(total, 7);
            interior = cache_get_row_int(total, 8);
            world = cache_get_row_int(total, 9);
            cache_get_row(total, 10, name, dbHandle, 128);
            object = CreateDynamicObject(model, x, y, z, rx, ry, rz, world, -1, -1, 200.0);
            ObjectsInfo[object][oID] = id;
            ObjectsInfo[object][oModel] = model;
            ObjectsInfo[object][oPosX] = x;
            ObjectsInfo[object][oPosY] = y;
            ObjectsInfo[object][oPosZ] = z;
            ObjectsInfo[object][oPosRX] = rx;
            ObjectsInfo[object][oPosRY] = ry;
            ObjectsInfo[object][oPosRZ] = rz;
            ObjectsInfo[object][oInterior] = interior;
            ObjectsInfo[object][oVirtualWorld] = world;
            format(ObjectsInfo[object][oName], 256, "%s", name);
            ObjectsInfo[object][oObjectOn] = 1;
            ObjectsInfo[object][oObject] = object;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic objects from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicCCTV()
{
    new rows, fields;
    new total = 0;
    new object, id, faction, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, world, name[256];
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            id = cache_get_row_int(total, 0);
            faction = cache_get_row_int(total, 1);
            x = cache_get_row_float(total, 2);
            y = cache_get_row_float(total, 3);
            z = cache_get_row_float(total, 4);
            rx = cache_get_row_float(total, 5);
            ry = cache_get_row_float(total, 6);
            rz = cache_get_row_float(total, 7);
            interior = cache_get_row_int(total, 8);
            world = cache_get_row_int(total, 9);
            cache_get_row(total, 10, name, dbHandle, 128);
            object = CreateDynamicObject(1886, x, y, z, rx, ry, rz, -1, -1, -1, 200.0);
            CCTVInfo[object][tvID] = id;
            CCTVInfo[object][tvFaction] = faction;
            CCTVInfo[object][tvPosX] = x;
            CCTVInfo[object][tvPosY] = y;
            CCTVInfo[object][tvPosZ] = z;
            CCTVInfo[object][tvPosRX] = rx;
            CCTVInfo[object][tvPosRY] = ry;
            CCTVInfo[object][tvPosRZ] = rz;
            CCTVInfo[object][tvInterior] = interior;
            CCTVInfo[object][tvVirtualWorld] = world;
            format(CCTVInfo[object][tvName], 256, "%s", name);
            CCTVInfo[object][tvObjectOn] = 1;
            CCTVInfo[object][tvObject] = object;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic CCTV's from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicCPT()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            CPTInfo[total][cID] = cache_get_row_int(total, 0);
            CPTInfo[total][cPosX] = cache_get_row_float(total, 1);
            CPTInfo[total][cPosY] = cache_get_row_float(total, 2);
            CPTInfo[total][cPosZ] = cache_get_row_float(total, 3);
            CPTInfo[total][cVirtualWorld] = cache_get_row_int(total, 4);
            cache_get_row(total, 5, CPTInfo[total][cLabelText1], dbHandle, 128);
            cache_get_row(total, 6, CPTInfo[total][cLabelText2], dbHandle, 128);
            cache_get_row(total, 7, CPTInfo[total][cOtherInfo], dbHandle, 128);
            CPTInfo[total][cInfoOn] = 1;
            format(msg, sizeof(msg), "{AFAFAF}%s\n%s\nComenzi: /info", CPTInfo[total][cLabelText1], CPTInfo[total][cLabelText2]);
            CPTInfo[total][cLabel] = CreateDynamic3DTextLabel(msg, -1, CPTInfo[total][cPosX], CPTInfo[total][cPosY], CPTInfo[total][cPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CPTInfo[total][cVirtualWorld], -1, -1, 100.0);
            CPTInfo[total][cCheckPoint] = CreateDynamicCP(CPTInfo[total][cPosX], CPTInfo[total][cPosY], CPTInfo[total][cPosZ], 1.0, CPTInfo[total][cVirtualWorld], -1, -1, 30.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic infos from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicGasStations()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            GasStation[total][gID] = cache_get_row_int(total, 0);
            GasStation[total][gPosX] = cache_get_row_float(total, 1);
            GasStation[total][gPosY] = cache_get_row_float(total, 2);
            GasStation[total][gPosZ] = cache_get_row_float(total, 3);
            GasStation[total][gPrice] = cache_get_row_int(total, 4);
            cache_get_row(total, 5, GasStation[total][gInfo], dbHandle, 128);
            GasStation[total][gStationOn] = 1;
            format(msg, sizeof(msg), "{AFAFAF}Benzinarie %d\n%\n/refill - $%d", total, GasStation[total][gInfo], GasStation[total][gPrice]);
            GasStation[total][gLabel] = CreateDynamic3DTextLabel(msg, -1, GasStation[total][gPosX], GasStation[total][gPosY], GasStation[total][gPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            GasStation[total][gPickUp] = CreateDynamicPickup(1239, 1, GasStation[total][gPosX], GasStation[total][gPosY], GasStation[total][gPosZ], -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic gas stations from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicBanks()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            BankInfo[total][bID] = cache_get_row_int(total, 0);
            BankInfo[total][bPosX] = cache_get_row_float(total, 1);
            BankInfo[total][bPosY] = cache_get_row_float(total, 2);
            BankInfo[total][bPosZ] = cache_get_row_float(total, 3);
            BankInfo[total][bInterior] = cache_get_row_int(total, 4);
            cache_get_row(total, 5, BankInfo[total][bInfo], dbHandle, 128);
            BankInfo[total][bBankOn] = 1;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic banks from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicVehicles()
{
    new rows, fields;
    new total = 0;
    new id, model, color1, color2, faction, Float:x, Float:y, Float:z, Float:a, type, plate[128], info[128], vehicle, siren;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            id = cache_get_row_int(total, 0);
            model = cache_get_row_int(total, 1);
            color1 = cache_get_row_int(total, 2);
            color2 = cache_get_row_int(total, 3);
            x = cache_get_row_float(total, 4);
            y = cache_get_row_float(total, 5);
            z = cache_get_row_float(total, 6);
            a = cache_get_row_float(total, 7);
            type = cache_get_row_int(total, 8);
            faction = cache_get_row_int(total, 9);
            cache_get_row(total, 10, plate, dbHandle, 128);
            cache_get_row(total, 11, info, dbHandle, 128);
            siren = cache_get_row_int(total, 12);
            vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1, siren);
            SetVehicleNumberPlate(vehicle, plate);
            CityVehicles[vehicle][vVehicle] = vehicle;
            CityVehicles[vehicle][vID] = id;
            CityVehicles[vehicle][vModel] = model;
            CityVehicles[vehicle][vColor1] = color1;
            CityVehicles[vehicle][vColor2] = color2;
            CityVehicles[vehicle][vPosX] = x;
            CityVehicles[vehicle][vPosY] = y;
            CityVehicles[vehicle][vPosZ] = z;
            CityVehicles[vehicle][vPosA] = a;
            CityVehicles[vehicle][vType] = type;
            CityVehicles[vehicle][vFaction] = faction;
            format(CityVehicles[vehicle][vPlate], 128, "%s", plate);
            format(CityVehicles[vehicle][vInfo], 128, "%s", info);
            CityVehicles[vehicle][vCarOn] = 1;
            CityVehicles[vehicle][vSiren] = siren;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic vehicles from MySQL.", total);
    printf(msg);
    return 1;
}


public LoadDynamicHouses()
{
    new rows, fields, Temp[64];
    new total = 0, house = 1, weapons[256];
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            HouseInfo[house][hID] = cache_get_row_int(total, 0);
            HouseInfo[house][hEntranceX] = cache_get_row_float(total, 1);
            HouseInfo[house][hEntranceY] = cache_get_row_float(total, 2);
            HouseInfo[house][hEntranceZ] = cache_get_row_float(total, 3);
            HouseInfo[house][hExitX] = cache_get_row_float(total, 4);
            HouseInfo[house][hExitY] = cache_get_row_float(total, 5);
            HouseInfo[house][hExitZ] = cache_get_row_float(total, 6);
            cache_get_row(total, 7, HouseInfo[house][hInfo], dbHandle, 128);
            cache_get_row(total, 8, HouseInfo[house][hOwner], dbHandle, 128);
            HouseInfo[house][hOwned] = cache_get_row_int(total, 9);
            HouseInfo[house][hLocked] = cache_get_row_int(total, 10);
            HouseInfo[house][hPrice] = cache_get_row_int(total, 11);
            HouseInfo[house][hLevelbuy] = cache_get_row_int(total, 12);
            HouseInfo[house][hRentprice] = cache_get_row_int(total, 13);
            HouseInfo[house][hRentable] = cache_get_row_int(total, 14);
            HouseInfo[house][hInterior] = cache_get_row_int(total, 15);
            HouseInfo[house][hWorld] = cache_get_row_int(total, 16);
            HouseInfo[house][hCash] = cache_get_row_int(total, 17);
            cache_get_row (total, 18, Temp), HouseInfo[house][hFurnitures] = strval(Temp);
            cache_get_row(total, 19, weapons, dbHandle, 128);
            HouseInfo[house][hCheckPosX] = cache_get_row_float(total, 20);
            HouseInfo[house][hCheckPosY] = cache_get_row_float(total, 21);
            HouseInfo[house][hCheckPosZ] = cache_get_row_float(total, 22);
            HouseInfo[house][hRadio] = cache_get_row_int(total, 23);
            HouseInfo[house][hHouseOn] = 1;
            AssignHouseWeapons(house, weapons);
            if(HouseInfo[house][hOwned] == 0)
                format(msg, sizeof(msg), "Casa: %d\n%s\nPret: $%d\nLevel: %d", house, HouseInfo[house][hInfo], HouseInfo[house][hPrice], HouseInfo[house][hLevelbuy]);
            else
                format(msg, sizeof(msg), "Casa: %d\n%s", house, HouseInfo[house][hInfo]);
            HouseInfo[house][hLabel] = CreateDynamic3DTextLabel(msg, COLOR_HOUSE, HouseInfo[house][hEntranceX], HouseInfo[house][hEntranceY], HouseInfo[house][hEntranceZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            HouseInfo[house][hCheckPoint] = CreateDynamicCP(HouseInfo[house][hEntranceX], HouseInfo[house][hEntranceY], HouseInfo[house][hEntranceZ], 1.5, -1, -1, -1, 2.0);
            if(HouseInfo[house][hFurnitures] > 0)
			{
				LoadHouseFurnitures(house);
			}
			house++;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic houses from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicBiz()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            BizInfo[total][bizID] = cache_get_row_int(total, 0);
            BizInfo[total][bizPosX] = cache_get_row_float(total, 1);
            BizInfo[total][bizPosY] = cache_get_row_float(total, 2);
            BizInfo[total][bizPosZ] = cache_get_row_float(total, 3);
            BizInfo[total][bizExitX] = cache_get_row_float(total, 4);
            BizInfo[total][bizExitY] = cache_get_row_float(total, 5);
            BizInfo[total][bizExitZ] = cache_get_row_float(total, 6);
            cache_get_row(total, 7, BizInfo[total][bizName], dbHandle, 128);
            cache_get_row(total, 8, BizInfo[total][bizInfo], dbHandle, 128);
            cache_get_row(total, 9, BizInfo[total][bizEnterMSG], dbHandle, 128);
            cache_get_row(total, 10, BizInfo[total][bizOwner], dbHandle, 128);
            BizInfo[total][bizOwned] = cache_get_row_int(total, 11);
            BizInfo[total][bizLocked] = cache_get_row_int(total, 12);
            BizInfo[total][bizPrice] = cache_get_row_int(total, 13);
            BizInfo[total][bizLevelbuy] = cache_get_row_int(total, 14);
            BizInfo[total][bizInterior] = cache_get_row_int(total, 15);
            BizInfo[total][bizWorld] = cache_get_row_int(total, 16);
            BizInfo[total][bizCash] = cache_get_row_int(total, 17);
            BizInfo[total][bizType] = cache_get_row_int(total, 18),
            BizInfo[total][bizEntrance] = cache_get_row_int(total, 19);
            BizInfo[total][bizRadio] = cache_get_row_int(total, 20);
            BizInfo[total][bizOn] = 1;
            if(BizInfo[total][bizOwned] == 0) { BizInfo[total][bizPickUp] = CreateDynamicPickup(1273, 1, BizInfo[total][bizPosX], BizInfo[total][bizPosY], BizInfo[total][bizPosZ], -1, -1, -1, 100.0); }
            else {BizInfo[total][bizPickUp] = CreateDynamicPickup(1239, 1, BizInfo[total][bizPosX], BizInfo[total][bizPosY], BizInfo[total][bizPosZ], -1, -1, -1, 100.0); }
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic businesses from MySQL.", total);
    printf(msg);
    return 1;
}

public OnFurnituresLoad(houseid)
{
    new rows, fields, Temp[64];
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            FurnitureInfo[houseid][total+1][fID] = cache_get_row_int(total, 0);
            FurnitureInfo[houseid][total+1][fModel] = cache_get_row_int(total, 1);
            cache_get_row(total, 2, FurnitureInfo[houseid][total+1][fName], dbHandle, 128);
            FurnitureInfo[houseid][total+1][fHouseID] = houseid;
            FurnitureInfo[houseid][total+1][fInterior] = cache_get_row_int(total, 4);
            FurnitureInfo[houseid][total+1][fVirtualWorld] = cache_get_row_int(total, 5);
            FurnitureInfo[houseid][total+1][fMarketPrice] = cache_get_row_int(total, 6);
            FurnitureInfo[houseid][total+1][fPosX] = cache_get_row_float(total, 7);
            FurnitureInfo[houseid][total+1][fPosY] = cache_get_row_float(total, 8);
            FurnitureInfo[houseid][total+1][fPosZ] = cache_get_row_float(total, 9);
            cache_get_row (total, 10, Temp), FurnitureInfo[houseid][total+1][fPosRX] = floatstr(Temp);
            cache_get_row (total, 11, Temp), FurnitureInfo[houseid][total+1][fPosRY] = floatstr(Temp);
            cache_get_row (total, 12, Temp), FurnitureInfo[houseid][total+1][fPosRZ] = floatstr(Temp);
            FurnitureInfo[houseid][total+1][fOn] = 1;
            FurnitureInfo[houseid][total+1][fObject] = CreateDynamicObject(FurnitureInfo[houseid][total+1][fModel], FurnitureInfo[houseid][total+1][fPosX], FurnitureInfo[houseid][total+1][fPosY], FurnitureInfo[houseid][total+1][fPosZ], FurnitureInfo[houseid][total+1][fPosRX], FurnitureInfo[houseid][total+1][fPosRY], FurnitureInfo[houseid][total+1][fPosRZ], FurnitureInfo[houseid][total+1][fVirtualWorld], FurnitureInfo[houseid][total+1][fInterior], -1, 200.0);
            if(isHouseDoor(FurnitureInfo[houseid][total+1][fModel]))
            {
                FurnitureInfo[houseid][total+1][fLocked] = 1;
                FurnitureInfo[houseid][total+1][fOpened] = 0;
            }
            total++;
        }
    }
    return 1;
}

public LoadDynamicStands()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            FoodStand[total][fID] = cache_get_row_int(total, 0);
            cache_get_row(total, 1, FoodStand[total][fInfo], dbHandle, 128);
            FoodStand[total][fPosX] = cache_get_row_float(total, 2);
            FoodStand[total][fPosY] = cache_get_row_float(total, 3);
            FoodStand[total][fPosZ] = cache_get_row_float(total, 4);
            FoodStand[total][fPosRX] = cache_get_row_float(total, 5);
            FoodStand[total][fPosRY] = cache_get_row_float(total, 6);
            FoodStand[total][fPosRZ] = cache_get_row_float(total, 7);
            FoodStand[total][fStandOn] = 1;
            FoodStand[total][fObject] = CreateDynamicObject(1340, FoodStand[total][fPosX], FoodStand[total][fPosY], FoodStand[total][fPosZ], FoodStand[total][fPosRX], FoodStand[total][fPosRY], FoodStand[total][fPosRZ], -1, -1, -1, 200.0);
            if(FoodStand[total][fPosRZ] < -50.0) //Done
            {
                FoodStand[total][fPosY] += (1.2 * floatcos((-FoodStand[total][fPosRZ]+90), degrees));
            }
            if(FoodStand[total][fPosRZ] < -150.0) //Done
            {
                FoodStand[total][fPosX] += (1.2 * floatsin((-FoodStand[total][fPosRZ]+90), degrees));
            }
            if(FoodStand[total][fPosRZ] >= 0.0) //Done
            {
                FoodStand[total][fPosX] += (1.2 * floatsin((-FoodStand[total][fPosRZ]+90), degrees));
            }
            if(FoodStand[total][fPosRZ] > 50.0) //Done
            {
                FoodStand[total][fPosY] += (1.2 * floatcos((-FoodStand[total][fPosRZ]+90), degrees));
            }
            format(msg, sizeof(msg), "{AFAFAF}/buyfood");
            FoodStand[total][fLabel] = CreateDynamic3DTextLabel(msg, -1, FoodStand[total][fPosX], FoodStand[total][fPosY], FoodStand[total][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            FoodStand[total][fPickUp] = CreateDynamicPickup(1239, 1, FoodStand[total][fPosX], FoodStand[total][fPosY], FoodStand[total][fPosZ], -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic food stands from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicMeters()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            ParkMeters[total][parkID] = cache_get_row_int(total, 0);
            ParkMeters[total][parkPosX] = cache_get_row_float(total, 1);
            ParkMeters[total][parkPosY] = cache_get_row_float(total, 2);
            ParkMeters[total][parkPosZ] = cache_get_row_float(total, 3);
            ParkMeters[total][parkPosRX] = cache_get_row_float(total, 4);
            ParkMeters[total][parkPosRY] = cache_get_row_float(total, 5);
            ParkMeters[total][parkPosRZ] = cache_get_row_float(total, 6);
            cache_get_row(total, 7, ParkMeters[total][parkName], dbHandle, 128);
            ParkMeters[total][parkMinutes] = cache_get_row_int(total, 8);
            ParkMeters[total][parkOn] = 1;
            ParkMeters[total][parkObject] = CreateDynamicObject(1270, ParkMeters[total][parkPosX], ParkMeters[total][parkPosY], ParkMeters[total][parkPosZ], ParkMeters[total][parkPosRX], ParkMeters[total][parkPosRY], ParkMeters[total][parkPosRZ], -1, -1, -1, 200.0);
            format(msg, sizeof(msg), "{3333FF}%d minute", ParkMeters[total][parkMinutes]);
            ParkMeters[total][parkArea] = CreateDynamicSphere(ParkMeters[total][parkPosX], ParkMeters[total][parkPosY], ParkMeters[total][parkPosZ], 1.5, -1, -1, -1);
            ParkMeters[total][parkLabel] = CreateDynamic3DTextLabel(msg, -1, ParkMeters[total][parkPosX], ParkMeters[total][parkPosY], ParkMeters[total][parkPosZ]+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic park meters from MySQL.", total);
    printf(msg);
    return 1;
}

public OnLoadApbs()
{
    new rows, fields;
    new total = 0, page = 0, count2 = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            ApbInfo[total][apbID] = cache_get_row_int(total, 0);
            cache_get_row(total, 1, ApbInfo[total][apbCharge], dbHandle, 128);
            cache_get_row(total, 2, ApbInfo[total][apbSuspect], dbHandle, 128);
            cache_get_row(total, 3, ApbInfo[total][apbOfficer], dbHandle, 128);
            ApbInfo[total][apbPage] = page;
            ApbInfo[total][apbOn] = 1;
            count2++;
            if(count2 == 5)
            {
                page++;
            }
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d APB's from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicFactions()
{
    new rows, fields;
    new total = 0, factionid = 1;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            Factions[factionid][fID] = cache_get_row_int(total, 0);
            cache_get_row(total, 2, Factions[factionid][fName], dbHandle, 128);
            Factions[factionid][fX] = cache_get_row_float(total, 3);
            Factions[factionid][fY] = cache_get_row_float(total, 4);
            Factions[factionid][fZ] = cache_get_row_float(total, 5);
            Factions[factionid][fSpawnInt] = cache_get_row_int(total, 6);
            cache_get_row(total, 7, Factions[factionid][fRank1], dbHandle, 128);
            cache_get_row(total, 8, Factions[factionid][fRank2], dbHandle, 128);
            cache_get_row(total, 9, Factions[factionid][fRank3], dbHandle, 128);
            cache_get_row(total, 10, Factions[factionid][fRank4], dbHandle, 128);
            cache_get_row(total, 11, Factions[factionid][fRank5], dbHandle, 128);
            cache_get_row(total, 12, Factions[factionid][fRank6], dbHandle, 128);
            cache_get_row(total, 13, Factions[factionid][fRank7], dbHandle, 128);
            cache_get_row(total, 14, Factions[factionid][fRank8], dbHandle, 128);
            cache_get_row(total, 15, Factions[factionid][fRank9], dbHandle, 128);
            cache_get_row(total, 16, Factions[factionid][fRank10], dbHandle, 128);
            cache_get_row(total, 17, Factions[factionid][fRank11], dbHandle, 128);
            cache_get_row(total, 18, Factions[factionid][fRank12], dbHandle, 128);
            cache_get_row(total, 19, Factions[factionid][fRank13], dbHandle, 128);
            cache_get_row(total, 20, Factions[factionid][fRank14], dbHandle, 128);
            cache_get_row(total, 21, Factions[factionid][fRank15], dbHandle, 128);
            cache_get_row(total, 22, Factions[factionid][fRank16], dbHandle, 128);
            cache_get_row(total, 23, Factions[factionid][fRank17], dbHandle, 128);
            cache_get_row(total, 24, Factions[factionid][fRank18], dbHandle, 128);
            cache_get_row(total, 25, Factions[factionid][fRank19], dbHandle, 128);
            cache_get_row(total, 26, Factions[factionid][fRank20], dbHandle, 128);
            Factions[factionid][fJoinRank] = cache_get_row_int(total, 27);
            Factions[factionid][fType] = cache_get_row_int(total, 28);
            Factions[factionid][fRankAmount] = cache_get_row_int(total, 29);
            Factions[factionid][fChatON] = cache_get_row_int(total, 30);
            Factions[factionid][fColor] = cache_get_row_int(total, 31);
            Factions[factionid][fUniformX] = cache_get_row_float(total, 32);
            Factions[factionid][fUniformY] = cache_get_row_float(total, 33);
            Factions[factionid][fUniformZ] = cache_get_row_float(total, 34);
            Factions[factionid][fLeaderRank] = cache_get_row_int(total, 35);
            cache_get_row(total, 36, Factions[factionid][fShortName], dbHandle, 128);
            Factions[factionid][fON] = 1;
            Factions[factionid][fPickUp] = CreateDynamicPickup(1239, 1, Factions[factionid][fUniformX], Factions[factionid][fUniformY], Factions[factionid][fUniformZ], -1, -1, -1, 100.0);
            total++;
            factionid++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic factions from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicJobs()
{
    new rows, fields;
    new total = 0, jobid = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            jobid = cache_get_row_int(total, 1);
            JobsInfo[jobid][jobID] = cache_get_row_int(total, 0);
            cache_get_row(total, 2, JobsInfo[jobid][jobName], dbHandle, 128);
            JobsInfo[jobid][jobX] = cache_get_row_float(total, 3);
            JobsInfo[jobid][jobY] = cache_get_row_float(total, 4);
            JobsInfo[jobid][jobZ] = cache_get_row_float(total, 5);
            JobsInfo[jobid][jobRanks] = cache_get_row_int(total, 6);
            JobsInfo[jobid][jobHighRank] = cache_get_row_int(total, 7);
            cache_get_row(total, 8, JobsInfo[jobid][jobRank1], dbHandle, 128);
            cache_get_row(total, 9, JobsInfo[jobid][jobRank2], dbHandle, 128);
            cache_get_row(total, 10, JobsInfo[jobid][jobRank3], dbHandle, 128);
            cache_get_row(total, 11, JobsInfo[jobid][jobRank4], dbHandle, 128);
            cache_get_row(total, 12, JobsInfo[jobid][jobRank5], dbHandle, 128);
            cache_get_row(total, 13, JobsInfo[jobid][jobRank6], dbHandle, 128);
            cache_get_row(total, 14, JobsInfo[jobid][jobRank7], dbHandle, 128);
            cache_get_row(total, 15, JobsInfo[jobid][jobRank8], dbHandle, 128);
            cache_get_row(total, 16, JobsInfo[jobid][jobRank9], dbHandle, 128);
            cache_get_row(total, 17, JobsInfo[jobid][jobRank10], dbHandle, 128);
            JobsInfo[jobid][jobSideJob] = cache_get_row_int(total, 18);
            JobsInfo[jobid][jobOn] = 1;
            JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1314, 1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ], -1, -1, -1, 100.0);
            if(JobsInfo[jobid][jobSideJob] == 1)
                format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"SIDE JOB"EMBED_GREEN"]");
            else
                format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"JOB"EMBED_GREEN"]");
            JobsInfo[jobid][jobLabel] = CreateDynamic3DTextLabel(msg, -1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            #if defined debugOn
				printf("Job %d incarcat (%s)", total, JobsInfo[jobid][jobName]);
			#endif
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic jobs from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadRadios()
{
    new rows, fields;
    new total = 0, channel;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            channel = cache_get_row_int(total, 1);
            RadiosInfo[channel][radioID] = cache_get_row_int(total, 0),
            cache_get_row(total, 2, RadiosInfo[channel][radioOwner], dbHandle, 128),
            cache_get_row(total, 3, RadiosInfo[channel][radioPass], dbHandle, 128),
            RadiosInfo[channel][radioProtected] = cache_get_row_int(total, 4);
            RadiosInfo[channel][radioOn] = 1;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d player radios from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicDealerShips()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            DealersInfo[total][dealerID] = cache_get_row_int(total, 0),
            DealersInfo[total][dealerPosX] = cache_get_row_float(total, 1),
            DealersInfo[total][dealerPosY] = cache_get_row_float(total, 2),
            DealersInfo[total][dealerPosZ] = cache_get_row_float(total, 3),
            cache_get_row(total, 4, DealersInfo[total][dealerInfo], dbHandle, 128);
            DealersInfo[total][dealerPickUp] = CreateDynamicPickup(1239, 2, DealersInfo[total][dealerPosX], DealersInfo[total][dealerPosY], DealersInfo[total][dealerPosZ], -1, -1, -1, 100.0);
            DealersInfo[total][dealerOn] = 1;
            total++;
        }
    }
    format(msg,sizeof(msg), "Loaded %d dynamic dealerships from MySQL.", total);
    printf(msg);
    return 1;
}

public LoadDynamicWepDamage()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            WeaponDMG[total][wID] = cache_get_row_int(total, 0),
            WeaponDMG[total][wDamage] = cache_get_row_int(total, 1);
            total++;
        }
    }
    return 1;
}

public OOCMSG(color,string[])
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(gOOC{i} == true)
            {
                SCM(i, color, string);
            }
        }
    }
}

public RegSkinMenu(playerid)
{
    ServerMSG(playerid, "Bine ai venit pe Evolution Roleplay. Aici ai o lista cu skinuri!");
    ServerMSG(playerid, "Alege un skin care iti place.");
    ShowPSkinMenu(playerid);
    return 1;
}

public OnLabelInsert(LabelID)
{
    LabelsInfo[LabelID][tID] = cache_insert_id(dbHandle);
    return 1;
}

public OnDoorInsert(DoorID)
{
    DoorInfo[DoorID][dID] = cache_insert_id(dbHandle);
    return 1;
}

public OnFactionDoorInsert(DoorID)
{
    FactionDoors[DoorID][dID] = cache_insert_id(dbHandle);
    return 1;
}

public OnTeleportInsert(TeleID)
{
    HouseInteriors[TeleID][atID] = cache_insert_id(dbHandle);
    return 1;
}

public OnObjectInsert(ObjectID)
{
    ObjectsInfo[ObjectID][oID] = cache_insert_id(dbHandle);
    return 1;
}

public OnCameraInsert(ObjectID)
{
    CCTVInfo[ObjectID][tvID] = cache_insert_id(dbHandle);
    return 1;
}

public OnMoveDoorInsert(ObjectID)
{
    Doors[ObjectID][doorID] = cache_insert_id(dbHandle);
    return 1;
}

public OnGateInsert(ObjectID)
{
    Gates[ObjectID][gateID] = cache_insert_id(dbHandle);
    return 1;
}

public OnVehicleInsert(VehicleID)
{
    CityVehicles[VehicleID][vID] = cache_insert_id(dbHandle);
    return 1;
}

public OnHouseInsert(HouseID)
{
    HouseInfo[HouseID][hID] = cache_insert_id(dbHandle);
    return 1;
}

public OnBizInsert(BizID)
{
    BizInfo[BizID][bizID] = cache_insert_id(dbHandle);
    return 1;
}

public OnFactionInsert(FactionID)
{
    Factions[FactionID][fID] = cache_insert_id(dbHandle);
    return 1;
}

public OnJobInsert(JobID)
{
    JobsInfo[JobID][jobID] = cache_insert_id(dbHandle);
    return 1;
}

public OnFoodStandInsert(StandID)
{
    FoodStand[StandID][fID] = cache_insert_id(dbHandle);
    return 1;
}

public OnParkMeterInsert(ParkID)
{
    ParkMeters[ParkID][parkID] = cache_insert_id(dbHandle);
    return 1;
}

public OnInfoInsert(InfoID)
{
    CPTInfo[InfoID][cID] = cache_insert_id(dbHandle);
    return 1;
}

public OnDealerShipInsert(DealerID)
{
    DealersInfo[DealerID][dealerID] = cache_insert_id(dbHandle);
    return 1;
}

public OnBankInsert(BankID)
{
    BankInfo[BankID][bID] = cache_insert_id(dbHandle);
    return 1;
}

public OnATMInsert(AtmID)
{
    ATMInfo[AtmID][atmID] = cache_insert_id(dbHandle);
    return 1;
}

public OnStationInsert(StationID)
{
    GasStation[StationID][gID] = cache_insert_id(dbHandle);
    return 1;
}

public KickPlayer(playerid)
{
    Kick(playerid);
}

public BanPlayer(playerid)
{
    Ban(playerid);
}


public BanPlayerEx(playerid)
{
    BanEx(playerid, "BANNED");
}

public ShowAmount(playerid, text[])
{
    new rows, fields, count = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(count < rows)
        {
            count++;
        }
    }
    format(msg, sizeof(msg), "%s cantitate: %d", text, count);
    SCM(playerid, COLOR_GRAD2, msg);
    return 1;
}

public OnPlayerPause(playerid)
{
    if(!isAFK{playerid})
    {
        isAFK{playerid} = true;
        AFKTime[playerid] = 1;
    }
    return 1;
}

public OnPlayerUnpause(playerid)
{
    if(isAFK{playerid})
    {
        isAFK{playerid} = false;
        AFKTime[playerid] = 0;
    }
    return 1;
}

stock RemoveVar(playerid, varname[])
{
    return DeletePVar(playerid, varname);
}

/*===================PVar-int=====================*/
stock SetIntVar(playerid, varname[], value)
{
    return SetPVarInt(playerid, varname, value);
}

stock GetIntVar(playerid, varname[])
{
    return GetPVarInt(playerid, varname);
}
/*===================PVar-int=====================*/

/*===================PVar-float=====================*/
stock SetFloatVar(playerid, varname[], Float:value)
{
    return SetPVarFloat(playerid, varname, Float:value);
}
stock Float:GetFloatVar(playerid, varname[])
{
    return GetPVarFloat(playerid, varname);
}
/*===================PVar-float=====================*/

/*===================PVar-string=====================*/
stock SetStringVar(playerid, varname[], value[])
{
    return SetPVarString(playerid, varname, value);
}
stock GetStringVar(playerid, varname[])
{
    new str[256];
    GetPVarString(playerid, varname, str, sizeof(str));
    return str;
}
/*===================PVar-string=====================*/
public IsAtGasStation(playerid)
{
    if(PlayerIsOn(playerid))
    {
        for(new i = 0; i < sizeof(GasStation); i++)
        {
            if(PlayerToPoint(6.0,playerid,GasStation[i][gPosX],GasStation[i][gPosY],GasStation[i][gPosZ]))
            {
                return 1;
            }
        }
    }
    return 0;
}

public IsAtBank(playerid)
{
    if(PlayerIsOn(playerid))
    {
        for(new i = 0; i < sizeof(BankInfo); i++)
        {
            if(PlayerToPoint(1.0,playerid,BankInfo[i][bPosX],BankInfo[i][bPosY],BankInfo[i][bPosZ]))
            {
                return 1;
            }
        }
    }
    return 0;
}

public IsAtPullMachine(playerid)
{
    if(PlayerIsOn(playerid))
    {
        if(PlayerToPoint(1.0,playerid,1963.8254,1037.0972,992.4745) || PlayerToPoint(1.0,playerid,1961.2341,1042.9020,992.4688) || PlayerToPoint(1.0,playerid,1956.9388,1047.3190,992.4688) || PlayerToPoint(1.0,playerid,1963.8536,998.6488,992.4688))
        {
            return 1;
        }
        if(PlayerToPoint(1.0,playerid,1961.3259,992.5931,992.4688) || PlayerToPoint(1.0,playerid,1957.0258,988.2960,992.4688))
        {
            return 1;
        }
        if(PlayerToPoint(1.0,playerid,1132.8973,-1.6591,1000.6797) || PlayerToPoint(1.0,playerid,1134.8223,-3.8678,1000.6797) || PlayerToPoint(1.0,playerid,1134.8613,0.6172,1000.6797) || PlayerToPoint(1.0,playerid,1127.9530,3.0071,1000.6797) || PlayerToPoint(1.0,playerid,1126.9512,3.0061,1000.6797) || PlayerToPoint(1.0,playerid,1125.8229,2.9542,1000.6797) || PlayerToPoint(1.0,playerid,1124.9644,3.0069,1000.6797))
        {
            return 1;
        }
    }
    return 0;
}

public IsAtATM(playerid)
{
    if(PlayerIsOn(playerid))
    {
        for(new i = 0; i < sizeof(ATMInfo); i++)
        {
            if(PlayerToPoint(1.0,playerid,ATMInfo[i][atmPosX],ATMInfo[i][atmPosY],ATMInfo[i][atmPosZ]))
            {
                return 1;
            }
        }
    }
    return 0;
}

public IsAtFishPlace(playerid)
{
    if(PlayerIsOn(playerid))
    {
        if(PlayerToPoint(15.0,playerid,2103.3625,-103.1446,2.2576)) return 1;
    }
    return 0;
}


//=========================Destroying vehicles and recreating them from MySQL=========================//
public RecreateCityVehicle(vehicle)
{
    if(CityVehicles[vehicle][vCarOn])
    {
        DestoryCar(CityVehicles[vehicle][vVehicle]);
        CityVehicles[vehicle][vVehicle] = CreateVehicle(CityVehicles[vehicle][vModel], CityVehicles[vehicle][vPosX], CityVehicles[vehicle][vPosY], CityVehicles[vehicle][vPosZ], CityVehicles[vehicle][vPosA], CityVehicles[vehicle][vColor1], CityVehicles[vehicle][vColor2], -1);
        SetVehicleNumberPlate(CityVehicles[vehicle][vVehicle], CityVehicles[vehicle][vPlate]);
    }
    return 1;
}
//=========================Destroying vehicles and recreating them from MySQL=========================//

//=========================Vehicles Checking from MySQL=========================//
public IsATaxiCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == TAXI_CAR && CityVehicles[vehicle][vCarOn])
        return true;
    if(GetVehicleModel(vehicle) == 420 || GetVehicleModel(vehicle) == 438)
        return true;
    return false;
}

public IsARentCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == RENT_VEHICLE && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsARentBike(vehicle)
{
    if(CityVehicles[vehicle][vType] == RENT_BIKE && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsADMVCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == DMV_VEHICLE && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsADMVHeli(vehicle)
{
    if(CityVehicles[vehicle][vType] == DMV_HELICOPTER && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsACopCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == POLICE_CAR && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsACopTowTruck(vehicle)
{
    if(CityVehicles[vehicle][vType] == POLICE_TOWTRUCK && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsAFDCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == LSFD_CAR && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

forward IsAGOVCar(vehicle);
public IsAGOVCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == GOV_CAR && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

forward IsANewsCar(vehicle);
public IsANewsCar(vehicle)
{
    if(CityVehicles[vehicle][vType] == NEWS_CAR && CityVehicles[vehicle][vCarOn])
        return true;
    return false;
}

public IsATowTruck(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 525)
    {
        return 1;
    }
    return 0;
}

public IsAPlane(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
       model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
       model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )
    {
        return 1;
    }
    return 0;
}

public IsAHelicopter(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 548 || model == 425 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
    {
        return 1;
    }
    return 0;
}

public IsATruckJob(vehicle)
{
    if(CityVehicles[vehicle][vType] == TRUCKER_CAR && CityVehicles[vehicle][vCarOn])
    {
        return 1;
    }
    return 0;
}

public IsATruckOne(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 422 || model == 543 || model == 554)
    {
        return 1;
    }
    return 0;
}

public IsATruckTwo(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 609 || model == 498)
    {
        return 1;
    }
    return 0;
}

public IsATruckThree(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 456)
    {
        return 1;
    }
    return 0;
}

public IsATruckFour(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 403 || model == 515)
    {
        return 1;
    }
    return 0;
}

public IsATrailer(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 584)
    {
        return 1;
    }
    return 0;
}

public IsATaxi(vehicle)
{
    new model = GetVehicleModel(vehicle);
    if(model == 420 || model == 438)
    {
        return 1;
    }
    return 0;
}

public IsADMVTruck(vehicle)
{
    if(GetVehicleModel(vehicle) == 456) return 1;
    else return 0;
}

forward IsBike(vehicleid);
public IsBike(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
    if(model == 481 || model == 509 || model == 510) return 1;
    else return 0;
}

public IsABiker(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
    if(model == 522 || model == 521 || model == 461 || model == 463 || model == 581 || model == 448 || model == 586 || model == 523 || model == 468 || model == 471 || model == 462)
    {
        return 1;
    }
    return 0;
}

public IsABoat(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
    if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
    {
        return 1;
    }
    return 0;
}

/*public IsADonateCar(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
    for(new i = 0; i < sizeof(DonateCars); i++)
        if(DonateCars[i][dCarModel] == model)
            return true;
    return false;
}*/

public IsADonateCar(vehicleid)
{
/*  new model = GetVehicleModel(vehicleid);
    for(new i = 0; i < sizeof(DonateCars); i++)
        if(DonateCars[i][dCarModel] == model)
            return true;*/
    return false;
}

public IsABronzeCar(model)
{
    if(model == 411 || model == 481 || model == 510 || model == 451)
    {
        return 1;
    }
    return 0;
}

public IsASilverCar(model)
{
    if(model == 411 || model == 481 || model == 510 || model == 451)
    {
        return 1;
    }
    return 0;
}

public IsAGoldCar(model)
{
    if(model == 411 || model == 481 || model == 510 || model == 451)
    {
        return 1;
    }
    return 0;
}

forward IsADiamondCar(model);
public IsADiamondCar(model)
{
    if(model == 411 || model == 481 || model == 510 || model == 451)
    {
        return 1;
    }
    return 0;
}


public IsABoatModel(model)
{
    if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
    {
        return 1;
    }
    return 0;
}

public IsAPlaneModel(model)
{
    if(model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
       model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
       model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )
    {
        return 1;
    }
    return 0;
}

//=========================Vehicles Checking from MySQL=========================//
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == skinlist)
    {
        if(response)
        {
            if(GetIntVar(playerid, "RegisterPart") != 0)
            {
                SetSkin(playerid, modelid);
                SetIntVar(playerid, "RegisterPart", 7);
                SCM(playerid, COLOR_YELLOWG, "Vei fi spawnat in cateva momente.");
                SetIntVar(playerid, "JustDoneRegister", 1);
                RemoveVar(playerid, "RegisterPart");
                SetPlayerSpawn(playerid);
            } else {
                SetSkin(playerid,modelid);
            }
        }
        else if(GetIntVar(playerid, "RegisterPart") != 0)
        {
            ShowSkinMenu(playerid);
            SCM(playerid, -1, "Nu poti anula acest meniu !");
        }
        else return SCM(playerid, 0xFF0000FF, "Ai anulat selectia skinu-ului.");
        return 1;
    }
    if(listid == pskinlist)
    {
        if(response)
        {
            if(GetIntVar(playerid, "RegisterPart") != 0)
            {
                SetSkin(playerid, modelid);
                SetIntVar(playerid, "RegisterPart", 7);
                SCM(playerid, COLOR_YELLOWG, "Vei fi spawnat in cateva momente.");
                SetIntVar(playerid, "JustDoneRegister", 1);
                RemoveVar(playerid, "RegisterPart");
                SetPlayerSpawn(playerid);
            } else {
                SetSkin(playerid,modelid);
            }
        }
        else if(GetIntVar(playerid, "RegisterPart") != 0)
        {
            ShowPSkinMenu(playerid);
            SCM(playerid, -1, "Nu poti anula acest meniu !");
        }
        else return SCM(playerid, 0xFF0000FF, "Ai anulat selectia skinu-ului.");
        return 1;
    }
    if(listid == vehiclelist)
    {
        if(response)
        {
            new Float:cPos[4];
            GetPlayerPos(playerid, cPos[0], cPos[1], cPos[2]);
            GetPlayerFacingAngle(playerid, cPos[3]);
            SetFloatVar(playerid, "cPosX", cPos[0]);
            SetFloatVar(playerid, "cPosY", cPos[1]);
            SetFloatVar(playerid, "cPosZ", cPos[2]);
            SetFloatVar(playerid, "cPosA", cPos[3]);
            SetIntVar(playerid, "cModel", modelid);
            ShowDialog(playerid, Show:<SpawnAdminVehicle>, DIALOG_STYLE_INPUT, ""EMBED_RED"Selecteaza culoarea vehicului."EMBED_WHITE"", ""EMBED_WHITE"Culoarea trebuie sa fie intre (0-255)!", "Spawn", "Exit");
            return 1;
        }
        else return SCM(playerid, 0xFF0000FF, "Ai anulat selectarea vehicului.");
    }
    if(listid == weaponlist)
    {
        if(response)
        {
            switch(modelid)
            {
                case 331: SetIntVar(playerid, "SelectingWeapon", 1); // Brass Knuckles
                case 333: SetIntVar(playerid, "SelectingWeapon", 2); // Golf Club
                case 334: SetIntVar(playerid, "SelectingWeapon", 3); // Nightstick
                case 335: SetIntVar(playerid, "SelectingWeapon", 4); // Knife
                case 336: SetIntVar(playerid, "SelectingWeapon", 5); // Baseball Bat
                case 337: SetIntVar(playerid, "SelectingWeapon", 6); // Shovel
                case 338: SetIntVar(playerid, "SelectingWeapon", 7); // Pool Cue
                case 339: SetIntVar(playerid, "SelectingWeapon", 8); // Katana
                case 341: SetIntVar(playerid, "SelectingWeapon", 9); // Chainsaw
                case 321: SetIntVar(playerid, "SelectingWeapon", 10); // Double-ended Dildo
                case 325: SetIntVar(playerid, "SelectingWeapon", 14); // Flowers
                case 326: SetIntVar(playerid, "SelectingWeapon", 15); // Cane
                case 342: SetIntVar(playerid, "SelectingWeapon", 16); // Grenade
                case 343: SetIntVar(playerid, "SelectingWeapon", 17); // Tear Gas
                case 344: SetIntVar(playerid, "SelectingWeapon", 18); // Molotov Cocktail
                case 346: SetIntVar(playerid, "SelectingWeapon", 22); // 9mm
                case 347: SetIntVar(playerid, "SelectingWeapon", 23); // Silenced 9mm
                case 348: SetIntVar(playerid, "SelectingWeapon", 24); // Desert Eagle
                case 349: SetIntVar(playerid, "SelectingWeapon", 25); // Shotgun
                case 350: SetIntVar(playerid, "SelectingWeapon", 26); // Sawnoff
                case 351: SetIntVar(playerid, "SelectingWeapon", 27); // Combat Shotgun
                case 352: SetIntVar(playerid, "SelectingWeapon", 28); // Micro SMG/Uzi
                case 353: SetIntVar(playerid, "SelectingWeapon", 29); // MP5
                case 355: SetIntVar(playerid, "SelectingWeapon", 30); // AK-47
                case 356: SetIntVar(playerid, "SelectingWeapon", 31); // M4
                case 372: SetIntVar(playerid, "SelectingWeapon", 32); // Tec-9
                case 357: SetIntVar(playerid, "SelectingWeapon", 33); // Country Rifle
                case 358: SetIntVar(playerid, "SelectingWeapon", 34); // Sniper Rifle
                case 359: SetIntVar(playerid, "SelectingWeapon", 35); // RPG
                case 360: SetIntVar(playerid, "SelectingWeapon", 36); // HS Rocket
                case 361: SetIntVar(playerid, "SelectingWeapon", 37); // Flamethrower
                case 362: SetIntVar(playerid, "SelectingWeapon", 38); // Minigun
                case 363: SetIntVar(playerid, "SelectingWeapon", 39);
                case 365: SetIntVar(playerid, "SelectingWeapon", 41); // Spraycan
                case 366: SetIntVar(playerid, "SelectingWeapon", 42); // Fire Extinguisher
            }
            ShowDialog(playerid, Show:<SpawnAdminWeapon>, DIALOG_STYLE_INPUT, ""EMBED_RED"Introdu canitatea de munitie."EMBED_WHITE"", ""EMBED_WHITE"Cata munitie doresti?", "GetGun", "Exit");
        }
        else return SCM(playerid, 0xFF0000FF, "Ai anulat selectarea armei.");
        return 1;
    }
    if(listid == buyable)
    {
        if(response)
        {
            new price = GetVehiclePrice(modelid);
            if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return SCM(playerid, COLOR_GRAY, "Despawneaza masina pe care o ai spawnata.");
            if(IsADonateCar(modelid))
            {
                if(IsABronzeCar(modelid))
                {
                    if(PlayerInfo[playerid][pDonateRank] < 1) return SCM(playerid, COLOR_GREY, "Trebuie sa fii donator Bronze/Silver/Gold/Diamond pentru a cumpara aceasta masina.");
                }
                if(IsASilverCar(modelid))
                {
                    if(PlayerInfo[playerid][pDonateRank] < 2) return SCM(playerid, COLOR_GREY, "Trebuie sa fii donator Silver/Gold/Diamond pentru a cumpara aceasta masina.");
                }
                if(IsAGoldCar(modelid))
                {
                    if(PlayerInfo[playerid][pDonateRank] < 3) return SCM(playerid, COLOR_GREY, "Trebuie sa fii donator Gold/Diamond pentru a cumpara aceasta masina.");
                }
                if(IsADiamondCar(modelid))
                {
                    if(PlayerInfo[playerid][pDonateRank] < 4) return SCM(playerid, COLOR_GREY, "Trebuie sa fii donator Diamond pentru a cumpara aceasta masina.");
                }
            }
            CarModel2[playerid] = modelid;
//            format(msg, sizeof(msg), "{AFAFAF}%s costa {006600}$%d{AFAFAF}. Asigurate ca ai destui bani si apasa pe '{B1C8FB}Cumpara{AFAFAF}'.", VehicleNames[modelid-400], price);
            format(msg, sizeof(msg), "{FFFFFF}Nume Vehicul: {FF0000}%s {FFFFFF}(MODEL: %d)\nPret: {006600}%d$", VehicleNames[modelid-400], modelid, price);
            ShowDialog(playerid, Show:<ConfirmDS>, DIALOG_STYLE_MSGBOX, "{FFFFFF}Confirma", msg, "{FFFFFF}Cumpara", "{FFFFFF}Anuleaza");
        }
        else return SCM(playerid, COLOR_INFO, "Ai anulat selectarea masinii.");
    }
    return 1;
}



/* Encodes */
encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
encode_doors(b1, b2, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return b1 | (b2 << 8) | (driver_door << 16) | (passenger_door << 24);
}
encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
/* Encodes */

forward AntiAFK();
public AntiAFK()
{
    foreach(new i : Player)
    {
        if(isAFK{i})
        {
            AFKTime[i]++;
            if(AFKTime[i] >= 15)
            {
                KickEx(i, "[ANTI-AFK] Ai primit kick deoarece ai stat AFK mai mult de 15 minute.");
            }
        }
    }
}

forward TruckerTimer();
public TruckerTimer()
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i=0;i<=MaxPlayers;i++)
    {
        new vehicle = GetPlayerVehicleID(i);
        //Trucking checkpoints
        if(GetIntVar(i, "HideTrucker") > 0)
        {
            if(GetIntVar(i, "HideTrucker") == 1)
            {
                HideTruckText(i);
                RemoveVar(i, "HideTrucker");
            }
            else
            {
                UpdateIntVar(i, "HideTrucker", -1);
            }
        }
        if(Trucking{i} && IsDriver(i) && IsATruckFour(vehicle))
        {
            if(GetTruckStage(i) == 6)
            {
                if(IsTrailerAttachedToVehicle(vehicle))
                {
                    TruckTrailer[i] = GetVehicleTrailer(vehicle);
                    SetRandomDestination(i);
                }
            }
            else if(GetTruckStage(i) > 0)
            {
                if(!IsTrailerAttachedToVehicle(vehicle))
                {
                    PlayerTextDrawSetString(i, TruckerDraw[i], "~r~CUPLEAZA REMORCA LA CAMION PENTRU A CONTINUA.");
                }
                else if(IsTrailerAttachedToVehicle(vehicle))
                {
                    if(GetTruckStage(i) == 2 && !IsPlayerInCheckpoint(i) && !PlayerToPoint(9.0, i, GatherX[i], GatherY[i], GatherZ[i]) && GetIntVar(i, "PlayerCP") == 26 || GetTruckStage(i) == 3 && !PlayerToPoint(9.0, i, DropOffX[i], DropOffY[i], DropOffZ[i]) && !IsPlayerInCheckpoint(i) && GetIntVar(i, "PlayerCP") == 27 && DroppingOff{i})
                    {
                        PlayerTextDrawSetString(i, TruckerDraw[i], "~y~INTOARCE-TE LA CHECKPOINT PENTRU A CONTINUA.");
                    }
                    else
                    {
                        SetTruckerText(i);
                    }
                }
            }
        }
        if(Trucking{i} && PlayerToPoint(9.0, i, GatherX[i], GatherY[i], GatherZ[i]) && IsPlayerInCheckpoint(i) && GetIntVar(i, "PlayerCP") == 26)
        {
            if(LoadingTruck{i} > 0 && IsDriver(i))
            {
                if(IsATruckFour(vehicle) && !IsTrailerAttachedToVehicle(vehicle))
                {
                    //Should not do anything.
                }
                else if(LoadingTruck{i} == 1)
                {
                    SetRandomDestination2(i);
                    LoadingTruck{i} = 0;
                }
                else
                {
                    if(IsATruckOne(vehicle))
                    {
                        TruckComps[vehicle] += 10;
                    }
                    else if(IsATruckTwo(vehicle))
                    {
                        TruckComps[vehicle] += 20;
                    }
                    else if(IsATruckThree(vehicle))
                    {
                        TruckComps[vehicle] += 30;
                    }
                    else if(IsATruckFour(vehicle))
                    {
                        TruckComps[vehicle] += 40;
                    }
                    TruckingMoney[i] += 5;
                    SetTruckerText(i);
                    LoadingTruck{i}--;
                    if(TruckComps[vehicle] >= GetMaxTruckComps(vehicle))
                    {
                        LoadingTruck{i} = 0;
                        SetTruckStage(i, 3);
                        SetCheckPoint(i, TRUCKDROP, DropOffX[i], DropOffY[i], DropOffZ[i], 9.0);
                    }
                }
            }
        }
        if(Trucking{i} && PlayerToPoint(9.0, i, DropOffX[i], DropOffY[i], DropOffZ[i]) && IsPlayerInCheckpoint(i) && GetIntVar(i, "PlayerCP") == 27 && DroppingOff{i})
        {
            if(TruckComps[vehicle] > 0 && IsDriver(i))
            {
                if(IsATruckFour(vehicle) && !IsTrailerAttachedToVehicle(vehicle))
                {
                    //Should not do anything.
                }
                else if(TruckComps[vehicle] >= 200)
                {
                    TruckComps[vehicle] -= randomEx(100, 200);
                    SetTruckerText(i);
                }
                else if(TruckComps[vehicle] < 200)
                {
                    if(!VehicleInfo[vehicle][carOwned])
                    {
                        SetTruckStage(i, 5);
                        SetTruckerText(i);
                        LoadingTruck{i} = 0;
                        DroppingOff{i} = false;
                        SetCheckPoint(i, TRUCKRETURN, CityVehicles[vehicle][vPosX], CityVehicles[vehicle][vPosY], CityVehicles[vehicle][vPosZ], 9.0);
                    }
                    else
                    {
                        DroppingOff{i} = false;
                        LoadingTruck{i} = 0;
                        Trucking{i} = false;
                        TruckVehicle[i] = INVALID_VEHICLE_ID;
                        TruckComps[GetPlayerVehicleID(i)] = 0;
                        SetTruckStage(i, 0);
                        PlayerInfo[i][pPayCheckMade] += TruckingMoney[i];
                        format(msg, sizeof(msg), "~g~MISIUNE COMPLETA!");
                        JobMessage(i, msg, 6);
                        SCMEx(i, COLOR_GREEN, "Felicitari, ai terminat tura. Banii ii vei primi la salar (%d$).", TruckingMoney[i]);
                        TruckingMoney[i] = 0;
                        if(TruckTrailer[i] != INVALID_VEHICLE_ID)
                        {
                            DetachTrailerFromVehicle(GetPlayerVehicleID(i));
                            RespawnVehicle(TruckTrailer[i]);
                            TruckTrailer[i] = INVALID_VEHICLE_ID;
                        }
                        RemoveVar(i, "TruckGather");
                        RemoveVar(i, "TruckDrop");
                        RemoveVar(i, "TruckDest");
                        RemoveCheckPoint(i);
                    }
                }
            }
        }
    }
}

forward CheatTimer();
public CheatTimer()
{
	foreach(new i : Player)
	{
		if(cheatImmune[i] == 1)
		{
			cheatImmune[i] = 0;
			//printf("CheatTimer chemat pentru %s, valoare %d", GetName(i), cheatImmune[i]);
		}	
	}
    for(new i = 1; i <=GetVehiclePoolSize(); i++)
    {
        if(IsATaxi(i))
        {
            new driver = GetVehicleDriver(i);
            if(driver != INVALID_PLAYER_ID)
            {
                if(TaxiDuty{driver} && TaxiStart{driver} && CountVehiclePlayers(i) > 0)
                {
                    format(msg, sizeof(msg), "~y~PRET TAXI: $%d", TaxiMade[driver]);
                    GameTextForPlayer(driver, msg, 5000, 6);
                    new MaxPlayers = GetPlayerPoolSize();
                    for(new p = 0; p <= MaxPlayers; p++)
                    {
                        if(PlayerIsOn(p) && PlayerInCar(p) && GetPlayerState(p) != PLAYER_STATE_DRIVER && GetPlayerVehicleID(p) == GetPlayerVehicleID(driver))
                        {
                            format(msg, sizeof(msg), "~y~PRET TAXI: $%d", TaxiMoney[p]);
                            GameTextForPlayer(p, msg, 5000, 6);
                            TaxiMoney[p] += TaxiFare{driver};
                            TaxiMade[driver] += TaxiFare{driver};
                        }
                    }
                }
            }
        }
    }
	return 1;
}

forward SpeedTimer();
public SpeedTimer()
{
    foreach(new i : Player)
    {
        if(PlayerInCar(i))
        {
            new vehicle = GetPlayerVehicleID(i);
            new kmh = GetVehicleSpeed(vehicle);
            format(msg, 64, "~b~km/h: ~h~~g~%d", kmh);
            PlayerTextDrawSetString(i, SpeedText[i], msg);
        }   
    }
    return 1;
}

public CheckStatus()
{
    new string[128], jobtimer;
    TollUpdate();
    for(new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
    {
        new Float:health;
        GetVehicleHealth(i, health);
        if(health < 270)
        {
            SCM(GetVehicleDriver(i), COLOR_GREY, "Motorul vehiculului s-a oprit datorita avariilor.");
            VehicleEngine(i, false);
            SetVehicleHealth(i, 300);
        }
		//Anti Speed-hack
		if(GetVehicleSpeed(i) >= 300)
		{
			format(msg, sizeof(msg), "Vehiculul cu ID: %d merge cu viteza de %d KM/H. Verifica-l. (/speccar %d)", i, GetVehicleSpeed(i), i);
			AMSG(COLOR_LIGHTRED, msg);
		}
		//Anti Speed-Hack
    }
    foreach(new i : Player)
    {
        //antihack
        if(!CheckAdmin(i, 1) && !CopDuty{i} && !MedicDuty{i} && !GOVDuty{i} && !NewsDuty{i})
        {
			if(cheatImmune[i] == 1)
			{
				#if defined debugOn
					printf("cheatImmune chemat pentru %s, valoare %d", GetName(i), cheatImmune[i]);
				#endif
				//cheatImmune[i] = 0;
			}
			else
			{
				if(GetPlayerWeapon(i) > 0 && Weapons[i][GetPlayerWeapon(i)] == 0)
				{
					cheatID[i] = 1;
					AntiCheatBan(i);
				}
			}
			//}
        }
		if(!CheckAdmin(i, 1))
		{
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK)
			{
				cheatID[i] = 4;
		        AntiCheatBan(i);
			}
		}
        if(!IsPlayerInWater(i))
		{
			switch(GetPlayerAnimationIndex(i))
			{
				case 1543,1538,1539:
				{
					if(!CheckAdmin(i, 1))
					{
						cheatID[i] = 2;
						AntiCheatBan(i);
					}
				}
			}
		}
        //antihack
        if(OnCCTV{i}) { UpdateCCTV_TD(i); }
        //jobmessage
        if(GetPVarInt(i, "JobTimer") > 0)
        {
            jobtimer = GetPVarInt(i, "JobTimer");
            jobtimer--;
            SetIntVar(i, "JobTimer", jobtimer);

        }
        if(GetPVarInt(i, "JobTimer") == 0) { PlayerTextDrawHide(i, TruckerDraw[i]); }
        //jobmessage
        if(PlayerInfo[i][pDied] == 1) adeadtimer[i] ++;
        new vehicle = GetPlayerVehicleID(i);
        //Checking armour
        if(PlayerInfo[i][pArmour] > 0.0 && PlayerInfo[i][pHasArmour] == 1)
        {
            if(GetArmour(i) == 0.0)
            {
                PlayerInfo[i][pHasArmour] = 0;
                PlayerInfo[i][pArmour] = 0.0;
            }
            else { PlayerInfo[i][pArmour] = GetArmour(i); }
        }
        //Checking armour
        //Let's find some faggots hackers
        new money = GetPlayerMoney(i);
        if(money > PlayerInfo[i][pCash])
        {
            SetCash(i, PlayerInfo[i][pCash]);
        }
        //Let's find some faggots hackers
        //Vehicle Fuel & Speed
        if(PlayerInCar(i))
        {
            if(IsDriver(i))
            {
                for(new a = 0; a < MAX_OBJECTS; a++)
                {
                    if(SpikeInfo[a][sCreated] == 1)
                    {
                        if(IsPlayerInRangeOfPoint(i, 3.5, SpikeInfo[a][sX], SpikeInfo[a][sY], SpikeInfo[a][sZ]))
                        {
                            new panels, doorsd, lightsf, tires;
                            new carid = GetPlayerVehicleID(i);
                            GetVehicleDamageStatus(carid, panels, doorsd, lightsf, tires);
                            tires = encode_tires(1, 1, 1, 1);
                            UpdateVehicleDamageStatus(carid, panels, doorsd, lightsf, tires);
                        }
                    }
                }
            }
            /*new kmh = GetVehicleSpeed(vehicle);
            format(string, 64, "~b~km/h: ~h~~g~%d", kmh);
            PlayerTextDrawSetString(i, SpeedText[i], string);*/
            format(string, 64, "~b~Fuel: ~h~~g~%d", Gas{vehicle});
            if(!IsBike(vehicle)) PlayerTextDrawSetString(i, FuelText[i], string);
        }
        //Vehicle Fuel & Speed

        //Cellphone talking air time
        if(GetIntVar(i, "OnCall") == 1)
        {
            new caller = GetIntVar(i, "CallWith");
            if(GetIntVar(caller, "OnCall") == 1 && GetIntVar(caller, "CallWith") == i)
            {
                UpdateIntVar(i, "CallTime", 1);
                UpdateIntVar(caller, "CallTime", 1);
            }
        }
        //Cellphone talking air time

        //ERROR Message refresher
        for(new a = 0; a < 3; a ++)
        {
            if(ErrorInfo[i][a][eExpire] > 1)
            {
                ErrorInfo[i][a][eExpire]--;
                if(ErrorInfo[i][a][eExpire] == 1)
                {
                    ErrorInfo[i][a][eExpire] = 0;
                    RefreshErrorMsg(i);
                }
            }
        }
        //ERROR Message refresher


        //Checking jail time
        if(HospitalWait{i} > 1)
        {
            HospitalWait{i}--;
            format(msg,sizeof(msg),"~b~timp ramas de recuperare: ~w~%d secunde",HospitalWait{i});
            TextDrawSetString(hospital_timeleft[i],msg);
            ShowTextDraw(i,hospital_timeleft[i]);
        }
        else if(HospitalWait{i} == 1)
        {
            StopPlayerSpec(i);
            SetCameraBehindPlayer(i);
            SetPlayerHealth(i, 50.0);
            StopPlayerAnims(i);
            SCM(i,COLOR_LIGHTRED,"Ai fost externat din spital.");
            RemoveVar(i, "JustAcceptedDeath");
            HospitalWait{i} = 0;
            PutPlayer(i, 1176.9000, -1323.8225, 14.0441);
            SetPlayerFacingAngle(i, 270.0);
            SetInterior(i, 0);
            UnFreezePlayer(i);
            HideTextDraw(i,hospital_timeleft[i]);
        }
        //Checking jail time

        //Info TextDraw Exire
        if(infotxt_expire{i} > 0)
        {
            infotxt_expire{i}--;
            if(infotxt_expire{i} == 1)
            {
                TextDrawHideForPlayer(i, infotxt[i]);
                infotxt_expire{i} = 0;
            }
        }
        //Info TextDraw Exire

        //Hotwiring vehicle engine
        if(JackingEngine[i] != 0)
        {
            if(JackingEngine[i] == 2 || JackingEngine[i] == 1)
            {
                JackingEngine[i] = 0;
                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Se porneste motorul....");
                GameTextForPlayer(i, string, 999, 3);
                ToggleVehicleEngine(vehicle, i);
                UnFreezePlayer(i);
            }
            else
            {
                JackingEngine[i]--;
                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Se porneste motorul... ~g~%d secunde", JackingEngine[i]);
                GameTextForPlayer(i, string, 1000, 3);
            }
        }
        //Hotwiring vehicle engine

        //Hotwiring vehicle lock
        if(JackingLock[i] != 0)
        {
            if(JackingLock[i] == 2 || JackingLock[i] == 1)
            {
                JackingLock[i] = 0;
                vLocked[DoorJacking[i]] = 0;
                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Se sparge incuietoarea...");
                GameTextForPlayer(i, string, 1600, 3);
                PlaySound(i, 1145);
                ToggleVehicleLock(DoorJacking[i], false);
                ToggleVehicleLockForPlayer(i, DoorJacking[i], false);
                DoorJacking[i] = 0;
                UnFreezePlayer(i);
            }
            else
            {
                JackingLock[i]--;
                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Se sparge incuietoarea... ~g~%d secunde",JackingLock[i]);
                GameTextForPlayer(i, string, 1600, 3);
            }
        }
        //Hotwiring vehicle lock
        //Checking jail time
        if(PlayerInfo[i][pJailTime] > 1 && PlayerInfo[i][pJailed] == 1)
        {
            PlayerInfo[i][pJailTime]--;
            format(msg,sizeof(msg),"~p~timp ramas: ~w~%d secunde",PlayerInfo[i][pJailTime]);
            PlayerTextDrawSetString(i, jail_timeleft[i],msg);
            PlayerTextDrawShow(i,jail_timeleft[i]);
        }
        else if(PlayerInfo[i][pJailTime] <= 1 && PlayerInfo[i][pJailTime] > 0)
        {

            PlayerInfo[i][pJailTime] = 0;
            PlayerInfo[i][pJailed] = 0;
            SetPlayerPos(i, 1553.3107, 1675.8288, 16.1953);
            SetInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            GameTextForPlayer(i,"~g~Ai fost eliberat din admin-jail.",5000,1);
            PlayerTextDrawHide(i,jail_timeleft[i]);
        }

        //Checking jail time 2
        if(PlayerInfo[i][pJailTime2] > 1)
        {
            if(PlayerInfo[i][pJailed] == 2 || PlayerInfo[i][pJailed] == 3)
            {
                PlayerInfo[i][pJailTime2]--;
            }
        }
        else if(PlayerInfo[i][pJailTime2] > 0 && PlayerInfo[i][pJailTime2] < 2)
        {
            if(PlayerInfo[i][pJailed] == 2 || PlayerInfo[i][pJailed] == 3)
            {
                PlayerInfo[i][pJailTime2] = 0;
                PlayerInfo[i][pJailed] = 0;
                SetPlayerPos(i, 1553.3107, 1675.8288, 16.1953);
                SetInterior(i, 0);
                SetPlayerVirtualWorld(i, 0);
                GameTextForPlayer(i,"~g~Libertate~n~~w~Incearca sa fi un cetatean mai bun",5000,1);
            }
        }
    }
    return 1;
}

forward ResetOfferSent(playerid);
public ResetOfferSent(playerid)
{
    OfferSent[playerid] = 0;
    return 1;
}

public CheckGas()
{
    for(new i = 1; i <=GetVehiclePoolSize(); i++)
    {
        if(IsBike(i) || IsADMVCar(i) || IsADMVHeli(i) || IsARentCar(i) || IsARentBike(i) || !engineOn{i}) continue;
        Gas{i}--;
        if(Gas{i} == 0)
        {
            VehicleEngine(i, false);
            GameTextForPlayer(GetDriver(i), "fara combustibil", 5000, 3);
        }
    }
    return 1;
}

function PayDay(id)
{
    if(PlayerIsOn(id))
    {

        //To display old bank balance
        new oldbank = PlayerInfo[id][pBank];
        new oldsavings = PlayerInfo[id][pSavings];
        new house = PlayerInfo[id][pHouseKey];
        new checks = PlayerInfo[id][pPayCheckMade];
        //To display old bank balance

        //Checking job ranks
        if(PlayerInfo[id][pJob] == TRUCKER)
        {
            PlayerInfo[id][pCareer]++;
            new rank = PlayerInfo[id][pJobRank];
            switch(rank)
            {
                case TRUCKER_RANK1:
                {
                    if(PlayerInfo[id][pCareer] == TRUCKER_TORANK_2)
                    {
                        PlayerInfo[id][pJobRank] = TRUCKER_RANK2;
                        format(msg, sizeof(msg), "~w~FELICITARI,ACUM ESTI ~g~%s.~n~~w~PAYCHECK-UL TAU MAXIM ESTE ~g~$%d.~n~~w~AI PRIMIT UN BONUS DE $100", GetJobRank(id), TRUCKER_2_PAYCHECK);
                        JobMessage(id, msg, 6);
                        checks += 100;
                    }
                }
                case TRUCKER_RANK2:
                {
                    if(PlayerInfo[id][pCareer] == TRUCKER_TORANK_3)
                    {
                        PlayerInfo[id][pJobRank] = TRUCKER_RANK3;
                        format(msg, sizeof(msg), "~w~FELICITARI,ACUM ESTI ~g~%s.~n~~w~PAYCHECK-UL TAU MAXIM ESTE ~g~$%d.~n~~w~AI PRIMIT UN BONUS DE $500", GetJobRank(id), TRUCKER_3_PAYCHECK);
                        JobMessage(id, msg, 6);
                        checks += 500;
                    }
                }
                case TRUCKER_RANK3:
                {
                    if(PlayerInfo[id][pCareer] == TRUCKER_TORANK_4)
                    {
                        PlayerInfo[id][pJobRank] = TRUCKER_RANK4;
                        format(msg, sizeof(msg), "~w~FELICITARI,ACUM ESTI ~g~%s.~n~~w~PAYCHECK-UL TAU MAXIM ESTE ~g~$%d.~n~~w~AI PRIMIT UN BONUS DE $1000", GetJobRank(id), TRUCKER_4_PAYCHECK);
                        JobMessage(id, msg, 6);
                        checks += 1000;
                    }
                }
            }
        }
        //Checking job ranks

        //Adding random paychecks & by level.
        if(PlayerInfo[id][pLevel] == 1) { checks += 250; }
        if(PlayerInfo[id][pLevel] == 2) { checks += 150; }
        checks += randomEx(25,50) + PlayerInfo[id][pLevel]*(100);
        if(PlayerInfo[id][pFaction] != 0)
        {
            if(PlayerInfo[id][pFaction] == LSPD)
            {
                switch(PlayerInfo[id][pRank])
                {
                    case 1,2,3: checks+= 500;
                    case 4,5,6: checks+= 650;
                    case 7,8,9: checks+= 950;
                    case 10,11: checks+= 1200;
                    case 12,13: checks+= 1350;
                    case 14,15: checks+= 1600;
                    case 16,17: checks+= 1750;
                    case 18,19,20: checks+= 2000;
                }
            }
            if(PlayerInfo[id][pFaction] == LSFD)
            {
                switch(PlayerInfo[id][pRank])
                {
                    case 1,2: checks+= 400;
                    case 3,4,5: checks+= 800;
                    case 6,7,8: checks+= 1600;
                    case 9,10: checks+= 2000;
                }
            }
            if(PlayerInfo[id][pFaction] == GOV)
            {
                switch(PlayerInfo[id][pRank])
                {
                    case 1,2,3: checks+= 400;
                    case 4,5,6: checks+= 800;
                    case 7,8,9: checks+= 1600;
                    case 10: checks+= 2000;
                }
            }
            if(PlayerInfo[id][pFaction] == NEWS)
            {
                switch(PlayerInfo[id][pRank])
                {
                    case 1,2: checks+= 300;
                    case 3,4: checks+= 600;
                    case 5,6: checks+= 1200;
                }
            }
        }
        //Adding random paychecks & by level.

        PlayerInfo[id][pGarbage] = 0;
		SaveJobProgress(id);
       
        //Taking a tax from a player
        new TaxPay = randomEx(4,6) + ((oldbank / 2) / 6000);
        PlayerInfo[id][pBank] -= TaxPay;
        //Taking a tax from a player

        //Adding random paychecks & by level.
        new newsavings = (oldsavings * 1) / 100;
        //Adding random paychecks & by level.

        //Interest rate.
        new interestrate = 1;
        new interest = ((oldbank / 2) / 2000) * 2;
        PlayerInfo[id][pBank] += interest;
        //Interest rate.

        //House - Rent Bills & Electricity Bills.
        new rentbills;
        new ebill = ((oldbank / 100) / 110);
        //House - Rent Bills & Electricity Bills.

        SCM(id, COLOR_WHITE, "|___ EXTRAS DE CONT ___|");
        format(msg, sizeof(msg), "  Bilant: $%d", oldbank);
        SCM(id, COLOR_WHITE, msg);
        format(msg, sizeof(msg), "  Paycheck: $%d", checks);
        SCM(id, COLOR_WHITE, msg);
        format(msg, sizeof(msg), "  Rata Dobanzii: 0.%d  Dobanda: $%d", interestrate, interest);
        SCM(id, COLOR_WHITE, msg);
        if(PlayerInfo[id][pHouseKey] != -1 && strcmp(GetName(id), HouseInfo[PlayerInfo[id][pHouseKey]][hOwner], true) == 0)
        {
            PlayerInfo[id][pBank] -= ebill;
            format(msg, sizeof(msg), "  Factura curenta: $%d", ebill);
            SCM(id, COLOR_WHITE, msg);
        }
        else if(house != -1)
        {
            rentbills = HouseInfo[house][hRentprice];
            PlayerInfo[id][pBank] -= rentbills;
            format(msg, sizeof(msg), "  Chirie platita: $%d", rentbills);
            SCM(id, COLOR_WHITE, msg);
        }
        if(GetSavings(id) > 0)
        {
            if(GetSavings(id) < 5000000)
            {
                PlayerInfo[id][pSavings] += newsavings;
                format(msg, sizeof(msg), "  Dobanda obtinuta: $%d (1)", newsavings);
                SCM(id, COLOR_WHITE, msg);
                format(msg, sizeof(msg), "  Bilant Cont Economii nou: $%d.", oldsavings+newsavings);
                SCM(id, COLOR_WHITE, msg);
            }
            if(GetSavings(id) >= 5000000)
            {
                SetSavings(id, 5000000);
                format(msg, sizeof(msg), "  Bilant Cont Economii: $%d.", oldsavings);
                SCM(id, COLOR_WHITE, msg);
                SCM(id, COLOR_WHITE, "  Contul tau de economii a ajuns la limita.");
            }
        }
        format(msg, sizeof(msg), "  Taxe platite: $%d", TaxPay);
        SCM(id, COLOR_WHITE, msg);
        SCM(id, COLOR_WHITE, "|--------------------------------------|");
        format(msg, sizeof(msg), "  Bilant nou: $%d", PlayerInfo[id][pBank]);
        SCM(id, COLOR_WHITE, msg);
        format(msg, sizeof(msg), "~y~payday~n~~w~paycheck~n~~g~$%d",checks);
        GameTextForPlayer(id, msg, 5000, 1);
        SCM(id, COLOR_OOC, "HINT: Iti poti ridica salariul de la banca.");

        PlayerInfo[id][pPayDayTime] = 0;
        PlayerInfo[id][pPayCheckMoney] += checks;
        PlayerInfo[id][pExp]++;
        PlayerInfo[id][pPayCheckMade] = 0;
        PlayerInfo[id][pHours] += 1;

        //Checking if player has leveled up
        new nxtlevel = PlayerInfo[id][pLevel]+1;
        new expamount = nxtlevel*levelexp;
        if (PlayerInfo[id][pExp] >= expamount)
        {
            format(msg, sizeof(msg), "~g~LEVEL UP~n~~w~Acum esti level %d", nxtlevel);
            PlaySound(id, 1052);
            PlayerInfo[id][pLevel]++;
            PlayerInfo[id][pExp] = 0;
            SetPlayerScore(id, PlayerInfo[id][pLevel]);
            GameTextForPlayer(id, msg, 5000, 1);
        }
    }
    return 1;
}

forward BinTimer();
public BinTimer()
{
	ResetBins();
}

public OneMinuteTimer()
{
    //=============================================================================
    new string[64];
    new tmphour;
    new tmpminute;
    new tmpsecond;
    gettime(tmphour, tmpminute, tmpsecond);
    FixHour(tmphour);
    tmphour = shifthour;
    if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
    {
        // tmphour+=2; // WINTER
        format(string, sizeof(string), "SERVER: Acum este ora %d:00 ",tmphour);
        SCMALL(COLOR_WHITE,string);
        ghour = tmphour;
        // if(tmphour <= 12) SetWorldTime(tmphour-2); // WINTER
        // else if(tmphour > 12) SetWorldTime(tmphour+5); // WINTER
    }
    //=============================================================================
    foreach(new i : Player)
    {
        PlayerInfo[i][pPayDayTime]++;
        if(PlayerInfo[i][pPayDayTime] == 60) PayDay(i);
    }
    //=============================================================================
    for(new i = 0; i < MAX_PARK_METERS; i++)
    {
        if(ParkMeters[i][parkOn])
        {
            if(ParkMeters[i][parkMinutes] > 0)
            {
                ParkMeters[i][parkMinutes]--;
                format(string, sizeof(string), "{3333FF}%d minute", ParkMeters[i][parkMinutes]);
                UpdateDynamic3DTextLabelText(Text3D:ParkMeters[i][parkLabel], -1, string);
            }
        }
    }
    //=============================================================================
    for(new i = 0; i < MAX_PLANTS; i++)
    {
        if(CropsInfo[i][pPlanted])
        {
            new Float:x, Float:y, Float:z;
            CropsInfo[i][pGrowTime]++;
            if(CropsInfo[i][pGrowTime] == 20)
                CropsInfo[i][pMade] += randomEx(1, 3);
            if(CropsInfo[i][pGrowTime] == 40)
                CropsInfo[i][pMade] += randomEx(1, 3);
            if(CropsInfo[i][pGrowTime] == 60)
                CropsInfo[i][pMade] += randomEx(3, 5);
            if(CropsInfo[i][pGrowTime] == 80)
                CropsInfo[i][pMade] += randomEx(5, 7);
            if(CropsInfo[i][pGrowTime] == 100)
                CropsInfo[i][pMade] += randomEx(5, 8);
            if(CropsInfo[i][pGrowTime] == 120)
                CropsInfo[i][pMade] += randomEx(5, 9);
            GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
            if(CropsInfo[i][pGrowTime] == 20)
                SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.1);
            if(CropsInfo[i][pGrowTime] == 40)
                SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.1);
            if(CropsInfo[i][pGrowTime] == 60)
                SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.3);
            if(CropsInfo[i][pGrowTime] == 80)
                SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.3);
            if(CropsInfo[i][pGrowTime] == 100)
                SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.3);
            GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
            CropsInfo[i][pX] = x;
            CropsInfo[i][pY] = y;
            CropsInfo[i][pZ] = z;
            format(string, sizeof(string), ""EMBED_YELLOW"GENERAT: %d\nGENERAT: %d", CropsInfo[i][pGrowTime], CropsInfo[i][pMade]);
            UpdateDynamic3DTextLabelText(Text3D:CropsInfo[i][pLabel], -1, string);
            if(CropsInfo[i][pGrowTime] == 180)
            {
                DestroyCrop(i); //Destroy it due to wilting
            }
        }
    }
    //=============================================================================
    
}

public FixHour(hour)
{
    hour = timeshift+hour;
    if (hour < 0)
    {
        hour = hour+24;
    }
    else if (hour > 23)
    {
        hour = hour-24;
    }
    shifthour = hour;
    return 1;
}

public HangUpAnim(playerid)
{
    phoneAnim(playerid, 0);
    return 1;
}

public PlayRingSound(playerid)
{
    PlaySound(playerid, 1138);
}

public OnPlayerSellHouse(house)
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pHouseKey] == house)
        {
            ServerMSG(i, "Casa unde aveai chirie a fost vanduta,acum te vei spawna la Spawn Civil");
            PlayerInfo[i][pHouseKey] = -1;
        }
    }
    return 1;
}

public DeadAnim(playerid)
{
    OnAnim{playerid} = true;
    ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(GetIntVar(playerid, "EditAtttachedWep") == 1)
    {
        if(response)
        {
            RemoveVar(playerid, "EditAtttachedWep");
            RemovePlayerAttachedObject(playerid, index);
            SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ);
        }
        else
        {
            SetIntVar(playerid, "EditingPolice", 1);
            RemovePlayerAttachedObject(playerid, index);
        }
    }
    if(GetIntVar(playerid, "EditingPolice") == 1 || GetPVarInt(playerid, "EditingGOV") == 1)
    {
        if(response)
        {
            RemoveVar(playerid, "EditingPolice");
            RemoveVar(playerid, "EditingGOV");
            RemovePlayerAttachedObject(playerid, index);
            SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
        }
        else
        {
            RemoveVar(playerid, "EditingPolice");
            RemoveVar(playerid, "EditingGOV");
            RemovePlayerAttachedObject(playerid, index);
        }
    }
    if(GetIntVar(playerid, "EditingOwnedToy") == 1)
    {
        new i = GetIntVar(playerid, "ToySlotEditing");
        if(response)
        {
            PlayerToys[playerid][i][ptOffsetX] = fOffsetX;
            PlayerToys[playerid][i][ptOffsetY] = fOffsetY;
            PlayerToys[playerid][i][ptOffsetZ] = fOffsetZ;
            PlayerToys[playerid][i][ptRotX] = fRotX;
            PlayerToys[playerid][i][ptRotY] = fRotY;
            PlayerToys[playerid][i][ptRotZ] = fRotZ;
            PlayerToys[playerid][i][ptScaleX] = fScaleX;
            PlayerToys[playerid][i][ptScaleY] = fScaleY;
            PlayerToys[playerid][i][ptScaleZ] = fScaleZ;
            RemoveVar(playerid, "ToySlotEditing");
            RemoveVar(playerid, "EditingOwnedToy");
            RemovePlayerAttachedObject(playerid, i);
            SetPlayerAttachedObject(playerid, i, modelid, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
        }
        else
        {
            RemovePlayerAttachedObject(playerid, i);
            SetPlayerAttachedObject(playerid, i, modelid, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
            RemoveVar(playerid, "ToySlotEditing");
            RemoveVar(playerid, "EditingOwnedToy");
        }
    }
    if(GetIntVar(playerid, "JustBoughtToy") == 1)
    {
        new i = GetIntVar(playerid, "ToySlotEditing");
        if(response)
        {
            RemovePlayerAttachedObject(playerid, i);
            PlayerToys[playerid][i][ptOffsetX] = fOffsetX;
            PlayerToys[playerid][i][ptOffsetY] = fOffsetY;
            PlayerToys[playerid][i][ptOffsetZ] = fOffsetZ;
            PlayerToys[playerid][i][ptRotX] = fRotX;
            PlayerToys[playerid][i][ptRotY] = fRotY;
            PlayerToys[playerid][i][ptRotZ] = fRotZ;
            PlayerToys[playerid][i][ptScaleX] = fScaleX;
            PlayerToys[playerid][i][ptScaleY] = fScaleY;
            PlayerToys[playerid][i][ptScaleZ] = fScaleZ;
            SetPlayerAttachedObject(playerid, i, modelid, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
            UpdatePlayerToy(playerid, i, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
            RemoveVar(playerid, "ToyModelBuying");
            RemoveVar(playerid, "ToyBoneBuying");
            RemoveVar(playerid, "ToyPriceBuying");
            RemoveVar(playerid, "ToyNameBuying");
            RemoveVar(playerid, "ToySlotEditing");
            RemoveVar(playerid, "JustBoughtToy");
        }
        else
        {
            RemovePlayerToyFromSlot(playerid, i);
            format(msg, sizeof(msg), "Ai anulat cumpararea si ai primit ${00FF40}%d {FFFFFF}back.", GetIntVar(playerid, "ToyPriceBuying"));
            SCM(playerid, -1, msg);
            GiveCash(playerid, GetIntVar(playerid, "ToyPriceBuying"));
            RemovePlayerAttachedObject(playerid, i);
            RemoveVar(playerid, "ToyModelBuying");
            RemoveVar(playerid, "ToyBoneBuying");
            RemoveVar(playerid, "ToyPriceBuying");
            RemoveVar(playerid, "ToyNameBuying");
            RemoveVar(playerid, "ToySlotEditing");
            RemoveVar(playerid, "JustBoughtToy");
        }
    }
    return 1;
}

public OnPlayerLoadToys(playerid)
{
    new rows, fields, total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            PlayerToys[playerid][total][ptID] = cache_get_row_int(total, 0);
            PlayerToys[playerid][total][ptPID] = cache_get_row_int(total, 1);
            cache_get_row(total, 2, PlayerToys[playerid][total][ptName], dbHandle, 128);
            PlayerToys[playerid][total][ptModelID] = cache_get_row_int(total, 3);
            PlayerToys[playerid][total][ptBoneID] = cache_get_row_int(total, 4);
            PlayerToys[playerid][total][ptOffsetX] = cache_get_row_float(total, 5);
            PlayerToys[playerid][total][ptOffsetY] = cache_get_row_float(total, 6);
            PlayerToys[playerid][total][ptOffsetZ] = cache_get_row_float(total, 7);
            PlayerToys[playerid][total][ptRotX] = cache_get_row_float(total, 8);
            PlayerToys[playerid][total][ptRotY] = cache_get_row_float(total, 9);
            PlayerToys[playerid][total][ptRotZ] = cache_get_row_float(total, 10);
            PlayerToys[playerid][total][ptScaleX] = cache_get_row_float(total, 11);
            PlayerToys[playerid][total][ptScaleY] = cache_get_row_float(total, 12);
            PlayerToys[playerid][total][ptScaleZ] = cache_get_row_float(total, 13);
            PlayerToys[playerid][total][ptToyOn] = 1;
            total++;
        }
    }
    return 1;
}

public OnPlayerRemovedToy(playerid, toyslot)
{
    PlayerToys[playerid][toyslot][ptToyOn] = 0;
    PlayerToys[playerid][toyslot][ptModelID] = 0;
    PlayerToys[playerid][toyslot][ptBoneID] = 0;
    PlayerToys[playerid][toyslot][ptOffsetX] = 0.0;
    PlayerToys[playerid][toyslot][ptOffsetY] = 0.0;
    PlayerToys[playerid][toyslot][ptOffsetZ] = 0.0;
    PlayerToys[playerid][toyslot][ptRotX] = 0.0;
    PlayerToys[playerid][toyslot][ptRotY] = 0.0;
    PlayerToys[playerid][toyslot][ptRotZ] = 0.0;
    PlayerToys[playerid][toyslot][ptScaleX] = 0.0;
    PlayerToys[playerid][toyslot][ptScaleY] = 0.0;
    PlayerToys[playerid][toyslot][ptScaleZ] = 0.0;
    RemovePlayerAttachedObject(playerid, toyslot);
    return 1;
}

public OnToyInsert(playerid, toyslot)
{
    PlayerToys[playerid][toyslot][ptID] = cache_insert_id(dbHandle);
    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    foreach(new i : Player)
    {
        if(areaid == GetIntVar(i, "BoomBoxArea") && GetIntVar(i, "BoomBoxMusicOn") == 1)
        {
            PlayAudioStreamForPlayer(playerid, GetStringVar(i, "BoomBoxURL"), GetFloatVar(i, "BoomBoxX"), GetFloatVar(i, "BoomBoxY"), GetFloatVar(i, "BoomBoxZ"), 50.0, 1);
        }
    }
    for(new i = 0; i < MAX_PARK_METERS; i++)
    {
        if(areaid == ParkMeters[i][parkArea] && ParkMeters[i][parkOn])
        {
            GameTextForPlayer(playerid, "~b~/parkmeter", 4000, 4);
        }
    }
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(new i : Player)
    {
        if(areaid == GetIntVar(i, "BoomBoxArea"))
        {
            StopAudioStreamForPlayer(playerid);
        }
    }
}

public OnFurnitureUpdatePos(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosX] = x;
    FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosY] = y;
    FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosZ] = z;
    FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosRX] = rx;
    FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosRY] = ry;
    FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosRZ] = rz;
    return 1;
}

public TalkTimer(playerid)
{
    if(!PlayerInCar(playerid))
    {
        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_EXIT_VEHICLE)
        {
            ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
            OnAnim{playerid} = false;
        }
    }
    return 1;
}

public CheckPlayerLogged(playerid)
{
    if(!PlayerLogged(playerid))
    {
        //KickEx(playerid, "Au trecut 60 de secunde iar tu nu te-ai logat.");
        SCM(playerid, COLOR_LIGHTRED, "Au trecut 60 de secunde iar tu nu te-ai logat.");
        SetTimerEx("KickPlayer", 100, false, "i", playerid);
    }
}

public OnPlayerSpawnVehicle(playerid, slot)
{
    new rows, fields;
    new panels3, doors3, lights3, tires3;
    new sqlid, model, color1, color2, alarmbuyed, lock, immob, insurances, destroyed, gps, fuel, registered, broken, Float:X, Float:Y, Float:Z, Float:A, plate[128], owner[128];
    new component[14], paintjob, radio, tickets[265], weapons[256], drugs[256], dupkey, comps, faction, impound;
    cache_get_data(rows, fields);
    if(rows)
    {
        sqlid = cache_get_row_int(0, 0),
        model = cache_get_row_int(0, 1),
        color1 = cache_get_row_int(0, 2),
        color2 = cache_get_row_int(0, 3),
        X = cache_get_row_float(0, 4),
        Y = cache_get_row_float(0, 5),
        Z = cache_get_row_float(0, 6),
        A = cache_get_row_float(0, 7),
        cache_get_row(0, 8, plate, dbHandle, 128),
        cache_get_row(0, 9, owner, dbHandle, 128),
        alarmbuyed = cache_get_row_int(0, 12),
        lock = cache_get_row_int(0, 13),
        immob = cache_get_row_int(0, 14),
        insurances = cache_get_row_int(0, 15),
        destroyed = cache_get_row_int(0, 16),
        gps = cache_get_row_int(0, 17),
        fuel = cache_get_row_int(0, 18),
        registered = cache_get_row_int(0, 19),
        broken = cache_get_row_int(0, 20),
        cache_get_row(0, 21, weapons, dbHandle, 128),
        component[0] = cache_get_row_int(0, 22),
        component[1] = cache_get_row_int(0, 23),
        component[2] = cache_get_row_int(0, 24),
        component[3] = cache_get_row_int(0, 25),
        component[4] = cache_get_row_int(0, 26),
        component[5] = cache_get_row_int(0, 27),
        component[6] = cache_get_row_int(0, 28),
        component[7] = cache_get_row_int(0, 29),
        component[8] = cache_get_row_int(0, 30),
        component[9] = cache_get_row_int(0, 31),
        component[10] = cache_get_row_int(0, 32),
        component[11] = cache_get_row_int(0, 33),
        component[12] = cache_get_row_int(0, 34),
        component[13] = cache_get_row_int(0, 35),
        paintjob = cache_get_row_int(0, 36),
        radio = cache_get_row_int(0, 37),
        cache_get_row(0, 38, tickets, dbHandle, 128),
        dupkey = cache_get_row_int(0, 39),
        comps = cache_get_row_int(0, 40),
        cache_get_row(0, 41, drugs, dbHandle, 128),
        faction = cache_get_row_int(0, 42);
        panels3 = cache_get_row_int(0, 44);
        doors3 = cache_get_row_int(0, 45);
        lights3 = cache_get_row_int(0, 46);
        tires3 = cache_get_row_int(0, 47);
        impound = cache_get_row_int(0, 49);
        new Float:vhealth = cache_get_row_int(0, 48);
        PlayerInfo[playerid][pCarKey] = CreateVehicle(model, X, Y, Z, A, color1, color2, -1);
        SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], plate);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carID] = sqlid;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carModel] = model;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor1] = color1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor2] = color2;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkX] = X;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkY] = Y;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkZ] = Z;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkA] = A;
        format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 128, "%s", plate);
        format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], 128, "%s", owner);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwned] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carSpawned] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carOn] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carAlarm] = alarmbuyed;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carLock] = lock;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carImmob] = immob;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carInsurances] = insurances;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carDestroyed] = destroyed;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carGps] = gps;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwnerSlot] = slot;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carFuel] = fuel;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carRegistered] = registered;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carBroken] = broken;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][0] = component[0];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][1] = component[1];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][2] = component[2];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][3] = component[3];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][4] = component[4];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][5] = component[5];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][6] = component[6];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][7] = component[7];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][8] = component[8];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][9] = component[9];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][10] = component[10];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][11] = component[11];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][12] = component[12];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][13] = component[13];
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carPaintJob] = paintjob;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carRadio] = radio;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carDupKey] = dupkey;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComps] = comps;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carFaction] = faction;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carImpound] = impound;
        UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarKey], panels3, doors3, lights3, tires3);
        VehicleTrunk(PlayerInfo[playerid][pCarKey], true);
        AssignVehicleTickets(PlayerInfo[playerid][pCarKey], tickets);
        AssignVehicleWeapons(PlayerInfo[playerid][pCarKey], weapons);
        AssignVehicleDrugs(PlayerInfo[playerid][pCarKey], drugs);
        Gas{PlayerInfo[playerid][pCarKey]} = fuel;
        vLocked{PlayerInfo[playerid][pCarKey]} = 1;
        PlayerInfo[playerid][pVehSlot] = slot;
        LoadComp(PlayerInfo[playerid][pCarKey]);
        UpdateVehicleStatus(playerid, PlayerInfo[playerid][pCarKey]);
        SetVehicleHealth(PlayerInfo[playerid][pCarKey], vhealth);
        SCM(playerid, COLOR_GREEN2, "Vehiculul este la locul de parcare:");
        format(msg, sizeof(msg), "%s, Alarma[%d], Incuietoare[%d], Imobilizare[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pretul Asigurarii[$%d]", VehicleNames[model-400],alarmbuyed, lock, immob, gps, insurances, destroyed, GetInsurancePrice(PlayerInfo[playerid][pCarKey]));
        SCM(playerid, COLOR_WHITE, msg);
        SCM(playerid, COLOR_OOC, "Hint: Urmareste checkpoint-ul rosu pentru ati gasi vehiculul.");
        SetCheckPoint(playerid, FINEVEH, VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkX],VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkY],VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkZ], 6.0);
        CityVehicles[PlayerInfo[playerid][pCarKey]][vFaction] = 0; //DEBUG
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu ai un vehicul pe acest slot.");
    return 1;
}


public Float:GetDistanceBetweenPlayers(p1,p2)
{
    new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
    if(!PlayerIsOn(p1) || !PlayerIsOn(p2))
    {
        return -1.00;
    }
    GetPlayerPos(p1,x1,y1,z1);
    GetPlayerPos(p2,x2,y2,z2);
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public SendProxRadioMessage(playerid, string[])
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(i != playerid)
            {
                if(GetDistanceBetweenPlayers(playerid,i) < 8)
                { SCM(i, COLOR_FADE1, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 8)
                { SCM(i, COLOR_FADE2, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 12)
                { SCM(i, COLOR_FADE3, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 16)
                { SCM(i, COLOR_FADE4, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 20)
                { SCM(i, COLOR_FADE5, string); }
            }
        }
    }
}

public SendLowProxRadioMessage(playerid, string[])
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(i != playerid)
            {
                if(GetDistanceBetweenPlayers(playerid,i) < 3)
                { SCM(i, COLOR_FADE1, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 3)
                { SCM(i, COLOR_FADE2, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 5)
                { SCM(i, COLOR_FADE3, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 7)
                { SCM(i, COLOR_FADE4, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 9)
                { SCM(i, COLOR_FADE5, string); }
            }
        }
    }
}

public SendRadioMessage(playerid, channel, color, string[])
{
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(HasRadioChannel(i, channel))
            {
                SCM(i, color, string);
            }
        }
    }
}

public ActionMessage(playerid,Float:radius,message[])
{
    new str[256];
    new str2[256];
    format(str2, sizeof(str2), "%s", message);
    if(strlen(str2) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(str, sizeof(str), "* %s %.*s ...", GetNameWithMask(playerid), pos, str2);
        ProxDetector(radius, playerid, str, COLOR_PURPLE);
        format(str, sizeof(str), "* ... %s ((%s))", str2[pos], GetNameWithMask(playerid));
        ProxDetector(radius, playerid, str, COLOR_PURPLE);
    }
    else
    {
        format(str, sizeof(str), "* %s %s", GetNameWithMask(playerid), str2);
        ProxDetector(radius, playerid, str, COLOR_PURPLE);
    }
    return 1;
}

public LoadComp(vehicle)
{
    if(VehicleInfo[vehicle][carPaintJob] != 3)
    {
        ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);
    }
    for(new i = 0; i < 14; i++)
    {
        if(VehicleInfo[vehicle][carComponent][i] != 0)
        {
            AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][i]);
        }
    }
    return 1;
}

public OnAdminSellBusiness(bizid)
{
    BizInfo[bizid][bizCash] = 0;
    BizInfo[bizid][bizOwned] = 0;
    BizInfo[bizid][bizEntrance] = 0;
    BizInfo[bizid][bizRadio] = 0;
    BizInfo[bizid][bizRadioOn] = 0;
    BizInfo[bizid][bizLocked] = 1;
    format(BizInfo[bizid][bizOwner], 64, "Statul");
    BizInfo[bizid][bizOn] = 1;
    return 1;
}

public GivePlayerBizMoney(cash, bizid)
{
    new rows, fields, cash2;
    cache_get_data(rows, fields);
    if(rows)
    {
        cash2 = cache_get_row_int(0, 5);
        cash += cash2;
        OnBizGiveMoney(cash, BizInfo[bizid][bizOwner]);
    }
}

public AfterSpray(playerid)
{
    if(PlayerIsOn(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vehicle = GetPlayerVehicleID(playerid);
            ChangeVehicleColor(vehicle, VehColor1{playerid}, VehColor2{playerid});
            VehColor1{playerid} = 0;
            VehColor2{playerid} = 0;
            UnFreezePlayer(playerid);
            SetVehiclePos(vehicle, GetFloatVar(playerid, "SprayX"),GetFloatVar(playerid, "SprayY"),GetFloatVar(playerid, "SprayZ"));
            RepairVehicle(vehicle);
            SetVehicleHealth(vehicle, 1000.0);
            RemoveVar(playerid, "SprayX");RemoveVar(playerid, "SprayY");RemoveVar(playerid, "SprayZ");
        }
    }
    return 1;
}

public SetUnTazed(playerid)
{
    Tazed{playerid} = false;
    TogglePlayerControllable(playerid, true);
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(GetPVarInt(playerid, "BuyFF") == 1)
    {
        if(playertextid == FF_BUY1[playerid])
        {
            SCM(playerid, COLOR_GREY, "Ai cumparat cu succes un '{FF0000}Meniu Low{AFAFAF}' pentru {006600}20${AFAFAF}.");
            SCM(playerid, COLOR_OOC, "HINT: Foloseste `/meal place` pentru a plasa tava pe o masa.");
            SCM(playerid, COLOR_RED, "Foloseste '/(mealanim)ation' daca nu mai ai animatia de la '/meal buy'.");
            GiveCash(playerid, -20);
            meal[playerid] = 1;
            new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid, X, Y, Z);
            if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
            SetPlayerAttachedObject(playerid, 1 , 2212, 1, 0.068, 0.44, -0.27, -59.0, 62.0, 135.0);
            ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
            CancelSelectTextDraw(playerid);
            HideFFTD(playerid);
        }
        if(playertextid == FF_BUY2[playerid])
        {
            SCM(playerid, COLOR_GREY, "Ai cumparat cu succes un '{FF0000}Meniu Mediu{AFAFAF}' pentru {006600}30${AFAFAF}.");
            SCM(playerid, COLOR_OOC, "HINT: Foloseste `/meal place` pentru a plasa tava pe o masa.");
            SCM(playerid, COLOR_RED, "Foloseste '/(mealanim)ation' daca nu mai ai animatia de la '/meal buy'.");
            GiveCash(playerid, -30);
            meal[playerid] = 2;
            new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid, X, Y, Z);
            if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
            SetPlayerAttachedObject(playerid, 1 , 2212, 1, 0.068, 0.44, -0.27, -59.0, 62.0, 135.0);
            ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
            CancelSelectTextDraw(playerid);
            HideFFTD(playerid);
        }
        if(playertextid == FF_BUY3[playerid])
        {
            SCM(playerid, COLOR_GREY, "Ai cumparat cu succes un '{FF0000}Meniu Maxi{AFAFAF}' pentru {006600}40${AFAFAF}.");
            SCM(playerid, COLOR_OOC, "HINT: Foloseste `/meal place` pentru a plasa tava pe o masa.");
            SCM(playerid, COLOR_RED, "Foloseste '/(mealanim)ation' daca nu mai ai animatia de la '/meal buy'.");
            GiveCash(playerid, -40);
            meal[playerid] = 3;
            new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid, X, Y, Z);
            if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
            SetPlayerAttachedObject(playerid, 1 , 2212, 1, 0.068, 0.44, -0.27, -59.0, 62.0, 135.0);
            ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
            CancelSelectTextDraw(playerid);
            HideFFTD(playerid);
        }
        if(playertextid == FF_Close[playerid])
        {
            HideFFTD(playerid);
            SCM(playerid, COLOR_GREY, "Ai inchis meniul.");
            CancelSelectTextDraw(playerid);
        }
        return 1;
    }
    else if(GetIntVar(playerid, "SelectingUniform") == 1)
    {
        if(playertextid == NextButton[playerid])
        {
            if(SkinSlot[playerid] >= sizeof(LSPDSkins)-1) return 1;
            SkinSlot[playerid]++;
            SetPlayerSkin(playerid, LSPDSkins[SkinSlot[playerid]]);
            SetIntVar(playerid, "SkinChosen", LSPDSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == PrevButton[playerid])
        {
            if(SkinSlot[playerid] == 0) return 1;
            SkinSlot[playerid]--;
            SetPlayerSkin(playerid, LSPDSkins[SkinSlot[playerid]]);
            SetIntVar(playerid, "SkinChosen", LSPDSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == WearButton[playerid])
        {
            new skin = GetIntVar(playerid, "SkinChosen");
            SetPlayerSkin(playerid, skin);
            //SetCameraBehindPlayer(playerid);
            CancelSelectTextDraw(playerid);
            PlayerTextDrawHide(playerid, NextButton[playerid]);
            PlayerTextDrawHide(playerid, PrevButton[playerid]);
            PlayerTextDrawHide(playerid, WearButton[playerid]);
            UnFreezePlayer(playerid);
            StopPlayerAnims(playerid);
        }
    }
    else if(GetIntVar(playerid, "SelectingUniform") == 2)
    {
        if(playertextid == NextButton[playerid])
        {
            if(SkinSlot[playerid] >= sizeof(LSFDSkins)-1) return 1;
            SkinSlot[playerid]++;
            SetPlayerSkin(playerid, LSFDSkins[SkinSlot[playerid]]);
            SetIntVar(playerid, "SkinChosen", LSFDSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == PrevButton[playerid])
        {
            if(SkinSlot[playerid] == 0) return 1;
            SkinSlot[playerid]--;
            SetPlayerSkin(playerid, LSFDSkins[SkinSlot[playerid]]);
            SetIntVar(playerid, "SkinChosen", LSFDSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == WearButton[playerid])
        {
            new skin = GetIntVar(playerid, "SkinChosen");
            SetPlayerSkin(playerid, skin);
            SetCameraBehindPlayer(playerid);
            CancelSelectTextDraw(playerid);
            PlayerTextDrawHide(playerid, NextButton[playerid]);
            PlayerTextDrawHide(playerid, PrevButton[playerid]);
            PlayerTextDrawHide(playerid, WearButton[playerid]);
            UnFreezePlayer(playerid);
            StopPlayerAnims(playerid);
        }
    }
    else if(GetIntVar(playerid, "SelectingUniform") == 4)
    {
        if(playertextid == NextButton[playerid])
        {
            if(SkinSlot[playerid] >= sizeof(NEWSSkins)-1) return 1;
            SkinSlot[playerid]++;
            SetPlayerSkin(playerid, NEWSSkins[SkinSlot[playerid]]);
            SetIntVar(playerid, "SkinChosen", NEWSSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == PrevButton[playerid])
        {
            if(SkinSlot[playerid] == 0) return 1;
            SkinSlot[playerid]--;
            SetPlayerSkin(playerid, NEWSSkins[SkinSlot[playerid]]);
            SetIntVar(playerid, "SkinChosen", NEWSSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == WearButton[playerid])
        {
            new skin = GetIntVar(playerid, "SkinChosen");
            SetPlayerSkin(playerid, skin);
            SetCameraBehindPlayer(playerid);
            CancelSelectTextDraw(playerid);
            PlayerTextDrawHide(playerid, NextButton[playerid]);
            PlayerTextDrawHide(playerid, PrevButton[playerid]);
            PlayerTextDrawHide(playerid, WearButton[playerid]);
            UnFreezePlayer(playerid);
            StopPlayerAnims(playerid);
        }
    }
    else if(GetIntVar(playerid, "SelectingUniform") == 5)
    {
        if(playertextid == NextButton[playerid])
        {
            //if(SkinSlot[playerid] >= sizeof(NGuardSkins)-1) return 1;
            SkinSlot[playerid]++;
            //SetPlayerSkin(playerid, NGuardSkins[SkinSlot[playerid]]);
            //SetIntVar(playerid, "SkinChosen", NGuardSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == PrevButton[playerid])
        {
            if(SkinSlot[playerid] == 0) return 1;
            SkinSlot[playerid]--;
            //SetPlayerSkin(playerid, NGuardSkins[SkinSlot[playerid]]);
            //SetIntVar(playerid, "SkinChosen", NGuardSkins[SkinSlot[playerid]]);
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(playertextid == WearButton[playerid])
        {
            new skin = GetIntVar(playerid, "SkinChosen");
            SetPlayerSkin(playerid, skin);
            SetCameraBehindPlayer(playerid);
            CancelSelectTextDraw(playerid);
            PlayerTextDrawHide(playerid, NextButton[playerid]);
            PlayerTextDrawHide(playerid, PrevButton[playerid]);
            PlayerTextDrawHide(playerid, WearButton[playerid]);
            UnFreezePlayer(playerid);
            StopPlayerAnims(playerid);
        }
    }
    return 1;
}

public SetToCamera(playerid, objectid)
{
    PlayerSpec(playerid);
    AttachCameraToDynamicObject(playerid, objectid);
    UpdateCCTV_TD(playerid);
    return 1;
}

public StopGateSound(gate, soundid, Float:x, Float:y, Float:z)
{
    Gates[gate][gateOpening] = 0;
    foreach(new i : Player)
    {
        if(PlayerToPoint(20.0, i, x, y ,z))
        {
            PlayerPlaySound(i, soundid+1, x, y, z);
        }
    }
    return 1;
}

public TollUpdate() // Needs to be called in the OnPlayerUpdate function
{
    for(new i = 0; i < MAX_TOLLS; i++)
    {
        if(aTolls[i][E_tOpenTime] > 0)
        {
            aTolls[i][E_tOpenTime]--;
            if(aTolls[i][E_tOpenTime] == 1)
            {
                Toll_CloseToll(i);
            }
        }
    }
}

Toll_CloseToll(TollID)
{
    if(TollID == RichmanToll)
    {
        SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
        SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
    }
    else if(TollID == FlintToll)
    {
        SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
        SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
    }
    else if(TollID == LVToll)
    {
        SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
        SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
    }
    else if(TollID == BlueberryTollR)
    {
        SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
        SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
    }
    else if(TollID == BlueberryTollL)
    {
        SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
        SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
    }
    return 1;
}

Toll_OpenToll(TollID)
{
    if(TollID == RichmanToll)
    {
        aTolls[RichmanToll][E_tOpenTime] = 7;
        SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
        SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
    }
    else if(TollID == FlintToll)
    {
        aTolls[FlintToll][E_tOpenTime] = 7;
        SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
        SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
    }
    else if(TollID == LVToll)
    {
        aTolls[LVToll][E_tOpenTime] = 7;
        SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
        SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
    }
    else if(TollID == BlueberryTollR)
    {
        aTolls[BlueberryTollR][E_tOpenTime] = 7;
        SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
        SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
    }
    else if(TollID == BlueberryTollL)
    {
        aTolls[BlueberryTollL][E_tOpenTime] = 7;
        SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
        SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
    }
}

Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /opentoll on the same toll
{
    if(aTolls[TollID][E_tOpenTime] > 0)
    {
        SCM(playerid, COLOR_LIGHTRED, "Bariera este deja deschisa.");
        return 0;
    }
    return 1;
}

Toll_TimePassedCops(playerid) // Cops have to wait for <TollDelayCop> seconds between every /toll (Global)
{
    new L_i_tick = GetUnixTime();
    if(L_a_RequestAllowedCop > L_i_tick && L_a_RequestAllowedCop != 0)
    {
        new TollString[63];
        format(TollString, 63, "Trebuie sa astepti %d de secunde intre fiecare schimbare de bariera.", TollDelayCop);
        SCM(playerid, COLOR_LIGHTRED, TollString);
        return 0;
    }
    L_a_RequestAllowedCop = (L_i_tick + TollDelayCop);
    return 1;
}

public GetUnixTime()
{
    new Year, Month, Day,Hour,Minute,Second;
    getdate(Year, Month, Day);
    gettime(Hour,Minute,Second);
    return mktime(Hour,Minute,Second,Day,Month,Year);
}

public OnPlantInsert(plant)
{
    CropsInfo[plant][pID] = cache_insert_id(dbHandle);
}

public OnPlantsAdd()
{
    new rows, fields, total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            CropsInfo[total][pID] = cache_get_row_int(total, 0);
            cache_get_row(total, 1, CropsInfo[total][pPlanter], dbHandle, 128);
            CropsInfo[total][pGrowTime] = cache_get_row_int(total, 2);
            CropsInfo[total][pX] = cache_get_row_float(total, 3);
            CropsInfo[total][pY] = cache_get_row_float(total, 4);
            CropsInfo[total][pZ] = cache_get_row_float(total, 5);
            CropsInfo[total][pMade] = cache_get_row_int(total, 6);
            CropsInfo[total][pPlanted] = 1;
            CropsInfo[total][pObject] = CreateDynamicObject(3409, CropsInfo[total][pX], CropsInfo[total][pY], CropsInfo[total][pZ], 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
            format(msg, sizeof(msg), ""EMBED_YELLOW"TIMP DE CRESTERE: %d\nFACUT DE: %d", CropsInfo[total][pGrowTime], CropsInfo[total][pMade]);
            CropsInfo[total][pLabel] = CreateDynamic3DTextLabel(msg, -1, CropsInfo[total][pX], CropsInfo[total][pY], CropsInfo[total][pZ]+2.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            total++;
        }
    }
    format(msg, sizeof(msg), "Loaded %d plants from MySQL.", total);
    printf(msg);
}

public OnChannelInsert(channel)
{
    RadiosInfo[channel][radioID] = cache_insert_id(dbHandle);
    return 1;
}

public OnPlayerLoadNotes(playerid)
{
    new rows, fields, note = 1;
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows; i++)
        {
            PlayerNotes[playerid][note][nDatabaseID] = cache_get_row_int(i, 0);
            cache_get_row(i, 2, PlayerNotes[playerid][note][nNote], dbHandle, 128);
            PlayerNotes[playerid][note][nOn] = 1;
            note++;
        }
    }
    return 1;
}

public OnNoteInsert(note, playerid)
{
    PlayerNotes[playerid][note][nDatabaseID] = cache_insert_id(dbHandle);
    return 1;
}
/* =================== Publics =================== */

/* =================== Dialogs =================== */

Dialog:FACTIONS(playerid, response, listitem, inputtext[])
{
    if(response) return 1;
    else return 1;
}

Dialog:DialogGPS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPlayerCheckpoint(playerid, GPSInfo[listitem][gpsX], GPSInfo[listitem][gpsY], GPSInfo[listitem][gpsZ], 2);
        SCMEx(playerid, COLOR_GREY, "[GPS] A fost setat un checkpoint la '%s'.", GPSInfo[listitem][gpsName]);
    }
    return 1;
}

Dialog:RENTCAR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new vehid;
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti soferul.");
        vehid = GetPlayerVehicleID(playerid);
        if(IsARentCar(vehid))
        {
            foreach(new i : Player)
            {
                if(GetIntVar(i, "RentVehKey") == vehid && i != playerid) return RentMSG(playerid, "Cineva deja a inchiriat acest vehicul.");
            }
        }
        if(GetIntVar(playerid, "RentedCar") == 1)
        {
            SCM(playerid, COLOR_GREY, "Deja inchiriezi ceva, '/unrentvehicle' inainte.");
            RemovePlayerFromVehicle(playerid);
            return 1;
        }
        if(GetCash(playerid) < VEHICLE_RENT_COST) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai inchiriat aceasta masina pentru $%d, poti folosi '/engine' & '/lock'.", VEHICLE_RENT_COST);
        SCM(playerid, COLOR_GREY, msg);
        GiveCash(playerid, -VEHICLE_RENT_COST);
        PlaySound(playerid, 1052);
        SetIntVar(playerid, "RentedCar", 1);
        SetIntVar(playerid, "RentVehKey", vehid);
    }
    else
    {
        RemovePlayerFromVehicle(playerid);
    }
    return 1;
}
Dialog:ConfirmDS(playerid, response, listitem, inputtext[])
{
    new modelid = CarModel2[playerid];
    if(response)
    {
        new price = GetVehiclePrice(modelid);
//      DS_Stage[playerid] = -1;
        new Float:ParkX, Float:ParkY, Float:ParkZ;
        new name[64];
        if(GetCash(playerid) < price) return NoCashMSG(playerid);
        GiveCash(playerid, -price);
        name = GetName(playerid);
        new slot = GetNextPlayerVehSlot(playerid);
        if(IsABoatModel(modelid))
        {
            ParkX = -467.3684;
            ParkY = 1153.1650;
            ParkZ = -0.5069;
        }
        else if(IsAPlaneModel(modelid))
        {
            ParkX = 174.8090;
            ParkY = -1941.5074;
            ParkZ = 0.0394;
        }
        else //Vehicles
        {
            ParkX = 1705.2166;
            ParkY = -1512.1454;
            ParkZ = 13.1163;
        }
        PlayerInfo[playerid][pCarKey] = CreateVehicle(modelid, ParkX, ParkY, ParkZ, 0.0, 1, 1, -1);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carModel] = modelid;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor1] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor2] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkX] = ParkX;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkY] = ParkY;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkZ] = ParkZ;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkA] = 0.0;
        format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 128, "%s%d", FirstNameLetters(GetName(playerid)), randomEx(10000, 99999));
        format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], 128, "%s", GetName(playerid));
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwned] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carSpawned] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carOn] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carAlarm] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carLock] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carImmob] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carInsurances] = 2;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carDestroyed] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carGps] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwnerSlot] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carFuel] = 50;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carRegistered] = 1;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carBroken] = 0;
        for(new i = 1; i < MAX_VEHICLE_WEAPONS; i++)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][carTrunkWep][i] = 0;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][carTrunkAmmo][i] = 0;
        }
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][0] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][1] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][2] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][3] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][4] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][5] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][6] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][7] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][8] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][9] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][10] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][11] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][12] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][13] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carPaintJob] = 3;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carRadio] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carDupKey] = randomEx(1234567, 9999999);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carComps] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carFaction] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carPanels] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carDoors] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carLights] = 0;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][carTires] = 0;
        for(new i = 1; i < MAX_DRUGS; i++)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][carDrug][i] = 0;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][carDrugAmount][i] = 0;
        }
        for(new i = 0; i < MAX_CAR_TICKETS; i++)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][carTicket][i] = 0;
        }
        PlayerInfo[playerid][pVehicles]++;
        //======================================================================================
        format(query, sizeof(query), "INSERT INTO `ownedvehicles` (model, color1, color2, parkx, parky, parkz, parka, plate, owner, owned, slot) VALUES (%d, %d, %d, %f, %f, %f, %f, '%s', '%s', %d, %d)",
        modelid, 1, 1, ParkX, ParkY, ParkZ, 0.0, VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], name, 1, slot);
        mysql_tquery(dbHandle, query, "", "");
        //============================================================================================
		#if defined debugOn
			printf(query);
		#endif
        //======================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = '%s' WHERE `owner` = '%s' AND `slot` = %d", "0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0", name,slot);
        mysql_function_query(dbHandle, query, false, "", "");
		//==========================================================================
		#if defined debugOn
			printf(query);
		#endif
        //==========================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `dupkey` = %d WHERE `owner` = '%s' AND `slot` = %d", VehicleInfo[PlayerInfo[playerid][pCarKey]][carDupKey], name, slot);
        mysql_function_query(dbHandle, query, false, "", "");
        //==========================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `tickets` = '%s' WHERE `owner` = '%s' AND `slot` = %d", "0|0|0|0|0|0|0|0|0|0", name, slot);
        mysql_function_query(dbHandle, query, false, "", "");
        //======================================================================================
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `drugs` = '%s' WHERE `owner` = '%s' AND `slot` = %d", "0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0", name, slot);
        mysql_function_query(dbHandle, query, false, "", "");
        //=========================================================================================
        format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pVehicles], name);
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			print("Dialog:ConfirmDS");
			printf(query);
		#endif
        //======================================================================================
        PlayerInfo[playerid][pVehs][slot] = 1;
        DestoryCar(PlayerInfo[playerid][pCarKey]);
        PlayerInfo[playerid][pCarKey] = 0;
        CheckOwnedVehicles(playerid);
        CarModel2[playerid] = -1;
        format(msg, sizeof(msg), "{B1C8FB}Felicitari! {AFAFAF}Ai cumparat o masina %s pentru {006600}$%d{AFAFAF}. Foloseste '{B1C8FB}/v get [slot]{AFAFAF}' pentru a spawna vehiculul!", VehicleNames[modelid-400], price);
        SCM(playerid, COLOR_GREY, msg);
    }
    else
    {
        SCM(playerid, COLOR_GREY, "Ai inchis meniul de cumparat vehicule!");
    }
    return 1;
}
Dialog:AdminTeles(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, HouseInteriors[listitem][aPosX], HouseInteriors[listitem][aPosY], HouseInteriors[listitem][aPosZ]);
        SetInterior(playerid, HouseInteriors[listitem][aInterior]);
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ de teleportare.");
    }
    return 1;
}

Dialog:ShowVehicles(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, CityVehicles[listitem+1][vPosX], CityVehicles[listitem+1][vPosY], CityVehicles[listitem+1][vPosZ]+2);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al vehiculelor.");
    }
    return 1;
}

Dialog:ShowPlants(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, CropsInfo[listitem][pX], CropsInfo[listitem][pY], CropsInfo[listitem][pZ]+3.0);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al plantelor.");
    }
    return 1;
}

Dialog:ShowATMS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, ATMInfo[listitem][atmPosX], ATMInfo[listitem][atmPosY], ATMInfo[listitem][atmPosZ]);
        SetInterior(playerid, ATMInfo[listitem][atmInterior]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al bancomatelor.");
    }
    return 1;
}

Dialog:ShowFoodStalls(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, FoodStand[listitem][fPosX], FoodStand[listitem][fPosY], FoodStand[listitem][fPosZ]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al sandurilor de mancare.");
    }
    return 1;
}

Dialog:ShowStations(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, GasStation[listitem][gPosX], GasStation[listitem][gPosY], GasStation[listitem][gPosZ]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al benzinariilor.");
    }
    return 1;
}

Dialog:ShowParkMeters(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, ParkMeters[listitem][parkPosX], ParkMeters[listitem][parkPosY], ParkMeters[listitem][parkPosZ]+1);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al parcarilor.");
    }
    return 1;
}

Dialog:ShowInfos(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, CPTInfo[listitem][cPosX], CPTInfo[listitem][cPosY], CPTInfo[listitem][cPosZ]);
        SetWorld(playerid, CPTInfo[listitem][cVirtualWorld]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al informatiilor.");
    }
    return 1;
}

Dialog:ShowDealerships(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, DealersInfo[listitem][dealerPosX], DealersInfo[listitem][dealerPosY], DealersInfo[listitem][dealerPosZ]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al magazinelor.");
    }
    return 1;
}

Dialog:ShowBanks(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, BankInfo[listitem][bPosX], BankInfo[listitem][bPosY], BankInfo[listitem][bPosZ]);
        SetInterior(playerid, BankInfo[listitem][bInterior]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul.");
    }
    return 1;
}

Dialog:ChangeFight(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                format(msg, sizeof(msg), "AdmCmd: %s i-a schimbat stilul de lupta lui %s in cel Normal.", GetName(playerid), GetName(GetIntVar(playerid, "ChangeFightTo")));
                AMSG(COLOR_LIGHTRED, msg);
                format(msg, sizeof(msg), "INFO: Stilul de lupta ti-a fost schimbat in cel normal de catre %s.", GetName(playerid));
                SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
                SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_NORMAL);
                RemoveVar(playerid, "ChangeFightTo");
            }
            case 1:
            {
                format(msg, sizeof(msg), "AdmCmd: %s i-a schimbat stilui de lupta lui %s in cel de  Boxing.", GetName(playerid), GetName(GetIntVar(playerid, "ChangeFightTo")));
                AMSG(COLOR_LIGHTRED, msg);
                format(msg, sizeof(msg), "INFO: Stilul de lupta ti-a fost schimbat in cel Boxing de catre %s.", GetName(playerid));
                SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
                SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_BOXING);
                RemoveVar(playerid, "ChangeFightTo");
            }
            case 2:
            {
                format(msg, sizeof(msg), "AdmCmd: %s i-a schimbat stilui de lupta lui %s in cel de KungFu.", GetName(playerid), GetName(GetIntVar(playerid, "ChangeFightTo")));
                AMSG(COLOR_LIGHTRED, msg);
                format(msg, sizeof(msg), "INFO: Stilul de lupta ti-a fost schimbat in cel KungFu de catre %s.", GetName(playerid));
                SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
                SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_KUNGFU);
                RemoveVar(playerid, "ChangeFightTo");
            }
            case 3:
            {
                format(msg, sizeof(msg), "AdmCmd: %s i-a schimbat stilui de lupta lui %s in cel de KneeHead.", GetName(playerid), GetName(GetIntVar(playerid, "ChangeFightTo")));
                AMSG(COLOR_LIGHTRED, msg);
                format(msg, sizeof(msg), "INFO: Stilul de lupta ti-a fost schimbat in cel Kneehead de catre %s.", GetName(playerid));
                SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
                SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_KNEEHEAD);
                RemoveVar(playerid, "ChangeFightTo");
            }
            case 4:
            {
                format(msg, sizeof(msg), "AdmCmd: %s i-a schimbat stilui de lupta lui %s in cel de GrabKick.", GetName(playerid), GetName(GetIntVar(playerid, "ChangeFightTo")));
                AMSG(COLOR_LIGHTRED, msg);
                format(msg, sizeof(msg), "INFO: Stilul de lupta ti-a fost schimbat in cel Grabkick de catre %s.", GetName(playerid));
                SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
                SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_GRABKICK);
                RemoveVar(playerid, "ChangeFightTo");
            }
            case 5:
            {
                format(msg, sizeof(msg), "AdmCmd: %s i-a schimbat stilui de lupta lui %s in cel de Elbow.", GetName(playerid), GetName(GetIntVar(playerid, "ChangeFightTo")));
                AMSG(COLOR_LIGHTRED, msg);
                format(msg, sizeof(msg), "INFO: Stilul de lupta ti-a fost schimbat in cel Elbow de catre %s.", GetName(playerid));
                SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
                SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_ELBOW);
                RemoveVar(playerid, "ChangeFightTo");
            }
        }
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul de schimbare al luptei.");
    }
    return 1;
}

Dialog:AdminDoors(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, DoorInfo[listitem][dEnterX], DoorInfo[listitem][dEnterY], DoorInfo[listitem][dEnterZ]);
        SetInterior(playerid, DoorInfo[listitem][dEnterInterior]);
        SCM(playerid, -1, "Ai fost teleportat!");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al usilor.");
    }
    return 1;
}

Dialog:AdminFactionDoors(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, FactionDoors[listitem][dEnterX], FactionDoors[listitem][dEnterY], FactionDoors[listitem][dEnterZ]);
        SetInterior(playerid, FactionDoors[listitem][dEnterInterior]);
        SCM(playerid, -1, "Ai fost teleportat.");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al usilor de factiuni.");
    }
    return 1;
}

Dialog:AdminBusinesses(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PutPlayer(playerid, BizInfo[listitem][bizPosX], BizInfo[listitem][bizPosY], BizInfo[listitem][bizPosZ]);
        SCM(playerid, -1, "Ai fost teleportat.");
    }
    else
    {
        SCM(playerid, -1, "Ai inchis meniul administrativ al afacerilor factiunilor.");
    }
    return 1;
}

Dialog:Secret(playerid, response, listitem, inputtext[])
{
    new escsecret[100];
    if (response)
    {
        if(isnull(inputtext))
        {
            ShowDialog(playerid, Show:<Secret>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Logare"EMBED_WHITE"", ""EMBED_WHITE"Pentru a te juca pe server este necesar sa adaugi un cuvant secret, il poti folosi pentru ati recupera parola.\n("EMBED_GRAY"Introdu cuvantul secret mai jos"EMBED_WHITE")", "Continua", "Iesi");
            return 1;
        }
        if(strlen(inputtext) < 6)
        {
            ShowDialog(playerid, Show:<Secret>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Logare"EMBED_WHITE"", ""EMBED_WHITE"Pentru a te juca pe server este necesar sa adaugi un cuvant secret, il poti folosi pentru ati recupera parola.\n{FF0000}Introdu cel putin 6 cifre/litere.{FFFFFF}\n("EMBED_GRAY"Introdu cuvantul secret mai jos"EMBED_WHITE")", "Continua", "Iesi");
            return 1;
        }
        mysql_real_escape_string(inputtext, escsecret);
        InsertPlayerSecretWord(playerid, escsecret);
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
    }
    return 1;
}

Dialog:Sex(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        //Choosed MALE:
        PlayerInfo[playerid][pSex] = 1;
//      SetIntVar(playerid, "RegisterPart", 4);
        ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", "Ce varsta ai?", "Continua", "Iesi");
    }
    else
    {
        //Choosed FEMALE:
        PlayerInfo[playerid][pSex] = 2;
//      SetIntVar(playerid, "RegisterPart", 4);
        ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", "Ce varsta ai?", "Continua", "Iesi");
    }
    return 1;
}

Dialog:Age(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", "Ce varsta ai?", "Continua", "Iesi");
        new age = strvalEx(inputtext);
        PlayerInfo[playerid][pAge] = age;
//      SetIntVar(playerid, "RegisterPart", 5);
        format(msg, sizeof(msg), "Deci tu ai varsta de %d ani.",age);
        ServerMSG(playerid, msg);
        ServerMSG(playerid, "Ce rasa ai?");
        ShowDialog(playerid, Show:<Origin>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Evolution Roleplay"EMBED_WHITE"", "Ce rasa ai?", "Continua", "Iesi");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
    new date[3];
    getdate(date[0], date[1], date[2]);
    if(response)
    {
        format(PlayerInfo[playerid][pOrigin],256,"%s",inputtext);
//      SetIntVar(playerid, "RegisterPart", 6);
        format(msg, sizeof(msg), "Varsta caracterului tau este de %d ani (esti nascut in %d).", PlayerInfo[playerid][pAge], date[0] - PlayerInfo[playerid][pAge]);
        ServerMSG(playerid, msg);
        DeletePVar(playerid, "JustRegister");
        SetPVarInt(playerid, "JustDoneRegister", 1);
        gpci(playerid,playerserial,sizeof(playerserial));
        format(query, sizeof(query), "INSERT INTO `users` (playerIP, playerSerial) VALUES ('%s', '%s')",GetPlayerIP(playerid),playerserial);
        SetPlayerSpawn(playerid);
//      LoginPlayer(playerid);
//      ShowDialog(playerid, Show:<REGASK1>, DIALOG_STYLE_LIST, "Ce inseamna RP?", "1. Real Prison\n2. Roleplay\n3. Real Player",  "Alege", "Kick");
//      SetTimerEx("RegSkinMenu",5000,0,"d",playerid);
//      ServerMSG(playerid, "SERVER: Asteapta cateva momente pana cand contul tau va fi creat.");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

//REGISTER QUESTION - iDon'tCare

Dialog:REGASK1(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem != 1)
        {
            DeletePlayerAccount(GetName(playerid));
            LeftServerMSG(playerid);
            Kick(playerid);
            return 1;
        }
        ShowDialog(playerid, Show:<REGASK2>, DIALOG_STYLE_LIST, "Ce inseamna MG?", "1. Mall Garage\n2. Matei Georgescu\n3. Metagaming",  "Alege", "Kick");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

Dialog:REGASK2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem != 2)
        {
            DeletePlayerAccount(GetName(playerid));
            LeftServerMSG(playerid);
            Kick(playerid);
            return 1;
        }
        ShowDialog(playerid, Show:<REGASK3>, DIALOG_STYLE_LIST, "Care dintre umatoarele propozitii defineste PowerGaming?", "1. Aprinderea uneti tigari in loc public.\n2. Mutarea cladirilor folosind bicicleta.\n3. Mersul cu masina pe langa un gang de negrii.",  "Alege", "Kick");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

Dialog:REGASK3(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem != 1)
        {
            DeletePlayerAccount(GetName(playerid));
            LeftServerMSG(playerid);
            Kick(playerid);
            return 1;
        }
        ShowDialog(playerid, Show:<REGASK4>, DIALOG_STYLE_LIST, "Ce faci atunci cand esti inconjurat de 10 mexicani inarmati?", "1. Scot un minigun din ghiozdan si ii omor pe toti.\n2. Sun la politie chiar daca acestia au armele indreptate spre mine.\n3. Fac roleplay-ul necesar, rolandu-mi frica.",  "Alege", "Kick");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

Dialog:REGASK4(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem != 2)
        {
            DeletePlayerAccount(GetName(playerid));
            LeftServerMSG(playerid);
            Kick(playerid);
            return 1;
        }
        ShowDialog(playerid, Show:<REGASK5>, DIALOG_STYLE_LIST, "Este permis sa sari pentru a ajunge mai departe?", "1. Da, daca cer permisiunea unui administrator.\n2. Nu, este scrict interzis.\n3. Daca nu este nici un admin online pot face ce vreau eu.",  "Alege", "Kick");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

Dialog:REGASK5(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem != 1)
        {
            DeletePlayerAccount(GetName(playerid));
            LeftServerMSG(playerid);
            Kick(playerid);
            return 1;
        }
        SetTimerEx("RegSkinMenu",5000,0,"d",playerid);
        ServerMSG(playerid, "SERVER: Asteapta cateva momente pana cand contul tau va fi creat.");
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
        return 1;
    }
    return 1;
}

//END OF Register Question - iDon'tCare

Dialog:Register(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(isnull(inputtext))
        {
            format(msg, sizeof(msg), ""EMBED_WHITE"Bun venit, "EMBED_GRAY"%s\n"EMBED_WHITE"\nAi 60 de secunde timp sa te loghezi\n\nIntroduceti parola (Trebuie sa contina cel putin 6 caractere)", GetName(playerid));
            ShowDialog(playerid, Show:<Register>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Inregistrare"EMBED_WHITE"", msg, "Register", "Quit");
            return 1;
        }
        if(strlen(inputtext) < 6)
        {
            format(msg, sizeof(msg), ""EMBED_WHITE"Bun venit, "EMBED_GRAY"%s\n"EMBED_WHITE"\nAi 60 de secunde timp sa te loghezi\n\nIntroduceti parola (Trebuie sa contina cel putin 6 caractere)", GetName(playerid));
            ShowDialog(playerid, Show:<Register>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Inregistrare"EMBED_WHITE"", msg, "Register", "Quit");
            return 1;
        }
        new escpass[100];
        mysql_real_escape_string(inputtext, escpass);
        CreatePlayerAccount(playerid, escpass);
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
    }
    return 1;
}

Dialog:Login(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(isnull(inputtext))
        {
            format(msg, sizeof(msg), ""EMBED_WHITE"Bun venit, "EMBED_GRAY"%s\n"EMBED_WHITE"\nAi timp 60 de secunde sa te loghezi\n\nIntroduceti parola", GetName(playerid));
            ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, ""EMBED_WHITE"Evolution Roleplay - Logare"EMBED_WHITE"", msg, "Login", "Quit");
            return 1;
        }
        new escapedPlayerName[MAX_PLAYER_NAME], escapepass[100];
        mysql_real_escape_string(inputtext, escapepass);
        mysql_real_escape_string(GetName(playerid), escapedPlayerName);

        format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `password` = '%s' LIMIT 0,1", escapedPlayerName, escapepass);
        mysql_function_query(dbHandle, query, true, "LoginPlayer", "i", playerid);
		#if defined debugOn
			print("Dialog:Login");
			printf(query);
		#endif
    }
    else
    {
        LeftServerMSG(playerid);
        Kick(playerid);
    }
    return 1;
}

Dialog:ConfirmWord(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(isnull(inputtext))
        {
            ShowDialog(playerid, Show:<ConfirmWord>, DIALOG_STYLE_INPUT, ""EMBED_RED"Scrie cuvantul secret al contului"EMBED_WHITE"", ""EMBED_WHITE"IP-ul pe care il folosesti nu este acelasi\ncu care acest cont a fost inregistrat, te rugam introdu cuvantul secret.", "Okay", "Exit");
            return 1;
        }
        new escapedPlayerName[MAX_PLAYER_NAME], escapesecret[100];
        mysql_real_escape_string(inputtext, escapesecret);
        mysql_real_escape_string(GetName(playerid), escapedPlayerName);
        format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `secret` = '%s' LIMIT 0,1", escapedPlayerName, escapesecret);
        mysql_function_query(dbHandle, query, true, "CheckSecretWord", "i", playerid);
    }
    else
    {
        Kick(playerid);
    }
    return 1;
}

Dialog:ChangePass(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(isnull(inputtext))
        {
            ShowDialog(playerid, Show:<ChangePass>, DIALOG_STYLE_INPUT, ""EMBED_RED"Scrie cuvantul secret al contului"EMBED_WHITE"", "Te rugam introdu codul secret cu care te-ai inregistrat", "Schimba", "Exit");
            return 1;
        }
        new escapedPlayerName[MAX_PLAYER_NAME], escapesecret[100];
        mysql_real_escape_string(inputtext, escapesecret);
        mysql_real_escape_string(GetName(playerid), escapedPlayerName);
        format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `secret` = '%s' LIMIT 0,1", escapedPlayerName, escapesecret);
        mysql_function_query(dbHandle, query, true, "OnPlayerChangePass", "i", playerid);
    }
    else
    {
        ServerMSG(playerid, "Ai renuntat la schimbarea parolei.");
    }
    return 1;
}

Dialog:ChangeSecret(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(isnull(inputtext))
        {
            ShowDialog(playerid, Show:<ChangeSecret>, DIALOG_STYLE_INPUT, ""EMBED_RED"Scrie cuvantul secret al contului"EMBED_WHITE"", ""EMBED_WHITE"Scrie cuvantul secret inainte de a-l schimba.", "Schimba", "Exit");
            return 1;
        }
        new escapedPlayerName[MAX_PLAYER_NAME], escapesecret[100];
        mysql_real_escape_string(inputtext, escapesecret);
        mysql_real_escape_string(GetName(playerid), escapedPlayerName);
        format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `secret` = '%s' LIMIT 0,1", escapedPlayerName, escapesecret);
        mysql_function_query(dbHandle, query, true, "OnPlayerChangeSecret", "i", playerid);
    }
    else
    {
        ServerMSG(playerid, "Ai renuntat la schimbarea cuvantului secret.");
    }
    return 1;
}

Dialog:SpawnAdminVehicle(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        new modelcolor = strval(inputtext);
        if(isnull(inputtext)) return ShowDialog(playerid, Show:<SpawnAdminVehicle>, DIALOG_STYLE_INPUT, ""EMBED_RED"Selecteaza culoarea vehiculului."EMBED_WHITE"", ""EMBED_WHITE"Culoarea trebuie sa fie cuprinsa intre id-urile (0-255)!", "Spawneaza", "Exit");
        if(modelcolor > 255 || modelcolor < 0) return ShowDialog(playerid, Show:<SpawnAdminVehicle>, DIALOG_STYLE_INPUT, ""EMBED_RED"Selecteaza culoarea vehiculului."EMBED_WHITE"", ""EMBED_WHITE"Culoarea trebuie sa fie cuprinsa intre id-urile (0-255)!", "Spawneaza", "Exit");
        CreateVehicle(GetIntVar(playerid, "cModel"), GetFloatVar(playerid, "cPosX"), GetFloatVar(playerid, "cPosY")-3, GetFloatVar(playerid, "cPosZ"), GetFloatVar(playerid, "cPosA"), modelcolor, modelcolor, -1);
        RemoveVar(playerid, "cModel");
        RemoveVar(playerid, "cPosX");
        RemoveVar(playerid, "cPosY");
        RemoveVar(playerid, "cPosZ");
        RemoveVar(playerid, "cPosA");
    }
    else
    {
        ServerMSG(playerid, "Ai inchis meniul de selectare al vehiculelor.");
    }
    return 1;
}

Dialog:SpawnAdminWeapon(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        new ammo = strval(inputtext);
        if(isnull(inputtext)) return ShowDialog(playerid, Show:<SpawnAdminWeapon>, DIALOG_STYLE_INPUT, ""EMBED_RED"Te rugam introdu cantitatea de munitie."EMBED_WHITE"", ""EMBED_WHITE"Cata munitie vrei sa ai?", "GetGun", "Exit");
        if(ammo < 0) return ShowDialog(playerid, Show:<SpawnAdminWeapon>, DIALOG_STYLE_INPUT, ""EMBED_RED"Te rugam introdu cantitatea de munitie."EMBED_WHITE"", ""EMBED_WHITE"Cata munitie vrei sa ai?", "GetGun", "Exit");
        GiveWeapon(playerid, GetIntVar(playerid, "SelectingWeapon"), ammo);
        format(msg, sizeof(msg), "AdmCmd: %s si-a dat o arma din admin. (%s, Munitie: %d)", GetName(playerid), GetWeaponNameEx(GetIntVar(playerid, "SelectingWeapon")), ammo);
        AMSG(COLOR_LIGHTRED, msg);
        RemoveVar(playerid, "SelectingWeapon");
    }
    else
    {
        ServerMSG(playerid, "Ai inchis meniul de selectare al armelor.");
    }
    return 1;
}

Dialog:Teles(playerid, response, listitem, inputtext[])
{
    if(!response) return SCM(playerid, 0xFF0000FF, "Sau{FFFFFF}Teles: {B4B5B7}Ai renuntat la a te teleporta.");
    switch(listitem)
        {
            case 0:
            {
                SetPlayerPos(playerid, -25.884498,-185.868988,1003.546875);
                SetInterior(playerid, 17);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}24/7 1");
                return 1;
            }
            case 1:
            {
                SetPlayerPos(playerid, 6.091179,-29.271898,1003.549438);
                SetInterior(playerid, 10);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}24/7 2");
                return 1;
            }
            case 2:
            {
                SetPlayerPos(playerid, -30.946699,-89.609596,1003.546875);
                SetInterior(playerid, 18);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}24/7 3");
                return 1;
            }
            case 3:
            {
                SetPlayerPos(playerid, -25.132598,-139.066986,1003.546875);
                SetInterior(playerid, 16);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}24/7 4");
                return 1;
            }
            case 4:
            {
                SetPlayerPos(playerid, -27.312299,-29.277599,1003.557250);
                SetInterior(playerid, 4);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}24/7 5");
                return 1;
            }
            case 5:
            {
                SetPlayerPos(playerid, -26.691598,-55.714897,1003.546875);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}24/7 6");
                return 1;
            }
            case 6:
            {
                SetPlayerPos(playerid, -1827.147338,7.207417,1061.143554);
                SetInterior(playerid, 14);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Airoport Ticket Desk");
                return 1;
            }
            case 7:
            {
                SetPlayerPos(playerid, -1861.936889,54.908092,1061.143554);
                SetInterior(playerid, 14);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Airoport Baggage Reclaim");
                return 1;
            }
            case 8:
            {
                SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Shamal");
                return 1;
            }
            case 9:
            {
                SetPlayerPos(playerid, 315.745086,984.969299,1958.919067);
                SetInterior(playerid, 9);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Andromada");
                return 1;
            }
            case 10:
            {
                SetPlayerPos(playerid, 286.148986,-40.644397,1001.515625);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation 1");
                return 1;
            }
            case 11:
            {
                SetPlayerPos(playerid, 286.800994,-82.547599,1001.515625);
                SetInterior(playerid, 4);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation 2");
                return 1;
            }
            case 12:
            {
                SetPlayerPos(playerid, 296.919982,-108.071998,1001.515625);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation 3");
                return 1;
            }
            case 13:
            {
                SetPlayerPos(playerid, 314.820983,-141.431991,999.601562);
                SetInterior(playerid, 7);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation 4");
                return 1;
            }
            case 14:
            {
                SetPlayerPos(playerid, 316.524993,-167.706985,999.593750);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation 5");
                return 1;
            }
            case 15:
            {
                SetPlayerPos(playerid, 302.292877,-143.139099,1004.062500);
                SetInterior(playerid, 7);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation Booths");
                return 1;
            }
            case 16:
            {
                SetPlayerPos(playerid, 298.507934,-141.647048,1004.054748);
                SetInterior(playerid, 7);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ammunation Range");
                return 1;
            }
            case 17:
            {
                SetPlayerPos(playerid, 1038.531372,0.111030,1001.284484);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Blastin Fools Hallway");
                return 1;
            }
            case 18:
            {
                SetPlayerPos(playerid, 444.646911,508.239044,1001.419494);
                SetInterior(playerid, 12);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Budget Inn Motel Room");
                return 1;
            }
            case 19:
            {
                SetPlayerPos(playerid, 2215.454833,-1147.475585,1025.796875);
                SetInterior(playerid, 14);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Jefferson Motel");
                return 1;
            }
            case 20:
            {
                SetPlayerPos(playerid, 833.269775,10.588416,1004.179687);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Off Track Betting Shop");
                return 1;
            }
            case 21:
            {
                SetPlayerPos(playerid, -103.559165,-24.225606,1000.718750);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Sex Shop");
                return 1;
            }
            case 22:
            {
                SetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Meat Factory");
                return 1;
            }
            case 23:
            {
                SetPlayerPos(playerid, -2240.468505,137.060440,1035.414062);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Zero's RC Shop");
                return 1;
            }
            case 24:
            {
                SetPlayerPos(playerid, 663.836242,-575.605407,16.343263);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Dillmore Gas Station");
                return 1;
            }
            case 25:
            {
                SetPlayerPos(playerid, 2169.461181,1618.798339,999.976562);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Catigula's Basement");
                return 1;
            }
            case 26:
            {
                SetPlayerPos(playerid, 1889.953369,1017.438293,31.882812);
                SetInterior(playerid, 10);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}FDC Janitors Room");
                return 1;
            }
            case 27:
            {
                SetPlayerPos(playerid, -2159.122802,641.517517,1052.381713);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Woozie's Office");
                return 1;
            }
            case 28:
            {
                SetPlayerPos(playerid, 207.737991,-109.019996,1005.132812);
                SetInterior(playerid, 15);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Binco");
                return 1;
            }
            case 29:
            {
                SetPlayerPos(playerid, 204.332992,-166.694992,1000.523437);
                SetInterior(playerid, 14);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Didier Sachs");
                return 1;
            }
            case 30:
            {
                SetPlayerPos(playerid, 207.054992,-138.804992,1003.507812);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Prolaps");
                return 1;
            }
            case 31:
            {
                SetPlayerPos(playerid, 203.777999,-48.492397,1001.804687);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Suburban");
                return 1;
            }
            case 32:
            {
                SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Victim");
                return 1;
            }
            case 33:
            {
                SetPlayerPos(playerid, 161.391006,-93.159156,1001.804687);
                SetInterior(playerid, 18);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}ZIP");
                return 1;
            }
            case 34:
            {
                SetPlayerPos(playerid, 493.390991,-22.722799,1000.679687);
                SetInterior(playerid, 17);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Alhambra");
                return 1;
            }
            case 35:
            {
                SetPlayerPos(playerid, 501.980987,-69.150199,998.757812);
                SetInterior(playerid, 11);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ten Green Bottles");
                return 1;
            }
            case 36:
            {
                SetPlayerPos(playerid, -227.027999,1401.229980,27.765625);
                SetInterior(playerid, 18);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Lil' Probe Inn");
                return 1;
            }
            case 37:
            {
                SetPlayerPos(playerid, 457.304748,-88.428497,999.554687);
                SetInterior(playerid, 4);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Jay's Dinner");
                return 1;
            }
            case 38:
            {
                SetPlayerPos(playerid, 454.973937,-110.104995,1000.077209);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Gant Bridge Dinner");
                return 1;
            }
            case 39:
            {
                SetPlayerPos(playerid, 435.271331,-80.958938,999.554687);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Secret Valley Dinner");
                return 1;
            }
            case 40:
            {
                SetPlayerPos(playerid, 452.489990,-18.179698,1001.132812);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}World of Coq");
                return 1;
            }
            case 41:
            {
                SetPlayerPos(playerid, 681.557861,-455.680053,-25.609874);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Welcome Pump");
                return 1;
            }
            case 42:
            {
                SetPlayerPos(playerid, 375.962463,-65.816848,1001.507812);
                SetInterior(playerid, 10);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Burger Shot");
                return 1;
            }
            case 43:
            {
                SetPlayerPos(playerid, 369.579528,-4.487294,1001.858886);
                SetInterior(playerid, 9);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Cluckin' Bell");
                return 1;
            }
            case 44:
            {
                SetPlayerPos(playerid, 373.825653,-117.270904,1001.499511);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Well Stacked Pizza");
                return 1;
            }
            case 45:
            {
                SetPlayerPos(playerid, 381.169189,-188.803024,1000.632812);
                SetInterior(playerid, 17);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Jimmy's Sticky Ring");
                return 1;
            }
            case 46:
            {
                SetPlayerPos(playerid, 244.411987,305.032989,999.148437);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Denise Room");
                return 1;
            }
            case 47:
            {
                SetPlayerPos(playerid, 271.884979,306.631988,999.148437);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Katie Room");
                return 1;
            }
            case 48:
            {
                SetPlayerPos(playerid, 291.282989,310.031982,999.148437);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Helena Room");
                return 1;
            }
            case 49:
            {
                SetPlayerPos(playerid, 302.180999,300.722991,999.148437);
                SetInterior(playerid, 4);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Michelle Room");
                return 1;
            }
            case 50:
            {
                SetPlayerPos(playerid, 322.197998,302.497985,999.148437);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Barbara Room");
                return 1;
            }
            case 51:
            {
                SetPlayerPos(playerid, 346.870025,309.259033,999.155700);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Millie Room");
                return 1;
            }
            case 52:
            {
                SetPlayerPos(playerid, -959.564392,1848.576782,9.000000);
                SetInterior(playerid, 17);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Sherman Dam");
                return 1;
            }
            case 53:
            {
                SetPlayerPos(playerid, 384.808624,173.804992,1008.382812);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Planning Dept.");
                return 1;
            }
            case 54:
            {
                SetPlayerPos(playerid, 223.431976,1872.400268,13.734375);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Area 51");
                return 1;
            }
            case 55:
            {
                SetPlayerPos(playerid, 772.111999,-3.898649,1000.728820);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LS Gym");
                return 1;
            }
            case 56:
            {
                SetPlayerPos(playerid, 774.213989,-48.924297,1000.585937);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}SF Gym");
                return 1;
            }
            case 57:
            {
                SetPlayerPos(playerid, 773.579956,-77.096694,1000.655029);
                SetInterior(playerid, 7);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LV Gym");
                return 1;
            }
            case 58:
            {
                SetPlayerPos(playerid, 1527.229980,-11.574499,1002.097106);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}B Dup's House");
                return 1;
            }
            case 59:
            {
                SetPlayerPos(playerid, 1523.509887,-47.821197,1002.130981);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}B Dup's Crack Pad");
                return 1;
            }
            case 60:
            {
                SetPlayerPos(playerid, 2496.049804,-1695.238159,1014.742187);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}CJ's House");
                return 1;
            }
            case 61:
            {
                SetPlayerPos(playerid, 1267.663208,-781.323242,1091.906250);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Madd Dogg's Mansion");
                return 1;
            }
            case 62:
            {
                SetPlayerPos(playerid, 513.882507,-11.269994,1001.565307);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}OG Loc's House");
                return 1;
            }
            case 63:
            {
                SetPlayerPos(playerid, 2454.717041,-1700.871582,1013.515197);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Ryder's House");
                return 1;
            }
            case 64:
            {
                SetPlayerPos(playerid, 2527.654052,-1679.388305,1015.498596);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Sweet's House");
                return 1;
            }
            case 65:
            {
                SetPlayerPos(playerid, 2543.462646,-1308.379882,1026.728393);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Crack Factory");
                return 1;
            }
            case 66:
            {
                SetPlayerPos(playerid, 1212.019897,-28.663099,1000.953125);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Big Spread Ranch");
                return 1;
            }
            case 67:
            {
                SetPlayerPos(playerid, 761.412963,1440.191650,1102.703125);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Fanny Batters");
                return 1;
            }
            case 68:
            {
                SetPlayerPos(playerid, 1204.809936,-11.586799,1000.921875);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Strip Club");
                return 1;
            }
            case 69:
            {
                SetPlayerPos(playerid, 1204.809936,13.897239,1000.921875);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Strip Club Private Room");
                return 1;
            }
            case 70:
            {
                SetPlayerPos(playerid, 942.171997,-16.542755,1000.929687);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Unnamed Brothel");
                return 1;
            }
            case 71:
            {
                SetPlayerPos(playerid, 964.106994,-53.205497,1001.124572);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Tiger Skin Brothel");
                return 1;
            }
            case 72:
            {
                SetPlayerPos(playerid, -2640.762939,1406.682006,906.460937);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Pleasure Domes");
                return 1;
            }
            case 73:
            {
                SetPlayerPos(playerid, -729.276000,503.086944,1371.971801);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Liberty City Outside");
                return 1;
            }
            case 74:
            {
                SetPlayerPos(playerid, -794.806396,497.738037,1376.195312);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Liberty City Inside");
                return 1;
            }
            case 75:
            {
                SetPlayerPos(playerid,  2350.339843,-1181.649902,1027.976562);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Gang House");
                return 1;
            }
            case 76:
            {
                SetPlayerPos(playerid, 2807.619873,-1171.899902,1025.570312);
                SetInterior(playerid, 8);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Colonel Furhberger's House");
                return 1;
            }
            case 77:
            {
                SetPlayerPos(playerid, 18.564971,1118.209960,1083.882812);
                SetInterior(playerid, 5);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Crack Den");
                return 1;
            }
            case 78:
            {
                SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Warehouse 1");
                return 1;
            }
            case 79:
            {
                SetPlayerPos(playerid, 1302.519897,-1.787510,1001.028259);
                SetInterior(playerid, 18);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Warehouse 2");
                return 1;
            }
            case 80:
            {
                SetPlayerPos(playerid, 2522.000000,-1673.383911,14.866223);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Sweet's Garage");
                return 1;
            }
            case 81:
            {
                SetPlayerPos(playerid, -221.059051,1408.984008,27.773437);
                SetInterior(playerid, 18);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Lil' Probe Inn Toilet");
                return 1;
            }
            case 82:
            {
                SetPlayerPos(playerid, 2324.419921,-1145.568359,1050.710083);
                SetInterior(playerid, 12);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Unused Safe House");
                return 1;
            }
            case 83:
            {
                SetPlayerPos(playerid, -975.975708,1060.983032,1345.671875);
                SetInterior(playerid, 10);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}RC Battlefield");
                return 1;
            }
            case 84:
            {
                SetPlayerPos(playerid, 411.625976,-21.433298,1001.804687);
                SetInterior(playerid, 2);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Barber 1");
                return 1;
            }
            case 85:
            {
                SetPlayerPos(playerid, 418.652984,-82.639793,1001.804687);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Barber 2");
                return 1;
            }
            case 86:
            {
                SetPlayerPos(playerid, 412.021972,-52.649898,1001.898437);
                SetInterior(playerid, 12);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Barber 3");
                return 1;
            }
            case 87:
            {
                SetPlayerPos(playerid, -204.439987,-26.453998,1002.273437);
                SetInterior(playerid, 16);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Tatoo Parlour 1");
                return 1;
            }
            case 88:
            {
                SetPlayerPos(playerid, -204.439987,-8.469599,1002.273437);
                SetInterior(playerid, 17);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Tatoo Parlour 2");
                return 1;
            }
            case 89:
            {
                SetPlayerPos(playerid, -204.439987,-43.652496,1002.273437);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Tatoo Parlour 3");
                return 1;
            }
            case 90:
            {
                SetPlayerPos(playerid, 246.783996,63.900199,1003.640625);
                SetInterior(playerid, 6);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LS Police HQ");
                return 1;
            }
            case 91:
            {
                SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
                SetInterior(playerid, 10);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}SF police HQ");
                return 1;
            }
            case 92:
            {
                SetPlayerPos(playerid, 288.745971,169.350997,1007.171875);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LV police HQ");
                return 1;
            }
            case 93:
            {
                SetPlayerPos(playerid, -2029.798339,-106.675910,1035.171875);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Car School");
                return 1;
            }
            case 94:
            {
                SetPlayerPos(playerid, -1398.065307,-217.028900,1051.115844);
                SetInterior(playerid, 7);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}8-Track");
                return 1;
            }
            case 95:
            {
                SetPlayerPos(playerid, -1398.103515,937.631164,1036.479125);
                SetInterior(playerid, 15);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Bloodbowl");
                return 1;
            }
            case 96:
            {
                SetPlayerPos(playerid, -1444.645507,-664.526000,1053.572998);
                SetInterior(playerid, 4);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Dirt Track");
                return 1;
            }
            case 97:
            {
                SetPlayerPos(playerid, -1465.268676,1557.868286,1052.531250);
                SetInterior(playerid, 14);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Kickstart");
                return 1;
            }
            case 98:
            {
                SetPlayerPos(playerid, -1401.829956,107.051300,1032.273437);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Vice Stadium");
                return 1;
            }
            case 99:
            {
                SetPlayerPos(playerid, -1790.378295,1436.949829,7.187500);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}SF Garage");
                return 1;
            }
            case 100:
            {
                SetPlayerPos(playerid, 1643.839843,-1514.819580,13.566620);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LS Garage");
                return 1;
            }
            case 101:
            {
                SetPlayerPos(playerid, -1685.636474,1035.476196,45.210937);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}SF Bomb Shop");
                return 1;
            }
            case 102:
            {
                SetPlayerPos(playerid, 76.632553,-301.156829,1.578125);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Blueberry Warehouse");
                return 1;
            }
            case 103:
            {
                SetPlayerPos(playerid, 1059.895996,2081.685791,10.820312);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LV Warehouse 1");
                return 1;
            }
            case 104:
            {
                SetPlayerPos(playerid, 1059.180175,2148.938720,10.820312);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LV Warehouse 2");
                return 1;
            }
            case 105:
            {
                SetPlayerPos(playerid, 2131.507812,1600.818481,1008.359375);
                SetInterior(playerid, 1);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Catigula's Hidden Room");
                return 1;
            }
            case 106:
            {
                SetPlayerPos(playerid, 2315.952880,-1.618174,26.742187);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Bank");
                return 1;
            }
            case 107:
            {
                SetPlayerPos(playerid, 2319.714843,-14.838361,26.749565);
                SetInterior(playerid, 0);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Bank - Behind Desk");
                return 1;
            }
            case 108:
            {
                SetPlayerPos(playerid, 1710.433715,-1669.379272,20.225049);
                SetInterior(playerid, 18);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}LS Atruim");
                return 1;
            }
            case 109:
            {
                SetPlayerPos(playerid, 1494.325195,1304.942871,1093.289062);
                SetInterior(playerid, 3);
                SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}AdmCmd: Ai fost teleportat la {0099FF}Bike School");
                return 1;
            }
        }
    return 1;
}

Dialog:HatsDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "Ai ajuns la limita hainelor pe care poti sa le deti.");
        new i = GetNextToySlot(playerid);
        SetIntVar(playerid, "ToyModelBuying", HatsInfo[listitem][toyModel]);
        SetIntVar(playerid, "ToyBoneBuying", HatsInfo[listitem][toyBone]);
        SetIntVar(playerid, "ToyPriceBuying", HatsInfo[listitem][toyPrice]);
        SetStringVar(playerid, "ToyNameBuying", HatsInfo[listitem][toyName]);
        if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
        SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), HatsInfo[listitem][toyOffestX], HatsInfo[listitem][toyOffestY], HatsInfo[listitem][toyOffestZ], HatsInfo[listitem][toyRotX], HatsInfo[listitem][toyRotY], HatsInfo[listitem][toyRotZ], HatsInfo[listitem][toyScaleX], HatsInfo[listitem][toyScaleY], HatsInfo[listitem][toyScaleZ]);
        GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
        format(msg, sizeof(msg), "Ai cumparat un {00FF00}%s{FFFFFF}, pentru ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
        ServerMSG(playerid, msg);
        SetIntVar(playerid, "ToySlotEditing", i);
        SetIntVar(playerid, "JustBoughtToy", 1);
        EditAttachedObject(playerid, i);
        OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul hainelor.");
    }
    return 1;
}

Dialog:GlassesDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "Ai ajuns la limita accesoriilor pe care poti sa le deti.");
        new i = GetNextToySlot(playerid);
        SetIntVar(playerid, "ToyModelBuying", GlassesInfo[listitem][toyModel]);
        SetIntVar(playerid, "ToyBoneBuying", GlassesInfo[listitem][toyBone]);
        SetIntVar(playerid, "ToyPriceBuying", GlassesInfo[listitem][toyPrice]);
        SetStringVar(playerid, "ToyNameBuying", GlassesInfo[listitem][toyName]);
        if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
        SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GlassesInfo[listitem][toyOffestX], GlassesInfo[listitem][toyOffestY], GlassesInfo[listitem][toyOffestZ], GlassesInfo[listitem][toyRotX], GlassesInfo[listitem][toyRotY], GlassesInfo[listitem][toyRotZ], GlassesInfo[listitem][toyScaleX], GlassesInfo[listitem][toyScaleY], GlassesInfo[listitem][toyScaleZ]);
        GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
        format(msg, sizeof(msg), "Ai cumparat o pereche de {00FF00}%s{FFFFFF}, pentru ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
        ServerMSG(playerid, msg);
        SetIntVar(playerid, "ToySlotEditing", i);
        SetIntVar(playerid, "JustBoughtToy", 1);
        EditAttachedObject(playerid, i);
        OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul hainelor.");
    }
    return 1;
}
Dialog:BandanasDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "Ai ajuns la limita accesoriilor pe care poti sa le deti.");
        new i = GetNextToySlot(playerid);
        SetIntVar(playerid, "ToyModelBuying", BandanasInfo[listitem][toyModel]);
        SetIntVar(playerid, "ToyBoneBuying", BandanasInfo[listitem][toyBone]);
        SetIntVar(playerid, "ToyPriceBuying", BandanasInfo[listitem][toyPrice]);
        SetStringVar(playerid, "ToyNameBuying", BandanasInfo[listitem][toyName]);
        if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
        SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), BandanasInfo[listitem][toyOffestX], BandanasInfo[listitem][toyOffestY], BandanasInfo[listitem][toyOffestZ], BandanasInfo[listitem][toyRotX], BandanasInfo[listitem][toyRotY], BandanasInfo[listitem][toyRotZ], BandanasInfo[listitem][toyScaleX], BandanasInfo[listitem][toyScaleY], BandanasInfo[listitem][toyScaleZ]);
        format(msg, sizeof(msg), "Ai cumparat o {00FF00}%s{FFFFFF}, pentru ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
        GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
        ServerMSG(playerid, msg);
        SetIntVar(playerid, "ToySlotEditing", i);
        SetIntVar(playerid, "JustBoughtToy", 1);
        EditAttachedObject(playerid, i);
        OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul bandanelor.");
    }
    return 1;
}
Dialog:HeadphonesDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "Ai ajuns la limita accesoriilor pe care poti sa le deti.");
        new i = GetNextToySlot(playerid);
        SetIntVar(playerid, "ToyModelBuying", HeadphonesInfo[listitem][toyModel]);
        SetIntVar(playerid, "ToyBoneBuying", HeadphonesInfo[listitem][toyBone]);
        SetIntVar(playerid, "ToyPriceBuying", HeadphonesInfo[listitem][toyPrice]);
        SetStringVar(playerid, "ToyNameBuying", HeadphonesInfo[listitem][toyName]);
        if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
        SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), HeadphonesInfo[listitem][toyOffestX], HeadphonesInfo[listitem][toyOffestY], HeadphonesInfo[listitem][toyOffestZ], HeadphonesInfo[listitem][toyRotX], HeadphonesInfo[listitem][toyRotY], HeadphonesInfo[listitem][toyRotZ], HeadphonesInfo[listitem][toyScaleX], HeadphonesInfo[listitem][toyScaleY], HeadphonesInfo[listitem][toyScaleZ]);
        GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
        format(msg, sizeof(msg), "Ai cumparat o {00FF00}%s{FFFFFF}, pentru ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
        ServerMSG(playerid, msg);
        SetIntVar(playerid, "ToySlotEditing", i);
        SetIntVar(playerid, "JustBoughtToy", 1);
        EditAttachedObject(playerid, i);
        OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul castilor.");
    }
    return 1;
}
Dialog:SportsDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "Ai ajuns la limita accesoriilor pe care poti sa le deti.");
        new i = GetNextToySlot(playerid);
        SetIntVar(playerid, "ToyModelBuying", SportsInfo[listitem][toyModel]);
        SetIntVar(playerid, "ToyBoneBuying", SportsInfo[listitem][toyBone]);
        SetIntVar(playerid, "ToyPriceBuying", SportsInfo[listitem][toyPrice]);
        SetStringVar(playerid, "ToyNameBuying", SportsInfo[listitem][toyName]);
        if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
        SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), SportsInfo[listitem][toyOffestX], SportsInfo[listitem][toyOffestY], SportsInfo[listitem][toyOffestZ], SportsInfo[listitem][toyRotX], SportsInfo[listitem][toyRotY], SportsInfo[listitem][toyRotZ], SportsInfo[listitem][toyScaleX], SportsInfo[listitem][toyScaleY], SportsInfo[listitem][toyScaleZ]);
        GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
        format(msg, sizeof(msg), "Ai cumparat o {00FF00}%s{FFFFFF}, pentru ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
        ServerMSG(playerid, msg);
        SetIntVar(playerid, "ToySlotEditing", i);
        SetIntVar(playerid, "JustBoughtToy", 1);
        EditAttachedObject(playerid, i);
        OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul hainelor.");
    }
    return 1;
}

Dialog:GuitarsDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 3)
        {
            if(GetCash(playerid) < BOOMBOX_PRICE) return NoCashMSG(playerid);
            if(GetIntVar(playerid, "BoomBox") ==1) return SCM(playerid, COLOR_CYAN, "Ai deja un casetofon.");
            GiveCash(playerid, -BOOMBOX_PRICE);
            format(msg, sizeof(msg), "Ai cumparat un casetofon pentru ${FFFF00}%d{FFFFFF}, /boomboxhelp pentru celelalte comenzi.", BOOMBOX_PRICE);
            SCM(playerid, -1, msg);
            SetIntVar(playerid, "BoomBox", 1);
        }
        else
        {
            SetIntVar(playerid, "ToyModelBuying", GuitarsInfo[listitem][toyModel]);
            SetIntVar(playerid, "ToyPriceBuying", GuitarsInfo[listitem][toyPrice]);
            SetStringVar(playerid, "ToyNameBuying", GuitarsInfo[listitem][toyName]);
            if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
            ShowDialog(playerid, Show:<SelectGuitarBone>, DIALOG_STYLE_LIST, "{FFFF00}Unde ai dori sa iti asezi chitara?", "Pe spate\nMana dreapta\nMana stanga", "Cumpara", "Anuleaza");
        }
    }
    else return SCM(playerid, -1, "Ai inchis dialogul chitarilor.");
    return 1;
}

Dialog:SelectGuitarBone(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = GetNextToySlot(playerid);
        switch(listitem)
        {
            case 0:
            {
                SetIntVar(playerid, "ToyBoneBuying", 1);
                SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), 0.0, -0.145, 0.0, 14.8, 85.1, -19.2, 1.0, 1.0, 1.0);
            }
            case 1:
            {
                SetIntVar(playerid, "ToyBoneBuying", 6);
                SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
            }
            case 2:
            {
                SetIntVar(playerid, "ToyBoneBuying", 5);
                SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), 0.116999, 0.059999, 0.021999, 156.0, 0.0, 174.5, 0.787999, 1.145, 0.689998);
            }
        }
        GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
        format(msg, sizeof(msg), "Ai cumparat o {00FF00}%s{FFFFFF}, pentru ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
        ServerMSG(playerid, msg);
        SetIntVar(playerid, "ToySlotEditing", i);
        SetIntVar(playerid, "JustBoughtToy", 1);
        EditAttachedObject(playerid, i);
        OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul de selectare al chitarilor.");
    }
    return 1;
}

Dialog:ClothesCategory(playerid, response, listitem, inputtext[])
{
    new str[3000];
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                for(new x;x<sizeof(HatsInfo);x++)
                {
                    format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, HatsInfo[x][toyName], HatsInfo[x][toyPrice]);
                }
                ShowDialog(playerid, Show:<HatsDialog>, DIALOG_STYLE_LIST, "{FF0000}Te rugam selecteaza un obiect", str, "Cumpara", "Anuleaza");
            }
            case 1:
            {
                for(new x;x<sizeof(GlassesInfo);x++)
                {
                    format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, GlassesInfo[x][toyName], GlassesInfo[x][toyPrice]);
                }
                ShowDialog(playerid, Show:<GlassesDialog>, DIALOG_STYLE_LIST, "{FF0000}Te rugam selecteaza un obiect", str, "Cumpara", "Anuleaza");
            }
            case 2:
            {
                for(new x;x<sizeof(BandanasInfo);x++)
                {
                    format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, BandanasInfo[x][toyName], BandanasInfo[x][toyPrice]);
                }
                ShowDialog(playerid, Show:<BandanasDialog>, DIALOG_STYLE_LIST, "{FF0000}Te rugam selecteaza un obiect", str, "Cumpara", "Anuleaza");
            }
            case 3:
            {
                for(new x;x<sizeof(HeadphonesInfo);x++)
                {
                    format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, HeadphonesInfo[x][toyName], HeadphonesInfo[x][toyPrice]);
                }
                ShowDialog(playerid, Show:<HeadphonesDialog>, DIALOG_STYLE_LIST, "{FF0000}Te rugam selecteaza un obiect", str, "Cumpara", "Anuleaza");
            }
        }
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul hainelor.");
    }
    return 1;
}

Dialog:ChangeBoomBoxURL(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PlayPlayerBoomBoxURL(playerid, BoomBoxInfo[listitem][boomboxUrlName], BoomBoxInfo[listitem][boomboxURL]);
    }
    else
    {
        SCM(playerid, -1, "Ai inchis dialogul statiilor.");
    }
    return 1;
}

Dialog:ModDialog(playerid, response, listitem, inputtext[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingWheels", 1);
                SetStringVar(playerid, "CompType", "Wheels");
                SetIntVar(playerid, "CompPrice", Wheels[0][compPrice]);
                SetIntVar(playerid, "CompID", Wheels[0][compID]);
                SetIntVar(playerid, "CompSlot", 0);
                SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba componentele.");
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                ShowModText(playerid);
                HandleComponentText(playerid, vehicle);
                IsModding{playerid} = true;
            }
            case 1:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingSpoilers", 1);
                SetStringVar(playerid, "CompType", "Spoilers");
                SetIntVar(playerid, "CompPrice", Spoilers[0][compPrice]);
                SetIntVar(playerid, "CompID", Spoilers[0][compID]);
                SetIntVar(playerid, "CompSlot", 0);
                SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba componentele.");
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                ShowModText(playerid);
                HandleComponentText(playerid, vehicle);
                IsModding{playerid} = true;
            }
            case 2:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingScoops", 1);
                SetStringVar(playerid, "CompType", "Scoops");
                SetIntVar(playerid, "CompPrice", Scoops[0][compPrice]);
                SetIntVar(playerid, "CompID", Scoops[0][compID]);
                SetIntVar(playerid, "CompSlot", 0);
                SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba componentele.");
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                ShowModText(playerid);
                HandleComponentText(playerid, vehicle);
                IsModding{playerid} = true;
            }
            case 3:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingRoofs", 1);
                SetStringVar(playerid, "CompType", "Roofs");
                SetIntVar(playerid, "CompPrice", Roofs[0][compPrice]);
                SetIntVar(playerid, "CompID", Roofs[0][compID]);
                SetIntVar(playerid, "CompSlot", 0);
                SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba componentele.");
                ShowModText(playerid);
                HandleComponentText(playerid, vehicle);
                IsModding{playerid} = true;
            }
            case 4:
            {
                ShowDialog(playerid, Show:<NitroDialog>, DIALOG_STYLE_LIST, "Vehicle Modification", "Nitro 2x - $1500\nNitro 5x - $2500\nNitro 10x - $3500", "Cumpara", "Exit");
            }
            case 5:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingPaints", 1);
                SetIntVar(playerid, "OnPaint", 0);
                ChangeVehicleColor(vehicle, 1, 1);
                ChangeVehiclePaintjob(vehicle, 0);
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba stilul de vopsire.");
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                ShowModText(playerid);
                HandlePaintJobText(playerid, vehicle);
                BuyingPaintJob{playerid} = true;
            }
            case 6:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingSkirts", 1);
                SetStringVar(playerid, "CompType", "Sideskirts");
                SetIntVar(playerid, "CompPrice", Sideskirts[0][compPrice]);
                SetIntVar(playerid, "CompID", Sideskirts[0][compID]);
                SetIntVar(playerid, "CompSlot", 0);
                SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba componentele.");
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                ShowModText(playerid);
                HandleComponentText(playerid, vehicle);
                IsModding{playerid} = true;
            }
            case 7:
            {
                PutPlayerInModShop(playerid);
                SetIntVar(playerid, "BrowsingExhausts", 1);
                SetStringVar(playerid, "CompType", "Exhausts");
                SetIntVar(playerid, "CompPrice", Exhausts[0][compPrice]);
                SetIntVar(playerid, "CompID", Exhausts[0][compID]);
                SetIntVar(playerid, "CompSlot", 0);
                SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
                SCM(playerid, -1, "SFAT: Apasa pe NUMPAD tasta {FFFF00}4{FFFFFF} sau NUMPAD {FFFF00}6{FFFFFF} pentru a schimba componentele.");
                SCM(playerid, -1, "SFAT: Apasa tasta Y pentru a cumpara componenta si N pentru a renunta!");
                ShowModText(playerid);
                HandleComponentText(playerid, vehicle);
                IsModding{playerid} = true;
            }
            case 8:
            {
                if(HasComponent(vehicle, 1087)) return SCM(playerid, COLOR_INFO, "Ai deja hidraulice.");
                if(GetCash(playerid) < 10000) return NoCashMSG(playerid);
                GiveCash(playerid, -10000);
                SetVehicleComponent(vehicle, 1087, CARMODTYPE_HYDRAULICS);
                InfoMSG(playerid, "~b~Ai cumparat cu succes Hidraulice pentru masina ta.~n~~g~Pret: ~w~$10,000", 10);
            }
            case 9:
            {
                if(VehicleInfo[vehicle][carRadio] == 1) return SCM(playerid, COLOR_INFO, "Ai deja un casetofon.");
                if(GetCash(playerid) < 200) return NoCashMSG(playerid);
                GiveCash(playerid, -200);
                VehicleInfo[vehicle][carRadio] = 1;
                InfoMSG(playerid, "~b~Ai cumparat cu succes un Casetofon.~n~~g~Pret: ~w~$200~n~~w~poti folosi /setstation acum.", 10);
                SaveVehicle(vehicle);
            }
        }
    }
    return 1;
}

Dialog:NitroDialog(playerid, response, listitem, inputtext[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(HasComponent(vehicle, 1009)) return SCM(playerid, COLOR_INFO, "Ai deja Nitro 2x.");
                if(GetCash(playerid) < 150) return NoCashMSG(playerid);
                GiveCash(playerid, -1500);
                SetVehicleComponent(vehicle, 1009, CARMODTYPE_NITRO);
                InfoMSG(playerid, "~b~Ai cumparat cu succes 2x nitro upgrade.~n~~g~Pret: ~w~$1500", 10);
            }
            case 1:
            {
                if(HasComponent(vehicle, 1008)) return SCM(playerid, COLOR_INFO, "Ai deja Nitro 5x.");
                if(GetCash(playerid) < 2500) return NoCashMSG(playerid);
                GiveCash(playerid, -2500);
                SetVehicleComponent(vehicle, 1008, CARMODTYPE_NITRO);
                InfoMSG(playerid, "~b~Ai cumparat cu succes 5x nitro upgrade.~n~~g~Pret: ~w~$2500", 10);
            }
            case 2:
            {
                if(HasComponent(vehicle, 1010)) return SCM(playerid, COLOR_INFO, "Ai deja Nitro 10x.");
                if(GetCash(playerid) < 3500) return NoCashMSG(playerid);
                GiveCash(playerid, -3500);
                SetVehicleComponent(vehicle, 1010, CARMODTYPE_NITRO);
                InfoMSG(playerid, "~b~Ai cumparat cu succes 10x nitro upgrade.~n~~g~Pret: ~w~$3500", 10);
            }
        }
    }
    return 1;
}

Dialog:HandleBuying(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new price = StoreItems[listitem][itemPrice], item = StoreItems[listitem][itemID], name[24];
        format(name, sizeof(name), "%s", StoreItems[listitem][itemName]);
        if(GetCash(playerid) < price) return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani!");
        GiveCash(playerid, -price);
        BizInfo[BizEntered[playerid]][bizCash] += price;
        GivePlayerItem(playerid, item);
        SCMEx(playerid, COLOR_GREY, "Ai cumparat un obiect pentru {006600}%d$. {AFAFAF}(%s).",price, name);
        if(!CompareStrings(StoreItems[listitem][itemUsage], "none"))
        {
            SCMEx(playerid, COLOR_OOC, "HINT: /%s", StoreItems[listitem][itemUsage]);
        }
        return 1;
    }
    return 1;
}

Dialog:LSPDDuty(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!PlayerToPoint(30.0, playerid, 312.2816,-165.5768,999.6010)) return SCM(playerid, COLOR_WHITE, "Nu esti in Armoury.");
        format(msg, sizeof(msg), "%s %s isi scoate arma si insigna din dulap.", GetRankName(playerid), GetNameWithMask(playerid));
        ProxDetector(15.0, playerid, msg, COLOR_PURPLE);
        format(msg, sizeof(msg), "** HQ: %s %s este acum OnDuty! **", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
        SafeResetPlayerWeapons(playerid);
        GiveWeapon(playerid, 24, 300);
        GiveWeapon(playerid, 3, 1);
        GiveWeapon(playerid, 41, 60000);
        CopDuty{playerid} = true;
        SetPlayerColor(playerid, 0x8c8cfeff);
    }
    else
    {
        if(!PlayerToPoint(30.0, playerid, 312.2816,-165.5768,999.6010)) return SCM(playerid, COLOR_WHITE, "Nu esti in Armoury.");
        format(msg, sizeof(msg), "%s %s isi scoate arma si insigna din dulap", GetRankName(playerid), GetNameWithMask(playerid));
        ProxDetector(15.0, playerid, msg, COLOR_PURPLE);
        format(msg, sizeof(msg), "** HQ: %s %s este acum OnDuty! **", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
        SafeResetPlayerWeapons(playerid);
        GiveWeapon(playerid, 24, 300);
        GiveWeapon(playerid, 3, 1);
        GiveWeapon(playerid, 41, 2000);
        CopDuty{playerid} = true;
    }
    return 1;
}

Dialog:LSPDClothes(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(HasAttachedObject(playerid, 18636)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 18636, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 18636;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 1:
            {
                if(HasAttachedObject(playerid, 19099)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta..");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19099, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19099;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 2:
            {
                if(HasAttachedObject(playerid, 19100)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta..");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19100, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19100;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 3:
            {
                if(HasAttachedObject(playerid, 19161)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta..");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19161, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19161;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 4:
            {
                if(HasAttachedObject(playerid, 19162)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19162, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19162;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 5:
            {
                if(HasAttachedObject(playerid, 19521)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19521, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19521;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 6:
            {
                if(HasAttachedObject(playerid, 19200)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19200, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19200;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 7:
            {
                if(HasAttachedObject(playerid, 18637)) return SCM(playerid, COLOR_GREY, "Ai deja palaria asta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 18637, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 18637;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 8:
            {
                if(HasAttachedObject(playerid, 19142)) return SCM(playerid, COLOR_GREY, "Ai deja vesta asta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19142, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19142;
                        SetIntVar(playerid, "EditingPolice", 1);
                        return 1;
                    }
                }
            }
            case 9:
            {
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(IsPlayerAttachedObjectSlotUsed(playerid, i) && PlayerToys[playerid][i][ptToyOn] == 0)
                    {
                        RemovePlayerAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
                    }
                }
            }
        }
    }
    return 1;
}

Dialog:MDC(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                ShowDialog(playerid, Show:<MDCSearch>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nume", "Cautare nume\n\nInsereaza nume\n\nFormat: Nume_Prenume (( sau ID ))", "Cauta", "Inchide");
            }
            case 1:
            {
                ShowDialog(playerid, Show:<MDCRecord>, DIALOG_STYLE_INPUT, "LSPD MDC System - Salveaza", "SALVEAZA\n\nInsereaza numele:\n\n(( Player ID / Nume_Prenume ))", "Cauta", "Inchide");
            }
            case 2:
            {
                ShowDialog(playerid, Show:<MDCAddWarn>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga", "ADAUGA AVERTISMENT\n\nInsereaza numele:\n\n(( Player ID / Nume_Prenume ))", "Adauga", "Inchide");
            }
            case 3:
            {
                ShowDialog(playerid, Show:<MDCVehicleID>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare numar de imatriculare", "CAUTARE NR\n\nInsereaza nr imatriculare:\n\n(( Player ID / Nume_Prenume ))", "Cauta", "Inchide");
            }
            case 4:
            {
                ShowDialog(playerid, Show:<MDCVehicle>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare numar de imatriculare", "CAUTARE NR\n\nInsereaza nr imatriculare:", "Cauta", "Inchide");
            }
            case 5:
            {
                new string[500];
                for(new i = 0; i < sizeof(CallInfo); i++)
                {
                    if(CallInfo[i][callTaken])
                    {
                        format(string, sizeof(string), "%s\n%s", string, CallInfo[i][callSituation]);
                    }
                }
                ShowDialog(playerid, Show:<MDCLastCalls>, DIALOG_STYLE_LIST, "LSPD MDC System - Ultimile apeluri la 911", string, "OK", "Inchide");
            }
            case 6:
            {
                new string[500];
                for(new i = 0; i < sizeof(ArrestInfo); i++)
                {
                    if(ArrestInfo[i][arrestTaken])
                    {
                        format(string, sizeof(string), "%s\n%s", string, GetNameEx(ArrestInfo[i][arrestSuspect]));
                    }
                }
                ShowDialog(playerid, Show:<MDCLastArrest>, DIALOG_STYLE_LIST, "LSPD MDC System - Ultimile arestari", string, "OK", "Inchide");
            }
        }
    }
    return 1;
}

Dialog:MDCLastArrest(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = listitem;
        new string[500];
        format(string, sizeof(string), "INFORMATII AREST\n\nMinute de arest: %d\nNume: %s\nOfiter: %s\nData: %s\nLocatie: %s", ArrestInfo[i][arrestTime], GetNameEx(ArrestInfo[i][arrestSuspect]), GetNameEx(ArrestInfo[i][arrestOfficer]), ArrestInfo[i][arrestDate], ArrestInfo[i][arrestLocation]);
        ShowDialog(playerid, Show:<MDCArrestResult>, DIALOG_STYLE_MSGBOX, "LSPD MDC System - Informatii arest", string, "Inchide", "");
    }
}

Dialog:MDCLastCalls(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = listitem;
        SetIntVar(playerid, "LastCallSlot", i);
        new string[500];
        format(string, sizeof(string), "Informatii apel 911- #%d\n\nTipul: %s\n\nApelant: %s\nNr de tel: %d\nSituatie: %s\nLocatie: %s\nLocatie: %s\nData: %s", CallInfo[i][callID], CallInfo[i][callType], GetNameEx(CallInfo[i][callCaller]), PlayerInfo[CallInfo[i][callCaller]][pNumber], CallInfo[i][callSituation], CallInfo[i][callLocation], CallInfo[i][callTrace], CallInfo[i][callDate]);
        ShowDialog(playerid, Show:<MDCRespondCall>, DIALOG_STYLE_MSGBOX, "LSPD MDC System - Ultimul apel 911", string, "RASPUNDE", "Inchide");
    }
}

Dialog:MDCRespondCall(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        format(msg, sizeof(msg), "* %s %s raspunde la ultimul apel 911, numar #%d.", GetRankName(playerid), GetNameEx(playerid), CallInfo[GetIntVar(playerid, "LastCallSlot")][callID]);
        SendFactionMessage(LSPD, COLOR_LSPD, msg);
    }
}

Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
    new string[500], string2[500], string3[500], carlic[16], weplic[16], flylic[16], biglic[16], bikelic[16];
    if(response)
    {
        new iPlayerID;
        if(sscanf(inputtext, "u", iPlayerID)) return ShowDialog(playerid, Show:<MDCSearch>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nume", "Cautare nume\n\nInsereaza nume\n\nFormat: Nume_Prenume (( sau ID ))", "Cauta", "Inchide");
        if(!PlayerIsOn(iPlayerID)) return ShowDialog(playerid, Show:<MDCSearch>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nume", "CAUTARE NUME\n\nInsereaza nume\n\nFormat: Nume_Prenume (( sau ID ))\n"EMBED_RED"Jucatorul nu a fost gasit.", "Cauta", "Inchide");
        if(PlayerInfo[iPlayerID][pCarLic] == 1) carlic = "Da";
        else carlic = "Nu";

        if(PlayerInfo[iPlayerID][pCarLic] == 1) carlic = "Da";
        else carlic = "Nu";

        if(PlayerInfo[iPlayerID][pBigLic] == 1) biglic = "Da";
        else biglic = "Nu";

        if(PlayerInfo[iPlayerID][pBikeLic] == 1) bikelic = "Da";
        else bikelic = "Nu";

        if(PlayerInfo[iPlayerID][pWepLic] == 1)
            weplic = "Da";
        else
            weplic = "Nu";
        if(PlayerInfo[iPlayerID][pFlyLic] == 1)
            flylic = "Da";
        else
            flylic = "Nu";
        format(string, sizeof(string), "REZULTATELE CAUTARII\n\nNume: %s, Varsta: %d\nNumar de telefon: %d\nAmenda: %d\nPermis tip A: %s\nPermis tip B: %s\nPermis tip C: %s\nLicenta de port-arma: %s\nLicenta de zbor: %s\nAdvertismente: %d\n\nAdresa: %s\n\n\n", GetNameEx(iPlayerID), PlayerInfo[iPlayerID][pAge], PlayerInfo[iPlayerID][pNumber], CountPlayerTickets(iPlayerID), bikelic, carlic, biglic, weplic, flylic, PlayerInfo[iPlayerID][pDriveWarns], GetHouseLocation(iPlayerID));
        format(string2, sizeof(string2), "REZULTATELE CAUTARII\nArestari: %d\nSentinte in inchisoare: %d", PlayerInfo[iPlayerID][pArrested], PlayerInfo[iPlayerID][pPrisoned]);
        format(string3, sizeof(string3), "%s%s", string, string2);
        format(string, sizeof(string), "\n\nAcuzat de: %s", PlayerInfo[iPlayerID][pWanted]);
        format(string2, sizeof(string2), "%s%s", string3, string);
        ShowDialog(playerid, Show:<MDCResult>, DIALOG_STYLE_MSGBOX, "LSPD MDC System", string2, "Inchide", "");
    }
    return 1;
}

Dialog:MDCRecord(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(sscanf(inputtext, "u", MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCRecord>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga", "ADAUGA AVERTISMENT\n\nInsereaza numele:\n\n(( Player ID / Nume_Prenume ))", "Adauga", "Inchide");
        if(!PlayerIsOn(MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCRecord>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga", "ADAUGA AVERTISMENT\n\nInsereaza numele:\n\n(( Player ID / Nume_Prenume ))\n\n {FF0000}Numele nu a fost gasit!", "Adauga", "Inchide");
        format(msg, sizeof(msg), "SUBMIT CHARGES\n\nApply charge for: %s\n\n(( Crime ))", GetNameEx(MDCAdd[playerid]));
        ShowDialog(playerid, Show:<MDCRecord2>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga acuzari", msg, "Adauga", "Inchide");
    }
    return 1;
}

Dialog:MDCRecord2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new szCharge[84];
        if(sscanf(inputtext, "s[84]", szCharge))
        {
            format(msg, sizeof(msg), "ADAUGA ACUZARI\n\nAdauga acuzare pentru: %s\n\n(( Crima ))", GetNameEx(MDCAdd[playerid]));
            ShowDialog(playerid, Show:<MDCRecord2>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga", msg, "Adauga", "Inchide");
            return 1;
        }
        new id = MDCAdd[playerid];
        if(AddCriminalRecord(id, szCharge, playerid))
        {
            format(msg, sizeof(msg), "[WANTED] Suspect: %s, Reporter: %s Crima: %s", GetNameEx(id), GetNameEx(playerid), szCharge);
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
            SCM(playerid, COLOR_WHITE, "Acuzatiile au fost adaugate cu succes.");
            format(PlayerInfo[id][pWanted], 256, "%s", szCharge);
        }
        else
        {
            SCM(playerid, COLOR_LIGHTRED, "Acuzatiile nu au putut fi adaugate.");
        }
        /*new szCharge[84];
        if(sscanf(inputtext, "s[84]", szCharge))
        {
            format(msg, sizeof(msg), "ADAUGA ACUZARI\n\nAdauga acuzare pentru: %s\n\n(( Crima ))", GetNameEx(MDCAdd[playerid]));
            ShowDialog(playerid, Show:<MDCRecord2>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga", msg, "Adauga", "Inchide");
            return 1;
        }
        if(AddCriminalRecord(MDCAdd[playerid], szCharge, playerid))
        {
            format(msg, sizeof(msg), "[WANTED] Suspect: %s, Raportat de: %s Crima: %s", GetNameEx(MDCAdd[playerid]), GetNameEx(playerid), szCharge);
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
            SCM(playerid, COLOR_WHITE, "A fost adaugata o acuzare cu succes!");
            format(PlayerInfo[MDCAdd[playerid]], 256, "%s", szCharge);
            MDCAdd[playerid] = INVALID_PLAYER_ID;
        }
        else
        {
            SCM(playerid, COLOR_LIGHTRED, "Acuzarile nu au putut fi adaugate.");
            MDCAdd[playerid] = INVALID_PLAYER_ID;
        }*/
    }
    return 1;
}

Dialog:MDCAddWarn(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(sscanf(inputtext, "u", MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCAddWarn>, DIALOG_STYLE_INPUT, "LSPD MDC System - Adauga", "Adauga avertizare\n\nIntrodu numele:\n\n((ID/PoN))", "Selecteaza", "Inchide");
        if(!PlayerIsOn(MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCAddWarn>, DIALOG_STYLE_INPUT, "LSPD MDC Adauga - Add", "Adauga avertizare\n\nIntrodu numele:\n\n((ID/PoN))\n"EMBED_RED"Jucatorul nu a fost gasit.", "Selecteaza", "Inchide");
        format(msg, sizeof(msg), "writes a driving license warning to %s's license.", GetNameEx(MDCAdd[playerid]));
        ActionMessage(playerid, 15.0, msg);
        format(msg, sizeof(msg), "** I-ai acordat un punct de penalizare lui %s.", GetName(MDCAdd[playerid]));
        SCM(playerid, COLOR_WHITE, msg);
        PlayerInfo[MDCAdd[playerid]][pDriveWarns]++;
        if(PlayerInfo[MDCAdd[playerid]][pDriveWarns] >= 3)
        {
            format(msg, sizeof(msg), "** Datorita faptului ca ai acumulat mai mult de 3 puncte pe licenta, aceasta a fost suspendata.", GetNameEx(MDCAdd[playerid]));
            SCM(playerid, COLOR_WHITE, msg);
            PlayerInfo[MDCAdd[playerid]][pDriveWarns] = 0;
            PlayerInfo[MDCAdd[playerid]][pCarLic] = 0;
            PlayerInfo[MDCAdd[playerid]][pBikeLic] = 0;
            PlayerInfo[MDCAdd[playerid]][pBigLic] = 0;
/*          format(query, sizeof(query), "INSERT INTO `playercharges` (`player`, `charge`, `officer`) VALUES (`%s`, `DRIVE LICENSE WARN`, `%s`)", GetName(MDCAdd[playerid]), GetName(playerid));
            mysql_function_query(dbHandle, query, false, "", "");*/
        }
        MDCAdd[playerid] = INVALID_PLAYER_ID;
    }
    return 1;
}

Dialog:MDCVehicle(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new plate[64], vehicle;
        if(sscanf(inputtext, "s[64]", plate)) return ShowDialog(playerid, Show:<MDCVehicle>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nr imatriculare", "Cautare nr imatriculare\n\nInsert plate info:", "Selecteaza", "Inchide");
        if(!FindVehicleByPlate(plate)) return ShowDialog(playerid, Show:<MDCVehicle>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nr imatriculare", "Cautare nr imatriculare\n\nInsert plate info:\n"EMBED_RED"Plate wasn't found on the database.", "Selecteaza", "Inchide");
        vehicle = GetVehicleByPlate(plate);
        format(msg, sizeof(msg), "Cautare nr imatriculare RESULT\n\nVehicle plate: %s\nVehicle model: %s\nVehicle owner: %s", VehicleInfo[vehicle][carPlate], VehicleNames[VehicleInfo[vehicle][carModel]-400], VehicleInfo[vehicle][carOwner]);
        ShowDialog(playerid, Show:<MDCResult>, DIALOG_STYLE_MSGBOX, "LSPD MDC System - Cautare nr imatriculare", msg, "Inchide", "");
    }
    return 1;
}

Dialog:MDCVehicleID(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id, vehicle;
        if(sscanf(inputtext, "u", id)) return ShowDialog(playerid, Show:<MDCVehicleID>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nr imatriculare", "Cautare nr imatriculare\n\nInsert plate number:\n\n(( Player ID / Firstname_Lastname ))", "Selecteaza", "Inchide");
        if(!PlayerIsOn(id)) return ShowDialog(playerid, Show:<MDCVehicleID>, DIALOG_STYLE_INPUT, "LSPD MDC System - Cautare nr imatriculare", "Cautare nr imatriculare\n\nInsert plate number:\n\n(( Player ID / Firstname_Lastname ))\n"EMBED_RED"Player wasn't found.", "Selecteaza", "Inchide");
        if(!PlayerInCar(id)) return SCM(playerid, COLOR_GREY, "Jucatorul nu este intr-o masina.");
        vehicle = GetPlayerVehicleID(id);
        if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "Acest jucator nu este intr-o masina personala.");
        format(msg, sizeof(msg), "Cautare nr imatriculare RESULT\n\nNr imatriculare: %s\nModel vehicul: %s\nDetinator: %s", VehicleInfo[vehicle][carPlate], VehicleNames[VehicleInfo[vehicle][carModel]-400], VehicleInfo[vehicle][carOwner]);
        ShowDialog(playerid, Show:<MDCResult>, DIALOG_STYLE_MSGBOX, "LSPD MDC System - Cautare nr", msg, "Inchide", "");
    }
    return 1;
}

Dialog:ReportCheck(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        format(msg, sizeof(msg), "AdmCmd: %s i-a acceptat cererea de report lui [ID:%d]%s.", GetName(playerid), GetIntVar(playerid, "TookReportFrom"), GetName(GetIntVar(playerid, "TookReportFrom")));
        AMSG(COLOR_LIGHTRED, msg);
        format(msg, sizeof(msg), "Administratorul %s ti-a acceptat cererea de report, te rugam sa astepti.", GetName(playerid));
        SCM(GetIntVar(playerid, "TookReportFrom"), COLOR_YELLOWG, msg);
        RemoveVar(GetIntVar(playerid, "TookReportFrom"), "JustReported");
        RemoveVar(GetIntVar(playerid, "TookReportFrom"), "ReportText");
        RemoveVar(playerid, "TookReportFrom");
    }
    else
    {
        format(msg, sizeof(msg), "AdmCmd: %s i-a sters cererea de report lui [ID:%d]%s.", GetName(playerid), GetIntVar(playerid, "TookReportFrom"), GetName(GetIntVar(playerid, "TookReportFrom")));
        SCM(playerid, COLOR_LIGHTRED, msg);
        RemoveVar(GetIntVar(playerid, "TookReportFrom"), "JustReported");
        RemoveVar(GetIntVar(playerid, "TookReportFrom"), "ReportText");
        RemoveVar(playerid, "TookReportFrom");
    }
    return 1;
}

Dialog:AcceptPM(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetIntVar(playerid, "OldAdminPM", GetIntVar(playerid, "PMTo"));
        SendPMToPlayer(playerid, GetIntVar(playerid, "PMTo"), GetStringVar(playerid, "PMText"));
        RemoveVar(playerid, "PMTo");
        RemoveVar(playerid, "PMText");
    }
    return 1;
}

Dialog:LSFDArmoury(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                GiveWeapon(playerid, 9, 99999);
                SCM(playerid, -1, "Ai primit o drujba.");
            }
            case 1:
            {
                GiveWeapon(playerid, 42, 99999);
                SCM(playerid, -1, "Ai primit un extintor.");
            }
            case 2:
            {
                GiveWeapon(playerid, 6, 1);
                SCM(playerid, -1, "Ai primit o lopata.");
            }
        }
    }
    return 1;
}

Dialog:NGArmoury(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: {GiveWeapon(playerid, 24, 5000); SCM(playerid, -1, "Ai primit un Deagle."); }
            case 1: {GiveWeapon(playerid, 29, 5000); SCM(playerid, -1, "Ai primit un MP5."); }
            case 2: {GiveWeapon(playerid, 31, 5000); SCM(playerid, -1, "Ai primit un M4."); }
            case 3: {GiveWeapon(playerid, 34, 5000); SCM(playerid, -1, "Ai primit un Sniper."); }
            case 4: {GiveWeapon(playerid, 17, 50); SCM(playerid, -1, "Ai primit Tear Gas (x50)."); }
        }
    }
    return 1;
}

Dialog:GOVArmoury(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: {GiveWeapon(playerid, 41, 999999); SCM(playerid, -1, "Ai primit un spray cu piper."); }
            case 1: {GiveWeapon(playerid, 3, 1); SCM(playerid, -1, "Ai primit o tomfa."); }
            case 2: {GiveWeapon(playerid, 43, 999999); SCM(playerid, -1, "Ai primit o camera."); }
            case 3: {ShowDialog(playerid, Show:<GOVClothes>, DIALOG_STYLE_LIST, "Echipament GOV", "Casca de protectie\nVesta\nMatura\nCheie\nRanga\nCiocan\nSurubelnita\nScoate echipament", "Imbraca", "Anuleaza");}
        }
    }
    return 1;
}

Dialog:GOVClothes(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(HasAttachedObject(playerid, 18638)) return SCM(playerid, COLOR_GREY, "Ai deja o casca de protectie.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 18638, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 18638;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 1:
            {
                if(HasAttachedObject(playerid, 19904)) return SCM(playerid, COLOR_GREY, "Ai deja o vesta.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19904, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19904;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 2:
            {
                if(HasAttachedObject(playerid, 19622)) return SCM(playerid, COLOR_GREY, "Ai deja o matura.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19622, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19622;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 3:
            {
                if(HasAttachedObject(playerid, 19627)) return SCM(playerid, COLOR_GREY, "Ai deja o cheie.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 19627, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 19627;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 4:
            {
                if(HasAttachedObject(playerid, 18634)) return SCM(playerid, COLOR_GREY, "Ai deja o ranga.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 18634, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 18634;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 5:
            {
                if(HasAttachedObject(playerid, 18635)) return SCM(playerid, COLOR_GREY, "Ai deja un ciocan.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 18635, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 18635;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 6:
            {
                if(HasAttachedObject(playerid, 18644)) return SCM(playerid, COLOR_GREY, "Ai deja o surubelnita.");
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
                    {
                        SetPlayerAttachedObject(playerid, i, 18644, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
                        EditAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = 18644;
                        SetIntVar(playerid, "EditingGOV", 1);
                        return 1;
                    }
                }
            }
            case 7:
            {
                for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
                {
                    if(IsPlayerAttachedObjectSlotUsed(playerid, i) && PlayerToys[playerid][i][ptToyOn] == 0)
                    {
                        RemovePlayerAttachedObject(playerid, i);
                        PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
                    }
                }
            }
        }
    }
    return 1;
}

Dialog:LSPDArmoury(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 1:
            {
                ShowDialog(playerid, Show:<LSPDClothes>, DIALOG_STYLE_LIST, "Echipamente OCSD", "Sapca 1\nSapca 2\nSapca 3\nPalarie 1\nPalarie 2\nPalarie 3\nCasca\nScut\nVesta\nScoate echipament", "Imbraca", "Anuleaza");
            }
            case 0:
            {
                ShowDialog(playerid, Show:<LSPDEquip>, DIALOG_STYLE_LIST, "Echipament", "Deagle\nShotgun\nMP5\nM4\nCamera(Radar)", "Alege", "Anuleaza");
            }
        }
    }
    return 1;
}

Dialog:LSPDEquip(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: { GiveWeapon(playerid, 24, 2000); SCM(playerid, -1, "Ai primit un Deagle."); }
            case 1: { GiveWeapon(playerid, 25, 2000); SCM(playerid, -1, "Ai primit un Shotgun."); }
            case 2: { GiveWeapon(playerid, 29, 2000); SCM(playerid, -1, "Ai primit un MP5."); }
            case 3: { GiveWeapon(playerid, 31, 2000); SCM(playerid, -1, "Ai primit un M4."); }
            case 4: { GiveWeapon(playerid, 43, 2000); SCM(playerid, -1, "Ai primit o Camera."); }
        }
    }
    return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        //Must be +1 because slots are starting from 1
        new number = PlayerInfo[playerid][pContacts][listitem+1];
        if(number == 0)
        {
            ShowDialog(playerid, Show:<ContactNoExist>, DIALOG_STYLE_MSGBOX, "Lista contacte", "Contactul pe care l-ai selectat nu exista", "<<<", "");
        }
        else
        {
            PlayerCallTo(playerid, number);
        }
    }
    return 1;
}

Dialog:ContactNoExist(playerid, response, listitem, inputtext[])
{
    if(response || !response)
    {
        DisplayContactList(playerid);
    }
    return 1;
}

Dialog:WepDMG(playerid, response, listitem, inputtext[])
{
    new status = GetIntVar(playerid, "WepDMG");
    if(status == 1)
    {
        if(response)
        {
            new weapon = listitem + 1;
            if(!IsVaildWeapon(weapon))
            {
                SetIntVar(playerid, "WepDMG", 2);
                ShowDialog(playerid, Show:<WepDMG>, DIALOG_STYLE_MSGBOX, "Dyanmic Weapon Damage", "Aceasta arma nu poate fi editata...", "<<<", "");
            }
            else
            {
                SetIntVar(playerid, "WepDMG", 3);
                SetIntVar(playerid, "WepEdit", weapon);
                format(msg, sizeof(msg), "Introdu o dauna noua la : %s", GetWeaponNameEx(weapon));
                ShowDialog(playerid, Show:<WepDMG>, DIALOG_STYLE_INPUT, "Dyanmic Weapon Damage", msg, "Salveaza", "<<<");
            }
        }
    }
    else if(status == 2 || status == 4)
    {
        if(response || !response)
        {
            DisplayWeaponDamage(playerid);
        }
    }
    else if(status == 3)
    {
        if(response)
        {
            new dmg = strval(inputtext), wep = GetIntVar(playerid, "WepEdit");
            SetIntVar(playerid, "WepDMG", 4);
            WeaponDMG[wep][wDamage] = dmg;
            UpdateWeaponDamage(wep, dmg);
            format(msg, sizeof(msg), "Ai editat dauna armei %s in %d...", GetWeaponNameEx(wep), dmg);
            ShowDialog(playerid, Show:<WepDMG>, DIALOG_STYLE_MSGBOX, "Dyanmic Weapon Damage", msg, "<<<", "");
        }
        else
        {
            DisplayWeaponDamage(playerid);
        }
    }
    return 1;
}

Dialog:ClothingDialog(playerid, response, listitem, inputtext[])
{
    new status = GetIntVar(playerid, "EditStatus");
    switch(status)
    {
        case 1:
        {
            if(response)
            {
                if(!PlayerToys[playerid][listitem][ptToyOn])
                {
                    SetIntVar(playerid, "EditStatus", 2);
                    ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_MSGBOX, "Lista haine", "Acest slot este gol...", "<<<", "");
                }
                else
                {
                    SetIntVar(playerid, "EditStatus", 3);
                    SetIntVar(playerid, "IndexChose", listitem);
                    ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_LIST, "Lista haine", "Ajusteaza obiectul\nSchimba slot-ul\nDa-l jos/Off", "Selecteaza", "<<<");
                }
            }
        }
        case 2:
        {
            if(response || !response)
            {
                DisplayClothing(playerid);
            }
        }
        case 3:
        {
            if(response)
            {
                new slot = GetIntVar(playerid, "IndexChose");
                switch(listitem)
                {
                    case 0:
                    {
                        EditClothing(playerid, slot);
                    }
                    case 1:
                    {
                        SetIntVar(playerid, "EditStatus", 4);
                        ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_LIST, "Schimba pozitia", "Spate\nCap\nBratul stang\nBratul drept\nMana stanga\nMana dreapta\nCoapsa stanga\nCoapsa dreapta\nPiciorul stang\nPiciorul drept\nGamba dreapta\nGamba stanga\nAntebratul stang\nAntebratul drept\nClavicula stanga\nClavicula dreapta\nGat\nFalca", "Selecteaza", "<<<");
                    }
                    case 2:
                    {
                        PlaceClothing(playerid, slot);
                        SetIntVar(playerid, "EditStatus", 3);
                        ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_LIST, "Lista haine", "Ajusteaza obiectul\nSchimba slot-ul\nPune-o pe tine / Da-o jos", "Selecteaza", "<<<");
                    }
                }
            }
            else
            {
                DisplayClothing(playerid);
            }
        }
        case 4:
        {
            if(response)
            {
                new bone = listitem + 1;
                new index = GetIntVar(playerid, "IndexChose");
                SCMEx(playerid, COLOR_WHITE, "Ai ajustat lista de haine %d in trupul %s.", index, GetBoneName(bone));
                PlayerToys[playerid][index][ptBoneID] = bone;
                if(IsPlayerAttachedObjectSlotUsed(playerid, index))
                {
                    RemovePlayerAttachedObject(playerid, index);
                    SetPlayerAttachedObject(playerid, index, PlayerToys[playerid][index][ptModelID], PlayerToys[playerid][index][ptBoneID], PlayerToys[playerid][index][ptOffsetX], PlayerToys[playerid][index][ptOffsetY], PlayerToys[playerid][index][ptOffsetZ], PlayerToys[playerid][index][ptRotX], PlayerToys[playerid][index][ptRotY], PlayerToys[playerid][index][ptRotZ], PlayerToys[playerid][index][ptScaleX], PlayerToys[playerid][index][ptScaleY], PlayerToys[playerid][index][ptScaleZ]);
                }
                SetIntVar(playerid, "EditStatus", 3);
                ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_LIST, "Lista haine", "Ajusteaza obiectul\nSchimba slot-ul\nPune-o pe tine / Da-o jos", "Selecteaza", "<<<");
            }
            else
            {
                SetIntVar(playerid, "EditStatus", 3);
                ShowDialog(playerid, Show:<ClothingDialog>, DIALOG_STYLE_LIST, "Lista haine", "Ajusteaza obiectul\nSchimba slot-ul\nPune-o pe tine / Da-o jos", "Selecteaza", "<<<");
            }
        }
    }
    return 1;
}
/* =================== Dialogs =================== */

/* =================== PlayerCommands =================== */
CMD:bag(playerid,params[])
{
    if(bag[playerid] == 0)
    {
        SetPlayerAttachedObject( playerid, 5, 3026, 1, -0.159999, -0.100000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // para_pack - 213
        bag[playerid] = 1;
        return 1;
    }
    else if(bag[playerid] == 1)
    {
        RemovePlayerAttachedObject(playerid, 5);
        bag[playerid] = 0;
        return 1;
    }
    return 1;
}

CMD:briefcase(playerid,params[])
{
    if(briefcase[playerid] == 0)
    {
        SetPlayerAttachedObject(playerid, 6, 1210, 6,0.3,0.1,0,0,-90,0);
        briefcase[playerid] = 1;
        return 1;
    }
    else if(briefcase[playerid] == 1)
    {
        RemovePlayerAttachedObject(playerid, 6);
        briefcase[playerid] = 0;
        return 1;
    }
    return 1;
}

CMD:suitcase(playerid,params[])
{
    if(briefcase[playerid] == 0)
    {
        SetPlayerAttachedObject(playerid, 6, 19624, 6,0.3,0.1,0,0,-90,0);
        briefcase[playerid] = 1;
        return 1;
    }
    else if(briefcase[playerid] == 1)
    {
        RemovePlayerAttachedObject(playerid, 6);
        briefcase[playerid] = 0;
        return 1;
    }
    return 1;
}

//GPS
forward SaveGPSLoc(name[], Float:x, Float:y, Float:z, gps);
forward OnGPSLoad();

COMMAND:gps(playerid, params[])
{
    new gpsstr[500], showid = 1;
//    format(gpsstr, sizeof(gpsstr), "1. %s", GPSInfo[0][gpsName]);
    for(new i=1;i<MAX_GPS_LOCATION;i++)
    {
        if(GPSInfo[i][gpsOn] == 1)
        {
//          if(CheckAdmin(playerid, 2014)) format(msg, sizeof(msg), "{FFFFFF}\n%d. %s ({FF0000}ID: %d{FFFFFF})", showid, GPSInfo[i][gpsName], i);
            format(msg, sizeof(msg), "{FFFFFF}\n%d. %s", showid, GPSInfo[i][gpsName]);
            strcat(gpsstr, msg);
            showid++;
        }
    }
    ShowDialog(playerid, Show:<DialogGPS>, DIALOG_STYLE_LIST, "GPS - Los Santos/Red County", gpsstr, "Ok", "Inchide");
    return 1;
}

CMD:addgps(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new locname[64];
    if(sscanf(params, "s[64]", locname)) return SyntaxMSG(playerid, "/addgps [gps name]");
    new gps = GetNextGPSID();
    if(gps == -1) return SCM(playerid, COLOR_GREY, "Nu mai sunt sloturi disponibile,");
    format(GPSInfo[gps][gpsName], 64, "%s", locname);
    GPSInfo[gps][gpsX] = PlayerPosX(playerid);
    GPSInfo[gps][gpsY] = PlayerPosY(playerid);
    GPSInfo[gps][gpsZ] = PlayerPosZ(playerid);
    GPSInfo[gps][gpsOn] = 1;
    SCM(playerid, COLOR_GREEN2, "SUCCES!");
    SCMEx(playerid, COLOR_GREEN2, "A fost adaugata cu succes o locatie GPS (Nume: %s | X: %f Y: %f Z: %f)", locname, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
    SaveGPSLoc(locname, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), gps);
    return 1;
}

CMD:removegps(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
    new gps;
    if(sscanf(params, "i", gps)) return SyntaxMSG(playerid, "/addgps [gps id]");
    gps--;
    SCMEx(playerid, COLOR_GREEN2, "A fost stearsa cu succes o locatie GPS (Nume: %s | X: %f Y: %f Z: %f)", GPSInfo[gps][gpsName], GPSInfo[gps][gpsX], GPSInfo[gps][gpsY], GPSInfo[gps][gpsZ]);
    format(GPSInfo[gps][gpsName], 64, " ");
    GPSInfo[gps][gpsX] = 0.0;
    GPSInfo[gps][gpsY] = 0.0;
    GPSInfo[gps][gpsZ] = 0.0;
    GPSInfo[gps][gpsOn] = 0;
    RemoveGPSLoc(gps);
    return 1;
}

stock GetNextGPSID()
{
    for(new i=1;i<=MAX_GPS_LOCATION;i++)
    {
        if(GPSInfo[i][gpsOn] == 0) { return i; }
//      printf("Tested for gpsOn [%d].", i);
    }
    return -1;
}

stock LoadGPSMySQL()
{
    mysql_function_query(dbHandle, "SELECT * FROM `gps`", true, "OnGPSLoad", "");
    return 1;
}

public OnGPSLoad()
{
    new rows, fields;
    new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            GPSInfo[total][gpsID] = cache_get_row_int(total, 0);
            cache_get_row(total, 1, GPSInfo[total][gpsName], dbHandle, 64);         
            GPSInfo[total][gpsX] = cache_get_row_float(total, 2);
            GPSInfo[total][gpsY] = cache_get_row_float(total, 3);
            GPSInfo[total][gpsZ] = cache_get_row_float(total, 4);
            GPSInfo[total][gpsOn] = 1;
            total++;
        }
    }
    format(msg,sizeof(msg), "Au fost incarcate %d locatii GPS din MySQL.", total);
    printf(msg);
    return 1;
}

public SaveGPSLoc(name[], Float:x, Float:y, Float:z, gps)
{
    format(query, sizeof(query), "INSERT INTO `gps` (name, x, y, z) VALUES ('%s', %f, %f, %f)", name, x, y, z);
    mysql_function_query(dbHandle, query, true, "OnGPSAdd", "d", gps);
    return 1;
}

forward OnGPSAdd(gps);
public OnGPSAdd(gps)
{
    GPSInfo[gps][gpsID] = cache_insert_id(dbHandle);
    return 1;
}

stock RemoveGPSLoc(gps)
{
    format(query, sizeof(query), "DELETE FROM `gps` WHERE `id` = %d", GPSInfo[gps][gpsID]);
    mysql_function_query(dbHandle, query, false, "", "");
    GPSInfo[gps][gpsID] = -1;
    GPSInfo[gps][gpsOn] = 0;
    GPSInfo[gps][gpsX] = 0.0;
    GPSInfo[gps][gpsY] = 0.0;
    GPSInfo[gps][gpsZ] = 0.0;
    format(GPSInfo[gps][gpsName], 64, " ");
    return 1;
}
//END OF GPS

CMD:seatbelt(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu esti intr-un vehicul!");
    if(seatbelt[playerid] == 0)
    {
        new string[128];
        format(string, sizeof(string), "si-a pus centura de siguranta.");
        ActionMessage(playerid,15.0,string);
        seatbelt[playerid] = 1;
    }
    else
    {
        new string[128];
        format(string, sizeof(string), "si-a scos centura de siguranta.");
        ActionMessage(playerid,15.0,string);
        seatbelt[playerid] = 0;
    }
    return 1;
}

CMD:checkpaycheck(playerid, params[])
{
    format(msg, sizeof(msg), "Bani in paycheck %d",  PlayerInfo[playerid][pPayCheckMade]);
    SCM(playerid, COLOR_GREY, msg);
    return 1;
}

COMMAND:carsign(playerid,params[])
{
    new veh = GetPlayerVehicleID(playerid);
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(isnull(params)) return SendClientMessage(playerid,COLOR_ORANGE,"INFO: {FFFFFF}/carsign [text]");
        if(veicolo_callsign_status[veh] == 0)
        {
            new string[128];
            format(string,sizeof(string), "%s",params);
            veicolo_callsign_testo[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 25.0, 0, 1);
            Attach3DTextLabelToVehicle( veicolo_callsign_testo[veh], veh, -0.7, -1.9, -0.3);
            veicolo_callsign_status[veh] = 1;
            SCM(playerid, COLOR_OOC, "Nu uita sa folosesti comanda '/deletecarsign' cand nu mai folosesti masina.");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_ORANGE,"ERROR: {FFFFFF}Nu esti intr-un vehicul.");
        return 1;
    }
    return 1;
}

COMMAND:deletecarsign(playerid,params[])
{
    new veh = GetPlayerVehicleID(playerid);
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(IsPlayerInAnyVehicle(playerid))
    {
        Delete3DTextLabel(veicolo_callsign_testo[veh]);
        veicolo_callsign_status[veh] = 0;
        SCM(playerid, COLOR_GREY, "Carsign-ul a fost sters !");
    }
    else
    {
        SendClientMessage(playerid,COLOR_ORANGE,"ERROR: {FFFFFF}Nu esti intr-un vehicul");
    }
    return 1;
}

CMD:changepass(playerid, params[])
{
    new pass[128];
    if(sscanf(params,"s[128]",pass))
    {
        SyntaxMSG(playerid, "/changepass [password]");
        SCM(playerid, COLOR_GREY, "{B1C8FB}[WARNING]{AFAFAF}: Nu folosi alte simboluri la noua ta parola.");
        return 1;
    }
    if(strlen(pass) <= 6) return SCM(playerid, -1, "PassChange: Parola trebuie sa contina cel putin 6 caractere!");

    for(new i = 0; i < strlen(pass); i++)
    {
        switch(pass[i])
        {
            case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return SCM(playerid, 0xFF0000FF, "Invalid characters!");
            default: continue;
        }
    }
    SetStringVar(playerid, "NewPassword", pass);
    ShowDialog(playerid, Show:<ChangePass>, DIALOG_STYLE_INPUT, ""EMBED_RED"Cuvantul secret"EMBED_WHITE"", ""EMBED_WHITE"Te rugam introdu cuvantul secret cu care te-ai inregistrat!", "Schimba", "Exit");
    return 1;
}

CMD:changesecret(playerid, params[])
{
    new secret[128];
    if(sscanf(params,"s[128]",secret))
    {
        SyntaxMSG(playerid, "/changesecret [new combination]");
        SCM(playerid, COLOR_GREY, "{B1C8FB}[WARNING]:{AFAFAF} Nu folosi alte simboluri la noul tau cuvant secret.");
        return 1;
    }
    if(strlen(secret) <= 6) return SCM(playerid, -1, "Cuvantul trebuie sa contina cel putin 6 caractere!");

    for(new i = 0; i < strlen(secret); i++)
    {
        switch(secret[i])
        {
            case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return SCM(playerid, 0xFF0000FF, "Invalid characters!");
            default: continue;
        }
    }
    SetStringVar(playerid, "NewSecret", secret);
    ShowDialog(playerid, Show:<ChangeSecret>, DIALOG_STYLE_INPUT, ""EMBED_RED"Cuvantul secret"EMBED_WHITE"", ""EMBED_WHITE"Te rugam introdu actualul cuvant secret inainte de-al schimba!", "Schimba", "Exit");
    return 1;
}

CMD:radiohelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________RADIOHELP___________________");
    SCM(playerid, COLOR_OOC,"** INFO ** Poti cumpara un radio de la orice 24/7.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /setchannel - Seteaza un canal pe care vrei sa intri.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /setslot - Selecteaza un slot pe care vrei sa-l pui.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /auth - Trebuie sa te autorizezi pe ficare canal.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /part - Sa iesi din canalul din care faci parte.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /r - Vorbesti pe frecventa setata.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /rlow - Vorbesti incet pe frecventa setata.");
    SCM(playerid, COLOR_GREY,"** RADIOHELP ** /call 1000 - Pentru a inchiria o frecventa radio.");
    return 1;
}

CMD:notehelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________NOTEHELP___________________");
    SCM(playerid, COLOR_OOC,"** NOTEHELP ** Poti cumpara o agenda de la orice 24/7.");
    SCM(playerid, COLOR_GREY,"** NOTEHELP ** /note show - Iti arata notele curente.");
    SCM(playerid, COLOR_GREY,"** NOTEHELP ** /note create - Poti creea o nota folosind un pix / stilou.");
    SCM(playerid, COLOR_GREY,"** NOTEHELP ** /note delete - Iti sterge una din note.");
    SCM(playerid, COLOR_GREY,"** NOTEHELP ** /note give - Da notia unei anumite persoane.");
    SCM(playerid, COLOR_GREY,"** NOTEHELP ** /note add - Adauga mai multe cuvinte in nota curenta.");
    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:fishhelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________FISHHELP___________________");
    SCM(playerid, COLOR_OOC,"** FISHHELP ** Trebuie sa duci inapoi pestele care are pana in 100kg.");
    SCM(playerid, COLOR_GREY,"** FISHHELP ** /gofishing - Incepi sa pescuiesti dintro barca.");
    SCM(playerid, COLOR_GREY,"** FISHHELP ** /stopfishing - Inchei sesiunea de pescuit.");
    SCM(playerid, COLOR_GREY,"** FISHHELP ** /myfish - Iti arata pestii tai prinsi.");
    SCM(playerid, COLOR_GREY,"** FISHHELP ** /unloadfish - Vinde pestii prinsi.");
    SCM(playerid, COLOR_GREY,"** FISHHELP ** /fish - Pesuiesti in zona pier, acolo este locatia.");
    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:bankhelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________BANKHELP___________________");
    SCM(playerid, COLOR_GREY,"** BANKHELP ** /balance - Iti apare suma curenta din banca.");
    SCM(playerid, COLOR_GREY,"** BANKHELP ** /withdraw - Scoate o suma din banca.");
    SCM(playerid, COLOR_GREY,"** BANKHELP ** /deposit - Iti permite sa-ti depozitezi banii in banca.");
    SCM(playerid, COLOR_GREY,"** BANKHELP ** /transfer - Iti transfera o suma de bani altor persoane.");
    SCM(playerid, COLOR_GREY,"** BANKHELP ** /paycheck - Iti scoate banii munciti.");
    SCMEx(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:cardhelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________CARDHELP___________________");
    SCMEx(playerid, COLOR_GREY,"** CARDHELP ** /makecard - Iti depui cererea pentru un card (%d$).", BANK_CARD_PRICE);
    SCM(playerid, COLOR_GREY,"** CARDHELP ** /pincard - Iti afiseaza pinul.");
    SCM(playerid, COLOR_GREY,"** CARDHELP ** /withdraw - Scoate o suma din bancomat.");
    SCM(playerid, COLOR_GREY,"** CARDHELP ** /balance - Iti afiseaza soldul.");
    SCMEx(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:cellhelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________CELLPHONEHELP___________________");
    SCM(playerid, COLOR_OOC,"** INFO ** Poti cumpara un telefon mobil de la orice magazin 24/7.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /call - Suni pe un numar de telefon.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /pickup - In caz ca te suna cineva cu aceasta comanda raspunzi.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /hangup - Inchide convorbirea curenta.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /sms - Trimiti un mesaj.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /turn_(off/on) - Porneste / Inchide telefonul mobil.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /contacts - Iti arata contactele salvate.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /addcontact - Iti adauga un nou contact in lista.");
    SCM(playerid, COLOR_GREY,"** CELLHELP ** /removecontact - Sterge un contact din lista ta.");
    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:househelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________HOUSEHELP___________________");
    SCM(playerid, COLOR_GREY,"** HOUSEHELP ** /myhouse /setrentable /setrent /rentroom /unrent /tenants");
    SCM(playerid, COLOR_GREY,"** HOUSEHELP ** /evict /evictall /lock /furniture /trunkspot /houseupgrade");
    return 1;
}

CMD:bizhelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________BIZHELP___________________");
    SCM(playerid, COLOR_GREY,"** BIZHELP ** /buybiz /sellbiz /bizupgrade /bizinfo /lock /fire");
    SCM(playerid, COLOR_GREY,"** BIZHELP ** /bizfee /bizname /bizwithdraw /bizdeposit /hire");
    return 1;
}

CMD:boomboxhelp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________BOOMBOXHELP___________________");
    SCM(playerid, COLOR_OOC,"** INFO ** Poti cumpara un casetofon de la mall.");
    SCM(playerid, COLOR_GREY,"** BOOMBOXHELP ** /boombox place - Pune casetofonul pe jos.");
    SCM(playerid, COLOR_GREY,"** BOOMBOXHELP ** /boombox edit - Modifici pozitia lui.");
    SCM(playerid, COLOR_GREY,"** BOOMBOXHELP ** /boombox remove - Sterge casetofonul de pe jos.");
    SCM(playerid, COLOR_GREY,"** BOOMBOXHELP ** /setstation - Schimba statia de emisie a muzicii.");
    SCM(playerid, COLOR_GREY,"** BOOMBOXHELP ** /stationoff - Inchide casetofonul.");
    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:factionhelp(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    new faction = PlayerInfo[playerid][pFaction];
    SCM(playerid, COLOR_LIGHTGREEN,"___________________FACTIONHELP___________________");
    if(isLeader(playerid) || isHighCommand(playerid))
    {
            SCM(playerid, COLOR_GREY,"** LEADER ** /invite /uninvite /setrank /fchat /ranks /towcars");
            if(faction > 4) SCM(playerid, COLOR_GREY, "/jobpermission /fjoblist");
    }
    if(PlayerInfo[playerid][pFaction] == LSPD)
    {
            SCM(playerid, COLOR_GREY,"** LSPD ** /duty /uniform /flist (/d)epartments (/f)action /showbadge /pcmds");
    }
    if(PlayerInfo[playerid][pFaction] == LSFD)
    {
            SCM(playerid, COLOR_GREY,"** LSFD ** /duty /uniform /flist (/d)epartments (/f)action /showbadge (/r)adio /rlow /door");
            SCM(playerid, COLOR_GREY,"** LSFD ** /heal /putinambu /operation /hpc /siren (/m)egaphone (/gov)ernment /gate");
    }
    if(PlayerInfo[playerid][pFaction] == GOV)
    {
            SCM(playerid, -1, "** GOV ** /gov /duty /armoury");
    }
    if(PlayerInfo[playerid][pFaction] == NEWS)
    {
            SCM(playerid, -1, "** NEWS ** /news /duty /uniform");
    }
    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:fancymoney(playerid, params[])
{
    SCMEx(playerid, COLOR_GREEN, "Money: %s", GetFancyCash(playerid));
    return 1;
}

CMD:help(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTGREEN,"___________________HELP___________________");
    SCM(playerid, COLOR_GREY, "** ACCOUNT ** /changepass /changesecret /stats /id");
    SCM(playerid, COLOR_GREY,"** GENERAL ** /pay /time /engine /refill /examine /attributes /lock (/ds)hout /knock /isafk /buyfood /casino /trunk /setspawn");
    SCM(playerid, COLOR_GREY,"** GENERAL ** /clothing /buy /licenses /helpme /coin /dice /admins /moderators /furniture /dropgun /grabgun /buygun /gascan /give");
    SCM(playerid, COLOR_GREY,"** GENERAL ** /place /takegun /check /charity /report /greet /acceptshake /ad /cad /mask /buyclothes /dropkey /servertime");
    SCM(playerid, COLOR_GREY,"** GENERAL **  /parkmeter /stop /smoke /dropsmoke (/v)ehicle /accept /setstyle /animlist /buydrink /meal /removecp /fine");
    SCM(playerid, COLOR_GREY,"** GENERAL ** /notehelp /fishhelp /bankhelp /cellhelp /househelp /bizhelp /gps /boomboxhelp /radiohelp /factionhelp /drughelp");
    SCM(playerid, COLOR_GREY,"** GENERAL ** /handbrake /speedlimit /givemats /mymats /toggle /fixchar");
    SCM(playerid, COLOR_GREY,"** CHAT ** /ame /me /do (/l)ocal /t (/s)hout /b /low (/w)hisper /cw /ooc /pm ");
    if(PlayerInfo[playerid][pHelper] > 0) SCM(playerid, COLOR_GREY, "** MODERATOR ** /mcmds");
    if(CheckAdmin(playerid, ADMIN_LEVEL_1)) SCM(playerid, COLOR_GREY, "** ADMIN ** /acmds");
    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________________");
    return 1;
}

CMD:stats(playerid, params[])
{
    ShowStats(playerid, playerid);
    return 1;
}

CMD:charity(playerid, params[])
{
    new amount;
    if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/charity [amount]");
    if(amount > GetCash(playerid) || amount <= 0) return NoCashMSG(playerid);
    GiveCash(playerid, -amount);
    PlaySound(playerid, 1052);
    format(msg, 128, "%s, multumim pentru donatia ta de $%d.", GetNameEx(playerid), amount);
    SCM(playerid, COLOR_GREY, msg);
    format(msg, 128, "[WARNING] %s a donat $%d.", GetNameEx(playerid), amount);
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}

CMD:removecp(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTRED, "Toate checkpoint-urile au fost sterse de pe mapa ta.");
    RemoveCheckPoint(playerid);
    return 1;
}

CMD:knock(playerid, params[])
{
    for(new i = 0; i < sizeof(HouseInfo); i++)
    {
        if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
        {
            ActionMessage(playerid,15.0,"bate la usa unei case.");
            format(msg, sizeof(msg), "* [USA] CIOC! CIOC! CIOC! (( %s ))", GetNameWithMask(playerid));
            new MaxPlayers = GetPlayerPoolSize();
            for(new p = 0; p <= MaxPlayers; p++)
            {
                if(PlayerToPoint(60, p, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(p))
                {
                    SCM(p, COLOR_PURPLE, msg);
                }
            }
            return 1;
        }
    }
    for(new i = 0; i < sizeof(BizInfo); i++)
    {
        if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
        {
            ActionMessage(playerid,15.0,"bate la usa unei afaceri.");
            format(msg, sizeof(msg), "* [USA] CIOC! CIOC! CIOC! (( %s ))", GetNameWithMask(playerid));
            new MaxPlayers = GetPlayerPoolSize();
            for(new p = 0; p <= MaxPlayers; p++)
            {
                if(PlayerToPoint(60, p, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(p) == BizInfo[i][bizWorld])
                {
                    SCM(p, COLOR_PURPLE, msg);
                }
            }
            return 1;
        }
    }
    return 1;
}

CMD:ds(playerid, params[]) return cmd_dshout(playerid, params);
CMD:dshout(playerid, params[])
{
    new text[128];
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/ds)hout [message]");
    for(new i = 0; i < sizeof(HouseInfo); i++)
    {
        if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
        {
            format(msg, sizeof(msg), "* %s striga (usa): %s!", GetNameWithMask(playerid), text);
            ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
            new MaxPlayers = GetPlayerPoolSize();
            for(new p = 0; p <= MaxPlayers; p++)
            {
                if(PlayerToPoint(60, p, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(p))
                {
                    SCM(p, COLOR_WHITE, msg);
                }
            }
            return 1;
        }
        else if(PlayerToPoint(4, playerid, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid))
        {
            format(msg, sizeof(msg), "* %s striga (inauntrul casei): %s!", GetNameWithMask(playerid), text);
            ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
            new MaxPlayers = GetPlayerPoolSize();
            for(new p = 0; p <= MaxPlayers; p++)
            {
                if(PlayerToPoint(30, p, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
                {
                    SCM(p, COLOR_WHITE, msg);
                }
            }
            return 1;
        }
    }
    for(new i = 0; i < sizeof(BizInfo); i++)
    {
        if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
        {
            format(msg, sizeof(msg), "* %s striga (usa): %s!", GetNameWithMask(playerid), text);
            ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
            new MaxPlayers = GetPlayerPoolSize();
            for(new p = 0; p <= MaxPlayers; p++)
            {
                if(PlayerToPoint(60, p, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(p) == BizInfo[i][bizWorld])
                {
                    SCM(p, COLOR_WHITE, msg);
                }
            }
            return 1;
        }
        else if(PlayerToPoint(4, playerid, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizWorld])
        {
            format(msg, sizeof(msg), "* %s striga (inauntrul magazinului): %s!", GetNameWithMask(playerid), text);
            ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
            new MaxPlayers = GetPlayerPoolSize();
            for(new p = 0; p <= MaxPlayers; p++)
            {
                if(PlayerToPoint(30, p, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
                {
                    SCM(p, COLOR_WHITE, msg);
                }
            }
            return 1;
        }
    }
    return 1;
}

CMD:dmv(playerid, params[])
{
    if(!PlayerToPoint(3.0, playerid, 1247.9946,-1560.4233,13.5634)) return SCM(playerid, COLOR_GREY, "Nu esti in DMV (Conference Center).");
    format(msg, sizeof(msg), "{ffffff}Tip A: Motociclete ({229a3d}$20{ffffff})\nTip B: Autovehicule cu 2/4 usi ({229a3d}$100{ffffff})\nTip C: Autoutilitare + Autobuze ({229a3d}$200{ffffff})\nLicenta de taximetrist ({229a3d}$300{ffffff})\nBrevet de pilot ({229a3d}$20.000{ffffff})");
    ShowDialog(playerid, Show:<DMV>, DIALOG_STYLE_LIST, "DMV - Alege tipul de licenta", msg, "Alege", "Inchide");

    return 1;
}

CMD:quitdmv(playerid, params[])
{
    if(GetPVarInt(playerid, "DMV") == 1)
    {
        DisablePlayerCheckpoint(playerid);
        DeletePVar(playerid, "DMV");
        dmv_bike[playerid] = 0;
        dmv_bikestage[playerid] = -1;
        dmv_car[playerid] = 0;
        dmv_carstage[playerid] = -1;
        dmv_bigcar[playerid] = 0;
        dmv_bigcarstage[playerid] = -1;
        SCM(playerid, COLOR_OOC, "Ai anulat examenul DMV.");
    }
    return 1;
}

Dialog:DMV(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:{
                SCM(playerid, COLOR_OOC, "Urca pe un Faggio si urmareste checkpointurile pentru a primi un permis de tip A.");
                SCM(playerid, COLOR_GREY, "Foloseste '/quitdmv' pentru a anula examenul!");
                SetIntVar(playerid, "DMV", 1);
                dmv_bike[playerid] = 1;
                dmv_bikestage[playerid] = 0;
                SetPlayerCheckpoint(playerid, DMVBike[dmv_bikestage[playerid]][dX], DMVBike[dmv_bikestage[playerid]][dY], DMVBike[dmv_bikestage[playerid]][dZ], 2);
            }
            case 1:{
                SCM(playerid, COLOR_OOC, "Urca intr-un Bravura si urmareste checkpointurile pentru a primi un permis de tip B.");
                SCM(playerid, COLOR_GREY, "Foloseste '/quitdmv' pentru a anula examenul!");
                SetIntVar(playerid, "DMV", 1);
                dmv_car[playerid] = 1;
                dmv_carstage[playerid] = 0;
                SetPlayerCheckpoint(playerid, DMV[dmv_carstage[playerid]][dX], DMV[dmv_carstage[playerid]][dY], DMV[dmv_carstage[playerid]][dZ], 4);
            }
            case 2:{
                SCM(playerid, COLOR_OOC, "Urca intr-un Yankee si urmareste checkpointurile pentru a primi un permis de tip C.");
                SCM(playerid, COLOR_GREY, "Foloseste '/quitdmv' pentru a anula examenul!");
                SetIntVar(playerid, "DMV", 1);
                dmv_bigcar[playerid] = 1;
                dmv_bigcarstage[playerid] = 0;
                SetPlayerCheckpoint(playerid, DMVBig[dmv_bigcarstage[playerid]][dX], DMVBig[dmv_bigcarstage[playerid]][dY], DMVBig[dmv_bigcarstage[playerid]][dZ], 5);
            }
            case 3:{
                if(PlayerInfo[playerid][pTaxiLic] == 1) return SCM(playerid, COLOR_GREY, "Ai deja o licenta de taximetrist!");
                if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_GREY, "Nu ai o licenta de condus!");
                if(GetCash(playerid) < 300) return SCM(playerid, -1, "Nu ai 300$!");
                GiveCash(playerid, -30);
                PlayerInfo[playerid][pTaxiLic] = 1;
                SCM(playerid, COLOR_GREEN2, "Ai cumparat o licenta de taxi pentru 300$!");
            }
            case 4:{
                SCM(playerid, COLOR_RED, "Indisponibil momentan.");
                //SCM(playerid, COLOR_GREEN, "Urca intr-un elicopter DMV si foloseste comanda '/flyinglicenseexam'");
                //SCM(playerid, COLOR_GREY, "Elicopterele DMV se afla pe LSAir. Pretul unei licente este: 250.000$");
            }
        }
    }
    else SCM(playerid, COLOR_GREY, "Ai iesit din meniul DMV.");
    return 1;
}

CMD:flyinglicenseexam(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid);
    if(!IsADMVCar(carid) && !IsADMVHeli(carid)) return DmvMSG(playerid, "Trebuie sa fi intr-un elicopter de examen.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi soferul.");
    if(IsADMVHeli(carid))
    {
        if(!IsDriver(playerid)) return NotInCarMSG(playerid);
        if(GetCash(playerid) < 120000) return NoCashMSG(playerid);
        if(GetIntVar(playerid, "InFlyTest") == 1) return DmvMSG(playerid, "Esti deja in mijlocul testului.");
        VehicleEngine(carid, true);
        DmvMSG(playerid, "Ai inceput sesiunea de pilotaj.");
        SCM(playerid, COLOR_GREEN2, "(1) - Respecta regulile ce constau in conducerea avioanelor.");
        SCM(playerid, COLOR_GREEN2, "(2) - Nu zbura haotic si nu intentiona sa te prabusesti.");
        SetIntVar(playerid, "InFlyTest", 1);
        SetIntVar(playerid, "LessonSeconds", 180);
        SetRaceCheckPoint(playerid, FLYEXAM1, 3, 1799.6403, -2253.3269, 41.0483, 1735.2058, -2151.1125, 64.9770, 6.0);
    }
    return 1;
}

CMD:refill(playerid, params[])
{
    new veh = GetPlayerVehicleID(playerid);
    new gas;
    if(!IsDriver(playerid)) return NotInCarMSG(playerid);
    if(!IsAtGasStation(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti la benzinarie.");
    if(sscanf(params, "i", gas)) return SyntaxMSG(playerid, "/refill [litri]");
    if(Gas{veh} >= 100) return SCM(playerid, COLOR_WHITE, "Rezervorul este plin.");
    if(Gas{veh} + gas > 100) return SCM(playerid, COLOR_GREY, "Cantitatea pe care vrei sa o pui depaseste capacitatea rezervorului!");
    new stationid = GetClosestStationID(playerid);
    if(GetCash(playerid) < (gas*GasStation[stationid][gPrice]))
    {
        format(msg, sizeof(msg), "Nu ai destui bani ca sa faci plinul, $%d.", gas*GasStation[stationid][gPrice]);
        SCM(playerid, COLOR_WHITE, msg);
        return 1;
    }
    if(GetIntVar(playerid, "IsRefueling") == 1) return SCM(playerid, COLOR_WHITE, "Deja faci plinul, asteapta cateva momente.");
    format(msg, sizeof(msg), "~w~Se alimenteaza rezervorul...");
    GameTextForPlayer(playerid, msg, 1000, 3);
    FreezePlayer(playerid);
    SCMEx(playerid, COLOR_OOC, "Trebuie sa astepti cateva secunde pentru a alimenta vehiculul.");
    SetTimerEx("RefuelTimer", gas*100, false, "iii", playerid, gas, gas*GasStation[stationid][gPrice]);
    return 1;
}

forward RefuelTimer(playerid, gas, price);
public RefuelTimer(playerid, gas, price)
{
    UnFreezePlayer(playerid);
    Gas{GetPlayerVehicleID(playerid)} += gas;
    GiveCash(playerid, -price);
    format(msg, sizeof(msg), "A adaugat %d litri de combustibil pentru $%d.", gas, price);
    SCM(playerid, COLOR_GREEN, msg);
}

CMD:gascan(playerid, params[])
{
    new veh = GetPlayerVehicleID(playerid), toFill;
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_WHITE, "Nu esti intr-un vehicul.");
    if(!GasCan{playerid}) return SCM(playerid, COLOR_WHITE, "Nu ai o canistra.");
    if(Gas{veh} >= 100) return SCM(playerid, COLOR_WHITE, "Canistra este plina.");
    GasCan{playerid} = false;
    toFill = 100 - Gas{veh};
    Gas{veh} += toFill;
    SCM(playerid,COLOR_WHITE,"* Vehiculul este alimentat.");
    ActionMessage(playerid, 10.0, "a alimentat masina folosindu-se de canistra.");
    return 1;
}

CMD:lock(playerid, params[])
{
    new counter = 0, result;
    for(new i = 1; i <=GetVehiclePoolSize(); i++)
    {
        new dist = CheckPlayerDistanceToVehicle(3.0, playerid, i);
        if(dist)
        {
            result = i;
            counter++;
        }
    }
    switch(counter)
    {
        case 1:
        {
            if(PlayerInfo[playerid][pCarKey] == result || PlayerInfo[playerid][pSpareKey] == VehicleInfo[result][carDupKey] && PlayerInfo[playerid][pSpareKey] != 0)
            {
                new str[256];
                if(vLocked{result})
                {
                    PlaySound(playerid, 1145);
                    ToggleVehicleLock(result, false);
                    ToggleVehicleLockForPlayer(playerid, result, false);
                    format(msg, sizeof(msg), "~b~%s ~n~~g~Deschis", VehicleNames[GetVehicleModel(result)-400]);
                    GameTextForPlayer(playerid, msg, 2000, 4);
                    format(str, sizeof(str), "%s a deschis vehiculul %s",GetNameWithMask(playerid), VehicleNames[GetVehicleModel(result)-400]);
                    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 10000);
                    return 1;
                }
                else
                {
                    PlaySound(playerid, 1145);
                    ToggleVehicleLock(result, true);
                    ToggleVehicleLockForPlayer(playerid, result, true);
                    format(msg, sizeof(msg), "~b~%s ~n~~r~Inchis", VehicleNames[GetVehicleModel(result)-400]);                    
                    GameTextForPlayer(playerid, msg, 2000, 4);
                    format(str, sizeof(str), "%s a inchis vehiculul %s",GetNameWithMask(playerid), VehicleNames[GetVehicleModel(result)-400]);
                    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 10000);
                    return 1;
                }
            }
            else if(vLocked{result} && ToolKit{playerid} && !IsARentCar(result))
            {
                if(JackingLock[playerid] != 0) return SCM(playerid, COLOR_INFO, "Deja spargi, '/stop' pentru a te opri.");
                FreezePlayer(playerid);
                new form[128];
                format(form, sizeof(form), "apuca trusa de scule si incearca sa sparga incuietoarea masinii %s.", VehicleNames[GetVehicleModel(result)-400]);
                ActionMessage(playerid,20.0,form);
                new vZone[MAX_ZONE_NAME];
                GetVehicleZone(result, vZone, MAX_ZONE_NAME);
                if(VehicleInfo[result][carAlarm] == 1)
                {
                    format(msg, sizeof(msg), "* ALARMA MASINA: BEEP BEEP BEEP BEEP BEEP BEEP.");
                    ProxDetector(50.0, playerid, msg, COLOR_PURPLE);
                    AlarmOn(result);
                    PlaySound(playerid, 1138);
                    format(msg, sizeof(msg), "[Alarma masina] %s localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
                    SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
                }
                else if(VehicleInfo[result][carAlarm] == 2)
                {
                    format(msg, sizeof(msg), "* ALARMA MASINA: BEEP BEEP BEEP BEEP BEEP BEEP.");
                    ProxDetector(70.0, playerid, msg, COLOR_PURPLE);
                    AlarmOn(result);
                    PlaySound(playerid, 1138);
                    format(msg, sizeof(msg), "[Alarma masina] %s localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
                    SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
                }
                else if(VehicleInfo[result][carAlarm] == 3)
                {
                    format(msg, sizeof(msg), "* ALARMA MASINA: BEEP BEEP BEEP BEEP BEEP BEEP.");
                    ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
                    AlarmOn(result);
                    PlaySound(playerid, 1138);
                    format(msg, sizeof(msg), "[Alarma masina] %s localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
                    SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
                }
                else if(VehicleInfo[result][carAlarm] == 4)
                {
                    format(msg, sizeof(msg), "* ALARMA MASINA: BEEP BEEP BEEP BEEP BEEP BEEP.");
                    ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
                    AlarmOn(result);
                    foreach(new i : Player)
                    {
                        if(PlayerIsOn(i))
                        {
                            if(result == PlayerInfo[i][pCarKey])
                            {
                                SCM(i, COLOR_YELLOWG, "SMS: Alarma masinii tale a pornit, Expeditor: ViperSecurity");
                            }
                        }
                    }
                    format(msg, sizeof(msg), "[Alarma masina] %s localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
                    SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
                }
                else if(VehicleInfo[result][carAlarm] == 5)
                {
                    format(msg, sizeof(msg), "* ALARMA MASINA: BEEP BEEP BEEP BEEP BEEP BEEP.");
                    ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
                    AlarmOn(result);
                    foreach(new i : Player)
                    {
                        if(PlayerIsOn(i))
                        {
                            if(result == PlayerInfo[i][pCarKey])
                            {
                                format(msg, sizeof(msg), "SMS: Alarma masinii %s a inceput sa sune, locatie: %s, Expeditor: ViperSecurity", VehicleNames[GetVehicleModel(result)-400], vZone);
                                SCM(i, COLOR_YELLOWG, msg);
                            }
                        }
                    }
                    format(msg, sizeof(msg), "[Alarma masina] %s localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
                    SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
                }
                DoorJacking[playerid] = result;
                if(VehicleInfo[result][carLock] == 0)
                { JackingLock[playerid] = 60; }
                else if(VehicleInfo[result][carLock] == 1)
                { JackingLock[playerid] = 120; }
                else if(VehicleInfo[result][carLock] == 2)
                { JackingLock[playerid] = 180; }
                else if(VehicleInfo[result][carLock] == 3)
                { JackingLock[playerid] = 240; }
                else if(VehicleInfo[result][carLock] == 4)
                { JackingLock[playerid] = 300; }
                else if(VehicleInfo[result][carLock] == 5)
                { JackingLock[playerid] = 360; }
            }
        }
    }
    if(PlayerNearVehicle(4, playerid, GetIntVar(playerid, "RentVehKey")) && GetIntVar(playerid, "RentedCar") == 1)
    {
        if(vLocked{GetIntVar(playerid, "RentVehKey")})
        {
            PlaySound(playerid, 1145);
            ToggleVehicleLock(GetIntVar(playerid, "RentVehKey"), false);
            ToggleVehicleLockForPlayer(playerid, GetIntVar(playerid, "RentVehKey"), false);
            format(msg, sizeof(msg), "~y~%s ~g~Deschis", VehicleNames[GetVehicleModel(GetIntVar(playerid, "RentVehKey"))-400]);
            GameTextForPlayer(playerid, msg, 3500, 4);
            return 1;
        }
        else
        {
            PlaySound(playerid, 1145);
            ToggleVehicleLock(GetIntVar(playerid, "RentVehKey"), true);
            ToggleVehicleLockForPlayer(playerid, GetIntVar(playerid, "RentVehKey"), true);
            format(msg, sizeof(msg), "~y~%s ~r~Inchis", VehicleNames[GetVehicleModel(GetIntVar(playerid, "RentVehKey"))-400]);
            GameTextForPlayer(playerid, msg, 3500, 4);
            return 1;
        }
    }
    if(HouseEntered[playerid] != -1)
    {
        new house = HouseEntered[playerid];
        for(new i = 1; i < MAX_FURNITURE; i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ]) && FurnitureInfo[house][i][fOn] && isHouseDoor(FurnitureInfo[house][i][fModel]) && PlayerInfo[playerid][pHouseKey] == house)
            {
                if(FurnitureInfo[house][i][fOpened] == 1) return SCM(playerid, COLOR_GREY, "Te rugam inchide usa inainte de a o inchide / deschide");
                if(FurnitureInfo[house][i][fLocked] == 0)
                {
                    SCM(playerid, COLOR_WHITE, "Usa este acum {FFFF00}inchisa.");
                    FurnitureInfo[house][i][fLocked] = 1;
                }
                else if(FurnitureInfo[house][i][fLocked] == 1)
                {
                    SCM(playerid, COLOR_WHITE, "Usa este acum {FFFF00}deschisa.");
                    FurnitureInfo[house][i][fLocked] = 0;
                }
            }
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++)
    {
        if (PlayerToPoint(2.5, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) || (PlayerToPoint(3, playerid,HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid)))
        {
            if(PlayerInfo[playerid][pHouseKey] == i)
            {
                if(HouseInfo[i][hLocked] == 1)
                {
                    HouseInfo[i][hLocked] = 0;
                    GameTextForPlayer(playerid, "~w~Usa ~g~Deschis", 5000, 6);
                    PlaySound(playerid, 1145);
                    return 1;
                }
                if(HouseInfo[i][hLocked] == 0)
                {
                    HouseInfo[i][hLocked] = 1;
                    GameTextForPlayer(playerid, "~w~Usa ~r~Inchis", 5000, 6);
                    PlaySound(playerid, 1145);
                    return 1;
                }
            }
            else
            {
                GameTextForPlayer(playerid, "~r~Nu ai cheie", 5000, 6);
                return 1;
            }
        }
    }
    for(new i = 0; i < sizeof(BizInfo); i++)
    {
        if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) || PlayerToPoint(3, playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == i)
        {
            if(PlayerInfo[playerid][pBizKey] == i || PlayerInfo[playerid][pWorkOn] == i)
            {
                if(BizInfo[i][bizLocked] == 1)
                {
                    BizInfo[i][bizLocked] = 0;
                    GameTextForPlayer(playerid, "~w~Afacere ~g~Deschisa", 5000, 6);
                    PlaySound(playerid, 1145);
                    return 1;
                }
                if(BizInfo[i][bizLocked] == 0)
                {
                    BizInfo[i][bizLocked] = 1;
                    GameTextForPlayer(playerid, "~w~Afacere ~r~Inchisa", 5000, 6);
                    PlaySound(playerid, 1145);
                    return 1;
                }
            }
            else
            {
                GameTextForPlayer(playerid, "~r~Nu ai cheie", 5000, 6);
                return 1;
            }
        }
    }
    for(new i = 0; i < sizeof(FactionDoors); i++)
    {
        if (PlayerToPoint(3, playerid, FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]) || PlayerToPoint(3, playerid, FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]))
        {
            if(PlayerInfo[playerid][pFaction] == FactionDoors[i][dFaction])
            {
                if(FactionDoors[i][dLocked] == 1)
                {
                    FactionDoors[i][dLocked] = 0;
                    GameTextForPlayer(playerid, "~w~Usa ~g~Deschisa", 5000, 6);
                    PlaySound(playerid, 1145);
                    return 1;
                }
                else if(FactionDoors[i][dLocked] == 0)
                {
                    FactionDoors[i][dLocked] = 1;
                    GameTextForPlayer(playerid, "~w~Usa ~r~Inchisa", 5000, 6);
                    PlaySound(playerid, 1145);
                    return 1;
                }
            }
            else
            {
                GameTextForPlayer(playerid, "~r~Nu ai cheie", 5000, 6);
                return 1;
            }
        }
    }
    return 1;
}

CMD:ram(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, -1, "Nu esti in factiunea corespunzatoare!");
    if(!CopDuty{playerid}) return SCM(playerid, -1, "Nu esti on duty!");
    new chance = randomEx(1,2);
    if(chance == 1)
    {
        for(new i = 0; i < sizeof(HouseInfo); i++)
        {
            if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
            {
                HouseInfo[i][hLocked] = 0;
                GameTextForPlayer(playerid, "~g~Ai spart usa!", 3000, 4);
                ActionMessage(playerid, 15.0, "a spart usa casei.");
                return 1;
            }
        }
    }
    else
    {
        GameTextForPlayer(playerid, "~r~Nu ai spart usa!", 5000, 4);
        ActionMessage(playerid, 15.0, "nu a reusit sa sparga usa casei.");
    }
    return 1;
}

CMD:rentbike(playerid, params[])
{
    new vehid;
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti soferul.");
    vehid = GetPlayerVehicleID(playerid);
    if(IsARentBike(vehid))
    {
        foreach(new i : Player)
        {
            if(GetIntVar(i, "RentVehKey") == vehid && i != playerid) return RentMSG(playerid, "Cineva deja a inchiriat acest vehicul / moped.");
        }
        if(GetIntVar(playerid, "RentedCar") == 1) return RentMSG(playerid, "Deja inchiriezi ceva, '/unrentvehicle' inainte.");
        if(GetCash(playerid) < BIKE_RENT_COST) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai inchiriat aceasta bicicleta pentru $%d, poti folosi '/engine' & '/lock'.", BIKE_RENT_COST);
        RentMSG(playerid, msg);
        GiveCash(playerid, -BIKE_RENT_COST);
        PlaySound(playerid, 1052);
        SetIntVar(playerid, "RentedCar", 1);
        SetIntVar(playerid, "RentVehKey", vehid);
    }
    return 1;
}

CMD:rentcar(playerid, params[])
{
    new vehid;
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti soferul.");
    vehid = GetPlayerVehicleID(playerid);
    if(IsARentCar(vehid))
    {
        foreach(new i : Player)
        {
            if(GetIntVar(i, "RentVehKey") == vehid && i != playerid) return RentMSG(playerid, "Cineva deja a inchiriat acest vehicul.");
        }
        if(GetIntVar(playerid, "RentedCar") == 1) return RentMSG(playerid, "Deja inchiriezi ceva, '/unrentvehicle' inainte.");
        if(GetCash(playerid) < VEHICLE_RENT_COST) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai inchiriat aceasta masina pentru $%d, poti folosi '/engine' & '/lock'.", VEHICLE_RENT_COST);
        RentMSG(playerid, msg);
        GiveCash(playerid, -VEHICLE_RENT_COST);
        PlaySound(playerid, 1052);
        SetIntVar(playerid, "RentedCar", 1);
        SetIntVar(playerid, "RentVehKey", vehid);
    }
    return 1;
}

CMD:fixcarhp(playerid, params[])
{
    if(CheckAdmin(playerid, ADMIN_LEVEL_1))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Nu esti intr-un vehicul!");
        SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
        return 1;
    }
    else SendClientMessage(playerid, COLOR_GRAD1, "Nu esti administrator!");
    return 1;
}

CMD:fixveh(playerid, params[])
{
    return cmd_fixcar(playerid, params);
}

COMMAND:fixcar(playerid, params[])
{
    if(CheckAdmin(playerid, ADMIN_LEVEL_1))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Nu esti intr-un vehicul!");
        RepairVehicle(GetPlayerVehicleID(playerid));
        SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
        SCM(playerid, -1, "Ai reparat masina cu succes!");
        return 1;
    }
    else SendClientMessage(playerid, COLOR_GRAD1, "Nu esti administrator!");
    return 1;
}

CMD:unrentcar(playerid, params[])
{
    return cmd_unrentvehicle(playerid, params);
}

CMD:unrentvehicle(playerid, params[])
{
    if(GetIntVar(playerid, "RentedCar") == 0) return RentMSG(playerid, "Nu inchiriezi un vehicul sau o bicicleta.");
    format(msg, sizeof(msg), "Nu mai inchiriezi vehiculul/bicicleta (Cheie: %d).", GetIntVar(playerid, "RentVehKey"));
    RentMSG(playerid, msg);
    RespawnVehicle(GetIntVar(playerid, "RentVehKey"));
    FixVehicle(GetIntVar(playerid, "RentVehKey"));
    RemoveVar(playerid, "RentedCar");
    RemoveVar(playerid, "RentVehKey");
    return 1;
}

CMD:aunrentvehicle(playerid, params[])
{
	if(CheckAdmin(playerid, ADMIN_LEVEL_1))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Error: Trebuie sa te alfi intr-o masina!");
		new vehicleid = GetPlayerVehicleID(playerid);
        new ok = 0;
		foreach(new i : Player)
		{
			if(GetIntVar(i, "RentVehKey") == vehicleid)
			{
				SCM(i, -1, "[SYSTEM]: Masina ta de rent a fost resetata de un admin!");
				SCMEx(playerid, -1, "Aceasta masina e inchiriata de %s.", GetName(i));
				FixVehicle(vehicleid);
				RemoveVar(i, "RentedCar");
				RemoveVar(i, "RentVehKey");
				RespawnVehicle(vehicleid);
                ok = 1;
                return 1;
			}			
		}
        if(ok == 0)
        {
            SCM(playerid, -1, "Masina asta nu este inchiriata de nimeni.");
        }
	}
	else return NotAuthMSG(playerid);
	return 1;
}

CMD:engine(playerid, params[])
{
    new Float:vehHealth;
    new vehicleid = GetPlayerVehicleID(playerid);
    GetVehicleHealth(vehicleid, vehHealth);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti soferul vehiculului.");
    if(IsADMVCar(vehicleid) || IsADMVHeli(vehicleid) || IsBike(vehicleid) || IsATruckJob(vehicleid)) return SCM(playerid, -1, "Nu poti porni motorul acestui vehicul.");
    if(Gas{vehicleid} == 0) return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu mai are benzina.");
    if(VehicleInfo[vehicleid][carImpound] == 1) return SCM(playerid, COLOR_LIGHTRED, "Vehiculul este confiscat, viziteaza LSPD HQ pentru mai multe informatii.");
    if(CheckHandBrake(vehicleid) == 1) return SCM(playerid, COLOR_GREY, "Frana de mana a vehiculului este trasa ('/handbrake').");
    if(vehHealth < 360)
    {
        if(!engineOn{vehicleid})
        {
            SCM(playerid, COLOR_GREY, "Motorul nu poate porni din cauza avariilor!");
            return 1;
        }
    }
    if(IsARentCar(vehicleid) || IsARentBike(vehicleid))
    {
        foreach(new i : Player)
        {
            if(GetIntVar(i, "RentVehKey") == vehicleid && GetIntVar(i, "RentedCar") == 1 && i != playerid) return RentMSG(playerid, "Nu ai cheile acestui vehicul.");
        }
        if(GetIntVar(playerid, "RentedCar") == 0 && GetIntVar(playerid, "RentVehKey") == 0) return RentMSG(playerid, "Nu ai cheile acestui vehicul.");
        if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") != vehicleid) return RentMSG(playerid, "Nu ai cheile acestui vehicul.");
        if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") == vehicleid)
        {
            ToggleVehicleEngine(vehicleid, playerid);
        }
    }
	// farmer job
	else if(CityVehicles[vehicleid][vType] == FARMER_CAR && PlayerInfo[playerid][pJob] == FARMER)
	{
		ToggleVehicleEngine(vehicleid, playerid);
	}
	// farmer job
	
	// Garbage Job
	else if(CheckGarbageCar(vehicleid) && PlayerInfo[playerid][pJob] == GARBAGE)
	{
		ToggleVehicleEngine(vehicleid, playerid);
	}
	// Garbage Job
    else if(IsACopCar(vehicleid) || IsACopTowTruck(vehicleid) || IsAFDCar(vehicleid) || IsAGOVCar(vehicleid) || IsANewsCar(vehicleid))
    {
        ToggleVehicleEngine(vehicleid, playerid);
    }
    else if(adminVeh{vehicleid} == true || PlayerInfo[playerid][pCarKey] == vehicleid || PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehicleid][carDupKey] && PlayerInfo[playerid][pSpareKey] != 0 || VehicleInfo[vehicleid][carFaction] != CIVILIAN && VehicleInfo[vehicleid][carFaction] == PlayerInfo[playerid][pFaction])
    {
        if(VehicleInfo[vehicleid][carBroken] == 1)
        {
            ErrorMsg(playerid, "Motorul este stricat.");
        }
        else
        {
            ToggleVehicleEngine(vehicleid, playerid);
        }
    }
    else if(vehicleid == FarmInfo[playerid][pVehicleHire])
    {
        ToggleVehicleEngine(vehicleid, playerid);
    }
    else
    {
        if(!ToolKit{playerid}) return GameTextForPlayer(playerid,"~r~Nu ai un set de scule",2000,3);
        if(JackingEngine[playerid] != 0) return SCM(playerid, COLOR_INFO, "Deja spargi o masina, floseste /stop pentru a te opri.");
        if(engineOn{vehicleid}) return 1;
        FreezePlayer(playerid);
        format(msg, sizeof(msg), ", incearca sa porneasca motorul vehiculului %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
        ActionMessage(playerid, 20.0, msg);
        new vZone[MAX_ZONE_NAME];
        GetVehicleZone(vehicleid, vZone, MAX_ZONE_NAME);
        if(VehicleInfo[vehicleid][carAlarm] == 3)
        {
            format(msg, sizeof(msg), "*ALARMA: BEEP BEEP BEEP BEEP BEEP BEEP.");
            ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
            AlarmOn(vehicleid);
            format(msg, sizeof(msg), "[Alarma masina] %s pozitionata in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
            SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
        }
        else if(VehicleInfo[vehicleid][carAlarm] == 4)
        {
            format(msg, sizeof(msg), "*ALARMA: BEEP BEEP BEEP BEEP BEEP BEEP.");
            ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
            AlarmOn(vehicleid);
            foreach(new i : Player)
            {
                if(PlayerIsOn(i))
                {
                    if(vehicleid == PlayerInfo[i][pCarKey])
                    {
                        SCM(i, COLOR_YELLOWG, "SMS: Alarma vehiculului tau a pornit!, De la: AlarmService");
                    }
                }
            }
            format(msg, sizeof(msg), "[Alarma masina] %s pozitionata in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
            SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
        }
        else if(VehicleInfo[vehicleid][carAlarm] == 5)
        {
            format(msg, sizeof(msg), "*ALARMA: BEEP BEEP BEEP BEEP BEEP BEEP.");
            ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
            AlarmOn(vehicleid);
            foreach(new i : Player)
            {
                if(PlayerIsOn(i))
                {
                    if(vehicleid == PlayerInfo[i][pCarKey])
                    {
                        format(msg, sizeof(msg), "SMS: Alarma vehiculului %s a pornit!, Locatie: %s, De la: AlarmService", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
                        SCM(i, COLOR_YELLOWG, msg);
                    }
                }
            }
            format(msg, sizeof(msg), "[Alarma masina] %s pozitionata in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
            SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
        }
        if(VehicleInfo[vehicleid][carImmob] == 0)
        {
            JackingEngine[playerid] = 60;
        }
        else if(VehicleInfo[vehicleid][carImmob] == 1)
        {
            JackingEngine[playerid] = 120;
        }
        else if(VehicleInfo[vehicleid][carImmob] == 2)
        {
            JackingEngine[playerid] = 180;
        }
        else if(VehicleInfo[vehicleid][carImmob] == 3)
        {
            JackingEngine[playerid] = 240;
        }
        else if(VehicleInfo[vehicleid][carImmob] == 4)
        {
            JackingEngine[playerid] = 300;
        }
        else if(VehicleInfo[vehicleid][carImmob] == 5)
        {
            JackingEngine[playerid] = 360;
        }
    }
    return 1;
}

CMD:isafk(playerid, params[])
{
    new id, afkstr[128];
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/isafk [playerid]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    new time = AFKTime[id];
    if(time == 0) format(afkstr,256,"%s (ID:%d) nu este AFK.", GetName(id), id);
    if(time == 1) format(afkstr,256,"%s (ID:%d) este AFK de un minut.", GetName(id), id);
    if(time >= 1 && time <= 19) format(afkstr,256,"%s (ID:%d) este AFK de %d minute.", GetName(id), id, time);
    if(time >= 20) format(afkstr,256,"%s (ID:%d) este AFK de %d de minute.", GetName(id), id, time);
    SCM(playerid, COLOR_LIGHTRED, afkstr);
    return 1;
}

CMD:id(playerid, params[])
{
    new id, name[MAX_PLAYER_NAME];
    if(sscanf(params,"u", id)) return SyntaxMSG(playerid, "/id [playerid/PON]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    GetPlayerName(id, name, sizeof(name));
    format(msg,sizeof(msg), "ID: (%d) %s | Level: %d", id, name, PlayerInfo[id][pLevel]);
    SCM(playerid, COLOR_GREY, msg);
    return 1;
}

CMD:ame(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/ame [action]");
    format(msg, sizeof(msg), "* %s %s", GetNameWithMask(playerid), params);
    SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 20.0, 10000);
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "> %s %.*s ...", GetNameWithMask(playerid), pos, params);
        SCM(playerid, COLOR_PURPLE, msg);
        format(msg, sizeof(msg), "> %s ... %s", params[pos]);
        SCM(playerid, COLOR_PURPLE, msg);
    }
    else
    {
        format(msg, sizeof(msg), "> %s %s", GetNameWithMask(playerid), params);
        SCM(playerid, COLOR_PURPLE, msg);
    }
    return 1;
}

CMD:l(playerid, params[]) return cmd_local(playerid, params);
CMD:local(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/local [text]");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "%s spune: %.*s ...", GetNameWithMask(playerid), pos, params);
        ProxDetectorP(20.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        ProxDetectorP(20.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        ChatAnimation(playerid, strlen(params));
    }
    else
    {
        format(msg, sizeof(msg), "%s spune: %s", GetNameWithMask(playerid), params);
        ProxDetectorP(20.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        ChatAnimation(playerid, strlen(params));
    }
    return 1;
}

CMD:me(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/me [actiune]");
    ActionMessage(playerid, 20.0, params);
    return 1;
}

CMD:do(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/do [actiune]");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "* %.*s ...", pos, params);
        ProxDetector(20.0, playerid, msg, COLOR_PURPLE); 
        format(msg, sizeof(msg), "* ... %s ((%s))", params[pos], GetNameWithMask(playerid));
        ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
    }
    else
    {
        format(msg, sizeof(msg), "* %s ((%s))", params, GetNameWithMask(playerid));
        ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
    }
    return 1;
}

CMD:melow(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/melow [actiune]");
    ActionMessage(playerid, 5.0, params);
    return 1;
}

CMD:dolow(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/dolow [actiune]");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "* %.*s ...", pos, params);
        ProxDetector(5.0, playerid, msg, COLOR_PURPLE);
        format(msg, sizeof(msg), "* ... %s ((%s))", params[pos], GetNameWithMask(playerid));
        ProxDetector(5.0, playerid, msg, COLOR_PURPLE);
    }
    else
    {
        format(msg, sizeof(msg), "* %s ((%s))", params, GetNameWithMask(playerid));
        ProxDetector(5.0, playerid, msg, COLOR_PURPLE);
    }
    return 1;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/(s)hout [mesaj]");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "%s striga: %.*s ...", GetNameWithMask(playerid), pos, params);
        ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
    }
    else
    {
        format(msg, sizeof(msg), "%s striga: %s", GetNameWithMask(playerid), params);
        ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
    }
    return 1;
}

CMD:b(playerid,params[])
{
    if(GetIntVar(playerid, "Muted") == 1) return SCM(playerid, COLOR_GREY, "Error: Ai primit mute.");
    if(isnull(params)) return SyntaxMSG(playerid, "/b [local ooc chat]");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        new msg2[128];
        if(pos < MAXLEN-1) pos = MAXLEN;
        if(isAdminDuty(playerid))
        {
            format(msg, sizeof(msg), "(( [%d] {FF6600}%s{B2B2B2}: %.*s ...", playerid, GetName(playerid), pos, params);
            format(msg2, sizeof(msg2), "{B2B2B2}... %s ))", params[pos]);
        }
        else if(isTesterDuty(playerid))
        {
            format(msg, sizeof(msg), "(( [%d] {a52a2a}%s{B2B2B2}: %.*s ...", playerid, GetName(playerid), pos, params);
            format(msg2, sizeof(msg2), "{B2B2B2}... %s ))", params[pos]);
        }
        else
        {
            format(msg, sizeof(msg), "(( [%d] %s: %.*s ...", playerid, GetName(playerid), pos, params);
            format(msg2, sizeof(msg2), "{B2B2B2}... %s ))", params[pos]);
        }
        ProxDetector(25.0, playerid, msg, COLOR_GREY);
        ProxDetector(25.0, playerid, msg2, COLOR_GREY);
    }
    else
    {
        if(isAdminDuty(playerid))
            format(msg, sizeof(msg), "(( [%d] {FF6600}%s{B2B2B2}: %s ))", playerid, GetName(playerid), params);
        else if(isTesterDuty(playerid))
            format(msg, sizeof(msg), "(( [%d] {a52a2a}%s{B2B2B2}: %s ))", playerid, GetName(playerid), params);
        else
            format(msg, sizeof(msg), "(( [%d] %s: %s ))", playerid, GetName(playerid), params);
        ProxDetector(25.0, playerid, msg, COLOR_GREY);
    }
    return 1;
}

CMD:low(playerid,params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/low [low chat]");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "%s spune [incet]: %.*s ...", GetNameWithMask(playerid), pos, params);
        ProxDetectorP(5.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        ProxDetectorP(5.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        ChatAnimation(playerid, strlen(params));
    }
    else
    {
        format(msg, sizeof(msg), "%s spune [incet]: %s", GetNameWithMask(playerid), params);
        ProxDetectorP(3.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        ChatAnimation(playerid, strlen(params));
    }
    return 1;
}

CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
    if(PlayerInfo[playerid][pLevel] == 1 && PlayerInfo[playerid][pExp] < 4) return SCM(playerid, COLOR_GREY, "Trebuie sa ai 4 ore jucate!");
    new id, text[256];
    if(sscanf(params,"us[256]", id, text)) return SyntaxMSG(playerid, "/(w)hisper [playerid/partofname] [text]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(isAdminDuty(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este langa tine.");
    if(playerid == id) return SCM(playerid, COLOR_GREY, "Nu iti poti sopti singur!");
    else
    {
        if(PlayerNearPlayer(5.0, playerid,id))
        {
            format(msg, sizeof(msg), "> %s ii sopteste ceva lui %s.", GetNameWithMask(playerid), GetNameWithMask(id));
            SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);

            format(msg, sizeof(msg), "%s sopteste: %s", GetNameWithMask(playerid), text);
            SCM(id, COLOR_YELLOW, msg);
            format(msg, sizeof(msg), "%s sopteste: %s", GetNameWithMask(playerid), text);
            SCM(playerid,  COLOR_YELLOW, msg);
        }
        else return SCM(playerid, COLOR_GREY, "Acest jucator nu este langa tine.");
    }
    return 1;
}

stock VehicleMessage(vehicle, color, const string[])
{
    foreach(new i : Player)
    {
        if(PlayerInCar(i))
        {
            if(GetPlayerVehicleID(i) == vehicle)
            {
                SCM(i, color, string);
            }
        }
    }
}

CMD:cw(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/cw [car whisper]");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    new vehicle = GetPlayerVehicleID(playerid);
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "%s sopteste %.*s ...", GetNameWithMask(playerid), pos, params);
        VehicleMessage(vehicle, COLOR_YELLOWG, msg);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        VehicleMessage(vehicle, COLOR_YELLOWG, msg);

    }
    else
    {
        format(msg, sizeof(msg), "%s sopteste %s", GetNameWithMask(playerid), params);
        VehicleMessage(vehicle, COLOR_YELLOWG, msg);
    }
    return 1;
}

CMD:hideadmin(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(GetPVarInt(playerid, "Hideadmin") == 0)
    {
        SCM(playerid, COLOR_ORANGE, "Ti-ai ascuns statusul de admin!");
        SetPVarInt(playerid, "Hideadmin", 1);
    }
    else
    {
        SCM(playerid, COLOR_ORANGE, "Ti-ai facut vizibil statusul de admin!");
        SetPVarInt(playerid, "Hideadmin", 0);
    }
    return 1;
}

CMD:setforumname(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(PlayerInfo[playerid][pFName] == 1) return SCM(playerid, COLOR_GREY, "Ai deja forumname-ul setat, foloseste `/removeforumname`.");
    new forumname[64];
    if(sscanf(params, "s[64]", forumname)) return SyntaxMSG(playerid, "/setforumname [numele de pe forum]");
    format(PlayerInfo[playerid][pForumName], 64, "%s", forumname);
    PlayerInfo[playerid][pFName] = 1;
    SCMEx(playerid, COLOR_GREEN2, "Ti-ai setat forumname-ul in: %s.", forumname);
    return 1;
}

CMD:removeforumname(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(PlayerInfo[playerid][pFName] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un forumname setat, foloseste `/setforumname`.");
    format(PlayerInfo[playerid][pForumName], 64, "INVALID");
    PlayerInfo[playerid][pFName] = 0;
    SCM(playerid, COLOR_GREEN2, "Ti-ai sters forumname-ul.");
    return 1;
}

CMD:admins(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME];
    new shownlevel;
    SCM(playerid, COLOR_GREY, "Administratori Online:");
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            shownlevel = PlayerInfo[i][pAdmin];
            if(PlayerInfo[i][pAdmin] == 9999) { shownlevel = 2014; }
            GetPlayerName(i, sendername, sizeof(sendername));
            if(PlayerInfo[playerid][pAdmin])
            {
                if(PlayerInfo[i][pAdmin] >= 1)
                {
                    if(GetPVarInt(i, "Hideadmin") == 0)
                    {
                        if(!isAdminDuty(i))
                        {
                            format(msg, 256, "(Level: %d) %s | %s (ID:%d) Adminduty: Nu", shownlevel, sendername, PlayerInfo[i][pForumName], i);
                            SCM(playerid, COLOR_GREY, msg);
                        }
                        else
                        {
                            format(msg, 256, "(Level: %d) %s | %s (ID:%d) Adminduty: Da", shownlevel, sendername, PlayerInfo[i][pForumName], i);
                            SCM(playerid, COLOR_GREEN2, msg);
                        }
                    }
                    else
                    {
                        if(!isAdminDuty(i))
                        {
                            format(msg, 256, "(Level: %d | HIDDEN) %s | %s (ID:%d) Adminduty: Nu", shownlevel, sendername, PlayerInfo[i][pForumName], i);
                            SCM(playerid, COLOR_GREY, msg);
                        }
                        else
                        {
                            format(msg, 256, "(Level: %d | HIDDEN) %s | %s (ID:%d) Adminduty: Da", shownlevel, sendername, PlayerInfo[i][pForumName], i);
                            SCM(playerid, COLOR_GREEN2, msg);
                        }
                    }
                }
            }
            else
            {
                if(PlayerInfo[i][pAdmin] >= 1)
                {
                    if(GetPVarInt(i, "Hideadmin") == 0)
                    {
                        if(!isAdminDuty(i))
                        {
                            format(msg, 256, "(Level: %d) %s | %s (ID:%d) Adminduty: Da", shownlevel, sendername, PlayerInfo[i][pForumName], i);
                            SCM(playerid, COLOR_GREY, msg);
                        }
                        else
                        {
                            format(msg, 256, "(Level: %d) %s | %s (ID:%d) Adminduty: Da", shownlevel, sendername, PlayerInfo[i][pForumName], i);
                            SCM(playerid, COLOR_GREEN2, msg);
                        }
                    }
                }
            }
        }
    }
    if(CheckAdmin(playerid, ADMIN_LEVEL_1)) { SCM(playerid, COLOR_OOC, "NOTA: Vezi adminii HIDDEN doar pentru ca esti admin!"); }
    return 1;
}

CMD:moderators(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME];
    SCM(playerid, COLOR_GREY, "Moderatori Online:");
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            GetPlayerName(i, sendername, sizeof(sendername));
            if(PlayerInfo[i][pHelper] >= 1)
            {
                if(!isTesterDuty(i))
                {
                    format(msg, 256, "(ID: %d) %s | %s - MODDuty: Nu", i, sendername, PlayerInfo[i][pForumName]);
                    SCM(playerid, COLOR_GREY, msg);
                }
                else
                {
                    format(msg, 256, "(ID: %d) %s | %s - MODDuty: Da", i, sendername, PlayerInfo[i][pForumName]);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
            }
        }
    }
    return 1;
}

CMD:o(playerid, params[]) return cmd_ooc(playerid, params);
CMD:ooc(playerid, params[])
{
    if ((noooc) && !CheckAdmin(playerid, 1)) return SCM(playerid, COLOR_GRAD2, "AdmCmd: Canalul OOC global a fost dezactivat de catre un admin!");
    if(GetIntVar(playerid, "Muted") == 1) return SCM(playerid, COLOR_GREY, "Error: Ai primit mute.");
    if(isnull(params)) return SyntaxMSG(playerid, "/ooc [global ooc chat]");
    new name[128];
    format(name, sizeof(name), "%s", GetName(playerid));
    if(PlayerInfo[playerid][pFName] == 1) { new fnamestr[64]; format(fnamestr, sizeof(fnamestr), " (%s)", PlayerInfo[playerid][pForumName]); strcat(name, fnamestr); }
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "[OOC] %s: %.*s ...", name, pos, params);
        OOCMSG(COLOR_OOC,msg);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        OOCMSG(COLOR_OOC,msg);
    }
    else
    {
        format(msg, sizeof(msg), "[OOC] %s: %s", name, params);
        OOCMSG(COLOR_OOC,msg);
    }
    return 1;
}

CMD:togooc(playerid, params[])
{
    if(gOOC{playerid} == true)
    {
        ServerMSG(playerid, "Ai dezactivat canalul OOC!");
        gOOC{playerid} = false;
    }
    else
    {
        ServerMSG(playerid, "Ai activat canalul OOC!");
        gOOC{playerid} = true;
    }
    return 1;
}

CMD:respawncar(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new veh;
    if(sscanf(params,"d",veh)) return SyntaxMSG(playerid, "/respawncar [veh]");
    SetVehicleToRespawn(veh);
    return 1;
}

CMD:rtc(playerid, params[])
{
    return cmd_respawnthiscar(playerid, params);
}

CMD:respawnthiscar(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu esti intr-un vehicul!");
    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
    return 1;
}

CMD:rac(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    for(new veh = 1; veh <=GetVehiclePoolSize(); veh++)
    {
        if(CityVehicles[veh][vType] != FARMER_CAR)
		{
			SetVehicleToRespawn(veh);
		}
    }
    new string[128];
    format(string, sizeof(string), "AdmCmd: Administratorul %s a respawnat toate vehiculele neocupate.", GetName(playerid));
    SendClientMessageToAll(COLOR_LIGHTRED, string);
    return 1;
}

CMD:pm(playerid, params[])
{
    if(PlayerInfo[playerid][pLevel] == 1 && PlayerInfo[playerid][pExp] == 0) return SCM(playerid, COLOR_GREY, "Trebuie sa ai o ora jucate!");
    if(GetIntVar(playerid, "Muted") == 1) return SCM(playerid, COLOR_GREY, "Error: Ai primit mute.");
    new PID, text[128], str[300];
    if(sscanf(params, "us[128]", PID, text)) return SyntaxMSG(playerid, "/PM [playerid] [message]");
    if(!PlayerIsOn(PID)) return NotConnectedMSG(playerid);
    if(blockpm[PID] == 1) return SCM(playerid, COLOR_RED, "Acest player are PM-ul blocat.");
    if(PID == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti trimite singur mesaje.");
	if(CheckAdmin(PID, 1) && PlayerInfo[playerid][pAdmin] == 0)
    {
        if(GetIntVar(playerid, "OldAdminPM") != PID)
        {
            SetIntVar(playerid, "PMTo", PID);
            SetStringVar(playerid, "PMText", text);
            format(str, sizeof(str), "1. Daca ai vreo problema esti rugat sa folosesti comanda /report, astfel un admin disponibil te va ajuta cat mai repede.\n2. Daca ai intrebari legate de comenzi foloseste comanda /helpme, asa un tester iti va vedea intrebarea si iti va raspunde.\n3. Daca ignori aceasta regula vei primi Kick/Ajail");
            ShowDialog(playerid, Show:<AcceptPM>, DIALOG_STYLE_MSGBOX, "{ff0000}Regula: {FFFFFF}Nu trimite PM-uri adminilor!", str, "Trimite", "Anuleaza");
        }
        else
        {
            SendPMToPlayer(playerid, PID, text);
        }
    }
    else
    {
        SendPMToPlayer(playerid, PID, text);
    }
    return 1;
}

CMD:time(playerid, params[])
{
    new hour,minute,second;
    gettime(hour,minute,second);
    if(PlayerInfo[playerid][pJailed] == 1)
    {
        format(msg, sizeof(msg), "~y~(AdminJail) Timp ramas: %d", PlayerInfo[playerid][pJailTime]);
        GameTextForPlayer(playerid, msg, 5000, 1);
    }
    else if(PlayerInfo[playerid][pJailed] == 2)
    {
        format(msg, sizeof(msg), "~y~(Jail) Timp ramas: %d", PlayerInfo[playerid][pJailTime2]);
        GameTextForPlayer(playerid, msg, 5000, 1);
    }
    else if(PlayerInfo[playerid][pJailed] == 3)
    {
        format(msg, sizeof(msg), "~y~(PRISON) Timp ramas: %d", PlayerInfo[playerid][pJailTime2]);
        GameTextForPlayer(playerid, msg, 5000, 1);
    }
    else
    {
        if (minute < 10)
        {
            format(msg, sizeof(msg), "~w~|%d:0%d|", hour, minute);
        }
        else
        {
            format(msg, sizeof(msg), "~w~|%d:%d|", hour, minute);
        }

        GameTextForPlayer(playerid, msg, 5000, 1);
        SetPlayerBubble(playerid, "se uita la ceas");
    }
    return 1;
}

CMD:colorlist(playerid, params[])
{
    new info[3343], count = -1;
    for (new i; i != sizeof (gVehicleColors); ++i)
    {
        format(info, sizeof (info), "%s{%06x}#%03i ", info, gVehicleColors[i] >>> 8, i);
        if (++count == 15)
        {
            strcat(info, "\n", sizeof (info));
            count = -1;
        }
    }
    ShowDialog(playerid, Show:<ColorList>, DIALOG_STYLE_MSGBOX, "Culoarea vehiculului", info, "Alege", "Anuleaza");
    return 1;
}

CMD:enterplane(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) SCM(playerid, COLOR_GREY, "Nu poti face asta cand esti intr-un vehicul!");
    new Float:X, Float:Y, Float:Z;
    for(new i = 1; i <=GetVehiclePoolSize(); i++)
    {
        GetVehiclePos(i, X, Y, Z);
        if(PlayerToPoint(5, playerid, X, Y, Z))
        {
            if(GetVehicleModel(i) == 519)
            {
                SetPlayerPos(playerid, 138.5596,1677.6570,999.1359);
                SCM(playerid, COLOR_OOC, "Bun venit in Shamal!");
                SetPlayerVirtualWorld(playerid, i);
                enteredplane[playerid] = i;
            }
            return 1;
        }
    }
    return 1;
}

CMD:exitplane(playerid, params[])
{
    if(enteredplane[playerid] == 0) return SCM(playerid, COLOR_WHITE, "Nu ai intrat intr-un avion!");
    if(!PlayerToPoint(3.0, playerid, 138.5596,1677.6570,999.1359)) return SCM(playerid, COLOR_WHITE, "Nu esti la usa avionului!");
    new Float:X, Float:Y, Float:Z;
    GetVehiclePos(enteredplane[playerid], X, Y, Z);
    SetPlayerPos(playerid, X-3, Y+3, Z);
    SetPlayerVirtualWorld(playerid, 0);
    SCM(playerid, COLOR_OOC, "Ai iesit din avion!");
    enteredplane[playerid] = 0;
    return 1;
}

forward RemoveFromPS(playerid);
public RemoveFromPS(playerid)
{
    TogglePlayerControllable(playerid, true);
    FixVehicle(GetPlayerVehicleID(playerid));
    SetVehiclePos(GetPlayerVehicleID(playerid), BizInfo[BizEntered[playerid]][bizPosX], BizInfo[BizEntered[playerid]][bizPosY], BizInfo[BizEntered[playerid]][bizPosZ]);
    BizEntered[playerid] = -1;
    return 1;
}

CMD:enter(playerid, params[])
{
    for(new i = 0; i < sizeof(DoorInfo); i ++)
    {
        if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
        {
            SetPlayerPos(playerid,DoorInfo[i][dExitX],DoorInfo[i][dExitY],DoorInfo[i][dExitZ]);
            SetInterior(playerid,DoorInfo[i][dExitInterior]);
            SetWorld(playerid,DoorInfo[i][dVirtualWorld]);
            DoorEntered[playerid] = i;
            FreezePlayer(playerid);
            GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 2000, 4);
            SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(FactionDoors); i ++)
    {
        if (PlayerToPoint(3, playerid,FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]))
        {
            if(FactionDoors[i][dLocked] == 0)
            {
                if(FactionDoors[i][dWithVehicle] == 1 && IsDriver(playerid))
                {
                    SetVehiclePos(GetPlayerVehicleID(playerid),FactionDoors[i][dExitX],FactionDoors[i][dExitY],FactionDoors[i][dExitZ]);
                    SetInterior(playerid,FactionDoors[i][dExitInterior]);
                    SetWorld(playerid,FactionDoors[i][dVirtualWorld]);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid), FactionDoors[i][dEnterAngle]);
                    LinkVehicleToInterior(GetPlayerVehicleID(playerid), FactionDoors[i][dExitInterior]);
                    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), FactionDoors[i][dVirtualWorld]);
                    FreezePlayer(playerid);
                    GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 2000, 4);
                    SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
                }
                else
                {
                    SetPlayerPos(playerid, FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]);
                    SetInterior(playerid,FactionDoors[i][dExitInterior]);
                    SetWorld(playerid,FactionDoors[i][dVirtualWorld]);
                    FreezePlayer(playerid);
                    GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 2000, 4);
                    SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
                }
                return 1;
            }
            else return GameTextForPlayer(playerid, "~r~INCHIS", 5000, 6);
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++)
    {
        if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
        {
            if(HouseInfo[i][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Inchis", 5000, 1);
            SetPlayerPos(playerid,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
            SetInterior(playerid,HouseInfo[i][hInterior]);
            SetWorld(playerid,HouseInfo[i][hWorld]);
            HouseEntered[playerid] = i;
            if(PlayerInfo[playerid][pHouseKey] == i)
            {
                GameTextForPlayer(playerid, "~w~Bun venit acasa!", 5000, 1);
            }
            FreezePlayer(playerid);
            GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 2000, 4);
            SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
            if(HouseInfo[i][hRadioOn] == 1)
            {
                PlayAudioStreamForPlayer(playerid, HouseInfo[i][hRadioURL]);
            }
            return 1;
        }
    }
    for(new i = 0; i < sizeof(BizInfo); i++)
    {
        if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
        {
            if(BizInfo[i][bizLocked] == 1) return GameTextForPlayer(playerid, "~r~Inchis", 5000, 1);
            if(PlayerInfo[playerid][pBizKey] != i && PlayerInfo[playerid][pWorkOn] != i)
            {
                if(GetCash(playerid) < BizInfo[i][bizEntrance]) return GameTextForPlayer(playerid, "~r~Nu ai suficienti bani", 5000, 1);
            }
            if(PlayerInfo[playerid][pBizKey] != i && PlayerInfo[playerid][pWorkOn] != i)
            {
                GiveCash(playerid, -BizInfo[i][bizEntrance]);
                BizInfo[i][bizCash] += BizInfo[i][bizEntrance];
            }
            BizEntered[playerid] = i;
            if(BizInfo[i][bizType] != 14)
            {
                SetPlayerPos(playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]);
                SetInterior(playerid,BizInfo[i][bizInterior]);
                SetWorld(playerid,BizInfo[i][bizWorld]);
                SCM(playerid, COLOR_WHITE, BizInfo[i][bizEnterMSG]);
                FreezePlayer(playerid);
                GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 2000, 4);
                SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
                if(BizInfo[i][bizRadioOn] == 1)
                {
                    PlayAudioStreamForPlayer(playerid, BizInfo[i][bizRadioURL]);
                }
            }
            else
            {
                if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu esti intr-un vehicul.");
                SetVehiclePos(GetPlayerVehicleID(playerid), BizInfo[BizEntered[playerid]][bizExitX], BizInfo[BizEntered[playerid]][bizExitY], BizInfo[BizEntered[playerid]][bizExitZ]);
                TogglePlayerControllable(playerid, false);
                SetTimerEx("RemoveFromPS", 7000, false, "i", playerid);
//				GiveCash(playerid, -500);
				SCM(playerid, -1, "Costul repararii costa cel putin $500.");
//              SetPVarInt(playerid, "OldMoney", GetCash(playerid));
                GameTextForPlayer(playerid, "Vei fi scos din Pay&Spray in 7 secunde", 7000, 5);
            }
            return 1;
        }
    }
    return 1;
}

CMD:exit(playerid, params[])
{
    for(new i = 0; i < sizeof(DoorInfo); i ++)
    {
        if (PlayerToPoint(3, playerid,DoorInfo[i][dExitX], DoorInfo[i][dExitY], DoorInfo[i][dExitZ]) && GetWorld(playerid) == DoorInfo[i][dVirtualWorld])
        {
            SetPlayerPos(playerid,DoorInfo[i][dEnterX],DoorInfo[i][dEnterY],DoorInfo[i][dEnterZ]);
            SetInterior(playerid,DoorInfo[i][dEnterInterior]);
            SetWorld(playerid, 0);
            DoorEntered[playerid] = -1;
            return 1;
        }
    }
    for(new i = 0; i < sizeof(FactionDoors); i ++)
    {
        if (PlayerToPoint(3, playerid,FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]))
        {
            if(FactionDoors[i][dWithVehicle] == 1 && IsDriver(playerid))
            {
                SetVehiclePos(GetPlayerVehicleID(playerid),FactionDoors[i][dEnterX],FactionDoors[i][dEnterY],FactionDoors[i][dEnterZ]);
                SetInterior(playerid,FactionDoors[i][dEnterInterior]);
                SetWorld(playerid, 0);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), FactionDoors[i][dExitAngle]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), FactionDoors[i][dEnterInterior]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
                FreezePlayer(playerid);
                GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 1000, 4);
                SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
            }
            else
            {
                SetPlayerPos(playerid,FactionDoors[i][dEnterX],FactionDoors[i][dEnterY],FactionDoors[i][dEnterZ]);
                SetInterior(playerid,FactionDoors[i][dEnterInterior]);
                SetWorld(playerid, 0);
                FreezePlayer(playerid);
                GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 1000, 4);
                SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
            }
            return 1;
        }
    }
    for(new i = 0; i <  sizeof(HouseInfo); i++)
    {
        if (PlayerToPoint(2, playerid,HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid))
        {
            if(HouseEntered[playerid] == i)
            {
                if(!GetIntVar(playerid, "EditingFurniture"))
                {
                    if(HouseInfo[i][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Inchis", 5000, 1);
                    SetCameraBehindPlayer(playerid);
                    SetPlayerPos(playerid,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]);
                    GameTextForPlayer(playerid, "~r~INCARC OBIECTELE...", 1000, 4);
                    SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
                    SetWorld(playerid,0);
                    SetInterior(playerid,0);
                    HouseEntered[playerid] = -1;
                    StopAudioStreamForPlayer(playerid);
                    if(HouseInfo[i][hRadioOn])
                    {
                        StopAudioStreamForPlayer(playerid);
                    }
                }
                else
                {
                    SCM(playerid, COLOR_LIGHTRED, "Trebuie mai intai sa termini de asezat mobila!");
                }
                return 1;
            }
        }
    }
    for(new i = 0; i < sizeof(BizInfo); i++)
    {
        if (PlayerToPoint(3, playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizWorld])
        {
            if(BizInfo[i][bizLocked] == 1) return GameTextForPlayer(playerid, "~r~Inchis", 5000, 1);
            SetPlayerPos(playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]);
            SetInterior(playerid,0);
            SetWorld(playerid,0);
            BizEntered[playerid] = -1;
            FreezePlayer(playerid);
            SetTimerEx("UnFreezePlayer", 1000, 0, "i", playerid);
            if(BizInfo[i][bizRadioOn])
            {
                StopAudioStreamForPlayer(playerid);
            }
            return 1;
        }
    }
    return 1;
}

CMD:coin(playerid, params[])
{
    new coin = randomEx(0,2);
    new coinname[64];
    if(coin == 1) {
            coinname = "cap";
    } else {
            coinname = "pajura";
    }
    format(msg, sizeof(msg), "* %s arunca cu moneda si pica %s", GetNameWithMask(playerid),coinname);
    ProxDetector(10, playerid, msg, COLOR_WHITE);
    return 1;
}

CMD:dice(playerid, params[])
{
    new dice = random(6)+1;
    if (GetIntVar(playerid, "Dice") == 1)
    {
        format(msg, sizeof(msg), "* %s arunca zarul si pica %d.", GetNameWithMask(playerid), dice);
        ProxDetector(7.0, playerid, msg, COLOR_WHITE);
    }
    else
    {
        SCM(playerid, COLOR_GRAD2, "Nu ai un zar.");
    }
    return 1;
}

CMD:helpme(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/helpme [text]");
//  if(GetIntVar(playerid, "JustHelped") == 1) return SCM(playerid, -1, "Cererea ta de ajutor este in procesare.");
//  SetStringVar(playerid, "HelpText", params);
    SetIntVar(playerid, "JustHelped", 1);
    SCM(playerid, COLOR_YELLOW, "Cererea ta de ajutor a fost trimisa moderatorilor online!");
    format(msg, sizeof(msg), "[HELPME]{DABB3E} %s [ID:%d]: %s.", GetNameEx(playerid), playerid, params);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pHelper] > 0 || PlayerInfo[i][pAdmin] > 0)
        {
            SCM(i, COLOR_RED, msg);
        }
    }
    return 1;
}

CMD:report(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/report [text]");
    if(GetIntVar(playerid, "JustReported") == 1) return SCM(playerid, -1, "Reportul tau este in curs de procesare.");
    SetIntVar(playerid, "JustReported", 1);
    SetTimerEx("JustReported", 180000, false, "i", playerid);
    SetStringVar(playerid, "ReportText", params);
    format(msg, sizeof(msg), "Report: %s. Te rog asteapta raspunsul unui admin! Poti da alt report in 20 de secunde!", params);
    SCM(playerid, COLOR_YELLOW, msg);
    format(msg, sizeof(msg), "[REPORT] %s[ID:%d]: %s.", GetNameEx(playerid), playerid, params);
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}

CMD:pay(playerid, params[])
{
    new pid, amount;
    if(sscanf(params,"dd",pid,amount)) return SyntaxMSG(playerid, "/pay [playerid] [amount]");
    if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
    if(pid == playerid) return SCM(playerid, -1, "Nu te poti plati.");
    if(PlayerInfo[playerid][pHours] < 4 && PlayerInfo[playerid][pLevel] == 1) return SCM(playerid, COLOR_WHITE, "Trebuie sa ai minim 4 ore jucate.");
    if(gettime() - GetIntVar(playerid, "JustPaid") < 5) return ServerMSG(playerid, "Te rog asteapta 5 secunde intre comenzi! (Masuri de securitate)");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(isAdminDuty(pid)) return NotNearPlayerMSG(playerid);
    if(amount > GetCash(playerid) || amount <= 0) return NoCashMSG(playerid);
    if(amount > 1000 && GetLevel(playerid) <= 3) return SCM(playerid, -1, "Playerii sub level 3 nu pot plati mai mult de $1,000!");
    if(!PlayerNearPlayer(5.0, playerid,pid)) return NotNearPlayerMSG(playerid);
    SetIntVar(playerid, "JustPaid", gettime());
    GiveCash(playerid, -amount);
    GiveCash(pid, amount);
    format(msg, sizeof(msg), "I-ai dat %d$ lui %s[ID:%d]", amount, GetNameWithMask(pid),pid);
    SCM(playerid, COLOR_GRAD1, msg);
    PlaySound(playerid, 1052);
    format(msg, sizeof(msg), "Ai primit %d$ de la %s [ID:%d].", amount, GetNameWithMask(playerid), playerid);
    SCM(pid, COLOR_GRAD1, msg);
    PlaySound(pid, 1052);
    format(msg, sizeof(msg), "scoate niste bani si ii da lui %s.", GetNameWithMask(pid));
    ActionMessage(playerid, 15.0, msg);
    if(CheckAdmin(playerid, 1))
    {
        format(query, sizeof(query), "INSERT INTO `apaylog` (name, target, amount, data) VALUES ('%s', '%s', %d, '%s')", GetName(playerid), GetName(pid), amount, GetFullDate());
        mysql_function_query(dbHandle, query, false, "", "");
    }
    return 1;
}

CMD:licenses(playerid, params[])
{
    new pid;
    if(!sscanf(params,"u", pid))
    {
        if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(8.0, playerid, pid)) return NotNearPlayerMSG(playerid);
        format(msg, sizeof(msg), "ii arata actele lui %s.", GetNameWithMask(pid));
        ActionMessage(playerid, 15.0, msg);
        ShowLicenses(playerid, pid);
    }
    else
    {
        ActionMessage(playerid, 15.0, "se uita la actele lui.");
        ShowLicenses(playerid, playerid);
    }
    return 1;
}

CMD:acceptdeath(playerid, params[])
{
    if(GetIntVar(playerid, "JustDied") == 1 || PlayerInfo[playerid][pDied] == 1)
    {
        if(adeadtimer[playerid] < ACCEPTDEATH_SECONDS) return SCMEx(playerid, COLOR_GREY, "Poti folosi aceasta comanda in %d secunde.", ACCEPTDEATH_SECONDS - adeadtimer[playerid]);
        StopPlayerAnims(playerid);
        SetIntVar(playerid, "JustAcceptedDeath", 1);
        RemoveVar(playerid, "JustDied");
        RemoveVar(playerid, "LoggedInDead");
        HospitalWait{playerid} = 60;
        PlayerInfo[playerid][pDied] = 0;
        adeadtimer[playerid] = 0;
        FreezePlayer(playerid);
        PutPlayer(playerid, 1176.9000, -1323.8225, 14.0441);
        SCM(playerid, COLOR_LIGHTRED, "[SPITAL] Ingrijirea medicala a costat 20$.");
		GiveCash(playerid, -20);
        SetPlayerChatBubble(playerid, ".", COLOR_LIGHTRED, 10.0, 100);
        SafeResetPlayerWeapons(playerid);
        SetPlayerWeapons(playerid);
    }
    else
    {
        SCM(playerid, -1, "Nu esti in DeathTimer.");
    }
    return 1;
}

CMD:note(playerid, params[])
{
    new option[7], secoption[128];
    if(sscanf(params, "s[7]S(NULL)[128]", option, secoption))
    {
        SyntaxMSG(playerid, "/note [option]");
        SCM(playerid, COLOR_HOUSE, "show | create | delete | give | add");
        return 1;
    }
    if(CompareStrings(option, "show"))
    {
        for(new i = 1; i < MAX_NOTES; i++)
        {
            if(HasNote(playerid, i))
            {
                format(msg, sizeof(msg), "Note(%i) spune: %s", i, PlayerNotes[playerid][i][nNote]);
                NoteMSG(playerid, msg);
            }
        }
        ActionMessage(playerid, 15.0, "scoate un carnetel de notite si se uita pe el.");
    }
    else if(CompareStrings(option, "add"))
    {
        new aSlotID, aSlotText[256];
        if(sscanf(params, "{s[7]}ds[129]", aSlotID, aSlotText)) return SyntaxMSG(playerid, "/note add [slot id] [nota]");
        if(!PlayerInfo[playerid][pPen]) return NoteMSG(playerid, "Nu ai un pix.");
        if(aSlotID < 1 || aSlotID > MAX_NOTES-1) return SCMEx(playerid, COLOR_GREY, "Slot invalid, 1-%d", MAX_NOTES-1);
        if(!HasNote(playerid, aSlotID)) return NoteMSG(playerid, "Nu ai o nota pe acest slot.");
        if(strlen(PlayerNotes[playerid][aSlotID][nNote]) + strlen(aSlotText) > 128) return SCM(playerid, COLOR_GREY, "Lungimea notei este prea mare.");
        format(msg, sizeof(msg), "Ai adaugat o nota cu succes pe slot-ul %d.", aSlotID);
        NoteMSG(playerid, msg);
        format(PlayerNotes[playerid][aSlotID][nNote], 128, "%s %s", PlayerNotes[playerid][aSlotID][nNote], aSlotText);
        ActionMessage(playerid, 15.0, "scoate o foaie si scrie ceva.");
        return 1;
    }
    else if(CompareStrings(option, "create"))
    {
        new szText[129], slot = GetFreeNoteSlot(playerid);
        if(sscanf(params, "{s[7]}s[129]", szText)) return SyntaxMSG(playerid, "/note create [text]");
        if(!PlayerInfo[playerid][pPen]) return NoteMSG(playerid, "Nu ai un pix.");
        if(slot == 0) return NoteMSG(playerid, "Nu ai slot-uri libere.");
        format(PlayerNotes[playerid][slot][nNote], 128, "%s", szText);
        PlayerNotes[playerid][slot][nOn] = 1;
        PlayerNotes[playerid][slot][nToInsert] = 1;
        format(msg, sizeof(msg), "Ai creeat o notita cu textul: %s", szText);
        NoteMSG(playerid, msg);
        ActionMessage(playerid, 15.0, "scoate un carnetel de note si scrie ceva.");
        return 1;
    }
    else if(CompareStrings(option, "delete"))
    {
        new iNoteID;
        if(sscanf(params, "{s[7]}d", iNoteID)) return SyntaxMSG(playerid, "/note delete [note id]");
        if(iNoteID < 1 || iNoteID > MAX_NOTES-1) return SCMEx(playerid, COLOR_GREY, "Slot invalid, 1-%d", MAX_NOTES-1);
        if(!HasNote(playerid, iNoteID)) return NoteMSG(playerid, "Nu ai o nota pe acest slot.");
        format(PlayerNotes[playerid][iNoteID][nNote], 128, "None");
        PlayerNotes[playerid][iNoteID][nOn] = 0;
        PlayerNotes[playerid][iNoteID][nToDelete] = 1;
        format(msg, sizeof(msg), "Ai sters nota %d cu succes.", iNoteID);
        NoteMSG(playerid, msg);
        ActionMessage(playerid, 15.0, "scoate carnetelul de note si rupe o foaie din acesta.");
        return 1;
    }
    else if(CompareStrings(option, "give"))
    {
        new id, fromslot;
        if(sscanf(params, "{s[7]}du", fromslot, id)) return SyntaxMSG(playerid, "/note give [slot id] [playerid]");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(id == playerid) return SCM(playerid, COLOR_WHITE, "Nu iti poti da nota singur.");
        if(fromslot < 1 || fromslot > MAX_NOTES-1) return SCMEx(playerid, COLOR_GREY, "Slot invalid, 1-%d", MAX_NOTES-1);
        if(!HasNote(playerid, fromslot)) return NoteMSG(playerid, "Nu ai o nota pe acest slot.");
        new slot = GetFreeNoteSlot(id);
        if(slot == 0) return NoteMSG(playerid, "Acest player nu are sloturi libere.");
        format(PlayerNotes[id][slot][nNote], 128, "%s", PlayerNotes[playerid][fromslot][nNote]);
        PlayerNotes[id][slot][nOn] = 1;
        PlayerNotes[id][slot][nToInsert] = 1;
        format(msg, sizeof(msg), "I-ai dat o nota lui [ID:%d] %s.", id, GetNameWithMask(id));
        NoteMSG(playerid, msg);
        format(msg, sizeof(msg), "Ai primit o nota de la [ID:%d] %s.", playerid, GetNameWithMask(playerid));
        NoteMSG(id, msg);
        format(msg, sizeof(msg), "scoate o nota si i-o da lui %s.", GetNameWithMask(id));
        ActionMessage(playerid, 15.0, msg);
        return 1;
    }
    else
    {
        SyntaxMSG(playerid, "/note [option]");
        SCM(playerid, COLOR_HOUSE, "show | create | delete | give | add");
    }
    return 1;
}

CMD:attributes(playerid, params[])
{
    new info[128];
    if(sscanf(params,"s[128]",info)) return SyntaxMSG(playerid, "/attribues [info]");
    format(msg, sizeof(msg), "Atribute: %s.", info);
    SCM(playerid, COLOR_FADE1, msg);
    format(PlayerInfo[playerid][pAttributes], 128, "%s", info);
    return 1;
}

CMD:examine(playerid, params[])
{
    new pid;
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/examine [playerid]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, pid)) return NotNearPlayerMSG(playerid);
    format(msg, sizeof(msg), "______Atributele lui %s______", GetName(pid));
    SCM(playerid, COLOR_GREEN2, msg);
    format(msg, sizeof(msg), "%s", PlayerInfo[pid][pAttributes]);
    SCM(playerid, COLOR_GREY, msg);
    SCM(playerid, COLOR_GREEN2, "|_____________________________________|");
    return 1;
}

CMD:myfish(playerid, params[])
{
    format(msg, sizeof(msg), "Pestii prinsi de tine au %d KG.", GetIntVar(playerid, "FishCount"));
    FishMSG(playerid, msg);
    if(GetIntVar(playerid, "FishCount") >= 300)
        return FishMSG(playerid, "Poti vinde pestii cu /unloadfish'.");
    return 1;
}

CMD:unloadfish(playerid, params[])
{
    new money;
    if(!PlayerToPoint(4,playerid,2322.6536,-37.7343,26.4844)) 
    {
        SetPlayerCheckpoint(playerid, 2322.6536,-37.7343,26.4844, 2);
        FishMSG(playerid, "Nu poti vinde pestii aici.");
        return 1;
    }
    if(GetIntVar(playerid, "FishCount") <= 80) return FishMSG(playerid, "Trebuie sa ai mai mult de 80kg de pesti.");
    {
        money = GetIntVar(playerid, "FishCount")+9;
        format(msg, sizeof(msg), "Ai vandut %d pesti pentru %d%.",GetIntVar(playerid, "FishCount"),money);
        FishMSG(playerid, msg);
        FishMSG(playerid, "Te poti intoarce la pescuit.");
        GiveCash(playerid,money);
        RemoveVar(playerid, "FishCount");
        RemoveVar(playerid, "IsFishing");
    }
    return 1;
}

CMD:fishingrod(playerid, params[])
{
    if(PlayerInfo[playerid][pFishingRod] == 0) return SCM(playerid, COLOR_GREY, "Nu ai o undita de pescuit, poti cumpara una de 24/7.");
    if(fishingrod[playerid] == 0)
    {
        SetPlayerAttachedObject(playerid, 0, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
        fishingrod[playerid] = 1;
    }
    else if(fishingrod[playerid] == 1)
    {
        RemovePlayerAttachedObject(playerid, 0);
        fishingrod[playerid] = 0;
    }
    return 1;
}

forward FishingFunction(playerid);
public FishingFunction(playerid)
{
    new randlb = randomEx(5,15), rand = random(FishNamesAmount), fstring[64];
    new randCatch = randomEx(1, 3);
	TogglePlayerControllable(playerid, 1);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
    if(randCatch == 2)
    {
        format(fstring, sizeof(fstring), "%s", FishNames[rand]);
        format(msg, sizeof(msg), "arunca undita si prinde un %s.", fstring);
        ActionMessage(playerid, 15.0, msg);
        format(msg, sizeof(msg), "~b~Ai prins un ~r~%s~b~. KG:%d", fstring, randlb);
        InfoMSG(playerid, msg, 5);
        UpdateIntVar(playerid, "FishCount", randlb);
    }
    else
    {
        InfoMSG(playerid, "~b~Nu ai prins nimic", 5);
        ActionMessage(playerid, 15.0, "arunca undita in apa si nu prinde nimic.");
    }
    return 1;
}

CMD:fish(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == LSFD || PlayerInfo[playerid][pFaction] == GOV || PlayerInfo[playerid][pFaction] == NEWS) return SCM(playerid, -1, "Nu poti pescui daca faci parte dintr-o factiune guvernamentala.");
    if(GetIntVar(playerid, "FishCount") >= 100) return FishMSG(playerid, "Nu mai poti pescui! Ai deja prea multi pesti!");
    if(!IsAtFishPlace(playerid)) return FishMSG(playerid, "Nu esti la locul de pescuit!");
    if(fishingrod[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu ai undita de pescuit la tine. ('/fishingrod')");
    if(gettime() - GetIntVar(playerid, "FishDelay") < 6) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa astepti 6 secunde!");
	SetIntVar(playerid, "FishDelay", gettime());
	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
	if(GetIntVar(playerid, "FishCount") >= 100)
    {
        FishMSG(playerid, "Te-ai oprit din pescuit pentru ca ai ajuns la capacitatea maxima de transport, '/unloadfish'.");
        return 1;
    }
    SetTimerEx("FishingFunction", 5000, false, "i", playerid);    
    return 1;
}

CMD:info(playerid, params[])
{
    for(new i = 0; i < sizeof(CPTInfo); i++)
    {
        if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]) && CPTInfo[i][cVirtualWorld] == GetWorld(playerid) || PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]) && CPTInfo[i][cVirtualWorld] == -1)
        {
            if(CPTInfo[i][cInfoOn])
            {
                format(msg, sizeof(msg), "{00FF00}[INFO]{FFFFFF}: %s", CPTInfo[i][cOtherInfo]);
                SCM(playerid, -1, msg);
                return 1;
            }
        }
    }
    return 1;
}


//===========Bank commands===========//
CMD:balance(playerid, params[])
{
    if(!IsAtBank(playerid) && !IsAtATM(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti la banca/ATM.");
    if(IsAtATM(playerid))
    {
        if(PlayerInfo[playerid][pCard] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un card bancar. ('/makecard').");
        new pin;
        if(sscanf(params, "i", pin)) return SyntaxMSG(playerid, "/balance [pin]");
        if(pin != PlayerInfo[playerid][pPinCard]) return SCM(playerid, COLOR_GREY, "Codul pin este gresit!");
    }
    format(msg, sizeof(msg), "[BANCA] Ai %d$ in banca.", PlayerInfo[playerid][pBank]);
    SCM(playerid, COLOR_FADE1, msg);
    return 1;
}

CMD:transfer(playerid, params[])
{
    new id, amount;
    if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti in banca.");
    if(PlayerInfo[playerid][pHours] < 6 && PlayerInfo[playerid][pLevel]) return SCM(playerid, COLOR_WHITE, "Trebuie sa ai minim 6 ore jucate.");
    if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "Ai deja economii in banca, trebuie sa le extragi pe toate.");
    if(sscanf(params,"ud",id,amount)) {
        SyntaxMSG(playerid, "/transfer [playerid/PartOfName] [amount].");
        format(msg, sizeof(msg), "[Banca]: Ai $%d in contul bancar.", PlayerInfo[playerid][pBank]);
        SCM(playerid, COLOR_FADE1, msg);
        return 1;
    }
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu iti poti transfera singur bani.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(GetBankCash(playerid) < amount || amount < 1) return SCM(playerid, COLOR_GRAD2, "[Banca] Nu ai banii necesari.");
    GiveBankCash(playerid, -amount);
    GiveBankCash(id, amount);
    format(msg, sizeof(msg), "Ai transferat $%d, in contul lui %s.", amount, GetNameEx(id));
    SCM(playerid, COLOR_LIGHTBLUE, msg);
    format(msg, sizeof(msg), "Ai primit in banca $%d din partea lui %s", amount, GetNameEx(playerid));
    SCM(id, COLOR_LIGHTBLUE, msg);
    format(msg, sizeof(msg), "AdmWarn: %s i-a transferat lui %s suma de %d$.", GetName(playerid), GetName(id), amount);
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}

CMD:withdraw(playerid, params[])
{
    new amount;
    if(!IsAtBank(playerid) && !IsAtATM(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti in banca/ATM.");
    if(IsAtATM(playerid))
    {
        if(PlayerInfo[playerid][pCard] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un card bancar. ('/makecard').");
        new suma, pin;
        if(sscanf(params, "ii", suma, pin)) return SyntaxMSG(playerid, "/withdraw [suma] [pin]");
        if(pin != PlayerInfo[playerid][pPinCard]) return SCM(playerid, COLOR_GREY, "Codul pin este gresit!");
    }
    if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
    if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "Ai deja economii in banca, trebuie sa le extragi pe toate.");
    if(sscanf(params,"d",amount)) {
        SyntaxMSG(playerid, "/withdraw [amount].");
        return 1;
    }
    if (amount > GetBankCash(playerid) || amount < 1) return SCM(playerid, COLOR_GRAD2, "[Bank] Nu ai atati bani.");
    if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
    GiveCash(playerid,amount);
    GiveBankCash(playerid, -amount);
    format(msg, sizeof(msg), "[Bank] Ai extras %d$. Total ramas: %d$ ", amount,GetBankCash(playerid));
    SCM(playerid, COLOR_YELLOW, msg);
    return 1;
}

CMD:deposit(playerid, params[])
{
    new amount;
    if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti in banca.");
    if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "Ai deja economii in banca, trebuie sa le extragi pe toate.");
    if(sscanf(params,"d",amount)) {
        SyntaxMSG(playerid, "/deposit [amount].");
        format(msg, sizeof(msg), "[Bank] Ai %d$ in banca.", PlayerInfo[playerid][pBank]);
        SCM(playerid, COLOR_FADE1, msg);
        return 1;
    }
    if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
    if (amount > GetCash(playerid) || amount < 1) return SCM(playerid, COLOR_GRAD2, "[Bank] Nu ai atati bani.");
    GiveCash(playerid,-amount);
    SCM(playerid, COLOR_GREEN2, "___ EXTRAS DE CONT ___");
    format(msg, sizeof(msg), "  Creditul vechi: $%d", GetBankCash(playerid));
    SCM(playerid, COLOR_GREY, msg);
    GiveBankCash(playerid, amount);
    format(msg, sizeof(msg), "  Depozit: $%d",amount);
    SCM(playerid, COLOR_GREY, msg);
    SCM(playerid, COLOR_GREEN2, "|-----------------------------------------|");
    format(msg, sizeof(msg), "  Credit: $%d", GetBankCash(playerid));
    SCM(playerid, COLOR_GREY, msg);
    return 1;
}

CMD:savings(playerid, params[])
{
    new amount;
    if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti in banca.");
    if(GetSavings(playerid) == 0)
    {
        if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/savings [amount]");
        if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
        if(amount < 50000 || amount > 100000) return SCM(playerid, COLOR_FADE1, "Poti pune intre $50000 - $100000.");
        if(GetCash(playerid) < amount) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai depozitat %d in contul tau de economii.", amount);
        SCM(playerid, COLOR_YELLOW, msg);
        GiveCash(playerid, -amount);
        SetSavings(playerid, amount);
    }
    else
    {
        format(msg, sizeof(msg), "Ai scos banii din contul de economii %d.", GetSavings(playerid));
        SCM(playerid, COLOR_YELLOW, msg);
        GiveCash(playerid, GetSavings(playerid));
        ResetSavings(playerid);
    }
    return 1;
}

CMD:paycheck(playerid, params[])
{
    if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN2, "Nu esti in banca.");
    if(PlayerInfo[playerid][pPayCheckMoney] > 0)
    {
        format(msg, sizeof(msg), "Ai primit salariul in valoare de %d$.", PlayerInfo[playerid][pPayCheckMoney]);
        SCM(playerid, COLOR_YELLOWG, msg);
        GiveCash(playerid, PlayerInfo[playerid][pPayCheckMoney]);
        PlayerInfo[playerid][pPayCheckMoney] = 0;
    }
    else return SCM(playerid, COLOR_YELLOWG, "Nu poti extrage bani.");
    return 1;
}

CMD:makecard(playerid, params[])
{
    if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti in banca.");
    if(PlayerInfo[playerid][pCard] == 1) return SCM(playerid, COLOR_GREY, "Ai deja un card.");
    if(GetCash(playerid) < BANK_CARD_PRICE) return SCMEx(playerid, COLOR_GREY, "Trebuie sa ai %d$ bani pentru cardul bancar.", BANK_CARD_PRICE);
    PlayerInfo[playerid][pPinCard] = randomEx(100000, 999999);
    PlayerInfo[playerid][pCard] = 1;
    SCMEx(playerid, COLOR_GREY, "Ti-a fost facut un card bancar pentru %d$. PIN: %d.", BANK_CARD_PRICE, PlayerInfo[playerid][pPinCard]);
    GiveCash(playerid, -BANK_CARD_PRICE);
    SCM(playerid, COLOR_OOC, "HINT: Daca iti uiti pinul poti folosi oricand comanda /pincard.");
    return 1;
}

CMD:pincard(playerid, params[])
{
    if(PlayerInfo[playerid][pCard] != 1) return SCM(playerid, COLOR_GREY, "Nu ai un card.");
    SCMEx(playerid, COLOR_OOC, "PIN CARD: %d.", PlayerInfo[playerid][pPinCard]);
    return 1;
}

//===========Bank commands===========//
CMD:toggle(playerid, params[])
{
    if(CompareStrings(params, "news"))
    {
        if(togglenews[playerid] == 1)
        {
            togglenews[playerid] = 0;
            SCM(playerid, COLOR_GREY, "Ai dezactivat stirile si anunturile.");
            return 1;
        }
        if(togglenews[playerid] == 0)
        {
            togglenews[playerid] = 1;
            SCM(playerid, COLOR_GREY, "Ai activat stirile si anunturile.");
            return 1;
        }
    }
    else if(CompareStrings(params, "pms"))
    {
        if(!CheckAdmin(playerid, 1) && PlayerInfo[playerid][pDonateRank] == 0) return SCM(playerid, COLOR_GREY, "Trebuie sa fii donator pentru a bloca PM-urile.");
        if(blockpm[playerid] == 0)
        {
            SCM(playerid, COLOR_RED, "Ti-ai blocat PM-urile!");
            blockpm[playerid] = 1;
        }
        else
        {
            SCM(playerid, COLOR_RED, "Ti-ai deblocat PM-urile!");
            blockpm[playerid] = 0;
        }
    }
    else if(CompareStrings(params, "hud"))
    {
        if(togglehud[playerid] == 1)
        {
            ShowHudTextDraws(playerid, 0);
            togglehud[playerid] = 0;
            SCM(playerid, COLOR_GREY, "Ai dezactivat HUD-ul.");
            return 1;
        }
        if(togglehud[playerid] == 0)
        {
            ShowHudTextDraws(playerid, 1);
            togglehud[playerid] = 1;
            SCM(playerid, COLOR_GREY, "Ai activat HUD-ul.");
            return 1;
        }
    }
    else return SyntaxMSG(playerid, "/toggle news/pms/hud");
    return 1;
}

CMD:news(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != 4) return NotAuthMSG(playerid);
    if(isnull(params)) return SyntaxMSG(playerid, "/news [anunt]");
    if(!IsANewsCar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_GREY, "Trebuie sa fii intr-o masina San News.");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "[SAN NEWS] %s: %.*s ...", GetName(playerid), pos, params);
        NEWSMSG(COLOR_ADGREEN, msg);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        NEWSMSG(COLOR_ADGREEN, msg);
    }
    else
    {
        format(msg, sizeof(msg), "[SAN NEWS] %s: %s", GetName(playerid), params);
        NEWSMSG(COLOR_ADGREEN, msg);
    }
    return 1;
}

CMD:ad(playerid, params[]) return cmd_advert(playerid, params);
CMD:advert(playerid, params[])
{
    if(PlayerInfo[playerid][pLevel] < 2) return SCM(playerid, COLOR_GREY, "Iti trebuie nivel 2.");
    new cost = 250;
    if(isnull(params)) return SyntaxMSG(playerid, "(/ad)vert [text]");
    if(!PlayerToPoint(5.0,playerid,1128.6497,-1488.9880,22.7615)) return SCM(playerid, COLOR_GREY, "Nu esti la compania de publicitate!");
    format(msg, sizeof(msg), "Nu ai banii necesari. ($%d)", cost);
    if(GetCash(playerid) < cost) return ErrorMsg(playerid, msg);
    format(msg, sizeof(msg), "Trebuie sa astepti %d secunde pentru a putea pune un nou anunt.", 60 - (gettime() - AdvertWait));
    if(gettime() - AdvertWait < 60) return ErrorMsg(playerid, msg);
    GiveCash(playerid, - cost);
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "[Reclama] %.*s ...", pos, params);
        NEWSMSG(COLOR_ADGREEN, msg);
        format(msg, sizeof(msg), " ... %s, Contact: %d ", params[pos], PlayerInfo[playerid][pNumber]);
        NEWSMSG(COLOR_ADGREEN, msg);
    }
    else
    {
        format(msg, sizeof(msg), "[Reclama] %s, Contact: %d", params, PlayerInfo[playerid][pNumber]);
        NEWSMSG(COLOR_ADGREEN, msg);
    }
    AdvertWait = gettime();
    return 1;
}

CMD:cad(playerid, params[])
{
    if(PlayerInfo[playerid][pLevel] < 2) return SCM(playerid, COLOR_GREY, "Iti trebuie nivel 2.");
    new cost = 500;
    if(isnull(params)) return SyntaxMSG(playerid, "/cad [text]");
    if(!PlayerToPoint(5.0,playerid,1128.6497,-1488.9880,22.7615)) return SCM(playerid, COLOR_GREY, "Nu esti la compania de publicitate!");
    format(msg, sizeof(msg), "Nu ai banii necesari. ($%d)", cost);
    if(GetCash(playerid) < cost) return ErrorMsg(playerid, msg);
    format(msg, sizeof(msg), "Trebuie sa astepti %d secunde pentru a putea pune un nou anunt.", 60 - (gettime() - AdvertWait));
    if(gettime() - AdvertWait < 60) return ErrorMsg(playerid, msg);
    GiveCash(playerid, - cost);
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "[Reclama Companie] %.*s ...", pos, params);
        SCMALL(COLOR_ADGREEN, msg);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        SCMALL(COLOR_ADGREEN, msg);
    }
    else
    {
        format(msg, sizeof(msg), "[Reclama Companie] %s", params);
        SCMALL(COLOR_ADGREEN, msg);
    }
    format(msg, sizeof(msg), "* %s[ID:%d] a folosit comanda /cad.", GetNameEx(playerid), playerid);
    AMSG(COLOR_GREEN2, msg);
    AdvertWait = gettime();
    return 1;
}

CMD:turn_on(playerid, params[])
{
    if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "Nu ai un telefon.");
    if(cellOn{playerid} != 0) return CellMSG(playerid, "Telefonul tau este deja deschis...");
    cellOn{playerid} = 1;
    if(PlayerInfo[playerid][pSex] == 1)
    {
        ActionMessage(playerid, 15.0, "isi deschide telefonul.");
    } else {
        ActionMessage(playerid, 15.0, "isi deschide telefonul.");
    }
    return 1;
}
CMD:turn_off(playerid, params[])
{
    if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "Nu ai un telefon.");
    if(cellOn{playerid} != 1) return CellMSG(playerid, "Telefonul tau este deja inchis...");
    cellOn{playerid} = 0;
    ActionMessage(playerid, 15.0, "isi inchide telefonul.");
    return 1;
}

CMD:h(playerid, params[]) return cmd_hangup(playerid, params);
CMD:hangup(playerid, params[])
{
    if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "Nu ai un telefon.");
    SCM(playerid, COLOR_GRAD1, "SFAT: In caz ca esti blocat in animatie poti folosi comanda '/stopanim");
    if(cellOn{playerid} != 1) return CellMSG(playerid, "Telefonul tau este inchis (/turn_on)...");
    new caller = GetIntVar(playerid, "CallWith");
    if(GetIntVar(playerid, "OnCall") == 0 && GetIntVar(playerid, "GettingCall") == 0 && GetIntVar(playerid, "IsCalling") == 0 || GetIntVar(playerid, "ServiceCall") == 1)
    {
        ActionMessage(playerid, 15.0, "inchide telefonul.");
        CellMSG(playerid, "Telefonul tau este in buzunar.");
        RemoveVar(playerid, "CallCost");
        RemoveVar(playerid, "CallTime");
        RemoveVar(playerid, "CallWith");
        RemoveVar(playerid, "GettingCall");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "IsCalling");
        RemoveVar(playerid, "ServiceCall");
        phoneAnim(playerid, 0);
    }
    if(GetIntVar(playerid, "GettingCall") == 1)
    {
        format(msg, sizeof(msg), "%d a respins apelul tau...", PlayerInfo[playerid][pNumber]);
        CellMSG(caller, msg);
        phoneAnim(caller, 0);
        CellMSG(playerid, "Nu ai raspuns la apel asa ca linia s-a rupt.");
        RemoveVar(caller, "CallCost");
        RemoveVar(caller, "CallTime");
        RemoveVar(caller, "CallWith");
        RemoveVar(caller, "GettingCall");
        RemoveVar(caller, "OnCall");
        RemoveVar(caller, "IsCalling");
        RemoveVar(playerid, "CallCost");
        RemoveVar(playerid, "CallTime");
        RemoveVar(playerid, "CallWith");
        RemoveVar(playerid, "GettingCall");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "IsCalling");
    }
    if(GetIntVar(playerid, "OnCall") == 1 && GetIntVar(caller, "OnCall") == 1)
    {
        CellMSG(caller, "Au inchis...");
        CellMSG(playerid, "Ai inchis apelul..");
        phoneAnim(playerid, 0);
        phoneAnim(caller, 0);
        SetIntVar(playerid, "CallCost", GetIntVar(playerid, "CallTime")/20);
        format(msg, sizeof(msg), "~w~Cost Apel~n~~r~$%d",GetIntVar(playerid, "CallCost"));
        GameTextForPlayer(playerid, msg, 5000, 1);
        GiveCash(playerid, -GetIntVar(playerid, "CallCost"));
        SetIntVar(caller, "CallCost", GetIntVar(caller, "CallTime")/20);
        format(msg, sizeof(msg), "~w~Cost Apel~n~~r~$%d",GetIntVar(caller, "CallCost"));
        GameTextForPlayer(caller, msg, 5000, 1);
        GiveCash(caller, -GetIntVar(caller, "CallCost"));
        RemoveVar(caller, "CallCost");
        RemoveVar(caller, "CallTime");
        RemoveVar(caller, "CallWith");
        RemoveVar(caller, "GettingCall");
        RemoveVar(caller, "OnCall");
        RemoveVar(caller, "IsCalling");
        RemoveVar(playerid, "CallCost");
        RemoveVar(playerid, "CallTime");
        RemoveVar(playerid, "CallWith");
        RemoveVar(playerid, "GettingCall");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "IsCalling");
    }
    if(GetIntVar(playerid, "IsCalling") == 1 && GetIntVar(caller, "OnCall") == 0)
    {
        format(msg, sizeof(msg), "%d s-a oprit din a te suna...", PlayerInfo[playerid][pNumber]);
        CellMSG(caller, msg);
        CellMSG(playerid, "Ai inchis apelul..");
        phoneAnim(playerid, 0);
        RemoveVar(caller, "CallCost");
        RemoveVar(caller, "CallTime");
        RemoveVar(caller, "CallWith");
        RemoveVar(caller, "GettingCall");
        RemoveVar(caller, "OnCall");
        RemoveVar(caller, "IsCalling");
        RemoveVar(playerid, "CallCost");
        RemoveVar(playerid, "CallTime");
        RemoveVar(playerid, "CallWith");
        RemoveVar(playerid, "GettingCall");
        RemoveVar(playerid, "OnCall");
        RemoveVar(playerid, "IsCalling");
    }

    return 1;
}

CMD:contacts(playerid, params[])
{
    DisplayContactList(playerid);
    return 1;
}

CMD:addcontact(playerid, params[])
{
    new contact;
    if(sscanf(params,"d",contact)) return SyntaxMSG(playerid, "/addcontact [contact(number)]");
    if(GetFreeContactSlot(playerid) == 0) return SCM(playerid, COLOR_GREEN2, "Nu mai ai spatiu pentru un alt contact.");
    PlacePlayerContact(playerid, contact);
    SCMEx(playerid, COLOR_GREEN2, "Un nou contact a fost adaugat: %d", contact);
    return 1;
}

CMD:removecontact(playerid, params[])
{
    new slot;
    if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/removecontact [contact(slot)]");
    if(slot > MAX_CONTACTS || slot < 1) return SCMEx(playerid, COLOR_GREY, "Slot invalid (1-%d).", MAX_CONTACTS);
    if(PlayerInfo[playerid][pContacts][slot] == 0) return SCM(playerid, COLOR_GREEN2, "Nu ai vreun contact pe acest slot");
    SCMEx(playerid, COLOR_GREEN2, "Un contact a fost sters, %d numar: %d", slot, PlayerInfo[playerid][pContacts][slot]);
    RemovePlayerContact(playerid, slot);
    return 1;
}

CMD:call(playerid, params[])
{
    new number;
    if(PlayerInfo[playerid][pJailed] != 0) return SCM(playerid, COLOR_WHITE, "Nu poti suna din puscarie / ajail.");
    if(PlayerIsWounded(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti suna in timp ce esti ranit.");
    if(sscanf(params,"d",number))
    {
        SyntaxMSG(playerid, "/call [numar de telefon]");
        SCM(playerid, COLOR_WHITE, "Servicii rapide:");
        SCM(playerid, COLOR_WHITE, "Urgente - 911");
        SCM(playerid, COLOR_WHITE, "Mecanici - 544");
        SCM(playerid, COLOR_WHITE, "Taxi - 555");
        SCM(playerid, COLOR_WHITE, "San News - 123");
        SCM(playerid, COLOR_WHITE, "Radio Central - 1000");
        return 1;
    }
    PlayerCallTo(playerid, number);
    return 1;
}

CMD:p(playerid, params[]) return cmd_pickup(playerid, params);
CMD:pickup(playerid, params[])
{
    if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "Nu ai un telefon.");
    if(cellOn{playerid} != 1) return CellMSG(playerid, "Telefonul tau este inchis (/turn_on).");
    if(GetIntVar(playerid, "OnCall") == 1) return CellMSG(playerid, "Deja vorbesti la telefon.");
    if(GetIntVar(playerid, "GettingCall") == 0) return CellMSG(playerid, "Nu te suna nimeni.");

    foreach(new i : Player)
    {
        if(GetIntVar(i, "CallWith") == playerid && GetIntVar(playerid, "GettingCall") == 1)
        {
            new playa = i;
            SetIntVar(playerid, "CallWith", playa);
            SetIntVar(playa, "CallWith", playerid);
            ///////////////////////////////
            RemoveVar(playerid, "GettingCall");
            RemoveVar(playa, "GettingCall");
            ///////////////////////////////
            SetIntVar(playerid, "OnCall", 1);
            SetIntVar(playa, "OnCall", 1);
            ///////////////////////////////
            SetIntVar(playerid, "CallCost", 1);
            SetIntVar(playa, "CallCost", 1);
            ///////////////////////////////
            SetIntVar(playerid, "CallTime", 1);
            SetIntVar(playa, "CallTime", 1);
            ///////////////////////////////
            RemoveVar(playerid, "IsCalling");
            RemoveVar(playa, "IsCalling");
            CellMSG(playa, "A raspuns...");
            phoneAnim(playerid, 1);
            if(PlayerInfo[playerid][pSex] == 1)
            {
                ActionMessage(playerid, 15.0, "raspunde la telefon.");
            } else {
                ActionMessage(playerid, 15.0, "raspunde la telefon.");
            }
            return 1;
        }
    }
    return 1;
}

CMD:sms(playerid, params[])
{
    new number, text[256], currentNum;
    if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "Nu ai un telefon.");
    if(sscanf(params,"ds[256]",number,text)) return SyntaxMSG(playerid, "/sms [phonenumber] [message]");
    if(PlayerInfo[playerid][pJailed] != 0) return CellMSG(playerid, "Nu poti trimite mesaje din inchisoare.");
    if(cellOn{playerid} != 1) return CellMSG(playerid, "Telefonul tau este inchis (/turn_on).");
    if(number == PlayerInfo[playerid][pNumber]) return CellMSG(playerid, "Nu iti poti da mesaj singur.");

    ActionMessage(playerid, 15.0, "scoate un telefon.");
    foreach(new i : Player)
    {
        if(number == PlayerInfo[i][pNumber])
        {
            currentNum = i;
            if(currentNum != INVALID_PLAYER_ID)
            {
                if(PlayerInfo[currentNum][pJailed] != 0) return SCM(playerid, COLOR_WHITE, "Jucatorul este la inchisoare.");
                if(cellOn{currentNum} != 1) return CellMSG(playerid, "Ocupat.");
                SCM(playerid, COLOR_WHITE, "Mesajul a fost livrat.");
                if(strlen(text) > MAXLEN)
                {
                    new pos = MAXLEN;
                    if(pos < MAXLEN-1) pos = MAXLEN;
                    format(msg, sizeof(msg), "SMS: %.*s ...", pos, text);
                    SCM(currentNum, COLOR_YELLOWG, msg);
                    SCM(playerid, COLOR_YELLOWG, msg);
                    format(msg, sizeof(msg), " ... %s, De la: %s (%d)", text[pos], GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
                    SCM(currentNum, COLOR_YELLOWG, msg);
                    SCM(playerid, COLOR_YELLOWG, msg);
                }
                else
                {
                    format(msg, sizeof(msg), "SMS: %s, De la: %s (%d)", text, GetName(playerid), PlayerInfo[playerid][pNumber]);
                    SCM(currentNum, COLOR_YELLOWG, msg);
                    SCM(playerid, COLOR_YELLOWG, msg);
                }
                GiveCash(playerid, -2);
                PlaySound(playerid, 1052);
                PlaySound(currentNum, 1138);
                //Making a ring sound for everyone is players distance
                foreach(Player, pl)
                    if(PlayerNearPlayer(10.0, currentNum,pl))
                        PlayRingSoundTwice(pl);
                //Making a ring sound for everyone is players distance
                return 1;
            }
        }
    }
    CellMSG(playerid, "Trimiterea mesajului a esuat.");
    return 1;
}

CMD:buyhouse(playerid, params[])
{
    new h = GetClosestHouse(playerid);
    if(h == -1) return 1;
    if(GetLevel(playerid) < HouseInfo[h][hLevelbuy]) return SCM(playerid, COLOR_LIGHTRED, "Nivelul tau este prea mic.");
    if(PlayerOwnHouse(playerid)) return ServerMSG(playerid, "Deja detii o casa!");
    if(GetCash(playerid) < HouseInfo[h][hPrice]) return ServerMSG(playerid, "Nu ai banii necesari!");
    PlayerInfo[playerid][pHouseKey] = h;
    PlayerInfo[playerid][pSpawnType] = 1;
    HouseInfo[h][hOwned] = 1;
    HouseInfo[h][hLocked] = 1;
    HouseInfo[h][hRentable] = 0;
    HouseInfo[h][hRentprice] = 0;
    HouseInfo[h][hCash] = 0;
    format(HouseInfo[h][hOwner], 128, "%s", GetName(playerid));
    GiveCash(playerid, -HouseInfo[h][hPrice]);
    ServerMSG(playerid, "Felicitari! Ai cumparat o casa!");
    ServerMSG(playerid, "Scrie /househelp pentru mai multe comenzi!");
    UpdateHouseText(h);
    UpdateHouseInfo(h);
    return 1;
}

CMD:sellhouse(playerid, params[])
{
    new house = PlayerInfo[playerid][pHouseKey];
    if(!PlayerOwnHouse(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    if(HouseInfo[house][hCash] > 0)
    {
        GiveCash(playerid, HouseInfo[house][hCash]);
        format(msg, sizeof(msg), "Ai primit banii din seif! (%d$).", HouseInfo[house][hCash]);
        SCM(playerid, COLOR_GREY, msg);
    }
    HouseInfo[house][hLocked] = 1;
    HouseInfo[house][hOwned] = 0;
    HouseInfo[house][hRentable] = 0;
    HouseInfo[house][hRentprice] = 0;
    HouseInfo[house][hCash] = 0;
    StopHouseBoomBox(house);
    HouseInfo[house][hRadio] = 0;
    HouseInfo[house][hRadioOn] = 0;
    PlayerInfo[playerid][pSpawnType] = 0;
    format(HouseInfo[house][hOwner], 128, "Statul");
    new houseprice = HouseInfo[house][hPrice];
    new housetax = ((houseprice*1)/100);
    UpdateHouseText(house);
    GiveCash(playerid, houseprice-housetax);
    PlaySound(playerid, 1052);
    format(msg, sizeof(msg), "~w~Felicitari~n~ Ai vandut proprietatea ~n~~g~$%d", houseprice-housetax);
    GameTextForPlayer(playerid, msg, 10000, 3);
    format(msg, sizeof(msg), "Taxele au fost luate automat din banii de pe casa, $%d.", housetax);
    SCM(playerid, COLOR_FADE2, msg);
    UpdateHouseText(house);
    UpdateHouseInfo(house);
    if(HouseEntered[playerid] == house)
    {
        SetPlayerPos(playerid,HouseInfo[house][hEntranceX],HouseInfo[house][hEntranceY],HouseInfo[house][hEntranceZ]);
        SetInterior(playerid,0);
        SetWorld(playerid,0);
        HouseEntered[playerid] = -1;
    }
    format(query, sizeof(query), "UPDATE `users` SET `housekey` = %d WHERE `housekey` = %d", -1, house);
    mysql_function_query(dbHandle, query, true, "", "");
    OnPlayerSellHouse(house);
    PlayerInfo[playerid][pHouseKey] = -1;
    return 1;
}

CMD:setrentable(playerid, params[])
{
    new status;
    new house = PlayerInfo[playerid][pHouseKey];
    if(!PlayerOwnHouse(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    if(sscanf(params,"d",status)) return SyntaxMSG(playerid, "/setrentable ([0/1])");
    if(status > 1 || status < 0) return SyntaxMSG(playerid, "/setrentable ([0/1])");
    HouseInfo[house][hRentable] = status;
    format(msg, sizeof(msg), "House rentable set to %d.", status);
    SCM(playerid, COLOR_WHITE, msg);
    return 1;
}

CMD:setrent(playerid, params[])
{
    new price;
    new house = PlayerInfo[playerid][pHouseKey];
    if(!PlayerOwnHouse(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    if(sscanf(params,"d",price)) return SyntaxMSG(playerid, "/setrent ($1-$100)");
    if(price < 1 || price > 100) return SyntaxMSG(playerid, "/setrent ($1-$100)");
    if(price < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
    HouseInfo[house][hRentprice] = price;
    format(msg, sizeof(msg), "House rent set to $%d", HouseInfo[house][hRentprice]);
    SCM(playerid, COLOR_WHITE, msg);
    return 1;
}

CMD:houseupgrade(playerid, params[])
{
    new option[16], house = PlayerInfo[playerid][pHouseKey];
    if(!PlayerOwnHouse(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    if(sscanf(params, "s[16]", option)) return SyntaxMSG(playerid, "/houseupgrade [option]");
    if(HouseEntered[playerid] != house) return SCM(playerid, COLOR_GREY, "Trebuie sa fii in casa.");
    if(CompareStrings(option, "radio"))
    {
        if(HouseInfo[house][hRadio] == 1) return SCM(playerid, COLOR_WHITE, "Casa ta are deja un radio.");
        if(GetCash(playerid) < 10000) return SCM(playerid, COLOR_GREY, "Radio-ul pentru casa costa 10.000$");
        SCM(playerid, COLOR_GREEN2, "* Ai cumparat cu succes un radio pentru casa! Foloseste /setstation.");
        HouseInfo[house][hRadio] = 1;
        GiveCash(playerid, -10000);
    }
    return 1;
}

CMD:myhouse(playerid, params[])
{
    new option[7], secoption[128], thirdoption;
    new house = PlayerInfo[playerid][pHouseKey];
    if (PlayerOwnHouse(playerid))
    {
        if(sscanf(params, "s[7]S(NULL)[128]D(-1)", option, secoption, thirdoption)) return SyntaxMSG(playerid, "/myhouse [info/cash]");
        if(CompareStrings(option, "info"))
        {
            format(msg, sizeof(msg), "Informatii: Pret - $%d, Nivel - %d, Chirie - $%d.", HouseInfo[house][hPrice], HouseInfo[house][hLevelbuy], HouseInfo[house][hRentprice]);
            ServerMSG(playerid, msg);
        }
        else if(CompareStrings(option, "cash"))
        {
            new choise[11], amount;
            if(sscanf(params, "{s[7]}s[11]d", choise, amount))
            {
                SyntaxMSG(playerid, "/myhouse cash [withdraw/deposit] [amount]");
                format(msg, sizeof(msg), "Ai %d$ in seif.", HouseInfo[house][hCash]);
                SCM(playerid, COLOR_GREY, msg);
                return 1;
            }
            if(CompareStrings(choise, "withdraw"))
            {
                if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
                if (!PlayerToPoint(100, playerid,HouseInfo[house][hExitX],HouseInfo[house][hExitY],HouseInfo[house][hExitZ])) return ServerMSG(playerid, "You must be inside the house.");
                if (amount > HouseInfo[house][hCash] || amount < 1)
                {
                    SCM(playerid, COLOR_WHITE, "Nu ai atati bani!");
                    return 1;
                }
                GiveCash(playerid, amount);
                HouseInfo[house][hCash] -= amount;
                format(msg, sizeof(msg), "Ai scos %d$ din seif! Total ramas: %d$", amount,HouseInfo[house][hCash]);
                SCM(playerid, COLOR_GREY, msg);
                format(msg, sizeof(msg), "AdmWarn: %s a scos din casa suma de %d$. (Au mai ramas: %d$)", GetName(playerid), amount, HouseInfo[house][hCash]);
                AMSG(COLOR_LIGHTRED, msg);
            }
            else if(CompareStrings(choise, "deposit"))
            {
                if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
                if (!PlayerToPoint(100, playerid,HouseInfo[house][hExitX],HouseInfo[house][hExitY],HouseInfo[house][hExitZ])) return ServerMSG(playerid, "You must be inside the house.");
                if (amount > GetCash(playerid) || amount < 1)
                {
                    SCM(playerid, COLOR_WHITE, "Nu ai atati bani!");
                    return 1;
                }
                GiveCash(playerid, -amount);
                HouseInfo[house][hCash] += amount;
                format(msg, sizeof(msg), "Ai pus %d$ in seiful casei. Total: %d$ ", amount,HouseInfo[house][hCash]);
                SCM(playerid, COLOR_GREY, msg);
                format(msg, sizeof(msg), "AdmWarn: %s a depozitat in casa suma de %d$. (Total: %d$)", GetName(playerid), amount, HouseInfo[house][hCash]);
                AMSG(COLOR_LIGHTRED, msg);
            }
        }
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    }
    return 1;
}

CMD:tenants(playerid, params[])
{
    new house = PlayerInfo[playerid][pHouseKey];
    if (PlayerOwnHouse(playerid))
    {
        SCM(playerid, COLOR_YELLOWG, "|_______________Chiriasi_______________|");
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pHouseKey] == house && !PlayerOwnHouse(i))
            {
                SCMEx(playerid, COLOR_WHITE, "[ID:%d] - %s", i, GetNameEx(i));
            }
        }
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    }
    return 1;
}

CMD:evict(playerid, params[])
{

    new house = PlayerInfo[playerid][pHouseKey];
    new id;
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/evict [playerid/PartOfName] (/tenants)");
    if(id == playerid) return SCM(playerid, COLOR_WHITE, "Imposibil.");
    if (PlayerOwnHouse(playerid))
    {
        if(id == playerid) return SCM(playerid, COLOR_GREY, "Imposibil.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(PlayerInfo[id][pHouseKey] != house) return SCM(playerid, COLOR_GREY, "Acest player nu a inchiriat casa ta.");
        SCMEx(playerid, COLOR_GREY, "L-ai dat afara pe %s.", GetNameEx(id));
        PlayerInfo[id][pHouseKey] = -1;
        SCM(id, COLOR_YELLOWG, "Ai fost dat afara din casa.");
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    }
    return 1;
}

CMD:evictall(playerid, params[])
{
    new house = PlayerInfo[playerid][pHouseKey];
    if (PlayerOwnHouse(playerid))
    {
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pHouseKey] == house)
            {
                if(i == playerid) return 1;
                PlayerInfo[i][pHouseKey] = -1;
                SCM(i, COLOR_YELLOWG, "Ai fost dat afara din casa.");
            }
        }
        SCM(playerid, COLOR_YELLOW, "Toti chiriasii online au fost dati afara.");
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    }
    return 1;
}

CMD:rentroom(playerid, params[])
{
    for(new h = 0; h < sizeof(HouseInfo); h++)
    {
        if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]) && HouseInfo[h][hOwned] == 1)
        {
            if(HouseInfo[h][hRentable] == 0) return SCM(playerid, COLOR_GREY, "Casa nu este de inchiriat.");
            if(PlayerOwnHouse(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Deja ai o casa.");
            PlayerInfo[playerid][pHouseKey] = h;
            PlayerInfo[playerid][pSpawnType] = 1;
            format(msg, sizeof(msg), "Ai inchiriat o casa pentru $%d! De acum te vei spawna aici!", HouseInfo[h][hRentprice]);
            SCM(playerid, COLOR_WHITE, msg);
            return 1;
        }
    }
    return 1;
}

CMD:unrent(playerid, params[])
{
    if(PlayerOwnHouse(playerid)) return 1;
    PlayerInfo[playerid][pHouseKey] = -1;
    SCM(playerid, COLOR_WHITE, "Nu mai inchiriezi casa.");
    return 1;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Greet Commands=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

CMD:greet(playerid, params[])
{
    new pid, type;
    if(sscanf(params,"dd",pid,type)) {
    SyntaxMSG(playerid, "/greet [playerid] [style]");
    SCM(playerid, COLOR_GREEN2, "[1] Kiss [2] Handshake [3] Handshake [4] Handshake [5] Handshake");
    SCM(playerid, COLOR_GREEN2, "[6] Handshake [7] Handshake [8] Handshake [9] Handshake [10] Handshake");
    return 1;
    }
    if(pid == playerid) return SCM(playerid, COLOR_GREY, "Nu de poti saluta singur");
    if(type > 10 || type < 1) return SCM(playerid, COLOR_WHITE, "Saluturile sunt intre 1-10!");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(2.0, playerid, pid)) return NotNearPlayerMSG(playerid);
    SetIntVar(playerid, "SentGreet", 1);
    SetIntVar(playerid, "GreetType", type);
    SetIntVar(pid, "GreetFrom", playerid);
    SetIntVar(pid, "GettingGreet", 1);
    format(msg, sizeof(msg), "* I-ai trimis lui %s o cerere de salut.", GetNameWithMask(pid));
    SCM(playerid, COLOR_HOUSE, msg);
    format(msg, sizeof(msg), "(ID: %d)%s ar vrea sa dea mana cu tine.(/acceptshake PlayerID)", playerid,GetNameWithMask(playerid));
    SCM(pid, COLOR_HOUSE, msg);
    return 1;
}

CMD:acceptshake(playerid, params[])
{
    new pid;
    if(sscanf(params,"d",pid)) return SCM(playerid, COLOR_GREY, "USAGE: /acceptshake [playerid]");
    if(GetIntVar(playerid, "GettingGreet") == 0) return SCM(playerid, COLOR_GREY, "Nu ai o cerere de salut.");
    if(GetIntVar(playerid, "GreetFrom") != pid) return SCM(playerid, COLOR_GREY, "Nu ai primit o cerere de salut.");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(pid == playerid) return SCM(playerid, COLOR_GREY, "You can't accept yourself.");
    if(!PlayerNearPlayer(1.0, playerid, pid)) return NotNearPlayerMSG(playerid);
    new type = GetIntVar(pid, "GreetType");
    StopPlayerAnims(playerid);
    StopPlayerAnims(pid);
    SetPlayerFacePlayer(playerid, pid);
    SetPlayerFacePlayer(pid, playerid);

    if(type == 1)
    {
        OnPlayAnim(playerid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
        OnPlayAnim(pid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
    }
    else if(type == 2)
    {
        OnPlayAnim(playerid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 3)
    {
        OnPlayAnim(playerid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 4)
    {
        OnPlayAnim(playerid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 5)
    {
        OnPlayAnim(playerid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 6)
    {
        OnPlayAnim(playerid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 7)
    {
        OnPlayAnim(playerid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 8)
    {
        OnPlayAnim(playerid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 9)
    {
        OnPlayAnim(playerid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
    }
    else if(type == 10)
    {
        OnPlayAnim(playerid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
        OnPlayAnim(pid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
    }
    RemoveVar(GetIntVar(playerid, "GreetFrom"), "SentGreet");
    RemoveVar(GetIntVar(playerid, "GreetFrom"), "GreetType");
    RemoveVar(playerid, "GreetFrom");
    RemoveVar(playerid, "GettingGreet");
    return 1;
}

//FASTFOOD SYSTEM - IULY
CMD:mealanim(playerid, params[]) { return cmd_mealanimation(playerid, params); }
CMD:mealanimation(playerid, params[])
{
    ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
    return 1;
}

CMD:eatfood(playerid, params[]) return cmd_meal(playerid, params);
CMD:meal(playerid, params[])
{
    new type[24];
    if(sscanf(params, "s[24]", type)) return SyntaxMSG(playerid, "/meal [buy/place/eat/destroy/edit]");
    if(CompareStrings(type, "buy"))
    {
        if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 1)
        {
    //      if(!IsAtFastFood(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti la un fast-food.");
            if(meal[playerid] >= 1) return SCM(playerid, COLOR_GREY, "Ai deja un meniu!");
            ShowFFTD(playerid);
            SCM(playerid, COLOR_OOC, "Alege un meniu, apoi apasa pe butonul 'CUMPARA'.");
            SetPVarInt(playerid, "BuyFF", 1);
            SelectTextDraw(playerid, 0xFFFFFF33);
        }
        else return SCM(playerid, COLOR_GREY, "Nu esti intr-un restaurant.");
    }
    if(CompareStrings(type, "place"))
    {
        if(meal[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu ai cumparat un meniu.");
        if(GetPVarInt(playerid, "PlacedFF") == 1) { SCM(playerid, COLOR_GREY, "Ai pus deja meniul pe masa."); SCM(playerid, COLOR_GREY, "HINT: Poti folosi '/meal edit' daca ai asezat obiectul prost."); return 1; }
        SCM(playerid, COLOR_OOC, "O chelnerita va veni in 5 minute si iti va ridica tava.");
        SetPVarInt(playerid, "EditFF", 1);
        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid, X, Y, Z);
        RemovePlayerAttachedObject(playerid, 1);
        meal_object[playerid] = CreateDynamicObject(2212, X, Y+0.1, Z, -59.0, 62.0, 135.0);
        meal_rtimer[playerid] = SetTimerEx("RemoveFFObject", 300000, false, "i", playerid);
        EditDynamicObject2(playerid, meal_object[playerid]);
    }
    if(CompareStrings(type, "eat"))
    {
        if(meal[playerid] == 0) return SCM(playerid, COLOR_WHITE, "Nu ai cumparat un meniu!");
        DeletePVar(playerid, "PlacedFF");
        new Float:objx, Float:objy, Float:objz;
        GetDynamicObjectPos(meal_object[playerid], objx, objy, objz);
        if(!PlayerToPoint(3.0, playerid, objx, objy, objz)) return SCM(playerid, COLOR_WHITE, "Nu esti langa meniul tau.");
        new Float:health;
        GetPlayerHealth(playerid, health);
        if(meal[playerid] == 1)
        {
            SCM(playerid, COLOR_GREY, "Ai mancat un '{FF0000}Meniu Low{AFAFAF}' si ai primit {FF0000}20HP{AFAFAF}.");
            SetPlayerHealth(playerid, health+20);
            meal[playerid] = 0;
            RemoveFFObject(playerid);
        }
        if(meal[playerid] == 2)
        {
            SCM(playerid, COLOR_GREY, "Ai mancat un '{FF0000}Meniu Mediu{AFAFAF}' si ai primit {FF0000}30HP{AFAFAF}.");
            SetPlayerHealth(playerid, health+30);
            meal[playerid] = 0;
            RemoveFFObject(playerid);
        }
        if(meal[playerid] == 3)
        {
            SCM(playerid, COLOR_GREY, "Ai mancat un '{FF0000}Meniu Maxi{AFAFAF}' si ai primit {FF0000}40HP{AFAFAF}.");
            SetPlayerHealth(playerid, health+40);
            meal[playerid] = 0;
            RemoveFFObject(playerid);
        }
    }
    if(CompareStrings(type, "destroy"))
    {
        if(meal[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu ai cumparat un meniu.");
        ActionMessage(playerid, 20.0, "ii face semn chelneritei si aceasta vine si ii ia tava.");
        RemoveFFObject(playerid);
        KillTimer(meal_rtimer[playerid]);
        DeletePVar(playerid, "PlacedFF");
        DeletePVar(playerid, "BuyFF");
    }
    if(CompareStrings(type, "edit"))
    {
        if(meal_object[playerid] == 0) return SCM(playerid, COLOR_GREY, "Nu ai un meniu!");
//      if(GetPVarInt(playerid, "PlacedFF") == 1) { SCM(playerid, COLOR_GREY, "Ai pus deja meniul pe masa."); return 1; }
        SetPVarInt(playerid, "EditFF", 1);
        EditDynamicObject(playerid, meal_object[playerid]);
    }
    return 1;
}

forward RemoveFFObject(playerid);
public RemoveFFObject(playerid)
{
    DestroyDynamicObject(meal_object[playerid]);
    //SCM(playerid, COLOR_OOC, "Meniul tau a fost ridicat de o chelnerita.");
    DeletePVar(playerid, "PlacedFF");
    DeletePVar(playerid, "BuyFF");
    meal_object[playerid] = 0;
    meal[playerid] = 0;
    KillTimer(meal_rtimer[playerid]);
    return 1;
}
//END OF FASTFOOD SYSTEM - IULY

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Greet Commands=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
CMD:buyfood(playerid, params[])
{
    for(new i = 0; i < sizeof(FoodStand); i++)
    {
        if (PlayerToPoint(3, playerid,FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ]))
        {
            if(FoodStand[i][fStandOn])
            {
                GameTextForPlayer(playerid, "~w~Foloseste ~y~SPACE~w~ pentru a cumpara.", 5000, 4);
                ShowMenuForPlayer(FoodStallMenu, playerid);
                FreezePlayer(playerid);
                return 1;
            }
        }
    }
    return 1;
}

CMD:haircut(playerid, params[])
{
    if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 13)
        ShowDialog(playerid, Show:<Haricut>, DIALOG_STYLE_LIST, "Alege o noua tunsoare", "{FFFFFF}1. Scurt pe margini lung sus (10$)\n2. Afro (10$)\n3. Clown (10$)\nTunsoarea originala ({FF0000}IN FUNCTIE DE SKIN{FFFFFF})", "Selecteaza", "Anuleaza");
    else return SCM(playerid, COLOR_GREY, "Nu esti in Barber Shop.");
    return 1;
}

Dialog:Haricut(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0,1,2: { PlayerInfo[playerid][pHairCut] = listitem+1; }
            case 3: { PlayerInfo[playerid][pHairCut] = 0; }
        }
        SCM(playerid, COLOR_GREEN, "Ti-ai schimbat tunsoarea pentru 10$.");
        GiveCash(playerid, -10);
        UpdateHaircut(playerid);
    }
    return 1;
}

public UpdateHaircut(playerid)
{
    new haircut = PlayerInfo[playerid][pHairCut];
    new skin = GetPlayerSkin(playerid);
    switch(haircut)
    {
        case 0: { RemovePlayerAttachedObject(playerid, 8);}
        case 1: { SetPlayerAttachedObject(playerid, 8, 19077, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5], SkinOffSet[skin][8], SkinOffSet[skin][8], SkinOffSet[skin][8]); }
        case 2: { SetPlayerAttachedObject(playerid, 8, 18975, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5], SkinOffSet[skin][8], SkinOffSet[skin][8], SkinOffSet[skin][8]); }
        case 3: { SetPlayerAttachedObject(playerid, 8, 19274, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5], SkinOffSet[skin][8], SkinOffSet[skin][8], SkinOffSet[skin][8]); }
    }
    return 1;
}

CMD:buy(playerid, params[])
{
    new items[500];
    if(PlayerToPoint(2, playerid, 216.2715,-100.3981,1005.2578) || PlayerToPoint(2, playerid, 1096.0234,-1440.0349,15.7981))
    {
        if(GetIntVar(playerid, "JustBoughtToy") == 1) return SCM(playerid, -1, "Te rog termina actiunea curenta.");
        ShowDialog(playerid, Show:<ClothesCategory>, DIALOG_STYLE_LIST, "{FF0000}Selecteaza o categorie.", "Palarii\nOchelari\nBandane\nCasti", "Selecteaza", "Anuleaza");
    }
    else if(PlayerToPoint(2, playerid, 1109.19,-1529.53,15.7981))
    {
        if(GetIntVar(playerid, "JustBoughtToy") == 1) return SCM(playerid, -1, "Te rog termina actiunea curenta.");
        new string[1000+1];
        for(new x;x<sizeof(SportsInfo);x++)
        {
            format(string, sizeof(string), "%s%s - "EMBED_YELLOW"$%d\n", string, SportsInfo[x][toyName], SportsInfo[x][toyPrice]);
        }
        ShowDialog(playerid, Show:<SportsDialog>, DIALOG_STYLE_LIST, "{FF0000}Selecteaza un obiect", string, "Cumpara", "Anuleaza");
    }
    else if(PlayerToPoint(2, playerid, 1093.72,-1506.08,15.7981))
//  else if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 9)
    {
        if(GetIntVar(playerid, "JustBoughtToy") == 1) return SCM(playerid, -1, "Te rog termina actiunea curenta.");
        new string[1000+1];
        for(new x;x<sizeof(GuitarsInfo);x++)
        {
            format(string, sizeof(string), "%s%s - "EMBED_YELLOW"$%d\n", string, GuitarsInfo[x][toyName], GuitarsInfo[x][toyPrice]);
        }
        ShowDialog(playerid, Show:<GuitarsDialog>, DIALOG_STYLE_LIST, "{FF0000}Selecteaza un obiect", string, "Cumpara", "Anuleaza");
    }
    else if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 3)
    {
        for(new i = 0; i < sizeof(StoreItems); i++)
        {
            format(msg, sizeof(msg), "%d. %s - $%d\n", i+1, StoreItems[i][itemName], StoreItems[i][itemPrice]);
            strcat(items, msg);
        }
        ShowDialog(playerid, Show:<HandleBuying>, DIALOG_STYLE_LIST, "Produse:", items, "Cumpara", "Anuleaza");
    }
    return 1;
}

CMD:clothing(playerid, params[])
{
    new option[11], secoption;
    if(sscanf(params, "s[11]D(-1)", option, secoption))
    {
        SyntaxMSG(playerid, "/clothing [place | edit | drop]");
        DisplayClothing(playerid);
        return 1;
    }
    else if(CompareStrings(option, "place"))
    {
        new slot;
        if(sscanf(params, "{s[7]}d", slot))
        {
            SyntaxMSG(playerid, "/clothing place [index slot]");
            for(new i = 0; i < MAX_PLAYER_TOYS; i++)
            {
                if(PlayerToys[playerid][i][ptToyOn])
                {
                    format(msg, sizeof(msg), "%d. %s", i, PlayerToys[playerid][i][ptName]);
                    SCM(playerid, COLOR_WHITE, msg);
                }
                else
                {
                    format(msg, sizeof(msg), "%d. Inexistent", i);
                    SCM(playerid, COLOR_WHITE, msg);
                }
            }
            return 1;
        }
        if(slot > MAX_PLAYER_TOYS || slot < 0) return SCM(playerid, -1, "Slot invalid.");
        if(!PlayerToys[playerid][slot][ptToyOn]) return SCM(playerid, -1, "Obiect invalid.");
        PlaceClothing(playerid, slot);
    }
    else if(CompareStrings(option, "edit"))
    {
        new slot;
        if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/clothing edit [index slot]");
        if(slot > MAX_PLAYER_TOYS || slot < 0) return SCM(playerid, -1, "Slot invalid.");
        if(!PlayerToys[playerid][slot][ptToyOn]) return SCM(playerid, -1, "Obiect invalid.");
        EditClothing(playerid, slot);
    }
    else if(CompareStrings(option, "drop"))
    {
        new slot;
        if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/clothing drop [index slot]");
        if(slot > MAX_PLAYER_TOYS || slot < 0) return SCM(playerid, -1, "Slot invalid.");
        if(!PlayerToys[playerid][slot][ptToyOn]) return SCM(playerid, -1, "Obiect invalid.");
        format(msg, sizeof(msg), "Ai arunca pe jos {00FF00}%s{FFFFFF}.", PlayerToys[playerid][slot][ptName]);
        SCM(playerid, -1, msg);
        RemovePlayerToyFromSlot(playerid, slot);
    }
    return 1;
}

CMD:boombox(playerid, params[])
{
    new option[11];
    if(sscanf(params,"s[11]",option)) return SyntaxMSG(playerid, "/boombox [place/edit/remove]");
    if(GetIntVar(playerid, "BoomBox") == 0) return SCM(playerid, COLOR_LIGHTBLUE, "Nu ai un boombox.");

    if(CompareStrings(option, "place"))
    {
        if(GetIntVar(playerid, "BoomBoxOn") == 1) return SCM(playerid, COLOR_YELLOW, "Deja ai pus un boomox.");
        if(DoorEntered[playerid] != -1 || HouseEntered[playerid] != -1 || BizEntered[playerid] != -1) return SCM(playerid, COLOR_CYAN, "Nu poti amplasa un boombox aici.");
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SCM(playerid, -1, "Nu poti pune boombox cat timp esti in masina.");
        foreach(new i : Player)
        {
            if(IsValidDynamicArea(GetIntVar(i, "BoomBoxArea")) && IsPlayerInDynamicArea(playerid, GetIntVar(i, "BoomBoxArea"))) return SCM(playerid, COLOR_YELLOW, "Cineva a amplasat deja un boombox aici.");
        }
        SCM(playerid, COLOR_LIGHTBLUE, "Ai plasat un boombox. Foloseste /setstation.");
        SetIntVar(playerid, "BoomBoxArea", CreateDynamicSphere(PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 50.0, -1, -1, -1));
        SetIntVar(playerid, "BoomBoxObject", CreateDynamicObject(2226, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)-1, 0.0, 0.0, 0.0, -1, -1, -1, 300.0));
        SetFloatVar(playerid, "BoomBoxX", PlayerPosX(playerid));
        SetFloatVar(playerid, "BoomBoxY", PlayerPosY(playerid));
        SetFloatVar(playerid, "BoomBoxZ", PlayerPosZ(playerid));
        SetIntVar(playerid, "BoomBoxOn", 1);
        SetIntVar(playerid, "BoomBoxMusicOn", 0);
    }
    else if(CompareStrings(option, "remove"))
    {
        if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "Nu ai pus un boombox.");
        if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
        {
            StopBoomBoxMusic(playerid);
            StopAudioStreamForPlayer(playerid);
            DestroyDynamicArea(GetIntVar(playerid, "BoomBoxArea"));
            DestroyDynamicObject(GetIntVar(playerid, "BoomBoxObject"));
            RemoveVar(playerid, "BoomBoxOn");
            RemoveVar(playerid, "BoomBoxArea");
            RemoveVar(playerid, "BoomBoxObject");
            RemoveVar(playerid, "EditingBoomBox");
            RemoveVar(playerid, "BoomBoxX");
            RemoveVar(playerid, "BoomBoxY");
            RemoveVar(playerid, "BoomBoxZ");
            RemoveVar(playerid, "BoomBoxMusicOn");
            SCM(playerid, COLOR_LIGHTBLUE, "Ai retras boombox-ul.");
        }
    }
    else if(CompareStrings(option, "edit"))
    {
        if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "Nu ai pus un boombox.");
        if(GetIntVar(playerid, "EditingBoomBox") == 1) return SCM(playerid, COLOR_YELLOW, "Esti in mijlocul editarii boombox-ului.");
        if(GetIntVar(playerid, "BoomBoxMusicOn") == 1) return SCM(playerid, COLOR_YELLOW, "Te rog opreste muzica.");
        if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
        {
            if(!PlayerToPoint(3.0, playerid, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"))) return SCM(playerid, COLOR_YELLOW, "Trebuie sa fi langa un boombox.");
            EditDynamicObject(playerid, GetIntVar(playerid, "BoomBoxObject"));
            SetIntVar(playerid, "EditingBoomBox", 1);
            ServerMSG(playerid, "Editezi pozitia boombox-ului, foloseste {FF0000}ESC{FFFFF} pentru a te opri.");
        }
    }
    else return SyntaxMSG(playerid, "/boombox [place/edit/remove]");
    return 1;
}

CMD:setstation(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    new house = HouseEntered[playerid];
    new biz = BizEntered[playerid];
    if (house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0)
    {
        if(HouseInfo[house][hRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu ai un boombox in casa.");
        if(HouseInfo[house][hRadioOn] == 0)
        {
            SetIntVar(playerid, "SelectingHouseRadio", 1);
            ShowBoomBoxStations(playerid);
        }
        else
        {
            StopHouseBoomBox(house);
        }
    }
    else if (biz != -1 && biz == PlayerInfo[playerid][pBizKey] || biz != -1 && biz == PlayerInfo[playerid][pWorkOn])
    {
        if(BizInfo[biz][bizRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu ai un boombox in afacere.");
        if(BizInfo[biz][bizRadioOn] == 0)
        {
            SetIntVar(playerid, "SelectingBusinessRadio", 1);
            ShowBoomBoxStations(playerid);
        }
        else
        {
            StopBusinessBoomBox(biz);
        }
    }
    else if(IsDriver(playerid) && PlayerOwnVehicle(playerid, vehicle))
    {
        if(VehicleInfo[vehicle][carRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu ai un boombox in masina.");
        if(VehicleInfo[vehicle][carRadioOn] == 0)
        {
            SetIntVar(playerid, "SelectingCarRadio", 1);
            ShowBoomBoxStations(playerid);
        }
        else
        {
            StopCarBoomBox(vehicle);
        }
    }
    else
    {
        if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "Nu ai pus un boombox.");
        if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
        {
            if(!PlayerToPoint(3.0, playerid, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"))) return SCM(playerid, COLOR_YELLOW, "Trebuie sa fii langa boombox-ul tau.");
            ShowBoomBoxStations(playerid);
        }
    }
    return 1;
}

CMD:stationoff(playerid, params[])
{
    if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "Nu ai pus un boombox.");
    if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
    {
        if(!PlayerToPoint(3.0, playerid, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"))) return SCM(playerid, COLOR_YELLOW, "Trebuie sa fii langa boombox-ul tau.");
        RemoveVar(playerid, "BoomBoxMusicOn");
        StopBoomBoxMusic(playerid);
    }
    return 1;
}

CMD:furniture(playerid, params[])
{
    new house = PlayerInfo[playerid][pHouseKey];
    if (PlayerOwnHouse(playerid))
    {
        if(HouseEntered[playerid] != house) return ServerMSG(playerid, "Trebuie sa fii in casa.");
        ShowDialog(playerid, Show:<FurnitureDialog>, DIALOG_STYLE_LIST, ""EMBED_LIGHTBLUE"Furniture dialog"EMBED_WHITE"", "Lista\nCumpara obiecte\n", "Selecteaza", "Iesi");
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu detii o casa.");
    }
    return 1;
}

CMD:trunkspot(playerid, params[])
{
    new house = PlayerInfo[playerid][pHouseKey];
    if (HouseEntered[playerid] == house && house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0 && HouseInfo[house][hWorld] == GetWorld(playerid))
    {
        HouseInfo[house][hCheckPosX] = PlayerPosX(playerid);
        HouseInfo[house][hCheckPosY] = PlayerPosY(playerid);
        HouseInfo[house][hCheckPosZ] = PlayerPosZ(playerid);
        SCM(playerid, COLOR_YELLOWG, "/trunkspot - pozitia comenzii a fost modificata.");
    }
    else
    {
        SCM(playerid, COLOR_CYAN, "Trebuie sa fii in interiorul casei tale.");
    }
    return 1;
}

CMD:weapons(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTRED, "Pentru a arunca o arma, foloseste /dropgun");
    new Player_Weapons[13], Player_Ammos[13];
    for(new i = 1;i <= 12;i++)
    {
        GetPlayerWeaponData(playerid,i,Player_Weapons[i],Player_Ammos[i]);
        if(Player_Weapons[i] != 0)
        {
            new weaponName[128];
            GetWeaponName(Player_Weapons[i],weaponName,255);
            format(msg,255,"[ID:%d] Arma:[%s] - Munitie: [%d]", Player_Weapons[i], weaponName, Player_Ammos[i]);
            SCM(playerid,COLOR_GREY,msg);
        }
    }
    return 1;
}

CMD:place(playerid, params[])
{
    new weaponid;
    if(sscanf(params,"d",weaponid)) return SyntaxMSG(playerid, "/place [weaponid] (/weapons)");
    new house = HouseEntered[playerid];
    if(house != -1)
    {
        if (PlayerToPoint(0.5, playerid,HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]))
        {
            if(CountHouseTrunk(house) == MAX_HOUSE_WEAPONS-1) return SCM(playerid, COLOR_GREY, "Seiful casei este plin.");
            if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_GREY, "Nu ai o arma.");
            if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Nu ai o arma.");
            if(!PlayerHoldingWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Nu tii o arma.");
            format(msg, sizeof(msg), "Ai pus %s in seiful casei.", GetWeaponNameEx(weaponid));
            SCM(playerid, COLOR_GREY, msg);
			cheatImmune[playerid] = 1;
            new n = GetNextHouseTrunkSlot(house);
            HouseInfo[house][hWeapon][n] = weaponid;
            HouseInfo[house][hAmmo][n] = GetWeaponAmmo(playerid, weaponid);
            if(IsMeleeWeapon(weaponid))
            {
                RemovePlayerWeapon(playerid, weaponid);
                PlayerInfo[playerid][pMeleeWep] = 0;
            }
            if(IsPrimaryWeapon(weaponid))
            {
                RemovePlayerWeapon(playerid, weaponid);
                PlayerInfo[playerid][pPerm1] = 0;
                PlayerInfo[playerid][pAmmo1] = 0;
            }
            if(IsSecondaryWeapon(weaponid))
            {
                RemovePlayerWeapon(playerid, weaponid);
                PlayerInfo[playerid][pPerm2] = 0;
                PlayerInfo[playerid][pAmmo2] = 0;
            }
            SetPlayerWeapons(playerid);
            format(msg, sizeof(msg), "a pus %s in seiful casei.", GetWeaponNameEx(weaponid));
            SetPlayerBubble(playerid, msg);
        }
        else
        {
            SCM(playerid, COLOR_LIGHTRED, "Nu esti langa seiful casei.");
        }
    }
/*    else if(PlayerInCar(playerid))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsACopCar(vehicle))
        {
            if(!CheckWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Nu ai o arma!");
            if(weaponid == 3 || weaponid == 24 || weaponid == 41) return SCM(playerid, COLOR_LIGHTRED, "Nu poti pune aceasta arma.");
            new faction = PlayerInfo[playerid][pFaction];
            if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
            if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
            cheatImmune[playerid] = 1;
			format(msg, sizeof(msg), "pune arma %s in portbagajul vehiculului %s.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
            ActionMessage(playerid, 15.0, msg);
			RemovePlayerWeapon(playerid, weaponid);
        }
        else if(VehicleInfo[vehicle][carOwned] == 1)
        {
            if(engineOn{vehicle})
            {
                if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
                if(GetVehicleTrunkWeps(vehicle) == MAX_VEHICLE_WEAPONS-1) return SCM(playerid, COLOR_LIGHTRED, "Portbagajul este plin!");
                if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Arma invalida.");
                if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Nu ai aceasta arma.");
                new slot = GetNextVehicleTrunkSlot(vehicle);
                VehicleInfo[vehicle][carTrunkWep][slot] = weaponid;
                VehicleInfo[vehicle][carTrunkAmmo][slot] = GetWeaponAmmo(playerid, weaponid);
                cheatImmune[playerid] = 1;                
                if(IsMeleeWeapon(weaponid))
                {
                    RemovePlayerWeapon(playerid, weaponid);
                    PlayerInfo[playerid][pMeleeWep] = 0;
                }
                if(IsPrimaryWeapon(weaponid))
                {
                    RemovePlayerWeapon(playerid, weaponid);
                    PlayerInfo[playerid][pPerm1] = 0;
                    PlayerInfo[playerid][pAmmo1] = 0;
                }
                if(IsSecondaryWeapon(weaponid))
                {
                    RemovePlayerWeapon(playerid, weaponid);
                    PlayerInfo[playerid][pPerm2] = 0;
                    PlayerInfo[playerid][pAmmo2] = 0;
                }
                Weapons[playerid][weaponid] = 0;
                SetPlayerWeapons(playerid);
                format(msg, sizeof(msg), "~b~Ai pus ~y~%s~b~ in portbagajul vehiculului ~y~%s~b~.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
                InfoMSG(playerid, msg, 5);	
                format(msg, sizeof(msg), "a pus %s in portbagajul vehiculului %s.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
                SetPlayerBubble(playerid, msg);
            }
            else return SCM(playerid, COLOR_LIGHTRED, "Te rog porneste motorul vehiculului mai intai.");
        }
    }*/
    else if(PlayerInCar(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii in exteriorul masinii pentru a folosi portbagajul.");
    else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		new vehicle = GetClosestVehicle(playerid), Float:x, Float:y, Float:z;
		GetVehicleBoot(vehicle, x, y, z);
		if(IsValidVehicle(vehicle) && IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
		{
			if(VehicleInfo[vehicle][carOwned] == 1)
			{
				if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are portbagaj.");
				if(VehicleInfo[vehicle][carTrunkLock] == 0)
				{
					if(GetVehicleTrunkWeps(vehicle) == MAX_VEHICLE_WEAPONS-1) return SCM(playerid, COLOR_LIGHTRED, "Portbagajul acestei masini este plin.");
					if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Arma invalida.");
					if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Nu ai aceasta arma.");
					format(msg, sizeof(msg), "~b~Ai pus arma ~y~%s~b~ in ~y~%s.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
					InfoMSG(playerid, msg, 5);
					cheatImmune[playerid] = 1;
					new slot = GetNextVehicleTrunkSlot(vehicle);
					VehicleInfo[vehicle][carTrunkWep][slot] = weaponid;
					VehicleInfo[vehicle][carTrunkAmmo][slot] = GetWeaponAmmo(playerid, weaponid);
					if(IsMeleeWeapon(weaponid))
					{
						RemovePlayerWeapon(playerid, weaponid);
						PlayerInfo[playerid][pMeleeWep] = 0;
					}
					if(IsPrimaryWeapon(weaponid))
					{
						RemovePlayerWeapon(playerid, weaponid);
						PlayerInfo[playerid][pPerm1] = 0;
						PlayerInfo[playerid][pAmmo1] = 0;
					}
					if(IsSecondaryWeapon(weaponid))
					{
						RemovePlayerWeapon(playerid, weaponid);
						PlayerInfo[playerid][pPerm2] = 0;
						PlayerInfo[playerid][pAmmo2] = 0;
					}
					SetPlayerWeapons(playerid);
					format(msg, sizeof(msg), "pune o arma in portbagajul vehiculului %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
					SetPlayerBubble(playerid, msg);
				}
				else return SCM(playerid, COLOR_GREY, "Portbagajul este inchis.");
			}			
		}
		else return SCM(playerid, COLOR_GREY, "Nu te aflii langa un portbagaj!");
        /*new counter = 0, vehicle;
        for(new i = 1; i <=GetVehiclePoolSize(); i++)
        {
            new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
            if(dist)
            {
                vehicle = i;
                counter++;
            }
        }
        switch(counter)
        {
            case 0:
            {
                SCM(playerid, COLOR_GREY, "Nu esti langa un portbagaj.");
            }
            case 1:
            {
                if(VehicleInfo[vehicle][carOwned] == 1)
                {
                    if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
                    if(VehicleInfo[vehicle][carTrunkLock] == 0)
                    {
                        if(GetVehicleTrunkWeps(vehicle) == MAX_VEHICLE_WEAPONS-1) return SCM(playerid, COLOR_LIGHTRED, "This vehicle trunk is full.");
                        if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_LIGHTRED, "Arma invalida.");
                        if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "You don't have this weapon.");
                        format(msg, sizeof(msg), "~b~Ai pus arma ~y~%s~b~ in ~y~%s.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
                        InfoMSG(playerid, msg, 5);
                        new slot = GetNextVehicleTrunkSlot(vehicle);
                        VehicleInfo[vehicle][carTrunkWep][slot] = weaponid;
                        VehicleInfo[vehicle][carTrunkAmmo][slot] = GetWeaponAmmo(playerid, weaponid);
                        if(IsMeleeWeapon(weaponid))
                        {
                            RemovePlayerWeapon(playerid, weaponid);
                            PlayerInfo[playerid][pMeleeWep] = 0;
                        }
                        if(IsPrimaryWeapon(weaponid))
                        {
                            RemovePlayerWeapon(playerid, weaponid);
                            PlayerInfo[playerid][pPerm1] = 0;
                            PlayerInfo[playerid][pAmmo1] = 0;
                        }
                        if(IsSecondaryWeapon(weaponid))
                        {
                            RemovePlayerWeapon(playerid, weaponid);
                            PlayerInfo[playerid][pPerm2] = 0;
                            PlayerInfo[playerid][pAmmo2] = 0;
                        }
                        SetPlayerWeapons(playerid);
                        format(msg, sizeof(msg), "pune o arma in portbagajul vehiculului %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
                        SetPlayerBubble(playerid, msg);
                    }
                    else return SCM(playerid, COLOR_GREY, "Portbagajul este inchis.");
                }
            }
            default: SCM(playerid, COLOR_GREY, "A fost gasit mai mult de un vehicul.");
        }*/
    }
    else SCM(playerid, COLOR_GREY, "Trebuie sa fii langa seiful casei/intr-o masina sau langa portbagajul unei masini.");
    return 1;
}

CMD:takegun(playerid, params[])
{
    new slotid;
    if(sscanf(params,"d",slotid)) return SyntaxMSG(playerid, "/takegun [slotid] (Lista ID-urilor in /check)");
    new house = HouseEntered[playerid];
    if(house != -1)
    {
        if (PlayerToPoint(0.5, playerid,HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]))
        {
            if(slotid < 1 || slotid > MAX_HOUSE_WEAPONS-1) return SCM(playerid, COLOR_GREY, "Slot invalid.");
            if(HouseInfo[house][hWeapon][slotid] == 0) return SCM(playerid, COLOR_GREY, "Nu este o arma pe acest slot.");
            new weapon = HouseInfo[house][hWeapon][slotid];
            new wepammo = HouseInfo[house][hAmmo][slotid];
            if(IsMeleeWeapon(weapon) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Slotul Melee este ocupat.");
            if(IsPrimaryWeapon(weapon) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Slotul Primar este ocupat.");
            if(IsSecondaryWeapon(weapon) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Slotul Secundar este ocupat.");
            if(IsMeleeWeapon(weapon))
            {
                GiveMeleeWeapon(playerid, weapon);
            }
            if(IsPrimaryWeapon(weapon))
            {
                GivePermWeapon(playerid, 2, weapon, wepammo);
            }
            if(IsSecondaryWeapon(weapon))
            {
                GivePermWeapon(playerid, 3, weapon, wepammo);
            }
			cheatImmune[playerid] = 1;
            format(msg, sizeof(msg), "Ai scos un/o %s din seiful casei.", GetWeaponNameEx(weapon));
            SCM(playerid, COLOR_GREY, msg);
            HouseInfo[house][hWeapon][slotid] = 0;
            HouseInfo[house][hAmmo][slotid] = 0;
            format(msg, sizeof(msg), "a scos un/o %s din seiful casei.", GetWeaponNameEx(weapon));
            SetPlayerBubble(playerid, msg);
        }
        else
        {
            SCM(playerid, COLOR_LIGHTRED, "Nu esti langa seiful casei.");
        }
    }
    else if(PlayerInCar(playerid))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsACopCar(vehicle))
        {
            if(slotid >= sizeof(PoliceTrunk)) return SCM(playerid, COLOR_GREY, "Slot invalid.");
            new faction = PlayerInfo[playerid][pFaction];
            if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
            if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
			cheatImmune[playerid] = 1;
            format(msg, sizeof(msg), "scoate o arma din potrbagaj.", GetWeaponNameEx(PoliceTrunk[slotid][wepID]));
//          ActionMessage(playerid, 15.0, msg);
            SetPlayerBubble(playerid, msg);
            GiveWeapon(playerid, PoliceTrunk[slotid][wepID], PoliceTrunk[slotid][wepAmmo]);
        }
        else if(VehicleInfo[vehicle][carOwned] == 1)
        {
            if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
            if(engineOn{vehicle})
            {
                if(slotid < 1 || slotid > MAX_VEHICLE_WEAPONS-1) return SCM(playerid, COLOR_YELLOWG, "Slot invalid.");
                if(VehicleInfo[vehicle][carTrunkWep][slotid] == 0) return SCM(playerid, COLOR_YELLOWG, "Nu este o arma pe acest slot.");
                new weapon = VehicleInfo[vehicle][carTrunkWep][slotid];
                new wepammo = VehicleInfo[vehicle][carTrunkAmmo][slotid];
                if(IsMeleeWeapon(weapon) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Slotul Melee este ocupat.");
                if(IsPrimaryWeapon(weapon) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Slotul Primar este ocupat.");
                if(IsSecondaryWeapon(weapon) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Slotul Secundar este ocupat.");
                if(IsMeleeWeapon(weapon))
                {
                    GiveMeleeWeapon(playerid, weapon);
                }
                if(IsPrimaryWeapon(weapon))
                {
                    GivePermWeapon(playerid, 2, weapon, wepammo);
                }
                if(IsSecondaryWeapon(weapon))
                {
                    GivePermWeapon(playerid, 3, weapon, wepammo);
                }
                VehicleInfo[vehicle][carTrunkWep][slotid] = 0;
                VehicleInfo[vehicle][carTrunkAmmo][slotid] = 0;
				cheatImmune[playerid] = 1;
                SetPlayerWeapons(playerid);
                format(msg, sizeof(msg), "a luat o arma din portbagajul vehiculului %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
                SetPlayerBubble(playerid, msg);
            }
            else return SCM(playerid, COLOR_LIGHTRED, "Please start the engine first.");
        }
    }
    else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		new vehicle = GetClosestVehicle(playerid), Float:x, Float:y, Float:z;
		GetVehicleBoot(vehicle, x, y, z);
		if(IsValidVehicle(vehicle) && IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
        {
			if(VehicleInfo[vehicle][carOwned] == 1)
			{
				if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
				if(VehicleInfo[vehicle][carTrunkLock] == 0)
				{
					if(slotid < 1 || slotid > MAX_VEHICLE_WEAPONS-1) return SCM(playerid, COLOR_YELLOWG, "Invalid trunk slot ID.");
					if(VehicleInfo[vehicle][carTrunkWep][slotid] == 0) return SCM(playerid, COLOR_YELLOWG, "There's no weapon in this slot.");
					new weapon = VehicleInfo[vehicle][carTrunkWep][slotid];
					new wepammo = VehicleInfo[vehicle][carTrunkAmmo][slotid];
					if(IsMeleeWeapon(weapon) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Your Melee weapon slot is taken.");
					if(IsPrimaryWeapon(weapon) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Your Primary weapon slot is taken.");
					if(IsSecondaryWeapon(weapon) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Your Secondary weapon slot is taken.");
					if(IsMeleeWeapon(weapon))
					{
						GiveMeleeWeapon(playerid, weapon);
					}
					if(IsPrimaryWeapon(weapon))
					{
						GivePermWeapon(playerid, 2, weapon, wepammo);
					}
					if(IsSecondaryWeapon(weapon))
					{
						GivePermWeapon(playerid, 3, weapon, wepammo);
					}
					cheatImmune[playerid] = 1;
					format(msg, sizeof(msg), "~b~Ai luat ~y~%s~b~ din portbagajul masinii ~y~%s.", GetWeaponNameEx(weapon), VehicleNames[GetVehicleModel(vehicle)-400]);
					InfoMSG(playerid, msg, 5);
					VehicleInfo[vehicle][carTrunkWep][slotid] = 0;
					VehicleInfo[vehicle][carTrunkAmmo][slotid] = 0;
					SetPlayerWeapons(playerid);
					format(msg, sizeof(msg), "a luat un/o %s din portbagajul masinii %s.", GetWeaponNameEx(weapon), VehicleNames[GetVehicleModel(vehicle)-400]);
					SetPlayerBubble(playerid, msg);
				}
				else return SCM(playerid, COLOR_GREY, "Portbagajul este inchis.");
			}
		}
		else return SCM(playerid, COLOR_GREY, "Nu te aflii langa un portbagaj!");
    }
    return 1;
}

CMD:trunk(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_WHITE, "Trebuie sa fii sofer.");
    if(!engineOn{vehicle}) return SCM(playerid, COLOR_GREY, "Motorul trebuie sa fie pornit");
	if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are un portbagaj.");
    if(VehicleInfo[vehicle][carTrunkLock] == 0)
    {
        GameTextForPlayer(playerid, "~g~portbagaj ~r~inchis", 3000, 3);
        VehicleTrunk(vehicle, true);
    }
    else if(VehicleInfo[vehicle][carTrunkLock] == 1)
    {
        GameTextForPlayer(playerid, "~g~portbagaj deschis", 3000, 3);
        VehicleTrunk(vehicle, false);
    }
    return 1;
}

CMD:hood(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_WHITE, "Trebuie sa fii sofer.");
    if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are un portbagaj.");
    GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
    if(bonnet == VEHICLE_PARAMS_ON) 
    {
        GameTextForPlayer(playerid, "~g~capota ~r~inchisa", 3000, 3);
        SetVehicleParamsEx(vehicle, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
    }
    else if(bonnet == VEHICLE_PARAMS_OFF)
    {
        GameTextForPlayer(playerid, "~g~capota deschisa", 3000, 3);
        SetVehicleParamsEx(vehicle, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
    }
    return 1;
}

CMD:check(playerid, params[])
{
    new string[500];
    new house = HouseEntered[playerid];
    if(house != -1)
    {
        if (PlayerToPoint(0.5, playerid,HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]))
        {
            for(new z = 1; z < MAX_HOUSE_WEAPONS; z++)
            {
                if(HouseInfo[house][hWeapon][z] == 0)
                {
                    format(string, sizeof(string), "%s%d.[Gol]\n", string, z);
                }
                else if(IsMeleeWeapon(HouseInfo[house][hWeapon][z]))
                {
                    format(string, sizeof(string), "%s%d.%s\n", string, z, GetWeaponNameEx(HouseInfo[house][hWeapon][z]), HouseInfo[house][hAmmo][z]);
                }
                else
                {
                    format(string, sizeof(string), "%s%d.%s - Munitie: "EMBED_LIGHTBLUE"%d\n", string, z, GetWeaponNameEx(HouseInfo[house][hWeapon][z]), HouseInfo[house][hAmmo][z]);
                }
            }
            format(msg, sizeof(msg), "Seiful casei (capacitate de: %d)", MAX_HOUSE_WEAPONS-1);
            ShowDialog(playerid, Show:<HouseTrunk>, DIALOG_STYLE_LIST, msg, string, "O", "K");
        }
        else return SCM(playerid, COLOR_LIGHTRED, "Nu ai gasit nimic.");
    }
    else if(PlayerInCar(playerid))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(IsACopCar(vehicle))
        {
            new faction = PlayerInfo[playerid][pFaction];
            if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
            if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
            for(new i = 0; i < sizeof(PoliceTrunk); i++)
            {
                format(string, sizeof(string), "%s%d.%s[Munitie:%d]\n", string, i, GetWeaponNameEx(PoliceTrunk[i][wepID]), PoliceTrunk[i][wepAmmo]);
            }
            ShowDialog(playerid, Show:<VehicleTrunk>, DIALOG_STYLE_LIST, "Trunk", string, "O", "K");
        }
        else if(VehicleInfo[vehicle][carOwned] == 1)
        {
            if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are un portbagaj.");
            if(engineOn{vehicle})
            {
                for(new i = 1; i < MAX_VEHICLE_WEAPONS; i++)
                {
                    if(VehicleInfo[vehicle][carTrunkWep][i] != 0)
                    {
                        if(IsMeleeWeapon(VehicleInfo[vehicle][carTrunkWep][i]))
                        {
                            format(string, sizeof(string), "%s%d.%s\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]));
                        }
                        else format(string, sizeof(string), "%s%d.%s - Munitie: "EMBED_LIGHTBLUE"%d\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]), VehicleInfo[vehicle][carTrunkAmmo][i]);
                    }
                    else
                    {
                        format(string, sizeof(string), "%s%d.[Gol]\n", string, i);
                    }
                }
                format(msg, sizeof(msg), "Portbagajul vehiculului %s (Capacitatea de %d)", VehicleNames[GetVehicleModel(vehicle)-400], MAX_VEHICLE_WEAPONS-1);
                ShowDialog(playerid, Show:<VehicleTrunk>, DIALOG_STYLE_LIST, msg, string, "O", "K");
            }
            else return SCM(playerid, COLOR_LIGHTRED, "Motorul trebuie sa fie pornit.");
        }
    }
    else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new counter = 0, vehicle;
        for(new i; i != GetVehiclePoolSize(); i++)
        {
            new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
            if(dist)
            {
                vehicle = i;
                counter++;
            }
        }
        switch(counter)
        {
            case 0: SCM(playerid, COLOR_GREY, "Nici un vehicul cu portbagaj in aproprierea ta.");
            case 1:
            {
                if(VehicleInfo[vehicle][carOwned] == 1)
                {
                    if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsBike(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are un portbagaj.");
                    if(VehicleInfo[vehicle][carTrunkLock] == 0)
                    {
                        for(new i = 1; i < MAX_VEHICLE_WEAPONS; i++)
                        {
                            if(VehicleInfo[vehicle][carTrunkWep][i] != 0)
                            {
                                if(IsMeleeWeapon(VehicleInfo[vehicle][carTrunkWep][i]))
                                {
                                    format(string, sizeof(string), "%s%d.%s\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]));
                                }
                                else format(string, sizeof(string), "%s%d.%s - Munitie: "EMBED_LIGHTBLUE"%d\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]), VehicleInfo[vehicle][carTrunkAmmo][i]);
                            }
                            else
                            {
                                format(string, sizeof(string), "%s%d.[Gol]\n", string, i);
                            }
                        }
                        new vehname[128];
                        format(vehname, sizeof(vehname), "Portbagajul vehiculului %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
                        ShowDialog(playerid, Show:<VehicleTrunk>, DIALOG_STYLE_LIST, vehname, string, "O", "K");
                    }
                    else return SCM(playerid, COLOR_GREY, "Portbagajul este inchis.");
                    return 1;
                }
            }
            default: SCM(playerid, COLOR_GREY, "S-au gasit mai multe vehicule in apropiere.");
        }
    }
    return 1;
}

CMD:dropgun(playerid, params[])
{
    if(!IsPlayerHoldingWeapon(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu ai o arma.");
    new weaponid = GetWeaponHolding(playerid);
    if(CopDuty{playerid} || SwatDuty{playerid})
    {
        return SCM(playerid, -1, "Nu poti arunca o arma pe jos!");
/*      format(msg, sizeof(msg), "arunca %s pe jos.", GetWeaponNameEx(weaponid));
        ActionMessage(playerid, 15.0, msg);
        RemovePlayerWeapon(playerid, weaponid);*/
    }
    else
    {
        if(!HasWeapon(playerid, weaponid)) return 1;
        new gunobject = GunObjects[weaponid][0];
        new dropid = GetNextWepDropID();
		cheatImmune[playerid] = 1;
        WeaponDropInfo[dropid][gunObject] = CreateDynamicObject(gunobject, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)-1, 93.7, 120.0, 120.0, GetWorld(playerid), GetInterior(playerid), -1, 200.0);
        WeaponDropInfo[dropid][gunID] = weaponid;
        WeaponDropInfo[dropid][gunAmmo] = GetWeaponAmmo(playerid, weaponid);
        WeaponDropInfo[dropid][gunDropped] = 1;
        WeaponDropInfo[dropid][gunPosX] = PlayerPosX(playerid);
        WeaponDropInfo[dropid][gunPosY] = PlayerPosY(playerid);
        WeaponDropInfo[dropid][gunPosZ] = PlayerPosZ(playerid)-1;
        if(IsMeleeWeapon(weaponid))
        {
            PlayerInfo[playerid][pMeleeWep] = 0;
        }
        if(IsPrimaryWeapon(weaponid))
        {
            PlayerInfo[playerid][pPerm1] = 0;
            PlayerInfo[playerid][pAmmo1] = 0;
        }
        if(IsSecondaryWeapon(weaponid))
        {
            PlayerInfo[playerid][pPerm2] = 0;
            PlayerInfo[playerid][pAmmo2] = 0;
        }
        SetPlayerWeapons(playerid);
        format(msg, sizeof(msg), "Ai aruncat %s pe jos. Munitie: %d.", GetWeaponNameEx(weaponid), GetWeaponAmmo(playerid, weaponid));
        SCM(playerid, COLOR_GREEN2, msg);
        format(msg, sizeof(msg), "a aruncat %s pe jos.", GetWeaponNameEx(weaponid));
        SetPlayerBubble(playerid, msg);
    }
    return 1;
}

CMD:grabgun(playerid, params[])
{
    new dropid = GetClosestDroppedGun(playerid);
    if(dropid == -1) return SCM(playerid, COLOR_LIGHTRED, "Nu este nici o arma pe langa tine.");
    new weaponid = WeaponDropInfo[dropid][gunID];
    if(!CopDuty{playerid} && !SwatDuty{playerid})
    {
        if(IsMeleeWeapon(weaponid) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Slotul Melee este ocupat");
        if(IsPrimaryWeapon(weaponid) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Slotul Primar este ocupat.");
        if(IsSecondaryWeapon(weaponid) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Slotul Secundar este ocupat.");
        new ammo = WeaponDropInfo[dropid][gunAmmo];
        if(IsMeleeWeapon(weaponid))
        {
            GiveMeleeWeapon(playerid, weaponid);
        }
        if(IsPrimaryWeapon(weaponid))
        {
            GivePermWeapon(playerid, 2, weaponid, ammo);
        }
        if(IsSecondaryWeapon(weaponid))
        {
            GivePermWeapon(playerid, 3, weaponid, ammo);
        }
        SetPlayerWeapons(playerid);
        format(msg, sizeof(msg),"Ai luat %s de pe jos. Munitie: %d.", GetWeaponNameEx(weaponid), ammo);
        SCM(playerid, COLOR_GREEN2, msg);
    }
    else
    {
        format(msg, sizeof(msg), "Ai luat de pe jos o arma (%s).", GetWeaponNameEx(weaponid));
        SCM(playerid, COLOR_WHITE, msg);
    }
    format(msg, sizeof(msg), "a ridicat un/o %s de pe jos.", GetWeaponNameEx(weaponid));
    SetPlayerBubble(playerid, msg);
    DestroyDynamicObject(WeaponDropInfo[dropid][gunObject]);
    WeaponDropInfo[dropid][gunID] = 0;
    WeaponDropInfo[dropid][gunAmmo] = 0;
    WeaponDropInfo[dropid][gunDropped] = 0;
    WeaponDropInfo[dropid][gunPosX] = 0.0;
    WeaponDropInfo[dropid][gunPosY] = 0.0;
    WeaponDropInfo[dropid][gunPosZ] = 0.0;
    return 1;
}

CMD:setchannel(playerid, params[])
{
    new channelid,slot;
    if(sscanf(params,"dd",channelid,slot)) return SyntaxMSG(playerid, "/setchannel [channel-id] [slot]");
    if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "Nu ai un radio.");
    if(slot < 1 || slot > MAX_RADIO_SLOTS-1) return SCMEx(playerid, COLOR_GREY, "Slot invalid, 1-%d", MAX_RADIO_SLOTS-1);
    if(channelid < 1 || channelid > MAX_RADIO_CHANNELS) return SCM(playerid, COLOR_LIGHTRED, "ERROR: Acest canal nu exista.");
    if(GetChannelFromSlot(playerid, slot) == channelid) return SCM(playerid, COLOR_GREY, "Esti deja pe acest canal si pe acest slot.");
    if(channelid == 911 && PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "Radioul tau nu suporta acest canal");
    if(RadiosInfo[channelid][radioOn] == 0) return SCM(playerid, COLOR_GREY, "Acest canal nu exista, suna la 1000 pentru a inchiria unul.");
    format(msg, sizeof(msg), "Radio Channel Set [CH: %d, Slot: %d]", channelid, slot);
    SCM(playerid, COLOR_GREEN2, msg);
    SetPlayerChannel(playerid, channelid, slot);
    PlayerInfo[playerid][pSlot] = slot;
    if(RadiosInfo[channelid][radioOn] == 1)
    {
        SCM(playerid, COLOR_WHITE, "Warning: Acesta nu este un canal public, cineva il detine.");
    }
    if(RadiosInfo[channelid][radioProtected] == 1)
    {
        PlayerInfo[playerid][pAuthed][slot] = 0;
        SCM(playerid, COLOR_WHITE, "Warning: Acest canal este criptat, este nevoie sa te autentifici /auth.");
    }
    else
    {
        PlayerInfo[playerid][pAuthed][slot] = 1;
    }
    return 1;
}

CMD:setslot(playerid, params[])
{
    new slot;
    if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/setslot [slot-id]");
    if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "Nu ai un radio.");
    if(slot < 1 || slot > MAX_RADIO_SLOTS-1) return SCMEx(playerid, COLOR_GREY, "Slot invalid, 1-%d", MAX_RADIO_SLOTS-1);
    SCMEx(playerid, COLOR_GREEN2, "Radio Slot Set [Slot: %d]", slot);
    SetRadioSlot(playerid, slot);
    return 1;
}

CMD:part(playerid, params[])
{
    new slot = GetPlayerSlot(playerid);
    new channel = GetChannelFromSlot(playerid, slot);
    if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "Nu ai un radio.");
    if(slot < 1 || slot > MAX_RADIO_SLOTS-1) return SCM(playerid, COLOR_GREY, "Nu ai un slot selectat.");
    if(channel == 0) return SCM(playerid, COLOR_GREY, "Nu esti pe un canal.");
    SCMEx(playerid, COLOR_GREEN2, "Ai parasit frecventa radio [CH: %d, Slot: %d]", channel, slot);
    ResetPlayerChannel(playerid, slot);
    return 1;
}

CMD:auth(playerid, params[])
{
    new pass[128];
    if(sscanf(params,"s[128]",pass)) return SyntaxMSG(playerid, "/auth [channel password]");
    if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "Nu ai un radio.");
    new slot = GetPlayerSlot(playerid);
    new channel = GetChannelFromSlot(playerid, slot);
    if(channel == 0) return RadioMSG(playerid, "Nu ai setat o frecventa.");
    if(RadiosInfo[channel][radioProtected] == 0) return SCM(playerid, COLOR_GREY, "Acest canal nu este criptat.");
    if(PlayerInfo[playerid][pAuthed][slot] == 1) return RadioMSG(playerid, "Ai deja autorizatie pentru acest canal.");
    if(!AuthPassCorrect(channel, pass)) return RadioMSG(playerid, "Parola invalida.");
    format(msg, sizeof(msg), "Ai fost autorizat sa folosesti aceasta frecventa. Parola: %s.", pass);
    RadioMSG(playerid, msg);
    PlayerInfo[playerid][pAuthed][slot] = 1;
    return 1;
}

CMD:radio(playerid, params[]) return cmd_r(playerid, params);
CMD:r(playerid, params[])
{
    new text[128];
    new slot = GetPlayerSlot(playerid);
    new channel = GetChannelFromSlot(playerid, slot);
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/r)adio [text]");
    if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "Nu ai un radio.");
    if(channel == 0) return RadioMSG(playerid, "Nu ai setata o frecventa.");
    if(RadiosInfo[channel][radioProtected] == 1)
    {
        if(PlayerInfo[playerid][pAuthed][slot] == 0) return SCM(playerid, COLOR_LIGHTRED, "Acest canal este criptat, foloseste `/setauth`.");
    }
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "**[CH: %d S: %d] %s: %.*s ...", channel, slot, GetNameWithMask(playerid), pos, text);
        SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
        format(msg, sizeof(msg), "  ... %s", text[pos]);
        SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
    }
    else
    {
        format(msg, sizeof(msg), "**[CH: %d S: %d] %s: %s", channel, slot, GetNameWithMask(playerid), text);
        SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
    }
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "(Radio) %s spune: %.*s ...", GetNameWithMask(playerid), pos, text);
        SendProxRadioMessage(playerid, msg);
        format(msg, sizeof(msg), " ... %s", text[pos]);
        SendProxRadioMessage(playerid, msg);
    }
    else
    {
        format(msg, sizeof(msg), "(Radio) %s spune: %s", GetNameWithMask(playerid), text);
        SendProxRadioMessage(playerid, msg);
    }
    return 1;
}

CMD:channellist(playerid, params[])
{
    new slot = GetPlayerSlot(playerid);
    new channel = GetChannelFromSlot(playerid, slot);
    foreach(new i : Player)
    {
        SCMEx(playerid, COLOR_GREEN2, "PLAYERI CONECTATI LA CANALUL %d:", channel);
        if(PlayerInfo[i][pChannels][1] == channel || PlayerInfo[i][pChannels][2] == channel || PlayerInfo[i][pChannels][3] == channel)
        {
            SCMEx(playerid, COLOR_GREY, "(ID: %d) %s", i, GetName(i));
        }
    }
    return 1;
}

CMD:rlow(playerid, params[])
{
    new text[128];
    new slot = GetPlayerSlot(playerid);
    new channel = GetChannelFromSlot(playerid, slot);
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/r)adio [text]");
    if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "Nu ai un radio.");
    if(channel == 0) return RadioMSG(playerid, "Nu ai setat o frecventa.");
    if(RadiosInfo[channel][radioProtected] == 1)
    {
        if(PlayerInfo[playerid][pAuthed][slot] == 0) return SCM(playerid, COLOR_LIGHTRED, "Acest canal este criptat, foloseste `/setauth`.");
    }
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "**[CH: %d S: %d] %s: %.*s ...", channel, slot, GetNameWithMask(playerid), pos, text);
        SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
        format(msg, sizeof(msg), " ... %s", text[pos]);
        SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
    }
    else
    {
        format(msg, sizeof(msg), "**[CH: %d S: %d] %s: %s", channel, slot, GetNameWithMask(playerid), text);
        SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
    }
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "(Radio) %s spune (incet): %.*s ...", GetNameWithMask(playerid), pos, text);
        SendLowProxRadioMessage(playerid, msg);
        format(msg, sizeof(msg), " ... %s", text[pos]);
        SendLowProxRadioMessage(playerid, msg);
    }
    else
    {
        format(msg, sizeof(msg), "(Radio) %s spune (incet): %s", GetNameWithMask(playerid), text);
        SendLowProxRadioMessage(playerid, msg);
    }
    return 1;
}

CMD:mask(playerid, params[])
{
    if(PlayerInfo[playerid][pMask] != 1 && !Mask{playerid} && !CopDuty{playerid}) return SCM(playerid, COLOR_FADE5, "Nu ai o masca.");
    if(!maskOn{playerid})
    {
        GameTextForPlayer(playerid, "~h~~b~Ti-ai pus masca!", 4000, 4);
        maskOn{playerid} = true;
//      SetIntVar(playerid, "MaskID", randomEx(10000, 99999));
        ShowPlayerName(playerid, false);
    }
    else
    {
        GameTextForPlayer(playerid, "~h~~b~Ti-ai scos masca!", 4000, 4);
        maskOn{playerid} = false;
        ShowPlayerName(playerid, true);
    }
    return 1;
}

CMD:buyclothes(playerid, params[])
{
    if(BizInfo[BizEntered[playerid]][bizType] == 5)
//    if(!PlayerToPoint(3.0, playerid, 207.5281,-100.9595,1005.2578)) return SCM(playerid, COLOR_LIGHTBLUE, "Nu esti la casa de marcat.");
    if(GetPlayerMoney(playerid) < 500) return SCM(playerid, -1, "Nu ai suficienti bani!");
    PutPlayer(playerid, 217.8763, -98.5028, 1005.2578);
    SetPlayerFacingAngle(playerid, 87.9392);
    SetPlayerCameraPos(playerid, 212.6505, -98.5601, 1006.0);
    SetPlayerCameraLookAt(playerid, 217.8763, -98.5028, 1005.2578);
    FreezePlayer(playerid);
    SCM(playerid, COLOR_GREY, "Apasa pe Click-urile de la mouse pentru a cauta prin skin-uri");
    SCM(playerid, COLOR_GREY, "HINT: /done ca sa cumperi.");
    SCM(playerid, COLOR_GREY, "HINT: /stop ca sa parasesti magazinul.");
    SetIntVar(playerid, "SkinBuying", 1);
    SetIntVar(playerid, "BrowsingSkins", 1);
    ShowTextDraw(playerid, ClothesText);
    return 1;
}

CMD:done(playerid, params[])
{
    if(GetIntVar(playerid, "BrowsingSkins") == 1)
    {
        PutPlayer(playerid, 207.576, -100.983, 1005.26);
        SetCameraBehindPlayer(playerid);
        UnFreezePlayer(playerid);
        ServerMSG(playerid, "Ai cumparat noile haine cu $100.");
        SetSkin(playerid, GetIntVar(playerid, "SkinBuying"));
        GiveCash(playerid, -100);
        BizInfo[BizEntered[playerid]][bizCash] += 100;
        RemoveVar(playerid, "BrowsingSkins");
        RemoveVar(playerid, "SkinBuying");
        SkinSlot[playerid] = 0;
        HideTextDraw(playerid, ClothesText);

    }
    return 1;
}

CMD:stopanim(playerid, params[])
{
    if(PlayerIsWounded(playerid)) return 1;
    StopPlayerAnims(playerid);
    if(PlayerInCar(playerid))
    {
        PutPlayerInOldCar(playerid);
    }
    return 1;
}

forward TowCar(playerid);
public TowCar(playerid)
{
    new veh = PlayerInfo[playerid][pCarKey];
    GiveCash(playerid, -1500);
    SCM(playerid, COLOR_YELLOWG, "Vehiculul a fost tractat.");
    SetVehiclePos(veh,VehicleInfo[veh][carParkX],VehicleInfo[veh][carParkY],VehicleInfo[veh][carParkZ]);
    VehicleEngine(veh, false);
    return 1;
}

forward ColorCar(playerid);
public ColorCar(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
    new dealerid = GetClosestDealerShip(playerid);
    if(dealerid != -1)
    {
        ChangeVehicleColor(vehicle, VehColor1{playerid}, VehColor2{playerid});
        VehicleInfo[vehicle][carColor1] = VehColor1{playerid};
        VehicleInfo[vehicle][carColor2] = VehColor2{playerid};
        SCM(playerid, COLOR_GREEN2, "Ai schimbat culoarea masinii cu succes pentru $1500.");
        GiveCash(playerid, -1000);
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `color1` = %d, `color2` = %d WHERE `owner` = '%s' AND `slot` = %d", VehColor1{playerid}, VehColor2{playerid}, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else
    {
        SCM(playerid, COLOR_FADE2, "Te-ai indepartat prea mult de dealership.");
    }
    return 1;
}

//====================================Vehicles====================================//
CMD:givedonatorvehicle(playerid, params[])
{
    new pid, vname[64], veh;
    if(sscanf(params, "is[32]", pid, vname)) return SyntaxMSG(playerid, "/givedonatorvehicle [playerid] [vehicle name (/donatecarlist)]");
    for(new i=0;i<sizeof(DonateCarsList);i++)
    {
        if(CompareStrings(vname, DonateCarsList[i][dName])) { veh = DonateCarsList[i][dModel]; }
    }
    new slot = GetNextPlayerVehSlot(playerid);
    new Float:ParkX, Float:ParkY, Float:ParkZ;
    ParkX = PlayerPosX(playerid);
    ParkY = PlayerPosY(playerid);
    ParkZ = PlayerPosZ(playerid);
    PlayerInfo[pid][pCarKey] = CreateVehicle(veh, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 0.0, 1, 1, -1);
    VehicleInfo[PlayerInfo[pid][pCarKey]][carModel] = veh;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carColor1] = 1;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carColor2] = 1;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carParkX] = PlayerPosX(playerid);
    VehicleInfo[PlayerInfo[pid][pCarKey]][carParkY] = PlayerPosY(playerid);
    VehicleInfo[PlayerInfo[pid][pCarKey]][carParkZ] = PlayerPosZ(playerid);
    VehicleInfo[PlayerInfo[pid][pCarKey]][carParkA] = 0.0;
    format(VehicleInfo[PlayerInfo[pid][pCarKey]][carPlate], 128, "%s%d", FirstNameLetters(GetName(pid)), randomEx(10000, 99999));
    format(VehicleInfo[PlayerInfo[pid][pCarKey]][carOwner], 128, "%s", GetName(pid));
    VehicleInfo[PlayerInfo[pid][pCarKey]][carOwned] = 1;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carSpawned] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carOn] = 1;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carAlarm] = 5;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carLock] = 5;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carImmob] = 5;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carInsurances] = 9999;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carDestroyed] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carGps] = 1;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carOwnerSlot] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carFuel] = 100;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carRegistered] = 1;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carBroken] = 0;
    for(new i = 1; i < MAX_VEHICLE_WEAPONS; i++)
    {
        VehicleInfo[PlayerInfo[pid][pCarKey]][carTrunkWep][i] = 0;
        VehicleInfo[PlayerInfo[pid][pCarKey]][carTrunkAmmo][i] = 0;
    }
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][0] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][1] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][2] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][3] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][4] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][5] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][6] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][7] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][8] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][9] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][10] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][11] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][12] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComponent][13] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carPaintJob] = 3;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carRadio] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carDupKey] = randomEx(1234567, 9999999);
    VehicleInfo[PlayerInfo[pid][pCarKey]][carComps] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carFaction] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carPanels] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carDoors] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carLights] = 0;
    VehicleInfo[PlayerInfo[pid][pCarKey]][carTires] = 0;
    for(new i = 1; i < MAX_DRUGS; i++)
    {
        VehicleInfo[PlayerInfo[pid][pCarKey]][carDrug][i] = 0;
        VehicleInfo[PlayerInfo[pid][pCarKey]][carDrugAmount][i] = 0;
    }
    for(new i = 0; i < MAX_CAR_TICKETS; i++)
    {
        VehicleInfo[PlayerInfo[pid][pCarKey]][carTicket][i] = 0;
    }
    PlayerInfo[pid][pVehicles]++;
    //======================================================================================
    format(query, sizeof(query), "INSERT INTO `ownedvehicles` (model, color1, color2, parkx, parky, parkz, parka, plate, owner, owned, slot) VALUES (%d, %d, %d, %f, %f, %f, %f, '%s', '%s', %d, %d)",
    veh, 1, 1, ParkX, ParkY, ParkZ, 0.0, VehicleInfo[PlayerInfo[pid][pCarKey]][carPlate], GetName(pid), 1, slot);
    mysql_tquery(dbHandle, query, "", "");
    //============================================================================================
	#if defined debugOn
		printf(query);
	#endif
    //======================================================================================
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = '%s' WHERE `owner` = '%s' AND `slot` = %d", "0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0", GetName(pid),slot);
    mysql_function_query(dbHandle, query, false, "", "");
	#if defined debugOn
		printf(query);
	#endif
    //==========================================================================
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `dupkey` = %d WHERE `owner` = '%s' AND `slot` = %d", VehicleInfo[PlayerInfo[pid][pCarKey]][carDupKey], GetName(pid), slot);
    mysql_function_query(dbHandle, query, false, "", "");
    //==========================================================================
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `tickets` = '%s' WHERE `owner` = '%s' AND `slot` = %d", "0|0|0|0|0|0|0|0|0|0", GetName(pid), slot);
    mysql_function_query(dbHandle, query, false, "", "");
    //======================================================================================
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `drugs` = '%s' WHERE `owner` = '%s' AND `slot` = %d", "0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0", GetName(pid), slot);
    mysql_function_query(dbHandle, query, false, "", "");
    //=========================================================================================
    format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[pid][pVehicles], GetName(pid));
    mysql_function_query(dbHandle, query, false, "", "");
    //======================================================================================
    PlayerInfo[pid][pVehs][slot] = 1;
    DestoryCar(PlayerInfo[pid][pCarKey]);
    PlayerInfo[pid][pCarKey] = 0;
    CheckOwnedVehicles(pid);
    CarModel2[pid] = -1;
    SCMEx(playerid, COLOR_GREY, "I-ai dat lui %s o masina de donator (%s).", GetName(pid), vname);
    SCMEx(pid, COLOR_GREY, "%s ti-a dat o masina de donator (%s).", GetName(playerid), vname);
    return 1;
}

CMD:donatecarlist(playerid, params[])
{
    SCM(playerid, COLOR_GREEN, "Lista masinilor de donatori:");
    new i;
    for(i=0;i<sizeof(DonateCarsList);i++)
    {
        SCMEx(playerid, COLOR_WHITE, "%d) '%s' - %d euro", i, DonateCarsList[i][dName], DonateCarsList[i][dPrice]);
    }
    return 1;
}

CMD:dropkey(playerid, params[])
{
    if(PlayerInfo[playerid][pSpareKey] == 0) return SCM(playerid, COLOR_GREEN2, "Nu ai o cheie.");
    SCM(playerid, COLOR_INFO, "Ai aruncat cheile pe jos.");
    PlayerInfo[playerid][pSpareKey] = 0;
    return 1;
}

CMD:viewcars(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    new pid;
    if(sscanf(params, "i", pid)) return SyntaxMSG(playerid, "/viewcars [player id]");
    if(PlayerInfo[pid][pVehicles] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu detine nici un vehicul.");
    SCMEx(playerid, COLOR_GREEN2, "______________Vehiculele tale(%d)______________", PlayerInfo[pid][pVehicles]);
    for(new i = 1; i <= PlayerInfo[pid][pVehicles]; i++)
    {
        if(VehicleStatus[pid][i][carOn] == 1)
        {
            if(FindVehicleByPlate(VehicleStatus[pid][i][carPlate]))
            {
                SCMEx(playerid, COLOR_OOC, "Vehicul %d: %s, Incuietoare[%d], Alarma[%d], Imobilizare[%d], Asigurari[%d], Distrugeri[%d], Pretul Asigurarii[$%d]", i, VehicleNames[VehicleStatus[pid][i][carModel]-400],VehicleStatus[pid][i][carLock],VehicleStatus[pid][i][carAlarm],VehicleStatus[pid][i][carImmob],VehicleStatus[pid][i][carInsurances],VehicleStatus[pid][i][carDestroyed],GetInsurancePrice2(pid, i));
            }
            else
            {
                SCMEx(playerid, COLOR_GREY, "Vehicul %d: %s, Incuietoare[%d], Alarma[%d], Imobilizare[%d], Asigurari[%d], Distrugeri[%d], Pretul Asigurarii[$%d]", i, VehicleNames[VehicleStatus[pid][i][carModel]-400],  VehicleStatus[pid][i][carLock],VehicleStatus[pid][i][carAlarm],VehicleStatus[pid][i][carImmob],VehicleStatus[pid][i][carInsurances],VehicleStatus[pid][i][carDestroyed],GetInsurancePrice2(pid, i));
            }
        }
    }
    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
    if(handbrake[vehicleid][hOn] == 1)
    {
        new Float:X, Float:Y, Float:Z, Float:A;
        GetVehiclePos(vehicleid, X, Y, Z);
        GetVehicleZAngle(vehicleid, A);
        if(X != handbrake[vehicleid][hPosX] || Y != handbrake[vehicleid][hPosY] || Z != handbrake[vehicleid][hPosZ] || A != handbrake[vehicleid][hAngle])
        {
            SetVehiclePos(vehicleid, handbrake[vehicleid][hPosX], handbrake[vehicleid][hPosY], handbrake[vehicleid][hPosZ]);
            SetVehicleZAngle(vehicleid, handbrake[vehicleid][hAngle]);
        }
    }
    if(VehicleInfo[vehicleid][carImpound])
    {
        new Float:X, Float:Y, Float:Z;
        GetVehiclePos(vehicleid, X, Y, Z);
        if(X != VehicleInfo[vehicleid][carParkX] || Y != VehicleInfo[vehicleid][carParkY] || Z != VehicleInfo[vehicleid][carParkZ])
        {
            SetVehiclePos(vehicleid, VehicleInfo[vehicleid][carParkX], VehicleInfo[vehicleid][carParkY], VehicleInfo[vehicleid][carParkZ]);
        }
    }
    return 1;
}

forward CheckHandBrake(veh);
public CheckHandBrake(veh)
{
    if(handbrake[veh][hOn] == 1) return 1;
    else if(handbrake[veh][hOn] == 0) return 0;
    return 0;
}

forward HandBrake(veh, toggle);
public HandBrake(veh, toggle)
{
    new Float:X, Float:Y, Float:Z, Float:A;
    GetVehiclePos(veh, X, Y, Z);
    GetVehicleZAngle(veh, A);
    if(toggle == 1)
    {
        handbrake[veh][hOn] = 1;
        handbrake[veh][hPosX] = X;
        handbrake[veh][hPosY] = Y;
        handbrake[veh][hPosZ] = Z;
        handbrake[veh][hAngle] = A;
    }
    else if(toggle == 0)
    {
        handbrake[veh][hOn] = 0;
        handbrake[veh][hPosX] = 0;
        handbrake[veh][hPosY] = 0;
        handbrake[veh][hPosZ] = 0;
        handbrake[veh][hAngle] = 0;
    }
    return 1;
}

CMD:handbrake(playerid,hPosXparams[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return NotInCarMSG(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti soferul vehiculului.");
    new veh = GetPlayerVehicleID(playerid);
    if(handbrake[veh][hOn] == 1)
    {
        HandBrake(veh, 0);
        format(msg, sizeof(msg), "trage frana de mana a vehiculului %s.", VehicleNames[GetVehicleModel(veh)-400]);
        ActionMessage(playerid, 20.0, msg);
    }
    else if(handbrake[veh][hOn] == 0)
    {
        HandBrake(veh, 1);
        format(msg, sizeof(msg), "ridica frana de mana a vehiculului %s.", VehicleNames[GetVehicleModel(veh)-400]);
        ActionMessage(playerid, 20.0, msg);
    }
    return 1;
}

CMD:v(playerid, params[]) return cmd_vehicle(playerid, params);
CMD:vehicle(playerid, params[])
{
    new option[24], secoption, thirdoption, fourthoption;
    if(gettime() - GetIntVar(playerid, "VehicleDelay") < 3) return SCM(playerid, COLOR_INFO, "Te rog asteapta 3 secunde dupa fiecare comanda.");
    SetIntVar(playerid, "VehicleDelay", gettime());
    if(sscanf(params, "s[24]D(-1)D(-1)D(-1)", option, secoption, thirdoption, fourthoption))
    {
        SCM(playerid, COLOR_GREEN2, "_____________________________________________");
        SyntaxMSG(playerid, "(/v)ehicle [actiune]");
        SCM(playerid, COLOR_GRAD2, "** ACTIONS ** list, get, park, sell, accept, refuse, lock, stats, color, faction, hood");
        SCM(playerid, COLOR_GRAD2, "** ACTIONS ** buylock, buyalarm, buyimmob, buyinsurance, buygps, buypark, tow");
        SCM(playerid, COLOR_GRAD2, "** ACTIONS ** find, duplicatekey, lights, sell, refuse, buy, mod, tickets, payticket");
        SCM(playerid, COLOR_GRAD2, "** DELETE ** scrap (asceasta comanda sterge vehiculul permanent)");
        SCM(playerid, COLOR_GREEN2, "_____________________________________________");
        return 1;
    }
    if(!strcmp(option, "list", true))
    {
        if(PlayerInfo[playerid][pVehicles] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu detii nici un vehicul.");
        SCMEx(playerid, COLOR_GREEN2, "______________Vehiculele tale(%d)______________", PlayerInfo[playerid][pVehicles]);
        for(new i = 1; i <= PlayerInfo[playerid][pVehicles]; i++)
        {
            if(VehicleStatus[playerid][i][carOn] == 1)
            {
                if(FindVehicleByPlate(VehicleStatus[playerid][i][carPlate]))
                    SCMEx(playerid, COLOR_OOC, "Vehicul %d: %s, Incuietoare[%d], Alarma[%d], Imobilizare[%d], Asigurari[%d], Distrugeri[%d], Pretul Asigurarii[$%d]", i, VehicleNames[VehicleStatus[playerid][i][carModel]-400],VehicleStatus[playerid][i][carLock],VehicleStatus[playerid][i][carAlarm],VehicleStatus[playerid][i][carImmob],VehicleStatus[playerid][i][carInsurances],VehicleStatus[playerid][i][carDestroyed],GetInsurancePrice2(playerid, i));
                else
                    SCMEx(playerid, COLOR_GREY, "Vehicul %d: %s, Incuietoare[%d], Alarma[%d], Imobilizare[%d], Asigurari[%d], Distrugeri[%d], Pretul Asigurarii[$%d]", i, VehicleNames[VehicleStatus[playerid][i][carModel]-400],  VehicleStatus[playerid][i][carLock],VehicleStatus[playerid][i][carAlarm],VehicleStatus[playerid][i][carImmob],VehicleStatus[playerid][i][carInsurances],VehicleStatus[playerid][i][carDestroyed],GetInsurancePrice2(playerid, i));
            }
        }
        return 1;
    }
    if(!strcmp(option, "tickets", true))
    {
        new vehicle = GetPlayerVehicleID(playerid), string[500];
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        for(new i = 0; i < MAX_CAR_TICKETS; i++)
        {
            if(VehicleInfo[vehicle][carTicket][i] != 0)
                format(string, sizeof(string), "%s\n(Ticket %d) In valoare de: $%d.", string, i, VehicleInfo[vehicle][carTicket][i]);
            else
                format(string, sizeof(string), "%s\nFara.", string, i, VehicleInfo[vehicle][carTicket][i]);
        }
        ShowDialog(playerid, Show:<CarTickets>, DIALOG_STYLE_LIST, "Amenzile vehiculului", string, "Ok", "Iesi");
        return 1;
    }
    if(!strcmp(option, "tow", true)) //27600
    {
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(GetCash(playerid) < 1500) return SCM(playerid, COLOR_LIGHTRED, "Remorcarea masinii costa $1,500.");
        format(msg, sizeof(msg), "~y~Vehiculul este in proces de tractare la locul de parcare... ~r~%d", GetIntVar(playerid, "TowingCar"));
        GameTextForPlayer(playerid, msg, 5000, 4);
        SetTimerEx("TowCar", 5000, false, "i", playerid);
        return 1;
    }
    if(!strcmp(option, "faction", true))
    {
        if(!isLeader(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti lider!");
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        if(PlayerInfo[playerid][pFaction] == CIVILIAN) return SCM(playerid, COLOR_GREY, "Nu esti intr-o factiune.");
        VehicleInfo[vehicle][carFaction] = PlayerInfo[playerid][pFaction];
        SCMEx(playerid, COLOR_GREEN2, "Masina ta a fost pusa pe factiunea [%d] - %s", PlayerInfo[playerid][pFaction], Factions[PlayerInfo[playerid][pFaction]][fName]);
        return 1;
    }
    if(!strcmp(option, "payticket", true))
    {
        new vehicle = GetPlayerVehicleID(playerid), slot, id;
        if(sscanf(params, "{s[16]}dd", slot, id)) return SyntaxMSG(playerid, "/v payticket [slot(0-9)] [OfficerID]");
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        if(VehicleInfo[vehicle][carTicket][slot] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu ai un tichet in acest slot.");
        if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Imposibil.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(PlayerInfo[id][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "Acest player nu este un ofiter.");
        format(msg, sizeof(msg), "Ai platit amenda de pe slotul %d, Pret: $%d Ofiter %s.", slot, VehicleInfo[vehicle][carTicket][slot], GetNameWithMask(id));
        SCM(playerid, COLOR_LIGHTBLUE, msg);
        format(msg, sizeof(msg), "%s a platit amenda. Pret: $%d.", GetNameWithMask(playerid), VehicleInfo[vehicle][carTicket][slot]);
        SCM(id, COLOR_LIGHTBLUE, msg);
        GiveCash(playerid, -VehicleInfo[vehicle][carTicket][slot]);
        GiveCash(id, VehicleInfo[vehicle][carTicket][slot]);
        VehicleInfo[vehicle][carTicket][slot] = 0;
        return 1;
    }
    if(!strcmp(option, "mod", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti langa dealership.");
        ShowDialog(playerid, Show:<ModDialog>, DIALOG_STYLE_LIST, "Vehicle Modification", "Wheels\nSpoilers\nScoops\nRoofs\nNitro\nPaintJobs\nSideskirts\nExhausts\nHydraulics $10,000\nBoomBox $200", "Select", "Anuleaza");
        return 1;
    }
    if(!strcmp(option, "buy", true))
    {
        new dealerid = GetClosestDealerShip(playerid);
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti langa dealership.");
        if(GetOwnedVehicles(playerid) == MAX_OWNED_VEHICLES-1) return SCM(playerid, COLOR_GRAY, "Ai atins nivelul maxim de vehicule.");
        ShowBuyableCars(playerid);
    }
    if(!strcmp(option, "get", true))
    {
        new slot;
        if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/v get [slot(1-5)]");
        if(slot < 1 || slot > MAX_OWNED_VEHICLES) return SCM(playerid, -1, "Slot invalid.");
        if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Ai spawnat deja un vehicul.");
        LoadVehicleFromSlot(playerid, slot);
        return 1;
    }
    if(!strcmp(option, "park", true))
    {
        new veh = PlayerInfo[playerid][pCarKey];
        if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "Nu detii acest vehicul.");
        if(!PlayerToPoint(5.0, playerid, VehicleInfo[veh][carParkX],VehicleInfo[veh][carParkY],VehicleInfo[veh][carParkZ]))
        {
            SCM(playerid, COLOR_WHITE, "Nu esti langa locul de parcare!");
            SetCheckPoint(playerid, FINEVEH, VehicleInfo[veh][carParkX],VehicleInfo[veh][carParkY],VehicleInfo[veh][carParkZ], 6.0);
            return 1;
        }
        new Float:hp;
        GetVehicleHealth(veh, hp);
        if(hp < 360.0) return SCM(playerid, COLOR_LIGHTRED, "Masina este prea avariata PENTRU A O PARCA.");
        SaveVehicle(veh);
        VehicleInfo[veh][carSpawned] = 0;
        VehicleInfo[veh][carOwned] = 0;
        StopCarBoomBox(veh);
        format(msg, sizeof(msg), "Masina ta a fost parcata. (%s)", VehicleNames[VehicleInfo[veh][carModel]-400]);
        SCM(playerid, COLOR_GREEN2, msg);
        DestoryCar(veh);
        PlayerInfo[playerid][pCarKey] = 0;
        PlayerInfo[playerid][pVehSlot] = 0;
        return 1;
    }
    if(!strcmp(option, "buypark", true))
    {
        new veh = PlayerInfo[playerid][pCarKey];
        new vehicle = GetPlayerVehicleID(playerid);
        new house = PlayerInfo[playerid][pHouseKey];
        if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new Float:X, Float:Y, Float:Z, Float:A;
        GetVehiclePos(vehicle, X, Y, Z);
        GetVehicleZAngle(vehicle, A);
        VehicleInfo[vehicle][carParkX] = X;
        VehicleInfo[vehicle][carParkY] = Y;
        VehicleInfo[vehicle][carParkZ] = Z;
        VehicleInfo[vehicle][carParkA] = A;
        if(house != -1 && PlayerToPoint(30.0, playerid, HouseInfo[house][hEntranceX], HouseInfo[house][hEntranceY], HouseInfo[house][hEntranceZ]))
        {
            SCM(playerid, COLOR_GREEN2, "Locul de parcare a fost schimbat (ZONA CASEI)");
            SCM(playerid, COLOR_GREEN2, "Poti folosi '/v park'.");
        }
        else if(GetCash(playerid) >= 50)
        {
            SCM(playerid, COLOR_GREEN2, "Locul de parcare a fost schimbat pentru $50.");
            SCM(playerid, COLOR_GREEN2, "Poti folosi '/v park'.");
            GiveCash(playerid, -50);
        }
        else
        {
            SCM(playerid, COLOR_GREEN2, "Locul de parcare costa $50.");
        }
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `parkx` = %f, `parky` = %f, `parkz` = %f, `parka` = %f WHERE `owner` = '%s' AND `slot` = %d",
        X, Y, Z, A, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
        return 1;
    }
    if(!strcmp(option, "buylock", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        new level;
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti la dealership.");
        if(sscanf(params, "{s[64]}d", level))
        {
            SyntaxMSG(playerid, "/v buylock [level]");
            SCM(playerid, COLOR_INFO, "Level-1: $15");
            SCM(playerid, COLOR_INFO, "Level-2: $35");
            SCM(playerid, COLOR_INFO, "Level-3: $55");
            SCM(playerid, COLOR_INFO, "Level-4: $75");
            SCM(playerid, COLOR_INFO, "Level-5: $95");
            return 1;
        }
        if(level < 1 || level > 5) return SCM(playerid, COLOR_INFO, "Incuietoarea poate fi intre 1 si 5!");
        if(level > VehicleInfo[vehicle][carLock]+1) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa cumperi incuietorile in ordine");
        if(VehicleInfo[vehicle][carLock] >= level)
        {
            format(msg, sizeof(msg), "You already own a lock level %d or more !", level);
            SCM(playerid, COLOR_LIGHTRED, msg);
            return 1;
        }
        new lockcost;
        if(level == 1)
        lockcost = 15;
        if(level == 2)
        lockcost = 35;
        if(level == 3)
        lockcost = 55;
        if(level == 4)
        lockcost = 75;
        if(level == 5)
        lockcost = 95;
        if(GetCash(playerid) < lockcost) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai cumparat cu succes incuietoare de level %d.", level);
        SCM(playerid, COLOR_INFO, msg);
        GiveCash(playerid, -lockcost);
        VehicleInfo[vehicle][carLock] = level;
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `lock` = %d WHERE `owner` = '%s' AND `slot` = %d", level, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
        UpdateVehicleStatus(playerid, vehicle);
        return 1;
    }
    if(!strcmp(option, "buyalarm", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        new level;
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti la dealership.");
        if(sscanf(params, "{s[64]}d", level))
        {
            SyntaxMSG(playerid, "/v buyalarm [level]");
            SCM(playerid, COLOR_INFO, "Level-1: $20");
            SCM(playerid, COLOR_INFO, "Level-2: $40");
            SCM(playerid, COLOR_INFO, "Level-3: $60");
            SCM(playerid, COLOR_INFO, "Level-4: $80");
            SCM(playerid, COLOR_INFO, "Level-5: $100");
            return 1;
        }
        if(level < 1 || level > 5) return SCM(playerid, COLOR_INFO, "Alarma poate fi intre nivelele 1 si 5 !");
        if(level > VehicleInfo[vehicle][carAlarm]+1) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa cumperi alarma in ordinea nivelelor.");
        if(VehicleInfo[vehicle][carAlarm] >= level)
        {
            format(msg, sizeof(msg), "Deja detii o alarma de nivel %d sau mai mult!", level);
            SCM(playerid, COLOR_LIGHTRED, msg);
            return 1;
        }
        new alarmcost;
        if(level == 1)
        alarmcost = 20;
        if(level == 2)
        alarmcost = 40;
        if(level == 3)
        alarmcost = 60;
        if(level == 4)
        alarmcost = 80;
        if(level == 5)
        alarmcost = 100;
        if(GetCash(playerid) < alarmcost) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai cumparat cu succes alarma de nivel %d.", level);
        SCM(playerid, COLOR_INFO, msg);
        GiveCash(playerid, -alarmcost);
        VehicleInfo[vehicle][carAlarm] = level;
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `alarm` = %d WHERE `owner` = '%s' AND `slot` = %d", level, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
        UpdateVehicleStatus(playerid, vehicle);
        return 1;
    }
    if(!strcmp(option, "buyimmob", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        new level;
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti la dealership.");
        if(sscanf(params, "{s[64]}d", level))
        {
            SyntaxMSG(playerid, "/v buyimmob [level]");
            SCM(playerid, COLOR_INFO, "Level-1: $9");
            SCM(playerid, COLOR_INFO, "Level-2: $18");
            SCM(playerid, COLOR_INFO, "Level-3: $27");
            SCM(playerid, COLOR_INFO, "Level-4: $36");
            SCM(playerid, COLOR_INFO, "Level-5: $45");
            return 1;
        }
        if(level < 1 || level > 5) return SCM(playerid, COLOR_INFO, "Imobilizarea trebuie sa fie intre 1 si 5 !");
        if(level > VehicleInfo[vehicle][carImmob]+1) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa cumperi imobilizarea in ordine.");
        if(VehicleInfo[vehicle][carImmob] >= level)
        {
            format(msg, sizeof(msg), "Deja detii o imobilizare de nivel %s sau mai mic!", level);
            SCM(playerid, COLOR_LIGHTRED, msg);
            return 1;
        }
        new immobcost;
        if(level == 1)
        immobcost = 9;
        if(level == 2)
        immobcost = 18;
        if(level == 3)
        immobcost = 27;
        if(level == 4)
        immobcost = 36;
        if(level == 5)
        immobcost = 45;
        if(GetCash(playerid) < immobcost) return NoCashMSG(playerid);
        format(msg, sizeof(msg), "Ai cumparat cu succes o imobilizare de level %d.", level);
        SCM(playerid, COLOR_INFO, msg);
        GiveCash(playerid, -immobcost);
        VehicleInfo[vehicle][carImmob] = level;
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `immob` = %d WHERE `owner` = '%s' AND `slot` = %d", level, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
        UpdateVehicleStatus(playerid, vehicle);
        return 1;
    }
    if(!strcmp(option, "duplicatekey", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new id;
        if(sscanf(params, "{s[64]}d", id)) return SyntaxMSG(playerid, "/v duplicatekey [playerid]");
        if(id == playerid) return ErrorMsg(playerid, "Nu-ti poti da o cheie singur.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(GetCash(playerid) < 750) return SCM(playerid, COLOR_LIGHTRED, "Duplicarea cheilor te costa $750.");
        if(PlayerInfo[id][pSpareKey] != 0) return SCM(playerid, COLOR_INFO, "Acest jucator are alta cheie, '/dropkey'");
        format(msg, sizeof(msg), "%s ti-a dat o copie a chielor lui de la masina.", GetNameWithMask(playerid));
        SCM(id, COLOR_INFO, msg);
        format(msg, sizeof(msg), "I-ai dat lui %s o copie a cheilor masinii tale.", GetNameWithMask(id));
        SCM(playerid, COLOR_INFO, msg);
        PlayerInfo[id][pSpareKey] = VehicleInfo[vehicle][carDupKey];
        GiveCash(playerid, -750);
        return 1;
    }
    if(!strcmp(option, "sell", true))
    {
        new vehicle = GetPlayerVehicleID(playerid), id, price;
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        if(sscanf(params, "{s[64]}ud", id, price)) return SyntaxMSG(playerid, "/v sell [playerid/PartOfName] [price]");
        if(price < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
        if(IsADonateCar(vehicle)) return SCM(playerid, COLOR_INFO, "Masinile de donator nu pot fi vandute.");
        if(id == playerid) return ErrorMsg(playerid, "Nu iti poti vinde tie insuti vehiculul.");
        if(PlayerInfo[id][pLevel] < 2) return SCM(playerid, -1, "Acest jucator nu are nivel 2!");
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(PlayerInfo[id][pCarKey] != 0) return SCM(playerid, COLOR_GRAD2, "Acest jucator deja are o masina spawnata.");
        if(GetOwnedVehicles(id) == MAX_OWNED_VEHICLES-1) return SCMEx(playerid, COLOR_GRAD2, "Acest jucator deja detine %d vehicule.", MAX_OWNED_VEHICLES);
        if(price < 0) return ErrorMsg(playerid, "Invalid price.");
        if(OfferSent[playerid] == 1) return ErrorMsg(playerid, "Nu poti trimite mai multe oferte in acelasi timp!");
        format(msg, sizeof(msg), "%s ti-a oferit un/o %s pentru $%d, foloseste '/v accept' sau '/v refuse'.", GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vehicle)-400], price);
        SCM(id, COLOR_YELLOW, msg);
        format(msg, sizeof(msg), "%s, Alarma[%d], Lock[%d], Immobilizer[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Insurance price[%d]",
        VehicleNames[GetVehicleModel(vehicle)-400],
        VehicleInfo[vehicle][carAlarm],
        VehicleInfo[vehicle][carLock],
        VehicleInfo[vehicle][carImmob],
        VehicleInfo[vehicle][carGps],
        VehicleInfo[vehicle][carInsurances],
        VehicleInfo[vehicle][carDestroyed],
        GetInsurancePrice(vehicle));
        SCM(id, COLOR_YELLOW, msg);
        format(msg, sizeof(msg), "ti-ai oferit %s lui %s pentru $%d.", VehicleNames[GetVehicleModel(vehicle)-400], GetNameWithMask(id), price);
        SCM(playerid, COLOR_GREEN2, msg);
        pToAccept[id] = playerid;
        vToAccept[id] = vehicle;
        prToAccept[id] = price;
        OfferSent[playerid] = 1;
        SetTimerEx("ResetOfferSent", 240000, false, "i", playerid);
        return 1;
    }
    if(!strcmp(option, "refuse", true))
    {
        new sid = pToAccept[playerid];
        if(pToAccept[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_LIGHTRED, "Nu ai nimic de acceptat");
        format(msg, sizeof(msg), "Ai refuzat masina %s a lui %s.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], GetNameWithMask(vToAccept[playerid]));
        SCM(playerid, COLOR_LIGHTRED, msg);
        format(msg, sizeof(msg), "%s ti-a refuzat masina %s.", GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
        SCM(pToAccept[playerid], COLOR_LIGHTRED, msg);
        OfferSent[sid] = 0;
        pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
        return 1;
    }
    if(!strcmp(option, "accept", true))
    {
        new slot = GetNextPlayerVehSlot(playerid);
        new sid = pToAccept[playerid];
        if(sid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_LIGHTRED, "Nu ai nimic de acceptat");
        if(GetOwnedVehicles(playerid) == MAX_OWNED_VEHICLES-1)
        {
            SCM(playerid, COLOR_YELLOWG, "Nu poti cumpara masina din cauza ca deja detii prea multe.");
            SCM(sid, COLOR_LIGHTRED, "Acest jucator nu are sloturi libere pentru vehicule .");
            pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
            return 1;
        }
        if(GetCash(playerid) >= prToAccept[playerid])
        {
            format(msg, sizeof(msg), "Ai acceptat %s lui %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], GetNameWithMask(sid), prToAccept[playerid]);
            SCM(playerid, COLOR_GREEN2, msg);
            format(msg, sizeof(msg), "%s ti-a acceptat %s pentru $%d.", GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
            SCM(sid, COLOR_GREEN2, msg);
            GiveCash(sid, prToAccept[playerid]);
            GiveCash(playerid, -prToAccept[playerid]);
            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
            PlayerInfo[sid][pCarKey] = 0;
            format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 128, "%s%d", FirstNameLetters(GetName(playerid)), randomEx(10000, 99999));
            format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], 128, "%s", GetName(playerid));

            PlayerInfo[playerid][pVehicles]++;
            PlayerInfo[sid][pVehicles]--;
            format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pVehicles], GetName(playerid));
            mysql_function_query(dbHandle, query, false, "", "");
            format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[sid][pVehicles], GetName(sid));
            mysql_function_query(dbHandle, query, false, "", "");

            format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s', `plate` = '%s', `slot` = %d WHERE `owner` = '%s' AND `id` = %d",
            VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], slot, GetName(sid), VehicleInfo[vToAccept[playerid]][carID]);
            mysql_function_query(dbHandle, query, false, "", "");
            PlayerInfo[playerid][pVehs][slot] = 1;

            new slot2 = PlayerInfo[pToAccept[playerid]][pVehSlot];
            PlayerInfo[sid][pVehs][slot2] = 0;
            ReAssignPlayerVehicles(sid);
            CheckOwnedVehicles(playerid);
            CheckOwnedVehicles(pToAccept[playerid]);
            pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
            OfferSent[sid] = 0;
        }
        else
        {
            SCM(playerid, COLOR_LIGHTRED, "Nu ai destui bani pentru asta.");
            SCM(pToAccept[playerid], COLOR_LIGHTRED, "Nu ai putut sa-ti vinzi masina fiindca celalalt jucator nu a avut destui bani!");
            pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
            OfferSent[sid] = 0;
        }
        return 1;
    }
    if(!strcmp(option, "lights", true))
    {
        if(!IsDriver(playerid)) return NotInCarMSG(playerid);
        new vehicleid = GetPlayerVehicleID(playerid);
        new param[7];
        GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
        if(param[1])
        {
            SetVehicleParamsEx(vehicleid,param[0],0,param[2],param[3],param[4],param[5],param[6]);
//          ActionMessage(playerid, 15.0, "opreste farurile vehiculului.");
            return 1;
        }
        else
        {
            SetVehicleParamsEx(vehicleid,param[0],1,param[2],param[3],param[4],param[5],param[6]);
//          ActionMessage(playerid, 15.0, "porneste farurile vehiculului.");
            return 1;
        }
    }
    if(!strcmp(option, "buygps", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti la dealership.");
        if(VehicleInfo[vehicle][carGps] == 1) return SCM(playerid, COLOR_LIGHTRED, "Your vehicle has a GPS already.");
        if(GetCash(playerid) < 350) return SCM(playerid, COLOR_INFO, "GPS costs $3,500.");
        SCM(playerid, COLOR_INFO, "You have succefully bought a GPS for $350.");
        GiveCash(playerid, -350);
        VehicleInfo[vehicle][carGps] = 1;
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `gps` = %d WHERE `owner` = '%s' AND `slot` = %d", 1, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
        UpdateVehicleStatus(playerid, vehicle);
        return 1;
    }
    if(!strcmp(option, "buyinsurance", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti la dealership.");
        if(VehicleInfo[vehicle][carInsurances] >= 5) return SCM(playerid, COLOR_INFO, "You already have 5 insurances on this vehicle.");
        new price = GetInsurancePrice(vehicle);
        if(GetCash(playerid) < price) NoCashMSG(playerid);
        GiveCash(playerid, -price);
        VehicleInfo[vehicle][carInsurances] += 1;
        format(msg, sizeof(msg), "You have succefully bought an insurance for $%d.", price);
        SCM(playerid, COLOR_GREEN2, msg);
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `insurances` = %d WHERE `owner` = '%s' AND `slot` = %d", VehicleInfo[vehicle][carInsurances], GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
        UpdateVehicleStatus(playerid, vehicle);
        return 1;
    }
    if(!strcmp(option, "color", true))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        new color1, color2;
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "Nu detii acest vehicul.");
        new dealerid = GetClosestDealerShip(playerid);
        if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Nu esti la dealership.");
        if(sscanf(params, "{s[64]}dd", color1, color2)) return SyntaxMSG(playerid, "/v colour [color 1] [color 2]");
        if(color2 < 0 || color2 > 255 || color1 < 0 || color1 > 255) return SCM(playerid, COLOR_LIGHTRED, "Culoare invalida (0-255)!");
        if(GetCash(playerid) < 1000) SCM(playerid, COLOR_INFO, "Schimbarea culorii costa $1000.");
        VehColor1{playerid} = color1;
        VehColor2{playerid} = color2;
        format(msg, sizeof(msg), "~n~~n~~n~~n~~n~~n~~n~~b~Se vopseste, dureaza 10 secunde...");
        GameTextForPlayer(playerid, msg, 10000, 3);
        SetTimerEx("ColorCar", 10000, false, "i", playerid);
        return 1;
    }
    if(!strcmp(option, "lock", true))
    {
        if(PlayerNearVehicle(3.0, playerid, PlayerInfo[playerid][pCarKey]))
        {
            if(vLocked{PlayerInfo[playerid][pCarKey]})
            {
                PlaySound(playerid, 1145);
                ToggleVehicleLock(PlayerInfo[playerid][pCarKey], false);
                ToggleVehicleLockForPlayer(playerid, PlayerInfo[playerid][pCarKey], false);
                format(msg, sizeof(msg), "~b~%s ~n~~g~DEBLOCAT", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                GameTextForPlayer(playerid, msg, 2000, 4);
                return 1;
            }
            else
            {
                PlaySound(playerid, 1145);
                ToggleVehicleLock(PlayerInfo[playerid][pCarKey], true);
                ToggleVehicleLockForPlayer(playerid, PlayerInfo[playerid][pCarKey], true);
                format(msg, sizeof(msg), "~b~%s ~n~~r~BLOCAT", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                GameTextForPlayer(playerid, msg, 2000, 4);
                return 1;
            }
        }
        return 1;
    }
    if(!strcmp(option, "find", true))
    {
        if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!VehicleEmpty(PlayerInfo[playerid][pCarKey])) return SCM(playerid, COLOR_GREY, "Cineva este in masina ta iar aceasta nu poate fi gasita.");
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][carGps] == 0) return SCM(playerid, COLOR_GREY, "Masina ta nu are un GPS instalat.");
        new Float:x, Float:y, Float:z;
        GetVehiclePos(PlayerInfo[playerid][pCarKey], x, y, z);
        new vZone[MAX_ZONE_NAME];
        GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
        format(msg, sizeof(msg), "[GPS] %s-ul tau este localizat in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
        SCM(playerid, COLOR_WHITE, msg);
        SetCheckPoint(playerid, FINEVEH, x, y, z, 6.0);
        return 1;
    }
    if(!strcmp(option, "stats", true))
    {
        new veh = PlayerInfo[playerid][pCarKey];
        if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "Nu detii acest vehicul.");
        format(msg, sizeof(msg), "%s, {FFFFFF}Alarma[%d], Incuietoare[%d], Imobilizator[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pretul Asigurarii[$%d]", VehicleNames[GetVehicleModel(veh)-400],
        VehicleInfo[veh][carAlarm], VehicleInfo[veh][carLock], VehicleInfo[veh][carImmob], VehicleInfo[veh][carGps], VehicleInfo[veh][carInsurances], VehicleInfo[veh][carDestroyed],
        GetInsurancePrice(veh));
        SCM(playerid, COLOR_GREEN2, msg);
        return 1;
    }
    if(!strcmp(option, "scrap", true))
    {
        new veh = PlayerInfo[playerid][pCarKey];
        new slot = PlayerInfo[playerid][pVehSlot];
        if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "Nu ai spawnat un vehicul.");
        if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
        if(!PlayerOwnVehicle(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "Nu detii acest vehicul.");
        VehicleInfo[veh][carOwnerSlot] = 0;
        VehicleInfo[veh][carOwned] = 0;
        PlayerInfo[playerid][pCarKey] = 0;
        PlayerInfo[playerid][pVehicles]--;
        StopCarBoomBox(veh);
        format(msg, sizeof(msg), "Ai vandut vehiculul %s, pentru suma de {006600}$%d{AFAFAF}.", VehicleNames[VehicleInfo[veh][carModel]-400], GetVehiclePrice(VehicleInfo[veh][carModel])/2);
        SCM(playerid, COLOR_GREY, msg);
        GiveCash(playerid,  GetVehiclePrice(VehicleInfo[veh][carModel])/2);
        DestoryCar(veh);
        format(query, sizeof(query), "DELETE FROM `ownedvehicles` WHERE `owner` = '%s' AND `slot` = '%d'", GetName(playerid), PlayerInfo[playerid][pVehSlot]);
		#if defined debugOn
			printf("%s", query);
		#endif
        mysql_tquery(dbHandle, query);

        format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pVehicles], GetName(playerid));
        mysql_function_query(dbHandle, query, false, "", "");
        PlayerInfo[playerid][pVehs][slot] = 0;
        ReAssignPlayerVehicles(playerid);
        PlayerInfo[playerid][pVehSlot] = 0;
        CheckOwnedVehicles(playerid);
        return 1;
    }
    

    return 1;
}

CMD:parkmeter(playerid, params[])
{
    new parkid = GetClosestParkMeter(playerid), minutes;
    if(sscanf(params,"d",minutes)) return SyntaxMSG(playerid, "/parkmeter [minutes] (Each minute costs $10)");
    if(parkid == -1) return InfoMSG(playerid, "~y~Nu esti langa un parkmeter.", 5);
    if(minutes < 0 || minutes > 60) return SCM(playerid, COLOR_INFO, "Minutele trebuie sa fie intre 1 si 60.");
    if(minutes + ParkMeters[parkid][parkMinutes] > 60) return SCM(playerid, COLOR_LIGHTRED, "Timpul maxim pentru parkmeter este de 60 de minute");
    if(GetCash(playerid) < minutes * 10) return NoCashMSG(playerid);
    format(msg, sizeof(msg), "~b~ai cumparat ~g~%d~b~ minute pentru ~g~$%d", minutes, minutes * 10);
    InfoMSG(playerid, msg, 5);
    GiveCash(playerid, -minutes * 10);
    ParkMeters[parkid][parkMinutes] += minutes;
    format(msg, sizeof(msg), "{3333FF}%d minute", ParkMeters[parkid][parkMinutes]);
    UpdateDynamic3DTextLabelText(Text3D:ParkMeters[parkid][parkLabel], -1, msg);
    return 1;
}

CMD:stop(playerid, params[])
{
    if(PlayerIsWounded(playerid)) return 1;
    if(GetIntVar(playerid, "BrowsingSkins") == 1)
    {
        PutPlayer(playerid, 207.576, -100.983, 1005.26);
        SetCameraBehindPlayer(playerid);
        UnFreezePlayer(playerid);
        ServerMSG(playerid, "Ai anulat schimbarea de skin.");
        SetSkin(playerid, GetSkin(playerid));
        RemoveVar(playerid, "BrowsingSkins");
        RemoveVar(playerid, "SkinBuying");
        SkinSlot[playerid] = 0;
        HideTextDraw(playerid, ClothesText);
    }
    if(JackingEngine[playerid] != 0)
    {
        JackingEngine[playerid] = 0;
        UnFreezePlayer(playerid);
    }
    if(JackingLock[playerid] != 0)
    {
        JackingLock[playerid] = 0;
        DoorJacking[playerid] = 0;
        UnFreezePlayer(playerid);
    }
    if(PickingTime{playerid} != 0)
    {
        SCM(playerid, COLOR_YELLOWG, "You have stopped picking up the plant.");
        UnFreezePlayer(playerid);
        StopPlayerAnims(playerid);
        PickingTime{playerid} = 0;
    }
    if(PlantingTime{playerid} != 0)
    {
        SCM(playerid, COLOR_YELLOWG, "You have stopped planting the plant.");
        UnFreezePlayer(playerid);
        StopPlayerAnims(playerid);
        PlantingTime{playerid} = 0;
    }
    return 1;
}

CMD:smoke(playerid, params[])
{
    if(IsSmoking{playerid}) return SCM(playerid, COLOR_GREY, "Deja fumezi.");
    if(PlayerInfo[playerid][pLighter] == 0) return SCM(playerid, COLOR_GREY, "Nu ai o bricheta!");
    if(PlayerInfo[playerid][pCigars] == 0) return SCM(playerid, COLOR_GREY, "Nu ai tigari!");
    PlayerInfo[playerid][pLighter] -= 1;
    PlayerInfo[playerid][pCigars] -= 1;
    ActionMessage(playerid,15.0,"scoate o tigara si incepe sa fumeze.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
    SCM(playerid, COLOR_WHITE, "HINT: Poti folosi /dropsmoke pentru a te opri.");
    IsSmoking{playerid} = true;
    return 1;
}

CMD:dropsmoke(playerid, params[])
{
    if(!IsSmoking{playerid}) return SCM(playerid, COLOR_GREY, "Nu fumezi.");
    ActionMessage(playerid,15.0,"scoate tigara din gura si o arunca pe jos.");
    StopPlayerAnims(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    IsSmoking{playerid} = false;
    return 1;
}

CMD:bizinfo(playerid, params[])
{
    new key = PlayerInfo[playerid][pBizKey];
    if(OwnBusiness(playerid))
    {
        if(BizEntered[playerid] == key)
        {
            format(msg, sizeof(msg), "Business Name: %s - Business Type: %s - Locked: %d", BizInfo[key][bizName], BizInfo[key][bizInfo],  BizInfo[key][bizLocked]);
            SCM(playerid, COLOR_GRAD2, msg);
            format(msg, sizeof(msg), "CashBox: $%d - Entrance Fee: $%d", BizInfo[key][bizCash], BizInfo[key][bizEntrance]);
            SCM(playerid, COLOR_GRAD2, msg);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi inauntrul afacerii tale.");
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    return 1;
}

CMD:bizfee(playerid, params[])
{
    new fee;
    new key = PlayerInfo[playerid][pBizKey];
    if(sscanf(params,"d",fee)) return SyntaxMSG(playerid, "/bizfee [fee(1-200)]");
    if(OwnBusiness(playerid))
    {
        if(fee < 0 || fee > 3000) return SCM(playerid, COLOR_LIGHTRED, "Intrarea poate fi intre 1-200.");
        format(msg, sizeof(msg), "Pretul a fost setat la $%d", fee);
        SCM(playerid, COLOR_WHITE, msg);
        BizInfo[key][bizEntrance] = fee;
        UpdateBizInfo(key);
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    return 1;
}

CMD:bizname(playerid, params[])
{
    new name[30];
    new key = PlayerInfo[playerid][pBizKey];
    if(sscanf(params,"s[30]",name))
    {
        SyntaxMSG(playerid, "/bizname [name] (Max characters: 30)");
        SCM(playerid, COLOR_INFO, "Culori: ~b~ = {0000FF}albastru{FFFFFF}, ~r~ = {FF0000}rosu{FFFFFF}, ~y~ = {FFFF00}galben{FFFFFF}.");
        SCM(playerid, COLOR_INFO, "Culori: ~g~ = {808000}verde{FFFFFF}, ~w~ = {FFFFFF}alb{FFFFFF}, ~p~ = {004080}mov{FFFFFF}, ~h~ = culoare mai deschisa.");
        return 1;
    }
    if(OwnBusiness(playerid))
    {
        if(NearBusiness(playerid))
        {
            if(strlen(name) > 30) return SCM(playerid, COLOR_LIGHTRED, "Numele afacerii poate contine intre 1 si 30 de caractere");
            format(msg, sizeof(msg), "Ai setat numele la: %s", name);
            SCM(playerid, COLOR_WHITE, msg);
            format(BizInfo[key][bizName], 128, "%s", name);
            UpdateBizInfo(key);
        }
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    return 1;
}

CMD:bizdeposit(playerid, params[])
{
    new amount;
    new key = PlayerInfo[playerid][pBizKey];
    if(sscanf(params,"d",amount))
    {
        SyntaxMSG(playerid, "/bizdeposit [amount]");
        format(msg, sizeof(msg), "Ai %d$ in seiful afacerii.", BizInfo[key][bizCash]);
        SCM(playerid, COLOR_WHITE, msg);
        return 1;
    }
    if(OwnBusiness(playerid) || PlayerInfo[playerid][pWorkOn] != -1)
    {
        if(InBusiness(playerid) || NearBusiness(playerid))
        {
            if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
            if(GetCash(playerid) < amount) return NoCashMSG(playerid);
            if(BizInfo[key][bizCash] >= 500000) return SCM(playerid, COLOR_INFO, "Suma trebuie sa fie intre 1$ si 500.000$.");
            format(msg, sizeof(msg), "AdmWarn: %s a extras %d din contul afacerii sale.", GetName(playerid), amount);
            AMSG(COLOR_LIGHTRED, msg);
            ActionMessage(playerid, 15.0, "deschide seiful afacerii si depoziteaza niste bani in el");
            GiveCash(playerid, -amount);
            BizInfo[key][bizCash] += amount;
            format(msg, sizeof(msg), "Ai pus $%d in seiful afacerii, acum ai: $%d", amount, BizInfo[key][bizCash]);
            SCM(playerid, COLOR_WHITE, msg);
            UpdateBizInfo(key);
            format(msg, sizeof(msg), "AdmWarn: %s a depozitat in seiful afacerii suma de %d$. (Total: %d$)", GetName(playerid), amount, BizInfo[key][bizCash]);
            AMSG(COLOR_LIGHTRED, msg);
        }
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    return 1;
}

CMD:bizwithdraw(playerid, params[])
{
    new amount;
    new key = PlayerInfo[playerid][pBizKey];
    if(sscanf(params,"d",amount))
    {
        SyntaxMSG(playerid, "/bizwithdraw [amount]");
        format(msg, sizeof(msg), "Ai $%d in seiful afacerii.", BizInfo[key][bizCash]);
        SCM(playerid, COLOR_WHITE, msg);
        return 1;
    }
    if(OwnBusiness(playerid))
    {
        if(InBusiness(playerid) || NearBusiness(playerid))
        {
            if(amount < 0) return SCM(playerid, -1, "Valoarea trebuie sa fie pozitiva!");
            if(BizInfo[key][bizCash] < amount) return SCM(playerid, COLOR_INFO, "Nu ai atatia bani in seif.");
            if(amount <= 0 || amount > 5000000) return SCM(playerid, COLOR_INFO, "Suma trebuie sa fie intre 1$ si 5.000.000$.");
            ActionMessage(playerid, 15.0, "deschide seiful afacerii si scoate niste bani.");
            GiveCash(playerid, amount);
            BizInfo[key][bizCash] -= amount;
            format(msg, sizeof(msg), "Ai scos $%d din seiful afacerii, au mai ramas: $%d", amount, BizInfo[key][bizCash]);
            SCM(playerid, COLOR_WHITE, msg);
            UpdateBizInfo(key);
            format(msg, sizeof(msg), "AdmWarn: %s a extras din seiful afacerii suma de %d$. (Au mai ramas: %d$)", GetName(playerid), amount, BizInfo[key][bizCash]);
            AMSG(COLOR_LIGHTRED, msg);
        }
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    return 1;
}

CMD:buybiz(playerid, params[])
{
    if(OwnBusiness(playerid)) return SCM(playerid, COLOR_INFO, "Poti avea doar o afacere.");
    for(new b = 0; b < sizeof(BizInfo); b++)
    {
        if(PlayerToPoint(2.0, playerid, BizInfo[b][bizPosX], BizInfo[b][bizPosY], BizInfo[b][bizPosZ]) && BizInfo[b][bizOwned] == 0)
        {
            if(PlayerInfo[playerid][pLevel] < BizInfo[b][bizLevelbuy])
            {
                format(msg, sizeof(msg), "Trebuie sa ai level %d pentru a cumpara aceasta afacere.",BizInfo[b][bizLevelbuy]);
                SCM(playerid, COLOR_GRAD5, msg);
                return 1;
            }
            if(GetCash(playerid) < BizInfo[b][bizPrice]) return NoCashMSG(playerid);
            BizInfo[b][bizOwned] = 1;
            BizInfo[b][bizLocked] = 1;
            PlayerInfo[playerid][pBizKey] = b;
            format(BizInfo[b][bizOwner], 128, "%s", GetName(playerid));
            GiveCash(playerid,-BizInfo[b][bizPrice]);
            SCM(playerid, COLOR_INFO, "Felicitari! Ai cumparat o afacere.");
            UpdateBizInfo(b);
            DestroyDynamicPickup(BizInfo[b][bizPickUp]);
            CreateDynamicPickup(1272, 1, BizInfo[b][bizPosX], BizInfo[b][bizPosY], BizInfo[b][bizPosZ], -1, -1, -1, 100.0);

        }
    }
    return 1;
}

CMD:sellbiz(playerid, params[])
{
    new key = PlayerInfo[playerid][pBizKey];
    if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    StopBusinessBoomBox(key);
    PlaySound(playerid, 1052);
    BizInfo[key][bizOwned] = 0;
    BizInfo[key][bizLocked] = 1;
    BizInfo[key][bizRadio] = 0;
    BizInfo[key][bizRadioOn] = 0;
    strmid(BizInfo[key][bizOwner], "The State", 0, strlen("The State"), 255);
    new bizvalue = BizInfo[key][bizPrice] / 4 * 3;
    GiveCash(playerid, bizvalue);
    format(msg, sizeof(msg), "Felicitari! Ai vandut afacerea pentru %d.", bizvalue);
    SCM(playerid, COLOR_INFO, msg);
    if(BizInfo[key][bizCash] > 0)
    {
        format(msg, sizeof(msg), "Ai avut %d$ in seiful afacerii, asa ca i-ai primit inapoi.", BizInfo[key][bizCash]);
        SCM(playerid, COLOR_INFO, msg);
        GiveCash(playerid, BizInfo[key][bizCash]);
    }
    BizInfo[key][bizCash] = 0;
    foreach(new i : Player)
    {
        if(BizEntered[i] == key)
        {
            SetPlayerPos(i,BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ]);
            SetInterior(i,0);
            SetWorld(i,0);
            BizEntered[i] = -1;
            FreezePlayer(i);
            SetTimerEx("UnFreezePlayer", 1000, 0, "i", i);
            SCM(i, COLOR_INFO, "Detinatorul a vandut afacerea, asa ca ai fost dat afara.");
        }
    }
    UpdateBizInfo(key);
    PlayerInfo[playerid][pBizKey] = -1;
    DestroyDynamicPickup(BizInfo[key][bizPickUp]);
    CreateDynamicPickup(1239, 1, BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ], -1, -1, -1, 100.0);
    return 1;
}

CMD:bizupgrade(playerid, params[])
{
    new option[16], biz = PlayerInfo[playerid][pBizKey];
    if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    if(InBusiness(playerid) || NearBusiness(playerid))
    {
        if(sscanf(params, "s[16]", option)) return SyntaxMSG(playerid, "/bizupgrade [option] (Radio)");
        if(CompareStrings(option, "radio"))
        {
            if(BizInfo[biz][bizRadio] == 1) return SCM(playerid, COLOR_WHITE, "Afacerea ta are deja un radio.");
            if(GetCash(playerid) < 10000) return SCM(playerid, COLOR_GREY, "Statiile radio pentru afaceri costa 10.000$.");
            SCM(playerid, COLOR_LIGHTBLUE, "* Ai cumparat cu succes un radio pentru afacere, foloseste /setstation pentru a seta frecventa.");
            BizInfo[biz][bizRadio] = 1;
            GiveCash(playerid, -10000);
        }
    }
    else return SCM(playerid, COLOR_GREY, "Trebuie sa fii in interiorul afacerii.");
    return 1;
}

CMD:hire(playerid, params[])
{
    new id;
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/hire [playerid/PartOfName]");
    if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    if(id == playerid) return SCM(playerid, COLOR_INFO, "Nu te poti angaja singur.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    HireRequester[id] = playerid;
    format(msg, sizeof(msg),"* %s te-a invitat sa lucrezi la afacerea lui, foloseste '/accept job' pentru a accepta slujba", GetNameWithMask(playerid));
    SCM(id, COLOR_LIGHTBLUE, msg);
    format(msg, sizeof(msg), "* L-ai invitat pe %s sa lucreze la afacerea ta.", GetNameWithMask(id));
    SCM(playerid, COLOR_INFO, msg);
    return 1;
}

CMD:fire(playerid, params[])
{
    new id;
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/fire [playerid/PartOfName]");
    if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Nu detii o afacere.");
    if(id == playerid) return SCM(playerid, COLOR_INFO, "Nu te poti concedia singur");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(PlayerInfo[id][pWorkOn] != PlayerInfo[playerid][pBizKey]) return SCM(playerid, COLOR_LIGHTRED, "Acest jucator nu lucreaza pentru tine.");
    format(msg, sizeof(msg),"* Ai fost dat afara de catre %s.", GetNameEx(playerid));
    SCM(id, COLOR_LIGHTBLUE, msg);
    format(msg, sizeof(msg), "* L-ai dat afara pe %s, asa ca nu mai are cheia de la intrare.", GetNameEx(id));
    SCM(playerid, COLOR_INFO, msg);
    PlayerInfo[id][pWorkOn] = -1;
    return 1;
}

CMD:accept(playerid, params[])
{
    new option[128];
    if(sscanf(params,"s[128]",option))
    {
        SyntaxMSG(playerid, "/accept [option]");
        SCM(playerid, COLOR_GREY, "Options: | job | faction | refill | repair | heal |");
        return 1;
    }
    if(CompareStrings(option, "heal"))
    {
        new id = GetIntVar(playerid, "HealFrom");
        if(id == 0) return SCM(playerid, COLOR_INFO, "Nu se poate.");
        SCMEx(playerid, COLOR_WHITE, "Ai fost vindecat.");
        SCMEx(id, COLOR_WHITE, "L-ai vindecat pe %s.", GetNameEx(playerid));
        SetPlayerHealth(playerid, 100.0);
        RemoveVar(playerid, "HealFrom");
        return 1;
    }
    if(CompareStrings(option, "job"))
    {
        if(HireRequester[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_INFO, "Nu ai primit o oferta de job.");
        PlayerInfo[playerid][pWorkOn] = PlayerInfo[HireRequester[playerid]][pBizKey];
        SCM(playerid, COLOR_GREY, "Ai acceptat oferta de job.");
        SCM(HireRequester[playerid], COLOR_GREY, "A acceptat oferta da te job.");
        HireRequester[playerid] = INVALID_PLAYER_ID;
        return 1;
    }
    if(CompareStrings(option, "faction"))
    {
        if(FactionRequest[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_INFO, "Nu ti s-a oferit un invite intr-o factiune.");
        PlayerInfo[playerid][pFaction] = FactionRequest[playerid];
        PlayerInfo[playerid][pRank] = Factions[FactionRequest[playerid]][fJoinRank];
        PlayerInfo[playerid][pBadgeNumber] = randomEx(23465, 99999);
        format(msg, 43+55,"Felicitari! Esti acum membrum factiunii : %s", Factions[FactionRequest[playerid]][fName]);
        SCM(playerid, COLOR_YELLOW, msg);
        format(msg, 33+MAX_PLAYER_NAME, "** %s s-a alaturat factiunii.", GetNameEx(playerid));
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        FactionRequest[playerid] = INVALID_PLAYER_ID;
        new faction = PlayerInfo[playerid][pFaction];
        if(faction == LSPD || faction == LSFD || faction == GOV)
        {
            PlayerInfo[playerid][pJob] = 0;
            PlayerInfo[playerid][pSideJob] = 0;
            SCM(playerid, COLOR_OOC, "Joburile tale au fost resetate deoarece ai intrat intr-o factiune guvernamentala!");
        }
        return 1;
    }
    if(CompareStrings(option, "refill"))
    {
        if(RefillOffer[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_INFO, "Nu ti s-a oferit un refill.");
        new vehicle = GetPlayerVehicleID(playerid);
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi intr-o masina ca si sofer.");
        if(!PlayerNearPlayer(6.0, playerid, RefillOffer[playerid])) return NotNearPlayerMSG(playerid);
        if(GetCash(playerid) < RefillPrice[playerid]) return NoCashMSG(playerid);
        GiveCash(playerid, -RefillPrice[playerid]);
        GiveCash(RefillOffer[playerid], RefillPrice[playerid]); //EDIT
        format(msg, sizeof(msg), "accepta oferta lui %s de a ii umple rezervorul pentru suma de $%d.", GetNameWithMask(RefillOffer[playerid]), RefillPrice[playerid]);
        ActionMessage(playerid, 10.0, msg);
        Gas{vehicle} = 100;
        RefillPrice[playerid] = 0;
        RefillOffer[playerid] = INVALID_PLAYER_ID;
        return 1;
    }
    if(CompareStrings(option, "tow"))
    {
        new id = GetIntVar(playerid, "RepairFrom");
        if(!GettingRepair{playerid}) return SCM(playerid, COLOR_GREY, "Nu ti s-a oferit o tractare.");
        if(!PlayerNearPlayer(8.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(PlayerInCar(playerid)) return SCM(playerid, COLOR_GREY, "Masina trebuie sa fie goala.");
        format(msg, sizeof(msg), "l-a autorizat pe %s sa ataseze masina %s de towtruck.", GetNameWithMask(id), VehicleNames[GetVehicleModel(OldVehicle[playerid])-400]);
        ActionMessage(playerid, 10.0, msg);
        new Float:x, Float:y, Float:z, Float:vX, Float:vY, Float:vZ;
        GetPlayerPos(playerid, x, y, z);
        GetVehiclePos(OldVehicle[playerid], vX, vY, vZ);
        if((floatabs(x-vX)<7.0) && (floatabs(y-vY)<7.0) && (floatabs(z-vZ)<7.0) && (OldVehicle[playerid]!=GetPlayerVehicleID(id)))
        {
            AttachTrailerToVehicle(OldVehicle[playerid], GetPlayerVehicleID(id));
        }
        RemoveVar(playerid, "RepairFrom");
        GettingRepair{playerid} = false;
    }
    if(CompareStrings(option, "repair"))
    {
        new vehicle = GetPlayerVehicleID(playerid), id = GetIntVar(playerid, "RepairFrom");
        if(!GettingRepair{playerid}) return SCM(playerid, COLOR_GREY, "Nu ti s-a oferit un repair.");
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa vi in masina ca si sofer.");
        if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(GetIntVar(playerid, "RepairType") == 1)
        {
            RepairOffer[id] = playerid;
            GettingRepair{playerid} = false;
            VehicleToRepair[id] = vehicle;
            RepairService[id][REPAIR_ENGINE] = 1;
            SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
            format(msg, sizeof(msg), "l-a autorizat pe %s sa repare masina %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
            ActionMessage(playerid, 10.0, msg);
            ShowJobMessage(id, "~h~~p~SCOATE-TI SPRAYCANUL.");
            RemoveVar(playerid, "RepairType");
            RemoveVar(playerid, "RepairFrom");
        }
        else if(GetIntVar(playerid, "RepairType") == 2)
        {
            RepairOffer[id] = playerid;
            GettingRepair{playerid} = false;
            VehicleToRepair[id] = vehicle;
            RepairService[id][REPAIR_BODY] = 1;
            SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
            format(msg, sizeof(msg), "l-a autorizat pe %s sa repare masina %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
            ActionMessage(playerid, 10.0, msg);
            ShowJobMessage(id, "~h~~p~SCOATE-TI SPRAYCANUL.");
            RemoveVar(playerid, "RepairType");
            RemoveVar(playerid, "RepairFrom");
        }
        else if(GetIntVar(playerid, "RepairType") == 3)
        {
            RepairOffer[id] = playerid;
            GettingRepair{playerid} = false;
            VehicleToRepair[id] = vehicle;
            RepairService[id][REPAIR_DEAD] = 1;
            SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
            format(msg, sizeof(msg), "l-a autorizat pe %s sa repare masina %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
            ActionMessage(playerid, 10.0, msg);
            ShowJobMessage(id, "~h~~p~SCOATE-TI SPRAYCANUL.");
            RemoveVar(playerid, "RepairType");
            RemoveVar(playerid, "RepairFrom");
        }
        else if(GetIntVar(playerid, "RepairType") == 4)
        {
            GettingRepair{playerid} = false;
            format(msg, sizeof(msg), "%s i-a scos distrugerile lui %s de pe masina %s (numar distrugeri:%d).", GetNameWithMask(id), GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vehicle)-400], GetIntVar(playerid, "DentsAmount"));
            ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
            VehicleInfo[vehicle][carDestroyed] -= GetIntVar(playerid, "DentsAmount");
            RemoveVar(playerid, "RepairType");
            RemoveVar(playerid, "DentsAmount");
            RemoveVar(playerid, "RepairFrom");
        }
        else if(GetIntVar(playerid, "RepairType") == 5)
        {
            RepairOffer[id] = playerid;
            GettingRepair{playerid} = false;
            VehicleToRepair[id] = vehicle;
            RepairService[id][REPAIR_PAINT] = 1;
            SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
            format(msg, sizeof(msg), "l-a autorizat pe %s sa repare masina %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
            ActionMessage(playerid, 10.0, msg);
            ShowJobMessage(id, "~h~~p~SCOATE-TI SPRAYCANUL.");
            RemoveVar(playerid, "RepairType");
            RemoveVar(playerid, "RepairFrom");
        }
    }
    return 1;
}


CMD:setstyle(playerid, params[])
{
    new option, secoption;
    if(sscanf(params,"dD(-1)", option, secoption)) return SyntaxMSG(playerid, "/setstyle (1 - Walk Style | 2 - Chat Style)");
    if(PlayerInfo[playerid][pDonateRank] < 1) return SCM(playerid, COLOR_LIGHTRED, "Numai donatorii pot folosi aceasta comanda");
    if(option == 1)
    {
        new style;
        if(sscanf(params,"{d}d",style))
        {
            SyntaxMSG(playerid, "/setstyle 1 [StyleID]");
            SCM(playerid, COLOR_WHITE, "Stiluri de mers: 1,2,3,4,5,6,7,8,9");
            SCM(playerid, COLOR_WHITE, "Stiluri de mers: 10,11,12,13,14,15,16");
            SCM(playerid, COLOR_WHITE, "Stiluri de mers: 17,18");
            return 1;
        }
        if(style < 1 || style > 18) return SCM(playerid, COLOR_INFO, "1-18.");
        PlayerInfo[playerid][pWalk] = style;
        format(msg, sizeof(msg), "Ti-ai setat stilul de mers la %d", style);
        SCM(playerid, COLOR_INFO, msg);
    }
    else if(option == 2)
    {
        new style;
        if(sscanf(params,"{d}d",style))
        {
            SyntaxMSG(playerid, "/setstyle 2 [StyleID]");
            SCM(playerid, COLOR_WHITE, "Chat Styles: 0,1,2,3,4,5,6,7,8");
            return 1;
        }
        if(style < 0 || style > 8) return SCM(playerid, COLOR_INFO, "0-8.");
        PlayerInfo[playerid][pTalk] = style;
        format(msg, sizeof(msg), "Ti-ai setat stilul de vorbit la: %d", style);
        SCM(playerid, COLOR_INFO, msg);
    }
    return 1;
}

CMD:casino(playerid, params[])
{
    new option[64];
    if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 2)
    {
        if(gettime() - JustCasinoed[playerid] < 2) return SCM(playerid, COLOR_INFO, "Te rog asteapta 2 secunde intre comenzi!");
        if(sscanf(params,"s[64]",option))
        {
            SCM(playerid, COLOR_GRAD2, "USAGE: /casino [item]");
            SCM(playerid, COLOR_WHITE, "pull | spin |");
            return 1;
        }
        if(CompareStrings(option, "pull"))
        {
            if(!IsAtPullMachine(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii langa aparate.");
            if(GetCash(playerid) < 750) return SCM(playerid, COLOR_LIGHTRED, "Ca sa joci la casino trebuie sa ai 750$!");
            OnPlayAnim(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0);
            JustCasinoed[playerid] = gettime();
            new n1, n2, n3;
            n1 = randomEx(0, 7);
            n2 = randomEx(0, 7);
            n3 = randomEx(0, 7);
            if(n1 == n2 && n2 == n3)
            {
                format(msg, sizeof(msg), "~g~Felicitari~n~~y~$10,000~n~~w~%d %d %d~n~~r~jackpot", n1, n2, n3);
                GameTextForPlayer(playerid, msg, 3000, 6);
                GiveCash(playerid, 10000);
                BizInfo[BizEntered[playerid]][bizCash] -= 10000;
            }
            else
            {
                format(msg, sizeof(msg), "~r~Mai incearca~n~~w~%d %d %d~n~~r~-$750", n1, n2, n3);
                GameTextForPlayer(playerid, msg, 3000, 6);
                GiveCash(playerid, -750);
                BizInfo[BizEntered[playerid]][bizCash] += 750;
            }
            return 1;
        }
        if(CompareStrings(option, "spin"))
        {
            //Not finished yet
            //JustCasinoed[playerid] = gettime();
            //SetTimerEx("CasinoRolling", 500, false, "i", playerid);
            return 1;
        }
    }
    else return SCM(playerid, COLOR_INFO, "Trebuie sa fii intr-un casino!");
    return 1;
}


CMD:buydrink(playerid, params[])
{
    new option[11];
    if(sscanf(params,"s[11]",option))
    {
        SyntaxMSG(playerid, "/buydrink [item]");
        SCM(playerid, COLOR_WHITE, "Beer - Pret: $16");
        SCM(playerid, COLOR_WHITE, "Vodka - Pret: $24");
        SCM(playerid, COLOR_WHITE, "Coke - Pret: $10");
        SCM(playerid, COLOR_WHITE, "Water - Pret: $4");
        SCM(playerid, COLOR_WHITE, "Whiskey - Pret: $15");
        SCM(playerid, COLOR_WHITE, "Brandy - Pret: $26");
        SCM(playerid, COLOR_WHITE, "Soda - Pret: $6");
        return 1;
    }
    if(BizEntered[playerid] != -1)
    {
        if(BizInfo[BizEntered[playerid]][bizType] == 6 || BizInfo[BizEntered[playerid]][bizType] == 11)
        {
            if(CompareStrings(option, "beer"))
            {
                if(GetCash(playerid) < 16) return NoCashMSG(playerid);
                GiveCash(playerid, -16);
                BizInfo[BizEntered[playerid]][bizCash] += 16;
                DrunkLevel[playerid]++;
                if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~ESTI ~p~BEAT", 3500, 1);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
                SetPlayerBubble(playerid, "cumpara o bere si o bea.");
            }
            if(CompareStrings(option, "vodka"))
            {
                if(GetCash(playerid) < 24) return NoCashMSG(playerid);
                GiveCash(playerid, -24);
                BizInfo[BizEntered[playerid]][bizCash] += 24;
                DrunkLevel[playerid] += 2;
                if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~ESTI ~p~BEAT", 3500, 1);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                SetPlayerBubble(playerid, "cumpara un shot de vodka si il bea.");
            }
            if(CompareStrings(option, "coke"))
            {
                if(GetCash(playerid) < 10) return NoCashMSG(playerid);
                GiveCash(playerid, -10);
                BizInfo[BizEntered[playerid]][bizCash] += 10;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                SetPlayerBubble(playerid, "cumpara o cola si o bea.");
            }
            if(CompareStrings(option, "water"))
            {
                if(GetCash(playerid) < 4) return NoCashMSG(playerid);
                GiveCash(playerid, -4);
                BizInfo[BizEntered[playerid]][bizCash] += 4;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                SetPlayerBubble(playerid, "cumpara un pahar de apa si il bea.");
            }
            if(CompareStrings(option, "whiskey"))
            {
                if(GetCash(playerid) < 15) return NoCashMSG(playerid);
                GiveCash(playerid, -15);
                BizInfo[BizEntered[playerid]][bizCash] += 15;
                DrunkLevel[playerid] += 2;
                if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~ESTI ~p~BEAT", 3500, 1);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                SetPlayerBubble(playerid, "cumpara un pahar de whiskey si il bea.");
            }
            if(CompareStrings(option, "brandy"))
            {
                if(GetCash(playerid) < 26) return NoCashMSG(playerid);
                GiveCash(playerid, -26);
                BizInfo[BizEntered[playerid]][bizCash] += 26;
                DrunkLevel[playerid] += 2;
                if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~ESTI ~p~BEAT", 3500, 1);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                SetPlayerBubble(playerid, "cumpara un pahar de brandy si il bea.");
            }
            if(CompareStrings(option, "soda"))
            {
                if(GetCash(playerid) < 6) return NoCashMSG(playerid);
                GiveCash(playerid, -6);
                BizInfo[BizEntered[playerid]][bizCash] += 6;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                SetPlayerBubble(playerid, "cumpara un pahar de apa minerala si il bea.");
            }
        }
    }
    return 1;
}

CMD:buygun(playerid, params[])
{
    new gun[16], ammo, ammo2;
    if(BizEntered[playerid] != -1)
    {
        if(BizInfo[BizEntered[playerid]][bizType] == 4)
        {
            if(PlayerInfo[playerid][pWepLic] != 1) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa ai o licenta de arma valida pentru a cumpara.");
            if(sscanf(params,"s[16]d", gun, ammo))
            {
                SyntaxMSG(playerid, "/buygun [GunName] [ammo]");
                SCM(playerid, COLOR_YELLOW, "Arme disponibile: karmour($10000), deagle, 9mm, shotgun.");
                SCM(playerid, COLOR_YELLOW, "Arme disponibile: mp5, m4a1.");
                SCM(playerid, COLOR_LIGHTRED, "|______Pret pe glont______|");
                SCM(playerid, COLOR_GRAD2, "Gloante: deagleammo ($500) 9mm ($400) shotgunammo ($700)");
                SCM(playerid, COLOR_GRAD2, "Gloante: mp5ammo ($1200) m4a1ammo ($1500)");
                return 1;
            }
            if(CompareStrings(gun, "armour"))
            {
                if(GetCash(playerid) < 10000) return NoCashMSG(playerid);
                format(msg, sizeof(msg), "Ai cumparat o armura pentru 10000$.");
                SCM(playerid, COLOR_GREEN2, msg);
                SetPlayerArmour(playerid, 50);
                PlayerInfo[playerid][pArmour] = 50.0;
                PlayerInfo[playerid][pHasArmour] = 1;
                BizInfo[BizEntered[playerid]][bizCash] += 10000;
                GiveCash(playerid, -10000);
            }
            if(CompareStrings(gun, "deagle"))
            {
                if(GetPrimaryWeapon(playerid) == 24)
                {
                    ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
                }
                else if(IsPrimarySlotTaken(playerid))
                {
                    SCM(playerid, COLOR_INFO, "Slotul primar este ocupat.");
                    return 1;
                }
                if(GetCash(playerid) < ammo * 500)
                {
                    format(msg, sizeof(msg), "Trebuie sa ai $%d, pentru un deagle cu %d gloante.", ammo * 500, ammo);
                    SCM(playerid, COLOR_GREEN2, msg);
                    return 1;
                }
                format(msg, sizeof(msg), "Ai cumparat un deagle cu %d gloante pentru %d$.", ammo, ammo * 500);
                SCM(playerid, COLOR_GREEN2, msg);
                if(ammo2 > 0)
                {
                    format(msg, sizeof(msg), "Ai avut un deagle inainte, asa ca ti-au fost adaugate %d gloante la cel actual.", ammo2);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
                GiveCash(playerid, -ammo * 500);
                GivePermWeapon(playerid, 2, 24, ammo+ammo2);
                BizInfo[BizEntered[playerid]][bizCash] += ammo * 500;
            }
            if(CompareStrings(gun, "9mm"))
            {
                if(GetPrimaryWeapon(playerid) == 22)
                {
                    ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
                }
                else if(IsPrimarySlotTaken(playerid))
                {
                    SCM(playerid, COLOR_INFO, "Slotul primar este ocupat.");
                    return 1;
                }
                if(GetCash(playerid) < ammo * 400)
                {
                    format(msg, sizeof(msg), "Trebuie sa ai $%d, pentru un 9mm cu %d gloante.", ammo * 400, ammo);
                    SCM(playerid, COLOR_GREEN2, msg);
                    return 1;
                }
                format(msg, sizeof(msg), "Ai cumparat un 9mm cu %d gloante pentru %d$.", ammo, ammo * 400);
                SCM(playerid, COLOR_GREEN2, msg);
                if(ammo2 > 0)
                {
                    format(msg, sizeof(msg), "Ai avut un 9mm inainte, asa ca ti-au fost adaugate %d gloante la cel actual.", ammo2);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
                GiveCash(playerid, -ammo * 400);
                GivePermWeapon(playerid, 2, 22, ammo+ammo2);
                BizInfo[BizEntered[playerid]][bizCash] += ammo * 400;
            }
            if(CompareStrings(gun, "shotgun"))
            {
                if(GetSecondaryWeapon(playerid) == 25)
                {
                    ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
                }
                else if(IsSecondarySlotTaken(playerid))
                {
                    SCM(playerid, COLOR_INFO, "Slotul secundar este ocupat.");
                    return 1;
                }
                if(GetCash(playerid) < ammo * 700)
                {
                    format(msg, sizeof(msg), "Trebuie sa ai $%d, pentru un shotgun cu %d gloante.", ammo * 700, ammo);
                    SCM(playerid, COLOR_GREEN2, msg);
                    return 1;
                }
                format(msg, sizeof(msg), "Ai cumparat un shotgun cu %d gloante pentru %d$.", ammo, ammo * 700);
                SCM(playerid, COLOR_GREEN2, msg);
                if(ammo2 > 0)
                {
                    format(msg, sizeof(msg), "Ai avut un shotgun inainte, asa ca ti-au fost adaugate %d gloante la cel actual.", ammo2);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
                GiveCash(playerid, -ammo * 700);
                GivePermWeapon(playerid, 3, 25, ammo+ammo2);
                BizInfo[BizEntered[playerid]][bizCash] += ammo * 700;
            }
            if(CompareStrings(gun, "mp5"))
            {
                if(GetSecondaryWeapon(playerid) == 29)
                {
                    ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
                }
                else if(IsSecondarySlotTaken(playerid))
                {
                    SCM(playerid, COLOR_INFO, "Slotul secundar este ocupat.");
                    return 1;
                }
                if(GetCash(playerid) < ammo * 1200)
                {
                    format(msg, sizeof(msg), "Trebuie sa ai $%d, pentru un MP5 cu %d gloante.", ammo * 1200, ammo);
                    SCM(playerid, COLOR_GREEN2, msg);
                    return 1;
                }
                format(msg, sizeof(msg), "Ai cumparat un MP5 cu %d gloante pentru %d$.", ammo, ammo * 1200);
                SCM(playerid, COLOR_GREEN2, msg);
                if(ammo2 > 0)
                {
                    format(msg, sizeof(msg), "Ai avut un MP5 inainte, asa ca ti-au fost adaugate %d gloante la cel actual.", ammo2);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
                GiveCash(playerid, -ammo * 1200);
                GivePermWeapon(playerid, 3, 29, ammo+ammo2);
                BizInfo[BizEntered[playerid]][bizCash] += ammo * 1200;
            }
            if(CompareStrings(gun, "m4a1"))
            {
                if(GetSecondaryWeapon(playerid) == 31)
                {
                    ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
                }
                else if(IsSecondarySlotTaken(playerid))
                {
                    SCM(playerid, COLOR_INFO, "Slotul secundar este ocupat.");
                    return 1;
                }
                if(GetCash(playerid) < ammo * 1500)
                {
                    format(msg, sizeof(msg), "Trebuie sa ai $%d, pentru un M4A1 cu %d gloante.", ammo * 1500, ammo);
                    SCM(playerid, COLOR_GREEN2, msg);
                    return 1;
                }
                format(msg, sizeof(msg), "Ai cumparat un M4A1 cu %d gloante pentru %d$.", ammo, ammo * 1500);
                SCM(playerid, COLOR_GREEN2, msg);
                if(ammo2 > 0)
                {
                    format(msg, sizeof(msg), "Ai avut un M4A1 inainte, asa ca ti-au fost adaugate %d gloante la cel actual.", ammo2);
                    SCM(playerid, COLOR_GREEN2, msg);
                }
                GiveCash(playerid, -ammo * 1500);
                GivePermWeapon(playerid, 3, 31, ammo+ammo2);
                BizInfo[BizEntered[playerid]][bizCash] += ammo * 1500;
            }
        }
    }
    return 1;
}

//SWAT ROPING
new rope[MAX_PLAYERS][58];

CMD:br(playerid, params[]) return cmd_buildingrope(playerid, params);
CMD:buildingrope(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0x33CCFFAA, "Nu poti face asta intr-un vehicul.");
    if(!SwatDuty{playerid}) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii on-duty (SWAT).");
    if(GetPVarInt(playerid,"rappelling") == 1) return SendClientMessage(playerid, 0x33CCFFAA, "Deja faci aceasta actiune.");
    new Float:X, Float:Y, Float:Z,Float:Angle;
    GetPlayerPos(playerid, X, Y, Z);
    GetXYInFrontOfPlayer(playerid, X, Y, 5.0);
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerHealth(playerid, 1000);
    SetPVarInt(playerid,"rappelling",1);
    SCM(playerid, COLOR_GREEN, "Nu uita sa ridici sfoara cand ajungi jos ('/sr')");
    rope[playerid][1] = CreateDynamicObject(19089, X, Y, Z+5, 0, 0, Angle);
    rope[playerid][2] = CreateDynamicObject(19089, X, Y, Z+3, 0, 0, Angle);
    rope[playerid][3] = CreateDynamicObject(19089, X, Y, Z+1, 0, 0, Angle);
    rope[playerid][4] = CreateDynamicObject(19089, X, Y, Z-2, 0, 0, Angle);
    rope[playerid][5] = CreateDynamicObject(19089, X, Y, Z-5, 0, 0, Angle);
    rope[playerid][6] = CreateDynamicObject(19089, X, Y, Z-7, 0, 0, Angle);
    rope[playerid][7] = CreateDynamicObject(19089, X, Y, Z-9, 0, 0, Angle);
    rope[playerid][8] = CreateDynamicObject(19089, X, Y, Z-10, 0, 0, Angle);
    rope[playerid][9] = CreateDynamicObject(19089, X, Y, Z-12, 0, 0, Angle);
    rope[playerid][10] = CreateDynamicObject(19089, X, Y, Z-17, 0, 0, Angle);
    rope[playerid][11] = CreateDynamicObject(19089, X, Y, Z-25, 0, 0, Angle);
    rope[playerid][12] = CreateDynamicObject(19089, X, Y, Z-28, 0, 0, Angle);
    rope[playerid][13] = CreateDynamicObject(19089, X, Y, Z-31, 0, 0, Angle);
    rope[playerid][14] = CreateDynamicObject(19089, X, Y, Z-34, 0, 0, Angle);
    rope[playerid][15] = CreateDynamicObject(19089, X, Y, Z-38, 0, 0, Angle);
    rope[playerid][16] = CreateDynamicObject(19089, X, Y, Z-41, 0, 0, Angle);
    rope[playerid][17] = CreateDynamicObject(19089, X, Y, Z-45, 0, 0, Angle);
    rope[playerid][18] = CreateDynamicObject(19089, X, Y, Z-49, 0, 0, Angle);
    rope[playerid][19] = CreateDynamicObject(19089, X, Y, Z-51, 0, 0, Angle);
    rope[playerid][20] = CreateDynamicObject(19089, X, Y, Z-57, 0, 0, Angle);
    rope[playerid][21] = CreateDynamicObject(19089, X, Y, Z-61, 0, 0, Angle);
    rope[playerid][22] = CreateDynamicObject(19089, X, Y, Z-65, 0, 0, Angle);
    rope[playerid][23] = CreateDynamicObject(19089, X, Y, Z-69, 0, 0, Angle);
    rope[playerid][24] = CreateDynamicObject(19089, X, Y, Z-73, 0, 0, Angle);
    rope[playerid][25] = CreateDynamicObject(19089, X, Y, Z-77, 0, 0, Angle);
    rope[playerid][26] = CreateDynamicObject(19089, X, Y, Z-80, 0, 0, Angle);
    rope[playerid][27] = CreateDynamicObject(19089, X, Y, Z-85, 0, 0, Angle);
    rope[playerid][28] = CreateDynamicObject(19089, X, Y, Z-89, 0, 0, Angle);
    rope[playerid][29] = CreateDynamicObject(19089, X, Y, Z-90, 0, 0, Angle);
    rope[playerid][30] = CreateDynamicObject(19089, X, Y, Z-95, 0, 0, Angle);
    rope[playerid][31] = CreateDynamicObject(19089, X, Y, Z-87, 0, 0, Angle);
    rope[playerid][32] = CreateDynamicObject(19089, X, Y, Z-100, 0, 0, Angle);
    rope[playerid][33] = CreateDynamicObject(19089, X, Y, Z-105, 0, 0, Angle);
    rope[playerid][34] = CreateDynamicObject(19089, X, Y, Z-110, 0, 0, Angle);
    rope[playerid][35] = CreateDynamicObject(19089, X, Y, Z-115, 0, 0, Angle);
    rope[playerid][36] = CreateDynamicObject(19089, X, Y, Z-120, 0, 0, Angle);
    rope[playerid][37] = CreateDynamicObject(19089, X, Y, Z-125, 0, 0, Angle);
    rope[playerid][38] = CreateDynamicObject(19089, X, Y, Z-130, 0, 0, Angle);
    rope[playerid][39] = CreateDynamicObject(19089, X, Y, Z-135, 0, 0, Angle);
    rope[playerid][40] = CreateDynamicObject(19089, X, Y, Z-140, 0, 0, Angle);
    rope[playerid][41] = CreateDynamicObject(19089, X, Y, Z-145, 0, 0, Angle);
    rope[playerid][42] = CreateDynamicObject(19089, X, Y, Z-150, 0, 0, Angle);
    rope[playerid][43] = CreateDynamicObject(19089, X, Y, Z-155, 0, 0, Angle);
    rope[playerid][45] = CreateDynamicObject(19089, X, Y, Z-160, 0, 0, Angle);
    rope[playerid][46] = CreateDynamicObject(19089, X, Y, Z-165, 0, 0, Angle);
    rope[playerid][47] = CreateDynamicObject(19089, X, Y, Z-170, 0, 0, Angle);
    rope[playerid][48] = CreateDynamicObject(19089, X, Y, Z-175, 0, 0, Angle);
    rope[playerid][49] = CreateDynamicObject(19089, X, Y, Z-180, 0, 0, Angle);
    rope[playerid][50] = CreateDynamicObject(19089, X, Y, Z-185, 0, 0, Angle);
    rope[playerid][51] = CreateDynamicObject(19089, X, Y, Z-190, 0, 0, Angle);
    rope[playerid][52] = CreateDynamicObject(19089, X, Y, Z-195, 0, 0, Angle);
    rope[playerid][53] = CreateDynamicObject(19089, X, Y, Z-200, 0, 0, Angle);
    rope[playerid][54] = CreateDynamicObject(19089, X, Y, Z-205, 0, 0, Angle);
    rope[playerid][55] = CreateDynamicObject(19089, X, Y, Z-210, 0, 0, Angle);
    rope[playerid][56] = CreateDynamicObject(19089, X, Y, Z-215, 0, 0, Angle);
    rope[playerid][57] = CreateDynamicObject(19089, X, Y, Z-220, 0, 0, Angle);
    ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
    return 1;
}

CMD:hr(playerid, params[]) return cmd_helirope(playerid, params);
CMD:helirope(playerid,params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii in LSPD Maverick.");
    if(IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti face asta ca sofer!");
    if(!SwatDuty{playerid}) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii on-duty (SWAT).");
    if(GetVehicleModel(vehicleid) != 497) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii in LSPD Maverick.");
    if(GetPVarInt(playerid,"rappelling") == 1) return SendClientMessage(playerid, 0x33CCFFAA, "Deja faci aceasta actiune.");
    RemovePlayerFromVehicle(playerid);
    new Float:X, Float:Y, Float:Z,Float:Angle;
    GetPlayerPos(playerid, X, Y, Z);
    SetPlayerPos(playerid, X, Y, Z-5);
    GetPlayerFacingAngle(playerid, Angle);
    SetPlayerHealth(playerid, 1000);
    SetPVarInt(playerid,"rappelling",1);
    SCM(playerid, COLOR_GREEN, "Nu uita sa ridici sfoara cand ajungi jos ('/sr')");
    rope[playerid][1] = CreateDynamicObject(19089, X, Y, Z+5, 0, 0, Angle);
    rope[playerid][2] = CreateDynamicObject(19089, X, Y, Z+3, 0, 0, Angle);
    rope[playerid][3] = CreateDynamicObject(19089, X, Y, Z+1, 0, 0, Angle);
    rope[playerid][4] = CreateDynamicObject(19089, X, Y, Z-2, 0, 0, Angle);
    rope[playerid][5] = CreateDynamicObject(19089, X, Y, Z-5, 0, 0, Angle);
    rope[playerid][6] = CreateDynamicObject(19089, X, Y, Z-7, 0, 0, Angle);
    rope[playerid][7] = CreateDynamicObject(19089, X, Y, Z-9, 0, 0, Angle);
    rope[playerid][8] = CreateDynamicObject(19089, X, Y, Z-10, 0, 0, Angle);
    rope[playerid][9] = CreateDynamicObject(19089, X, Y, Z-12, 0, 0, Angle);
    rope[playerid][10] = CreateDynamicObject(19089, X, Y, Z-17, 0, 0, Angle);
    rope[playerid][11] = CreateDynamicObject(19089, X, Y, Z-25, 0, 0, Angle);
    rope[playerid][12] = CreateDynamicObject(19089, X, Y, Z-28, 0, 0, Angle);
    rope[playerid][13] = CreateDynamicObject(19089, X, Y, Z-31, 0, 0, Angle);
    rope[playerid][14] = CreateDynamicObject(19089, X, Y, Z-34, 0, 0, Angle);
    rope[playerid][15] = CreateDynamicObject(19089, X, Y, Z-38, 0, 0, Angle);
    rope[playerid][16] = CreateDynamicObject(19089, X, Y, Z-41, 0, 0, Angle);
    rope[playerid][17] = CreateDynamicObject(19089, X, Y, Z-45, 0, 0, Angle);
    rope[playerid][18] = CreateDynamicObject(19089, X, Y, Z-49, 0, 0, Angle);
    rope[playerid][19] = CreateDynamicObject(19089, X, Y, Z-51, 0, 0, Angle);
    rope[playerid][20] = CreateDynamicObject(19089, X, Y, Z-57, 0, 0, Angle);
    rope[playerid][21] = CreateDynamicObject(19089, X, Y, Z-61, 0, 0, Angle);
    rope[playerid][22] = CreateDynamicObject(19089, X, Y, Z-65, 0, 0, Angle);
    rope[playerid][23] = CreateDynamicObject(19089, X, Y, Z-69, 0, 0, Angle);
    rope[playerid][24] = CreateDynamicObject(19089, X, Y, Z-73, 0, 0, Angle);
    rope[playerid][25] = CreateDynamicObject(19089, X, Y, Z-77, 0, 0, Angle);
    rope[playerid][26] = CreateDynamicObject(19089, X, Y, Z-80, 0, 0, Angle);
    rope[playerid][27] = CreateDynamicObject(19089, X, Y, Z-85, 0, 0, Angle);
    rope[playerid][28] = CreateDynamicObject(19089, X, Y, Z-89, 0, 0, Angle);
    rope[playerid][29] = CreateDynamicObject(19089, X, Y, Z-90, 0, 0, Angle);
    rope[playerid][30] = CreateDynamicObject(19089, X, Y, Z-95, 0, 0, Angle);
    rope[playerid][31] = CreateDynamicObject(19089, X, Y, Z-87, 0, 0, Angle);
    rope[playerid][32] = CreateDynamicObject(19089, X, Y, Z-100, 0, 0, Angle);
    rope[playerid][33] = CreateDynamicObject(19089, X, Y, Z-105, 0, 0, Angle);
    rope[playerid][34] = CreateDynamicObject(19089, X, Y, Z-110, 0, 0, Angle);
    rope[playerid][35] = CreateDynamicObject(19089, X, Y, Z-115, 0, 0, Angle);
    rope[playerid][36] = CreateDynamicObject(19089, X, Y, Z-120, 0, 0, Angle);
    rope[playerid][37] = CreateDynamicObject(19089, X, Y, Z-125, 0, 0, Angle);
    rope[playerid][38] = CreateDynamicObject(19089, X, Y, Z-130, 0, 0, Angle);
    rope[playerid][39] = CreateDynamicObject(19089, X, Y, Z-135, 0, 0, Angle);
    rope[playerid][40] = CreateDynamicObject(19089, X, Y, Z-140, 0, 0, Angle);
    rope[playerid][41] = CreateDynamicObject(19089, X, Y, Z-145, 0, 0, Angle);
    rope[playerid][42] = CreateDynamicObject(19089, X, Y, Z-150, 0, 0, Angle);
    rope[playerid][43] = CreateDynamicObject(19089, X, Y, Z-155, 0, 0, Angle);
    rope[playerid][45] = CreateDynamicObject(19089, X, Y, Z-160, 0, 0, Angle);
    rope[playerid][46] = CreateDynamicObject(19089, X, Y, Z-165, 0, 0, Angle);
    rope[playerid][47] = CreateDynamicObject(19089, X, Y, Z-170, 0, 0, Angle);
    rope[playerid][48] = CreateDynamicObject(19089, X, Y, Z-175, 0, 0, Angle);
    rope[playerid][49] = CreateDynamicObject(19089, X, Y, Z-180, 0, 0, Angle);
    rope[playerid][50] = CreateDynamicObject(19089, X, Y, Z-185, 0, 0, Angle);
    rope[playerid][51] = CreateDynamicObject(19089, X, Y, Z-190, 0, 0, Angle);
    rope[playerid][52] = CreateDynamicObject(19089, X, Y, Z-195, 0, 0, Angle);
    rope[playerid][53] = CreateDynamicObject(19089, X, Y, Z-200, 0, 0, Angle);
    rope[playerid][54] = CreateDynamicObject(19089, X, Y, Z-205, 0, 0, Angle);
    rope[playerid][55] = CreateDynamicObject(19089, X, Y, Z-210, 0, 0, Angle);
    rope[playerid][56] = CreateDynamicObject(19089, X, Y, Z-215, 0, 0, Angle);
    rope[playerid][57] = CreateDynamicObject(19089, X, Y, Z-220, 0, 0, Angle);
    ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
    return 1;
}

CMD:sr(playerid, params[]) return cmd_stoproping(playerid, params);
CMD:stoproping(playerid,params[])
{

    if(!SwatDuty{playerid}) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii on-duty (SWAT).");
    if(GetPVarInt(playerid,"rappelling") == 0) return SendClientMessage(playerid, 0x33CCFFAA, "Trebuie sa fii pe o funie.");
    for(new i; i < 58; i++)
    {
        DestroyDynamicObject(rope[playerid][i]);
    }
    SetPVarInt(playerid,"rappelling",0);
    ClearAnimations(playerid);
    SetPlayerHealth(playerid, 100);
    return 1;
}

GetXYInFrontOfPlayer(playerid, &Float:X, &Float:Y, Float:distance)
{
    new Float:A;
    GetPlayerPos(playerid, X, Y, A);
    GetPlayerFacingAngle(playerid, A);
    if (GetPlayerVehicleID(playerid))
    {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
    }
    X += (distance * floatsin(-A, degrees));
    Y += (distance * floatcos(-A, degrees));
}
//END OF SWAT ROPING

// DO NOT CROSS SYSTEM - IULY
CMD:dnc(playerid, params[]) { return cmd_donotcross(playerid, params); }

CMD:donotcross(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    new dnc_text[128];
    if(sscanf(params, "s[128]", dnc_text)) return SyntaxMSG(playerid, "/(d)o(n)ot(c)ross [text]");
    new dnc = GetNextDNC();
    if(dnc == -1) return SCM(playerid, COLOR_GREEN, "Nu mai sunt sloturi disponibile. Incearca mai tarziu.");
    DNCInfo[dnc][dOn] = 1;
//  DNCInfo[dnc][dText] = CreateDynamic3DTextLabel(dnc_text, DNC_COLOR, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 20.0, 0, 1);
    DNCInfo[dnc][dText] = CreateDynamic3DTextLabel(dnc_text, DNC_COLOR, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    DNCInfo[dnc][dPosX] = PlayerPosX(playerid);
    DNCInfo[dnc][dPosY] = PlayerPosY(playerid);
    DNCInfo[dnc][dPosZ] = PlayerPosZ(playerid);
    SCMEx(playerid, DNC_COLOR, "Un DNC-Sign a fost creeat cu textul '%s'.", dnc_text);
    return 1;
}

CMD:dncremove(playerid, params[]) { return cmd_donotcrossremove(playerid, params); }

CMD:dncr(playerid, params[]) { return cmd_donotcrossremove(playerid, params); }

CMD:donotcrossremove(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    new dnc = GetNearbyDNC(playerid);
    if(dnc == -1) return SCM(playerid, COLOR_GREEN, "Nu a fost gasit un DNC-Sign.");
    DNCInfo[dnc][dOn] = 0;
    DestroyDynamic3DTextLabel(DNCInfo[dnc][dText]);
    DNCInfo[dnc][dPosX] = 0;
    DNCInfo[dnc][dPosY] = 0;
    DNCInfo[dnc][dPosZ] = 0;
    SCM(playerid, DNC_COLOR, "Ai sters cel mai apropiat DNC-Sign.");
    return 1;
}

CMD:dncremoveall(playerid, params[]) { return cmd_donotcrossremoveall(playerid, params); }

CMD:dncrall(playerid, params[]) { return cmd_donotcrossremoveall(playerid, params); }

CMD:donotcrossremoveall(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREY, "Ai sters toate DNC-Signurile.");
    for(new i=1;i<MAX_DNC;i++)
    {
        if(DNCInfo[i][dOn] == 1)
        {
            DNCInfo[i][dOn] = 0;
            DestroyDynamic3DTextLabel(DNCInfo[i][dText]);
            DNCInfo[i][dPosX] = 0;
            DNCInfo[i][dPosY] = 0;
            DNCInfo[i][dPosZ] = 0;
        }
    }
    return 1;
}

stock GetNextDNC()
{
    for(new i=1;i<=MAX_DNC;i++)
    {
        if(DNCInfo[i][dOn] == 0) return i;
    }
    return -1;
}

stock GetNearbyDNC(playerid)
{
    for(new i=1;i<=MAX_DNC;i++)
    {
        if(PlayerToPoint(3, playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)) && DNCInfo[i][dOn] == 1) return i;
    }
    return -1;
}
// END OF DO NOT CROSS SYSTEM

CMD:fon(playerid, params[])
{
    return cmd_flist(playerid, params);
}

CMD:flist(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_GREY, "Nu esti intr-o factiune.");
    SCM(playerid, COLOR_GREY, "Membrii online:");
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
            {
                if(PlayerInfo[i][pFaction] == LSPD)
                {
                    if(CopDuty{i} == true)
                    {
                        if(GetPVarInt(i, "AdminDuty") == 1) format(msg, 128, "{FF9900}[ADMIN] {9189EF}%s %s", GetRankName(i), GetNameEx(i));
                        else format(msg, 128, "{9189EF}%s %s", GetRankName(i), GetNameEx(i));\
                    }
                    else
                    {
                        if(GetPVarInt(i, "AdminDuty") == 1) format(msg, 128, "{FF9900}[ADMIN] {AFAFAF}%s %s", GetRankName(i), GetNameEx(i));
                        else format(msg, 128, "%s %s", GetRankName(i), GetNameEx(i));
                    }
                }
                else if(PlayerInfo[i][pFaction] == LSFD)
                {
                    if(MedicDuty{i} == true)
                    {
                        if(GetPVarInt(i, "AdminDuty") == 1) format(msg, 128, "{FF9900}[ADMIN] {FF7D7D}%s %s", GetRankName(i), GetNameEx(i));
                        else format(msg, 128, "{9189EF}%s %s", GetRankName(i), GetNameEx(i));
                    }
                    else
                    {
                        if(GetPVarInt(i, "AdminDuty") == 1) format(msg, 128, "{FF9900}[ADMIN] {AFAFAF}%s %s", GetRankName(i), GetNameEx(i));
                        else format(msg, 128, "%s %s", GetRankName(i), GetNameEx(i));
                    }
                }
                else format(msg, 128, "%s %s", GetRankName(i), GetNameEx(i));
                SCM(playerid, COLOR_GRAD2, msg);
            }
        }
    }
    return 1;
}

stock GetOnlineMembers(id)
{
    new online = 0;
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == id)
        {
            if(PlayerIsOn(i))
            {
                online++;
            }
        }
    }
    return online;
}

CMD:factions(playerid, params[])
{
    new id = 1, fon[2000];
    format(fon, sizeof(fon), "(ID: %d) %s | Membri online: %d", id,  Factions[id][fName], GetOnlineMembers(id));
    for(new i=2;i<MAX_FACTIONS;i++)
    {
        if(Factions[i][fON] == 1)
        {
            format(msg, sizeof(msg), "\n(ID: %d) %s | Membri online: %d", i,  Factions[i][fName], GetOnlineMembers(i));
            strcat(fon, msg);
        }
    }
    ShowDialog(playerid, Show:<FACTIONS>, DIALOG_STYLE_LIST, "Factiunile serverului", fon, "Ok", "Inchide");
    return 1;
}

CMD:d(playerid, params[]) return cmd_departments(playerid, params);
CMD:departments(playerid, params[])
{
    new text[128], faction[23];
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/d)epartments [chat]");
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "FCmd: Factiunea nu are acces la acest chat!");
    format(faction, sizeof(faction), "%s", GetShortFactionName(PlayerInfo[playerid][pFaction]));
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "** [%s] %s %s: %.*s ...", faction, GetRankName(playerid), GetNameWithMask(playerid), pos, text);
        SendFactionMessage(LSPD, COLOR_ALLDEPT, msg);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
        SendFactionMessage(GOV, COLOR_ALLDEPT, msg);
        format(msg, sizeof(msg), " ... %s **", text[pos]);
        SendFactionMessage(LSPD, COLOR_ALLDEPT, msg);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
        SendFactionMessage(GOV, COLOR_ALLDEPT, msg);
    }
    else
    {
        format(msg, sizeof(msg), "** [%s] %s %s: %s **", faction, GetRankName(playerid), GetNameWithMask(playerid), text);
        SendFactionMessage(LSPD, COLOR_ALLDEPT, msg);
        SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
        SendFactionMessage(GOV, COLOR_ALLDEPT, msg);
    }
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "(Radio) %s spune: %.*s ...", GetNameWithMask(playerid), pos, text);
        SendProxRadioMessage(playerid, msg);
        format(msg, sizeof(msg), " ... %s", text[pos]);
        SendProxRadioMessage(playerid, msg);
    }
    else
    {
        format(msg, sizeof(msg), "(Radio) %s spune: %s", GetNameWithMask(playerid), text);
        SendProxRadioMessage(playerid, msg);
    }
    return 1;
}

CMD:hq(playerid, params[])
{
    new text[128];
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/hq [faction IC chat]");
    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != LSFD && PlayerInfo[playerid][pFaction] != GOV) return NotAuthMSG(playerid);
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "* [HQ] %s %s: %.*s ...**", GetRankName(playerid), GetNameEx(playerid), pos, text);
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, msg);
        format(msg, sizeof(msg), " ... %s *", text[pos]);
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, msg);
    }
    else
    {
        format(msg, sizeof(msg), "* [HQ] %s %s: %s *", GetRankName(playerid), GetNameEx(playerid), text);
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, msg);
    }
    return 1;
}

CMD:f(playerid, params[]) return cmd_faction(playerid, params);
CMD:faction(playerid, params[])
{
    new text[128];
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/f)action [ooc chat]");
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "FCmd: Factiunea nu are acces la acest chat!");
    if(Factions[PlayerInfo[playerid][pFaction]][fChatON] == 0 && PlayerInfo[playerid][pRank] < 7) return SCM(playerid, COLOR_WHITE, "Chat-ul factiunii a fost inchis de catre lider si nu ai rankul necesar pentru a scrie pe chat.");
    if(strlen(text) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "**(( %s %s: %.*s ...**", GetRankName(playerid), GetNameEx(playerid), pos, text);
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
        format(msg, sizeof(msg), " ... %s ))**", text[pos]);
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
    }
    else
    {
        format(msg, sizeof(msg), "**(( %s %s: %s ))**", GetRankName(playerid), GetNameEx(playerid), text);
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
    }
    return 1;
}

CMD:showbadge(playerid, params[])
{
    new iPlayerID;
    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != LSFD) return SCM(playerid, COLOR_GREY, "FCmd: Nu faci parte din vre-o factiune guvernamentala.");
    if(sscanf(params, "u", iPlayerID)) return SyntaxMSG(playerid, "/showbadge [playerid/PartOfName]");
    if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
    if(isAdminDuty(iPlayerID)) return NotNearPlayerMSG(playerid);
    ShowBadgeToPlayer(playerid, iPlayerID);
    return 1;
}

CMD:fchat(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "FCmd: Factiunea nu are acces la acest chat!");
    if(faction == 1)
    {
        if(!isHighCommand(playerid)) return SCM(playerid, COLOR_GREY, "Nu ai rank-ul necesar.");
        {
            if(Factions[faction][fChatON] == 1)
            {
                format(msg, sizeof(msg), " ** %s a inchis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 0;
            }
            else
            {
                format(msg, sizeof(msg), " ** %s a deschis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 1;
            }
            SaveFaction(faction);
        }
    }
    else if(faction == 2)
    {
        if(!isHighCommand(playerid)) return SCM(playerid, COLOR_GREY, "Nu ai rank-ul necesar.");
        {
            if(Factions[faction][fChatON] == 1)
            {
                format(msg, sizeof(msg), " ** %s a inchis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 0;
            }
            else
            {
                format(msg, sizeof(msg), " ** %s a deschis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 1;
            }
            SaveFaction(faction);
        }
    }
    else if(faction == 3)
    {
        if(!isHighCommand(playerid)) return SCM(playerid, COLOR_GREY, "Nu ai rank-ul necesar.");
        {
            if(Factions[faction][fChatON] == 1)
            {
                format(msg, sizeof(msg), " ** %s a inchis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 0;
            }
            else
            {
                format(msg, sizeof(msg), " ** %s a deschis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 1;
            }
            SaveFaction(faction);
        }
    }
    else if(faction == 4)
    {
        if(!isHighCommand(playerid)) return SCM(playerid, COLOR_GREY, "Nu ai rank-ul necesar.");
        {
            if(Factions[faction][fChatON] == 1)
            {
                format(msg, sizeof(msg), " ** %s a inchis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 0;
            }
            else
            {
                format(msg, sizeof(msg), " ** %s a deschis chat-ul factiunii **", GetNameEx(playerid));
                SendFactionMessage(faction, COLOR_LIGHTRED, msg);
                Factions[faction][fChatON] = 1;
            }
            SaveFaction(faction);
        }
    }
    else if(isHighCommand(playerid))
    {
        if(Factions[faction][fChatON] == 1)
        {
            format(msg, sizeof(msg), " ** %s a inchis chat-ul factiunii **", GetNameEx(playerid));
            SendFactionMessage(faction, COLOR_LIGHTRED, msg);
            Factions[faction][fChatON] = 0;
        }
        else
        {
            format(msg, sizeof(msg), " ** %s a deschis chat-ul factiunii **", GetNameEx(playerid));
            SendFactionMessage(faction, COLOR_LIGHTRED, msg);
            Factions[faction][fChatON] = 1;
        }
        SaveFaction(faction);
    }
    else return SCM(playerid, COLOR_LIGHTRED, "FCmd: Nu esti lider.");
    return 1;
}

CMD:invite(playerid, params[])
{
    new iPlayerID;
    if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/invite [playerid/PartOfName]");
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "FCmd: Nu ai acces la comanda.");
    if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
    if(iPlayerID == playerid) return SCM(playerid, COLOR_INFO, "Nu te poti invita pe tine insuti.");
    if(isLeader(playerid) || isHighCommand(playerid))
    {
        if(Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0) return SCM(playerid, COLOR_GREY, "Te rugam configureaza-ti factiunea inainte de a invita pe cineva.");
        if(PlayerInfo[iPlayerID][pFaction] == 0)
        {
            FactionRequest[iPlayerID] = PlayerInfo[playerid][pFaction];
            format(msg, sizeof(msg), "* Ai fost invitat in %s de catre %s ('/accept faction' pentru a intra.)", Factions[PlayerInfo[playerid][pFaction]][fName], GetNameWithMask(playerid));
            SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
            format(msg,sizeof(msg),"* L-ai invitat pe %s sa intre in %s",GetNameWithMask(iPlayerID), Factions[PlayerInfo[playerid][pFaction]][fName]);
            SCM(playerid, COLOR_YELLOW, msg);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "ERROR: Jucatorul acesta este deja intr-o factiune.");
    }
    else return SCM(playerid, COLOR_LIGHTRED, "FCmd: Nu esti lider.");
    return 1;
}

CMD:uninvite(playerid, params[])
{
    new iPlayerID;
    if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/invite [playerid/PartOfName]");
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "FCmd: Nu ai acces la comanda.");
    if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
    if(iPlayerID == playerid) return SCM(playerid, COLOR_INFO, "Nu te poti da afara pe tine insuti.");
    if(isLeader(playerid) || isHighCommand(playerid))
    {
        if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
        {
            format(msg, sizeof(msg), "* Ai fost dat afara din %s de catre %s", Factions[PlayerInfo[playerid][pFaction]][fName], GetNameEx(playerid));
            SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
            format(msg, sizeof(msg), "* L-ai dat afara pe %s din %s", GetNameEx(iPlayerID), Factions[PlayerInfo[playerid][pFaction]][fName]);
            SCM(playerid, COLOR_LIGHTBLUE, msg);
            PlayerInfo[iPlayerID][pFaction] = 0;
            PlayerInfo[iPlayerID][pRank] = 0;
            PlayerInfo[iPlayerID][pBadgeNumber] = 0;
            PlayerInfo[iPlayerID][pSpawnType] = 0;
            PlayerInfo[iPlayerID][pSwat] = 0;
            if(GetChannelFromSlot(iPlayerID, 1) == 911) { SetPlayerChannel(iPlayerID, 0, 1); PlayerInfo[iPlayerID][pAuthed][1] = 0; }
            if(GetChannelFromSlot(iPlayerID, 2) == 911) { SetPlayerChannel(iPlayerID, 0, 2); PlayerInfo[iPlayerID][pAuthed][2] = 0; }
            if(GetChannelFromSlot(iPlayerID, 3) == 911) { SetPlayerChannel(iPlayerID, 0, 3); PlayerInfo[iPlayerID][pAuthed][3] = 0; }
            SetPlayerColor(iPlayerID, COLOR_WHITE);
            format(msg, sizeof(msg), "** [Factiune] %s a fost dat afara din factiune de catre %s", GetNameEx(iPlayerID), GetNameEx(playerid));
            SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "ERROR: Acest jucator nu este in factiunea ta.");
    }
    else return SCM(playerid, COLOR_LIGHTRED, "FCmd: Nu esti lider.");
    return 1;
}

CMD:setrank(playerid, params[])
{
    new iPlayerID, rank;
    if(sscanf(params,"ud",iPlayerID,rank)) return SyntaxMSG(playerid, "/setrank [playerid/PartOfName] [rank]");
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
    if(isLeader(playerid) || isHighCommand(playerid))
    {
        if(iPlayerID == playerid) return SCM(playerid, COLOR_INFO, "Nu-ti poti acorda tie un rank.");
        if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
        {
            if(rank > 0 && rank <= Factions[PlayerInfo[playerid][pFaction]][fRankAmount])
            {
                PlayerInfo[iPlayerID][pRank] = rank;
                format(msg, sizeof(msg), "* Gradul tau a fost schimbat de catre %s, noul tau grad este: %d", GetNameEx(playerid), rank);
                SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
                format(msg, sizeof(msg), "* I-ai schimbat lui %s gradul in: %d", GetNameEx(iPlayerID), rank);
                SCM(playerid, COLOR_LIGHTBLUE, msg);
            }
            else return SCM(playerid, COLOR_GREY, "FCmd: Gradul trebuie sa fie egal cu numarul setat in factiune (/ranks)");
        }
        else return SCM(playerid, COLOR_LIGHTRED, "ERROR: Acest jucator nu este in factiunea ta.");
    }
    else return SCM(playerid, COLOR_LIGHTRED, "FCmd: Nu esti lider.");
    return 1;
}

CMD:ranks(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(!isLeader(playerid) && !isHighCommand(playerid)) return SCM(playerid, COLOR_WHITE, "FCmd: Nu esti lider.");
    format(msg, sizeof(msg), "Numar de grade: %d | R1: %s | R2: %s | R3: %s | R4: %s | R5: %s", Factions[faction][fRankAmount], Factions[faction][fRank1], Factions[faction][fRank2],Factions[faction][fRank3], Factions[faction][fRank4], Factions[faction][fRank5]);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "R6: %s | R7: %s | R8: %s | R9: %s | R10: %s", Factions[faction][fRank6], Factions[faction][fRank7], Factions[faction][fRank8], Factions[faction][fRank9], Factions[faction][fRank10]);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "R11: %s | R12: %s | R13: %s | R14: %s | R15: %s", Factions[faction][fRank11], Factions[faction][fRank12], Factions[faction][fRank13], Factions[faction][fRank14], Factions[faction][fRank15]);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "R16: %s | R17: %s | R18: %s | R19: %s | R20: %s", Factions[faction][fRank16], Factions[faction][fRank17], Factions[faction][fRank18], Factions[faction][fRank19], Factions[faction][fRank20]);
    SCM(playerid, COLOR_WHITE, msg);
    return 1;
}

CMD:tagcolor(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    if(CopDuty{playerid} == false) return SCM(playerid, COLOR_GREY, "Nu esti duty.");
    if(GetPVarInt(playerid, "COLOR") == 1)
    {
        SetNormalColor(playerid);
        SetPVarInt(playerid, "COLOR", 0);
        SCM(playerid, COLOR_WHITE, "Noua ta culoare este: {FFFFFF}alb.");
    }
    else
    {
        SetPlayerColor(playerid, 0x8c8cfeff);
        SetPVarInt(playerid, "COLOR", 1);
        SCM(playerid, COLOR_WHITE, "Noua ta culoare este: {8C8CFE}albastru{FFFFFF}.");
    }
    return 1;
}

CMD:swat(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != 1) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(!PlayerToPoint(30.0, playerid, 312.2816,-165.5768,999.6010) && !PlayerToPoint(3.0, playerid, 327.2328,307.7859,999.1484)) return SCM(playerid, COLOR_WHITE, "Nu esti in Armoury.");
    if(PlayerInfo[playerid][pSwat] == 0) return SCM(playerid, COLOR_LIGHTRED, "Nu esti autorizat sa folosesti echipamentul SWAT.");
    if(!SwatDuty{playerid})
    {
        SwatDuty{playerid} = true;
        SetPlayerArmour(playerid,200);
        SetPlayerHealth(playerid,100);
        GiveWeapon(playerid, 31, 3000);
        GiveWeapon(playerid, 29, 2000);
        GiveWeapon(playerid, 24, 2000);
        GiveWeapon(playerid, 17, 100);
        GiveWeapon(playerid, 34, 200);
        SetPlayerSkin(playerid, 285);
        format(msg, sizeof(msg), "** HQ: %s %s este disponibil ca SWAT! **",GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    }
    else
    {
        SwatDuty{playerid} = false;
        SetPlayerArmour(playerid,0);
        SafeResetPlayerWeapons(playerid);
        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
        format(msg, sizeof(msg), "** HQ: %s %s nu mai este disponibil ca SWAT! **",GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    }
    return 1;
}

CMD:duty(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(faction == LSPD)
    {
        if(!CopDuty{playerid})
        {
            SetPVarInt(playerid, "COLOR", 1);
//          ShowDialog(playerid, Show:<LSPDDuty>, DIALOG_STYLE_MSGBOX, "LSPD Duty", "Alege-ti culoarea din TAB.", "Albastru", "Alb");
            if(!PlayerToPoint(30.0, playerid, 312.2816,-165.5768,999.6010) && !PlayerToPoint(3.0, playerid, 327.2328,307.7859,999.1484)) return SCM(playerid, COLOR_WHITE, "Nu esti in Armoury.");
            format(msg, sizeof(msg), "%s %s isi scoate arma si insigna din dulap.", GetRankName(playerid), GetNameWithMask(playerid));
            ProxDetector(15.0, playerid, msg, COLOR_PURPLE);
            format(msg, sizeof(msg), "** HQ: %s %s este acum OnDuty! **", GetRankName(playerid), GetNameEx(playerid));
            SCM(playerid, COLOR_GREY, "Pentru a-ti schimba culoarea foloseste '/tagcolor'.");
            SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
            SafeResetPlayerWeapons(playerid);
            GiveWeapon(playerid, 24, 300);
            GiveWeapon(playerid, 3, 1);
            GiveWeapon(playerid, 41, 60000);
            CopDuty{playerid} = true;
            SetPlayerArmour(playerid, 200);
            SetPlayerHealth(playerid, 100);
            SetPlayerColor(playerid, 0x8c8cfeff);
        }
        else
        {
            format(msg, sizeof(msg), "** HQ: %s %s este acum Off Duty! **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(faction, COLOR_LSPDNEW, msg);
            CopDuty{playerid} = false;
            ShowPlayerName(playerid, true);
            SetNormalColor(playerid);
            SetPlayerArmour(playerid,0);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
            if(PlayerInfo[playerid][pHasArmour] == 1)
            {
                SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
            }
            SafeResetPlayerWeapons(playerid);
            SetPlayerWeapons(playerid);
        }
    }
    if(faction == LSFD)
    {
        if(!PlayerToPoint(10.0, playerid, 3697.7292,-478.7621,3899.5659)) return SCM(playerid, COLOR_GREY, "Nu esti in vestiar.");
        if(!MedicDuty{playerid})
        {
            ActionMessage(playerid,15.0,"intra si ia echipamentul din dulapul sau.");
            MedicDuty{playerid} = true;
            SetPlayerArmour(playerid, 200);
            SetPlayerHealth(playerid, 100);
            format(msg, sizeof(msg), "** HQ: %s %s este acum On Duty! **",GetRankName(playerid), GetPlayerLastName(playerid));
            SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
            SetPlayerColor(playerid, LSFD_DUTY);
        }
        else
        {
            MedicDuty{playerid} = false;
            format(msg, sizeof(msg), "** HQ: %s %s este Off Duty! **",GetRankName(playerid), GetPlayerLastName(playerid));
            SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
            SetNormalColor(playerid);
        }
    }
    if(faction == GOV)
    {
        if(!PlayerToPoint(10.0, playerid, 915.0098,2365.9531,246.4621)) return SCM(playerid, COLOR_GREY, "Nu esti vestiar");
        if(!GOVDuty{playerid})
        {
            GOVDuty{playerid} = true;
            GiveWeapon(playerid, 43, 300);
            format(msg, sizeof(msg), "** HQ: %s %s este acum On Duty! **",GetRankName(playerid), GetPlayerLastName(playerid));
            SendFactionMessage(LSFD, COLOR_LIGHTGREEN, msg);
        }
        else
        {
            GOVDuty{playerid} = false;
            format(msg, sizeof(msg), "** HQ: %s %s este Off Duty! **",GetRankName(playerid), GetPlayerLastName(playerid));
            SendFactionMessage(LSFD, COLOR_LIGHTGREEN, msg);
        }
    }
    if(faction == NEWS)
    {
        if(!PlayerToPoint(10.0, playerid, 1051.7539,50.8305,801.0403)) return SCM(playerid, COLOR_GREY, "Nu esti vestiar");
        if(!NewsDuty{playerid})
        {
            NewsDuty{playerid} = true;
            GiveWeapon(playerid, 43, 300);
            format(msg, sizeof(msg), "** HQ: %s %s este acum On Duty! **",GetRankName(playerid), GetPlayerLastName(playerid));
            SendFactionMessage(LSFD, COLOR_LIGHTGREEN, msg);
        }
        else
        {
            NewsDuty{playerid} = false;
            format(msg, sizeof(msg), "** HQ: %s %s este Off Duty! **",GetRankName(playerid), GetPlayerLastName(playerid));
            SendFactionMessage(LSFD, COLOR_LIGHTGREEN, msg);
        }
    }
    return 1;
}

CMD:uniform(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(PlayerToPoint(3.0, playerid, Factions[faction][fUniformX], Factions[faction][fUniformY], Factions[faction][fUniformZ]) || faction==LSPD && PlayerToPoint(3, playerid, 326.9988,307.7197,999.1484) )
    {
        if(faction == LSPD)
        {
            if(!CopDuty{playerid}) return SCM(playerid, COLOR_INFO, "Trebuie sa fi On Duty pentru a-ti lua o uniforma.");
            SelectTextDraw(playerid, 0xFFFFFFFF);
            PlayerTextDrawShow(playerid, WearButton[playerid]);
            PlayerTextDrawShow(playerid, NextButton[playerid]);
            PlayerTextDrawShow(playerid, PrevButton[playerid]);
            SetIntVar(playerid, "SelectingUniform", 1);
            SetPlayerSkin(playerid, LSPDSkins[0]);
            SkinSlot[playerid] = 0;
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(faction == LSFD)
        {
            if(!MedicDuty{playerid}) return SCM(playerid, COLOR_INFO, "Trebuie sa fi On Duty pentru a-ti lua o uniforma.");
            SelectTextDraw(playerid, 0xFFFFFFFF);
            PlayerTextDrawShow(playerid, WearButton[playerid]);
            PlayerTextDrawShow(playerid, NextButton[playerid]);
            PlayerTextDrawShow(playerid, PrevButton[playerid]);
            SetIntVar(playerid, "SelectingUniform", 2);
            SetPlayerSkin(playerid, LSFDSkins[0]);
            SkinSlot[playerid] = 0;
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(faction == NEWS)
        {
            if(!NewsDuty{playerid}) return SCM(playerid, COLOR_INFO, "Trebuie sa fi On Duty pentru a-ti lua o uniforma.");
            SelectTextDraw(playerid, 0xFFFFFFFF);
            PlayerTextDrawShow(playerid, WearButton[playerid]);
            PlayerTextDrawShow(playerid, NextButton[playerid]);
            PlayerTextDrawShow(playerid, PrevButton[playerid]);
            SetIntVar(playerid, "SelectingUniform", 4);
            SetPlayerSkin(playerid, NEWSSkins[0]);
            SkinSlot[playerid] = 0;
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
        if(faction == NGUARD)
        {
            if(!NGuardDuty{playerid}) return SCM(playerid, COLOR_INFO, "Trebuie sa fi On Duty pentru a-ti lua o uniforma.");
            SelectTextDraw(playerid, 0xFFFFFFFF);
            PlayerTextDrawShow(playerid, WearButton[playerid]);
            PlayerTextDrawShow(playerid, NextButton[playerid]);
            PlayerTextDrawShow(playerid, PrevButton[playerid]);
            SetIntVar(playerid, "SelectingUniform", 5);
//          SetPlayerSkin(playerid, NGuardSkins[0]);
            SkinSlot[playerid] = 0;
            OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
        }
    }
    else return SCM(playerid, COLOR_LIGHTRED, "ERROR: Nu esti la vestiar.");
    return 1;
}

CMD:armoury(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == LSPD)
    {
        if(!PlayerToPoint(3.0, playerid, 312.2816,-165.5768,999.6010) && !PlayerToPoint(3, playerid, 326.9988,307.7197,999.1484)) return SCM(playerid, COLOR_WHITE, "Nu esti in armoury.");
        if(!CopDuty{playerid}) return SCM(playerid, COLOR_INFO, "Trebuie sa fi On Duty");
        ShowDialog(playerid, Show:<LSPDArmoury>, DIALOG_STYLE_LIST, "Echipamentele OCSD", "Arme\nObiectele politiei", "Imbraca", "Anuleaza");
    }
    else if(PlayerInfo[playerid][pFaction] == LSFD)
    {
        if(!PlayerToPoint(3.0, playerid, 151.7360,-1997.1891,2001.8329)) return SCM(playerid, COLOR_WHITE, "Nu esti in armoury.");
        if(!MedicDuty{playerid}) return SCM(playerid, COLOR_INFO, "Trebuie sa fi On Duty");
        ShowDialog(playerid, Show:<LSFDArmoury>, DIALOG_STYLE_LIST, "Dulap OCFA", "Drujba\nExtintor\nLopata", "Alege", "Anuleaza");
    }
    else if(PlayerInfo[playerid][pFaction] == GOV)
    {
        if(!PlayerToPoint(3.0, playerid, 915.0098,2365.9531,246.4621)) return SCM(playerid, -1, "Nu esti in vestiar!");
        ShowDialog(playerid, Show:<GOVArmoury>, DIALOG_STYLE_LIST, "Dulap GOVERNMENT", "Spray cu piper\nTomfa\nCamera\nObiecte", "Selecteaza", "Anuleaza");
    }
    else return SCM(playerid, -1, "Nu faci parte dintr-o factiune gurvernamentala!");
    return 1;
}

CMD:door(playerid, params[])
{
    if(HouseEntered[playerid] == -1)
    {
        for(new i = 0; i < MAX_OBJECTS; i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ]) && Doors[i][doorObjectOn])
            {
                if(Doors[i][doorFaction] != 0 && Doors[i][doorFaction] == PlayerInfo[playerid][pFaction])
                {
                    if(Doors[i][doorOpened] == 1)
                    {
                        Doors[i][doorOpened] = 0;
                        MoveDynamicObject(Doors[i][doorObject], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorOpenSpeed], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
                    }
                    else
                    {
                        Doors[i][doorOpened] = 1;
                        MoveDynamicObject(Doors[i][doorObject], Doors[i][doorPosX]-Doors[i][doorMoveX], Doors[i][doorPosY]-Doors[i][doorMoveY], Doors[i][doorPosZ]-Doors[i][doorMoveZ], Doors[i][doorOpenSpeed], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
                    }
                    return 1;
                }
            }
        }
    }
    else
    {
        new house = HouseEntered[playerid];
        for(new i = 1; i < MAX_FURNITURE; i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ]) && FurnitureInfo[house][i][fOn] && isHouseDoor(FurnitureInfo[house][i][fModel]))
            {
                if(FurnitureInfo[house][i][fOpened] == 0)
                {
                    if(FurnitureInfo[house][i][fLocked] == 1) return SCM(playerid, COLOR_GREY, "Usa este inchisa.");
                    MoveDynamicObject(FurnitureInfo[house][i][fObject], FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ], 1.5, FurnitureInfo[house][i][fPosRX], FurnitureInfo[house][i][fPosRY], FurnitureInfo[house][i][fPosRZ]-90.0);
                    FurnitureInfo[house][i][fOpened] = 1;
                }
                else
                {
                    FurnitureInfo[house][i][fOpened] = 0;
                    MoveDynamicObject(FurnitureInfo[house][i][fObject], FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ], 1.5, FurnitureInfo[house][i][fPosRX], FurnitureInfo[house][i][fPosRY], FurnitureInfo[house][i][fPosRZ]);
                }
                return 1;
            }
        }
    }
    return 1;
}

CMD:gate(playerid, params[])
{
    new gate = GetClosestGate(playerid);
    if(gate == -1) return 1;
    if(Gates[gate][gateFaction] != 0 && Gates[gate][gateFaction] != PlayerInfo[playerid][pFaction]) return 1;
    if(Gates[gate][gateOpened] == 1 && Gates[gate][gateOpening] == 0)
    {
        PlaySoundForAll(Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
        SetTimerEx("StopGateSound", Gates[gate][gateSoundLength], false, "iifff", gate, Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
        Gates[gate][gateOpened] = 0;
        Gates[gate][gateOpening] = 1;
        MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], Gates[gate][gateOpenSpeed], Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
    }
    else if(Gates[gate][gateOpened] == 0 && Gates[gate][gateOpening] == 0)
    {
        PlaySoundForAll(Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
        SetTimerEx("StopGateSound", Gates[gate][gateSoundLength], false, "iifff", gate, Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
        Gates[gate][gateOpened] = 1;
        Gates[gate][gateOpening] = 1;
        MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX]-Gates[gate][gateMoveX], Gates[gate][gatePosY]-Gates[gate][gateMoveY], Gates[gate][gatePosZ]-Gates[gate][gateMoveZ], Gates[gate][gateOpenSpeed], Gates[gate][gatePosRX]-Gates[gate][gateMoveRX], Gates[gate][gatePosRY]-Gates[gate][gateMoveRY], Gates[gate][gatePosRZ]-Gates[gate][gateMoveRZ]);
    }
    return 1;
}

//=================================Police Commands=================================//
CMD:pcmds(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    SCM(playerid,COLOR_GREEN2,"___________________________PCMDS___________________________");
    SCM(playerid, COLOR_GREY, "** SASD ** /cuff /uncuff (/m)egaphone /taser /frisk /friskdrugs /mdc /door /gate /armoury (/gov)ernment");
    SCM(playerid, COLOR_GREY, "** SASD ** /rb(1-10) /rrb(1-10) /ticket /arrest /detain /revoke /createspike /abp /prison");
    SCM(playerid, COLOR_GREY, "** SASD ** /removespike /removeallspikes /cctv /exitcctv /ptow /impound /wanted /toll");
    SCM(playerid, COLOR_GREY, "** SASD ** /authorizeswat /deauthorizeswat /siren /siren2 /dsiren /dsiren2 /checkplate /pticket /heal");
    SCM(playerid, COLOR_GREY, "** SASD ** /carsign /deletecarsign /(d)o(n)ot(c)ross /(d)o(n)ot(c)ross(r)emove /(d)o(n)ot(c)ross(r)emove(all)");
    SCM(playerid, COLOR_GREY, "** SASD ** /(b)uilding(r)ope /(h)eli(r)ope /(s)top(r)oping /showfines /unarrest (prison & arrest)");
    return 1;
}

//=================================FD Commands=================================//
CMD:putinambu(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], id, seat, vehicle = GetPlayerVehicleID(playerid);
    if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(sscanf(params,"ud",id,seat)) return SyntaxMSG(playerid, "/putinambu [playerid/PartOfName] [seat(1-3)]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(seat > 3 || seat < 1) return SCM(playerid, COLOR_WHITE, "ID-ul locului trebuie sa fie intre 1-3.");
    if(id == playerid) return SCM(playerid, COLOR_WHITE, "Nu te poti pune pe tine.");
    if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!PlayerIsWounded(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este ranit.");
    if(!PlayerInCar(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi inauntrul vehiculului.");
    StopPlayerAnims(id);
    PutPlayerInVehicle(id, vehicle, seat);
    SCMEx(playerid, COLOR_LIGHTRED, "L-ai pus pe %s in vehicul.", GetNameEx(id));
    SCMEx(id, COLOR_LIGHTRED, "Ai fost pus in masina lui %s.", GetNameEx(playerid));
    return 1;
}

CMD:operation(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], id;
    if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/operation [playerid/PartOfName]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(id == playerid) return SCM(playerid, COLOR_WHITE, "Nu-ti poti da heal singur.");
    if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!PlayerIsWounded(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este ranit.");
    StopPlayerAnims(id);
    RemoveVar(id, "JustDied");
    RemoveVar(id, "LoggedInDead");
    PlayerInfo[id][pDied] = 0;
    adeadtimer[id] = 0;
    UnFreezePlayer(id);
    SetPlayerHealth(id, 100.0);
    SCMEx(playerid, COLOR_LIGHTRED, "* L-ai deblocat pe %s.", GetNameEx(id));
    SCMEx(id, COLOR_LIGHTRED, "* %s %s are grija de tine acum.", GetRankName(playerid), GetNameEx(playerid));
    return 1;
}

CMD:hpc(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], id, vehicle = GetPlayerVehicleID(playerid);
    if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/hpc [playerid/PartOfName]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!IsAFDCar(vehicle)) return SCM(playerid, COLOR_WHITE, "Trebuie sa fi intr-o masina de pompieri.");
    SCMEx(playerid, COLOR_LIGHTBLUE, "* Informatii - %s", GetFullDate());
    SCMEx(playerid, COLOR_LIGHTBLUE, "NumePrenume: %s, Varsta: %d, Contact: %d.", GetNameEx(id), PlayerInfo[id][pAge], PlayerInfo[id][pNumber]);
    SCMEx(playerid, COLOR_LIGHTBLUE, "Domiciliat in: %s", GetHouseLocation(id));
    return 1;
}

//=================================FD Commands=================================//

CMD:heal(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(!CopDuty{playerid} && !MedicDuty{playerid}) return SCM(playerid, -1, "Nu esti duty!");
    if(faction == LSPD)
    {
        if(!PlayerToPoint(30.0, playerid, 312.2816,-165.5768,999.6010)) return SCM(playerid, COLOR_WHITE, "Nu esti in vestiar.");
        SCM(playerid, COLOR_WHITE, "INFO: Viata si armura au fost setate la 100!");
        SetPlayerHealth(playerid, 100.0);
        SetPlayerArmour(playerid, 100.0);
    }
    if(faction == GOV)
    {
        if(!PlayerToPoint(30.0, playerid, 367.2357,216.0575,1008.3828)) return SCM(playerid, COLOR_WHITE, "Nu esti in vestiar.");
        SCM(playerid, COLOR_WHITE, "INFO: Viata si armura au fost setate la 100!");
        SetPlayerHealth(playerid, 100.0);
        SetPlayerArmour(playerid, 100.0);
    }
    if(faction == LSFD) //FD Heal
    {
        new id;
        if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/heal [playerid/PartOfName]");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(id == playerid) return SCM(playerid, COLOR_WHITE, "Nu-ti poti da heal singur.");
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(GetPlayerHP(id) >= 100) return SCM(playerid, COLOR_WHITE, "Acest jucator are deja viata incarcata.");
        SetIntVar(id, "HealFrom", playerid);
        SCMEx(id, COLOR_WHITE, "* %s s-a oferit sa-ti dea viata, /accept heal daca doresti.", GetName(playerid));
        SCMEx(playerid, COLOR_WHITE, "* Ai trimis o cerere lui %s...", GetName(id));
    }
    return 1;
}

CMD:gov(playerid, params[]) return cmd_government(playerid, params);
CMD:government(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "(/gov)ernment [message]");
    new faction = PlayerInfo[playerid][pFaction];
    new rank = PlayerInfo[playerid][pRank];
    if(faction != LSPD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(rank != Factions[faction][fLeaderRank] && rank != Factions[faction][fLeaderRank]-1) return SCM(playerid, COLOR_GREY, "Numai rank-urile mari pot folosi aceasta comanda.");
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "[ANUNT GUVERNAMENTAL] %.*s ...", pos, params);
        SCMALL(COLOR_LSPDNEW, msg);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        SCMALL(COLOR_LSPDNEW, msg);
    }
    else
    {
        format(msg, sizeof(msg), "[ANUNT GUVERNAMENTAL] %s", params);
        SCMALL(COLOR_LSPDNEW, msg);
    }
    format(msg, sizeof(msg), "* %s[ID:%d] a folosit comanda /gov.", GetNameEx(playerid), playerid);
    AMSG(COLOR_GREEN2, msg);
    return 1;
}

CMD:tolls(playerid, params[]) return cmd_toll(playerid, params);

CMD:toll(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    new option[11];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(sscanf(params,"s[11]",option))
    {
        SCM(playerid, COLOR_YELLOW, "Control bariere San Andreas");
        SCM(playerid, COLOR_GRAD2, "lock/release - Blocheaza/deblocheaza toate barierele.");
        SCM(playerid, COLOR_GRAD2, "flint - Blocheaza/deblocheaza bariera din Flint.");
        SCM(playerid, COLOR_GRAD2, "richman - Blocheaza/deblocheaza bariera din Richman.");
        SCM(playerid, COLOR_GRAD2, "lv - Blocheaza/deblocheaza bariera de pe LV-LS.");
        SCM(playerid, COLOR_GRAD2, "blueberryr - Blocheaza/deblocheaza bariera din Bluberry(DREAPTA).");
        SCM(playerid, COLOR_GRAD2, "blueberryl - Blocheaza/deblocheaza bariera din Blueberry(STANGA).");
        return 1;
    }
    if(!Toll_TimePassedCops(playerid))
        return 1;
    if(CompareStrings(option, "lock"))
    {
        aTolls[FlintToll][E_tLocked] = 1;
        aTolls[RichmanToll][E_tLocked] = 1;
        aTolls[LVToll][E_tLocked] = 1;
        aTolls[BlueberryTollR][E_tLocked] = 1;
        aTolls[BlueberryTollL][E_tLocked] = 1;

        Toll_CloseToll(FlintToll);
        Toll_CloseToll(RichmanToll);
        Toll_CloseToll(LVToll);
        Toll_CloseToll(BlueberryTollR);
        Toll_CloseToll(BlueberryTollL);

        format(msg, 256, "** HQ Announcement: Toate barierele au fost blocate de catre %s %s ! **", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    }
    if(CompareStrings(option, "release"))
    {
        aTolls[FlintToll][E_tLocked] = 0;
        aTolls[RichmanToll][E_tLocked] = 0;
        aTolls[LVToll][E_tLocked] = 0;
        aTolls[BlueberryTollR][E_tLocked] = 0;
        aTolls[BlueberryTollL][E_tLocked] = 0;
        format(msg, 256, "** HQ Announcement: Toate barierele au fost deblocate de catre %s %s ! **",GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    }
    if(CompareStrings(option, "flint"))
    {
        if(aTolls[FlintToll][E_tLocked] == 0)
        {
            aTolls[FlintToll][E_tLocked] = 1;
            Toll_CloseToll(FlintToll);
            format(msg, 256, "** HQ Announcement: %s %s a BLOCAT barierele din Flint. **",GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
        else
        {
            aTolls[FlintToll][E_tLocked] = 0;
            format(msg, 256, "** HQ Announcement: %s %s a DEBLOCAT barierele din Flint. **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
    }
    if(CompareStrings(option, "richman"))
    {
        if(aTolls[RichmanToll][E_tLocked] == 0)
        {
            aTolls[RichmanToll][E_tLocked] = 1;
            Toll_CloseToll(RichmanToll);
            format(msg, 256, "** HQ Announcement: %s %s a BLOCAT barierele din Richman. **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
        else
        {
            aTolls[RichmanToll][E_tLocked] = 0;
            format(msg, 256, "** HQ Announcement: %s %s a DEBLOCAT barierele din Richman. **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
    }
    if(CompareStrings(option, "lv"))
    {
        if(aTolls[LVToll][E_tLocked] == 0)
        {
            aTolls[LVToll][E_tLocked] = 1;
            Toll_CloseToll(LVToll);
            format(msg, 256, "** HQ Announcement: %s %s a BLOCAT barierele de pe LS-LV. **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
        else
        {
            aTolls[LVToll][E_tLocked] = 0;
            format(msg, 256, "** HQ Announcement: %s %s a DEBLOCAT barierele de pe LS-LV. **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
    }
    if(CompareStrings(option, "blueberryr"))
    {
        if(aTolls[BlueberryTollR][E_tLocked] == 0)
        {
            aTolls[BlueberryTollR][E_tLocked] = 1;
            Toll_CloseToll(BlueberryTollR);
            format(msg, 256, "** HQ Announcement: %s %s a BLOCAT barierele din Blueberry(DREAPTA). **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
        else
        {
            aTolls[BlueberryTollR][E_tLocked] = 0;
            format(msg, 256, "** HQ Announcement: %s %s a DEBLOCAT barierele din Blueberry(DREAPTA). **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
    }
    if(CompareStrings(option, "blueberryl"))
    {
        if(aTolls[BlueberryTollL][E_tLocked] == 0)
        {
            aTolls[BlueberryTollL][E_tLocked] = 1;
            Toll_CloseToll(BlueberryTollL);
            format(msg, 256, "** HQ Announcement: %s %s a BLOCAT barierele din Blueberry(STANGA). **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
        else
        {
            aTolls[BlueberryTollL][E_tLocked] = 0;
            format(msg, 256, "** HQ Announcement: %s %s a DEBLOCAT barierele din Blueberry(STANGA). **", GetRankName(playerid), GetNameEx(playerid));
            SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        }
    }
    return 1;
}

CMD:apb(playerid, params[])
{
    new action[64], secoption[24];
    new number, info[256];
    new tmp[2][70];
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    //SCM(playerid, COLOR_LIGHTRED, "Not ready yet.");
    if(sscanf(params,"s[64]S(NULL)[128]", action, secoption))
    {
        SCM(playerid, COLOR_WHITE, "__________________________________");
        SyntaxMSG(playerid, "/apb [action]");
        SCM(playerid, COLOR_LIGHTRED, "** APB ** /apb create [suspect|acuzatii]");
        SCM(playerid, COLOR_LIGHTRED, "** APB ** /apb show");
        SCM(playerid, COLOR_LIGHTRED, "** APB ** /apb clear [numar]");
        SCM(playerid, COLOR_LIGHTRED, "** APB ** /apb delete [IDul APBului]");
        SCM(playerid, COLOR_LIGHTRED, "** APB ** /apb list (Arata toate APBurile)");
        SCM(playerid, COLOR_LIGHTRED, "** APB ** /apb modify [numar] [suspect|acuzatii]");
        SCM(playerid, COLOR_LIGHTRED, "Examplu: /apb create Huntley Alb | Evadare");
        SCM(playerid, COLOR_LIGHTBLUE, "Asigura-te ca stergi APBul (/apb delete) dupa ce suspectul a fost arestat!");
        SCM(playerid, COLOR_WHITE, "__________________________________");
        return 1;
    }
    if(CompareStrings(action, "show"))
    {
        if(sscanf(params,"{s[64]}d",number)) return SyntaxMSG(playerid, "/apb show [numar]");
        //if(!ApbInfo[number][apbID]) return SCM(playerid, COLOR_GREY, "No such APB.");
        //ShowAPB(playerid, number);
        SCM(playerid, COLOR_LIGHTRED, "_________All Points Bulletin_________");
        SCMEx(playerid, COLOR_LIGHTRED, "((ID: %d)) || Creat de: %s", ApbInfo[number][apbID], ApbInfo[number][apbOfficer]);
        SCMEx(playerid, COLOR_LIGHTRED, "Suspect: %s || Acuzatii: %s ", ApbInfo[number][apbSuspect], ApbInfo[number][apbCharge]);
        SCM(playerid, COLOR_LIGHTRED, "_____________________________________");
        return 1;
    }
    else if(CompareStrings(action, "create"))
    {
        if(sscanf(params,"{s[64]}ds[256]",number,info)) return SyntaxMSG(playerid, "/apb create [numar] [suspect|acuzatii]");
        if(ApbInfo[number][apbOn]) return SCM(playerid, COLOR_GREY, "Acest APB deja exista.");
        SCMEx(playerid, COLOR_LIGHTRED, "Ai creat APBul cu numarul %d.", number);
        explode(tmp, info, "|");
        format(ApbInfo[number][apbSuspect], 256, "%s", tmp[0]);
        format(ApbInfo[number][apbCharge], 256, "%s", tmp[1]);
        ApbInfo[number][apbOfficer] = GetNameEx(playerid);
        ApbInfo[number][apbPage] = number;
        ApbInfo[number][apbID] = number;
        ApbInfo[number][apbOn] = 1;
        format(msg, sizeof(msg), "* HQ: %s %s a creat APBul cu numarul %d ((/apb show %d)).", GetRankName(playerid), GetNameEx(playerid), number, number);
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        //===================================================================================
        OnApbCreate(number, tmp[1], tmp[0], GetNameEx(playerid));
    }
    else if(CompareStrings(action, "list"))
    {
        for(new i = 0; i < MAX_APBS; i++)
        {
            if(ApbInfo[i][apbOn])
            {
                format(msg, sizeof(msg), "%d. Suspect: %s | Acuzatii: %s", i,ApbInfo[i][apbSuspect], ApbInfo[i][apbCharge]);
                SCM(playerid, COLOR_LIGHTRED, msg);
            }
        }
    }
    else if(CompareStrings(action, "clear"))
    {
        //new number;
        if(sscanf(params,"{s[64]}d",number)) return SyntaxMSG(playerid, "/apb clear [numar]");
        //if(!ApbInfo[number][apbID]) return SCM(playerid, COLOR_GREY, "No such APB.");
        SCMEx(playerid, COLOR_LIGHTRED, "Ai sters APBul cu numarul %d.", number);
        format(ApbInfo[number][apbCharge], 128, "Fara");
        format(ApbInfo[number][apbSuspect], 128, "Fara");
        format(ApbInfo[number][apbOfficer], 128, "Fara");
        ApbInfo[number][apbPage] = -1;
        ApbInfo[number][apbOn] = 0;
        format(msg, sizeof(msg), "* HQ: %s %s a sters informatiile din APBul cu numarul %d.", GetRankName(playerid), GetNameEx(playerid), number);
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    }
    else if(CompareStrings(action, "delete"))
    {
        //new number;
        if(sscanf(params,"{s[64]}d",number)) return SyntaxMSG(playerid, "/apb delete [numar]");
        //if(!ApbInfo[number][apbID]) return SCM(playerid, COLOR_GREY, "No such APB.");
        SCMEx(playerid, COLOR_LIGHTRED, "Ai sters APBul cu numarul %d.", number);
        format(msg, sizeof(msg), "* HQ: %s %s a sters APBul cu numarul %d.", GetRankName(playerid), GetNameEx(playerid), number);
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        format(ApbInfo[number][apbSuspect], 256, "Fara");
        format(ApbInfo[number][apbCharge], 256, "Fara");
        format(ApbInfo[number][apbOfficer], 256, "Fara");
        ApbInfo[number][apbPage] = 0;
        ApbInfo[number][apbID] = 0;
        ApbInfo[number][apbOn] = 0;
        format(query, sizeof(query), "DELETE FROM `apbs` WHERE `id` = %d", number);
        mysql_function_query(dbHandle, query, false, "", "");
		#if defined debugOn
			printf(query);
		#endif
    }
    else if(CompareStrings(action, "modify"))
    {
        //new number, info[256];
        if(sscanf(params,"{s[64]}ds[256]",number,info)) return SyntaxMSG(playerid, "/apb modify [numar] [suspect|acuzatii]");
        if(!ApbInfo[number][apbID]) return SCM(playerid, COLOR_GREY, "No such APB.");
        SCMEx(playerid, COLOR_LIGHTRED, "Ai modificat APBul cu numarul %d.", number);
        //new tmp[2][256];
        explode(tmp, info, "|");
        format(ApbInfo[number][apbSuspect], 256, "%s", tmp[0]);
        format(ApbInfo[number][apbCharge], 256, "%s", tmp[1]);
        format(msg, sizeof(msg), "* HQ: %s %s a modificat APBul cu numarul %d.", GetRankName(playerid), GetNameEx(playerid), number);
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        format(query, sizeof(query), "UPDATE `apbs` SET `charge` = '%s', `suspect` = '%s' WHERE `id` = %d", tmp[1], tmp[0], number);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    return 1;
}

CMD:wanted(playerid, params[])
{
    new id, charge[64];
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"us[64]",id,charge)) return SyntaxMSG(playerid, "/wanted [playerid/PartOfName] [acuzatie]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(AddCriminalRecord(id, charge, playerid))
    {
        format(msg, sizeof(msg), "[WANTED] Suspect: %s, Reporter: %s Crima: %s", GetNameEx(id), GetNameEx(playerid), charge);
        SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
        SCM(playerid, COLOR_WHITE, "Acuzatiile au fost adaugate cu succes.");
        format(PlayerInfo[id][pWanted], 256, "%s", charge);
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Acuzatiile nu au putut fi adaugate.");
    }
    return 1;
}

CMD:towcars(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
//  if(PlayerInfo[playerid][pFaction] >= 7) return SCM(playerid, COLOR_GREY,"Nu ai rank-ul necesar.");
    if(faction == LSPD)
    {
        if(PlayerInfo[playerid][pRank] < 7) return SCM(playerid, COLOR_GREY,"Nu ai rank-ul necesar.");
        format(msg, sizeof(msg), "** HQ Announcement: %s %s a respawnat toate vehiculele factiunii neocupate!", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(LSPD, COLOR_LSPD, msg);
        for(new i = 1; i <=GetVehiclePoolSize(); i++)
        {
            if(IsACopCar(i))
            {
                if(VehicleEmpty(i))
                {
                    RespawnVehicle(i);
                    Gas{i} = 100;
                    Delete3DTextLabel(veicolo_callsign_testo[i]);
                    veicolo_callsign_status[i] = 0;
                }
            }
        }
    }
    else if(faction == LSFD)
    {
        if(!isLeader(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti lider!");
        format(msg, sizeof(msg), "** HQ Announcement: %s %s a respawnat toate vehiculele factiunii neocupate!", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(LSFD, LSFD_COLOR, msg);
        for(new i = 1; i <=GetVehiclePoolSize(); i++)
        {
            if(IsAFDCar(i))
            {
                if(VehicleEmpty(i))
                {
                    RespawnVehicle(i);
                    Gas{i} = 100;
                    Delete3DTextLabel(veicolo_callsign_testo[i]);
                    veicolo_callsign_status[i] = 0;
                }
            }
        }
    }
    else if(faction == GOV)
    {
        if(!isLeader(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti lider!");
        format(msg, sizeof(msg), "** HQ Announcement: %s %s a respawnat toate vehiculele factiunii neocupate!", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(GOV, LSFD_COLOR, msg);
        for(new i = 1; i <= GetVehiclePoolSize(); i++)
        {
            if(IsAGOVCar(i))
            {
                if(VehicleEmpty(i))
                {
                    RespawnVehicle(i);
                    Gas{i} = 100;
                    Delete3DTextLabel(veicolo_callsign_testo[i]);
                    veicolo_callsign_status[i] = 0;
                }
            }
        }
    }
    else if(faction == NEWS)
    {
        if(!isLeader(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti lider!");
        format(msg, sizeof(msg), "** HQ Announcement: %s %s a respawnat toate vehiculele factiunii neocupate!", GetRankName(playerid), GetNameEx(playerid));
        SendFactionMessage(GOV, COLOR_LIGHTGREEN, msg);
        for(new i = 1; i <= GetVehiclePoolSize(); i++)
        {
            if(IsANewsCar(i))
            {
                if(VehicleEmpty(i))
                {
                    RespawnVehicle(i);
                    Gas{i} = 100;
                    Delete3DTextLabel(veicolo_callsign_testo[i]);
                    veicolo_callsign_status[i] = 0;
                }
            }
        }
    }
    return 1;
}

CMD:checkplate(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SCM(playerid, COLOR_WHITE, "Nu trebuie sa te aflii intr-un vehicul.");
    new counter = 0, result;
    for(new i; i != GetVehiclePoolSize(); i++)
    {
        new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
        if(dist)
        {
            result = i;
            counter++;
        }
    }
    switch(counter)
    {
        case 0: SCM(playerid, COLOR_GREY, "Nici un vehicul in apropiere.");
        case 1:
        {
            if(CityVehicles[result][vCarOn] == 1)
                format(msg, sizeof(msg), "* Verific placuta... rezultate: %s.", CityVehicles[result][vPlate]);
            else
                format(msg, sizeof(msg), "* Verific placuta... rezultate: %s.", VehicleInfo[result][carPlate]);
            SCM(playerid, COLOR_GREEN2, msg);
        }
        default: SCM(playerid, COLOR_GREY, "Am gasit mai mult de un vehicul in zona.");
    }
    return 1;
}

CMD:dsiren(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD && faction != GOV) return NotAuthMSG(playerid);
    new veh = GetPlayerVehicleID(playerid);
    if(Siren[veh] == 0)
    {
        new model = GetVehicleModel(veh);
        if(faction == LSPD)
        {
            if(model != 560 && model != 415  && model != 541  && model != 426 && model != 525 && model != 579) return SCM(playerid, COLOR_GREY, "Nu poti atasa o sirena de acest vehicul.");
            new Float:px, Float:py, Float:pz;
            GetPlayerPos(playerid, px, py, pz);
            Siren[veh] = CreateDynamicObject(18646, px, py+1, pz, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            SetPVarInt(playerid, "EditSiren", 1);
            EditDynamicObject2(playerid, Siren[veh]);
        }
        if(faction == LSFD)
        {
            if(model != 426) return SCM(playerid, COLOR_GREY, "Nu poti atasa o sirena de acest vehicul.");
            new Float:px, Float:py, Float:pz;
            GetPlayerPos(playerid, px, py, pz);
            Siren[veh] = CreateDynamicObject(18646, px, py, pz, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            SetPVarInt(playerid, "EditSiren", 1);
            EditDynamicObject2(playerid, Siren[veh]);
        }
        if(faction == GOV)
        {
            if(model != 560 && model != 541  && model != 426 && model != 525 && model != 579) return SCM(playerid, COLOR_GREY, "Nu poti atasa o sirena de acest vehicul.");
            new Float:px, Float:py, Float:pz;
            GetPlayerPos(playerid, px, py, pz);
            Siren[veh] = CreateDynamicObject(18646, px, py, pz, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            SetPVarInt(playerid, "EditSiren", 1);
            EditDynamicObject2(playerid, Siren[veh]);
        }
    }
    else
    {
        DestroyDynamicObject(Siren[veh]);
        Siren[veh] = 0;
        SCM(playerid, COLOR_GREEN, "Ai detasat sirena.");
    }
    return 1;
}

CMD:dsiren2(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD && faction != GOV) return NotAuthMSG(playerid);
    new veh = GetPlayerVehicleID(playerid);
    if(Siren2[veh] == 0)
    {
        new model = GetVehicleModel(veh);
        if(faction == LSPD)
        {
            if(model != 560 && model != 415 && model != 541  && model != 426 && model != 525 && model != 579) return SCM(playerid, COLOR_GREY, "Nu poti atasa o sirena de acest vehicul.");
            new Float:px, Float:py, Float:pz;
            GetPlayerPos(playerid, px, py, pz);
            Siren2[veh] = CreateDynamicObject(19419, px, py+1, pz, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            SetPVarInt(playerid, "EditSiren2", 1);
            EditDynamicObject2(playerid, Siren2[veh]);
        }
        if(faction == LSFD)
        {
            if(model != 426) return SCM(playerid, COLOR_GREY, "Nu poti atasa o sirena de acest vehicul.");
            new Float:px, Float:py, Float:pz;
            GetPlayerPos(playerid, px, py, pz);
            Siren2[veh] = CreateDynamicObject(19419, px, py, pz, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            SetPVarInt(playerid, "EditSiren2", 1);
            EditDynamicObject2(playerid, Siren2[veh]);
        }
        if(faction == GOV)
        {
            if(model != 560 && model != 541  && model != 426 && model != 525 && model != 579) return SCM(playerid, COLOR_GREY, "Nu poti atasa o sirena de acest vehicul.");
            new Float:px, Float:py, Float:pz;
            GetPlayerPos(playerid, px, py, pz);
            Siren2[veh] = CreateDynamicObject(19419, px, py, pz, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            SetPVarInt(playerid, "EditSiren2", 1);
            EditDynamicObject2(playerid, Siren2[veh]);
        }
    }
    else
    {
        DestroyDynamicObject(Siren2[veh]);
        Siren2[veh] = 0;
        SCM(playerid, COLOR_GREEN, "Ai detasat sirena.");
    }
    return 1;
}

CMD:elm(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune invalida.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    new veh = GetPlayerVehicleID(playerid);
    if(FlashTime[veh] == -1)
    {
        FlashTime[veh] = SetTimerEx("OnLightFlash", flashtime, true, "d", veh);
        SCM(playerid, COLOR_OOC, "Emergency Lights ON.");
    }
    else
    {
        SCM(playerid, COLOR_OOC, "Emergency Lights OFF.");
        new panelsz, doorsz, lightsz, tiresz;
        KillTimer(FlashTime[veh]);
        Flash[veh] = 0;
        FlashTime[veh] = -1;
        GetVehicleDamageStatus(veh, panelsz, doorsz, lightsz, tiresz);
        UpdateVehicleDamageStatus(veh, panelsz, doorsz, 0, tiresz);
    }
    return 1;
}

forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
    new panels, doorss, lightss, tires;
    GetVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);
    switch(Flash[vehicleid])
    {
        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doorss, 2, tires);
        case 1: UpdateVehicleDamageStatus(vehicleid, panels, doorss, 5, tires);
        case 2: UpdateVehicleDamageStatus(vehicleid, panels, doorss, 2, tires);
        case 3: UpdateVehicleDamageStatus(vehicleid, panels, doorss, 4, tires);
        case 4: UpdateVehicleDamageStatus(vehicleid, panels, doorss, 5, tires);
        case 5: UpdateVehicleDamageStatus(vehicleid, panels, doorss, 4, tires);
    }
    if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
    else Flash[vehicleid] ++;
    return 1;
}

CMD:siren(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(vehicle);
    if(faction != LSPD && faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(faction == LSPD)
    {
        if(model != 560 && model != 541 && model != 525 && model != 426 && model != 579 && model != 415) return SCM(playerid, COLOR_GREY, "Sirena este compatibila cu Sultan/Bullet/Towtruck/Premier/Huntley.");
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul.");
        if(Siren[vehicle] == 0)
        {
            SCM(playerid, COLOR_WHITE, "Sirena a fost atasata.");
            if(model == 560)
            {
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.225000,0.750000,0.449999, 0.000000, 0.000000, 0.000000);
            }
            if(model == 541)
            {
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.375000,0.524999,0.375000, 0.000000, 0.000000, 0.000000);
            }
            if(model == 415)
            {
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.375000,0.524999,0.375000, 0.000000, 0.000000, 0.000000);
            }
            if(model == 426)
            {
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.524999,0.749999, 0.375000, 0.000000, 0.000000, 0.000000);
            }
            if(model == 525)
            {
                Siren[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
            }
            if(model == 579)
            {
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle,  0.679999, 0.479999, 0.734999, 0.000000, 0.000000, 0.000000);
            }
        }
        else
        {
            SCM(playerid, COLOR_WHITE, "Sirena a fost detasata.");
            DestroyDynamicObject(Siren[vehicle]);
            Siren[vehicle] = 0;
        }
    }
    if(faction == LSFD)
    {
        if(model != 490 && model != 426) return SCM(playerid, COLOR_GREY, "Sirena este compatibila cu Rancher si Premier.");
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul.");
        if(Siren[vehicle] == 0)
        {
            if(model == 490)
            {
                SCM(playerid, COLOR_WHITE, "Sirena a fost atasata.");
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
            }
            if(model == 426)
            {
                SCM(playerid, COLOR_WHITE, "Sirena a fost atasata.");
                Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
                AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.524999,0.749999, 0.375000, 0.000000, 0.000000, 0.000000);
            }
        }
        else
        {
            SCM(playerid, COLOR_WHITE, "Sirena a fost detasata.");
            DestroyDynamicObject(Siren[vehicle]);
            Siren[vehicle] = 0;
        }

    }
    return 1;
}

CMD:siren2(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(vehicle);
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(model != 560 && model != 426 && model != 415) return SCM(playerid, COLOR_GREY, "Sirena este compatibila cu Sultan/Premier/Cheetah/Bullet.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul.");
    if(Siren2[vehicle] == 0)
    {
        SCM(playerid, COLOR_WHITE, "Sirena a fost atasata.");
        if(model == 560)
        {
            Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
        }
        if(model == 426)
        {
            Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
        }
        if(model == 415)
        {
            Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.669998, 0.329999, 0.000000, 0.000000, 0.000000);
        }
        if(model == 541)
        {
            Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
            AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.669998, 0.329999, 0.000000, 0.000000, 0.000000);
        }
    }
    else
    {
        SCM(playerid, COLOR_WHITE, "Sirena a fost detasata.");
        DestroyDynamicObject(Siren2[vehicle]);
        Siren2[vehicle] = 0;
    }
    return 1;
}

CMD:trace(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "Factiune invalida");
    new number;
    if(sscanf(params, "d", number)) return SyntaxMSG(playerid, "/trace [numar de telefon]");
    new id = -1;
    foreach(new i : Player)
        if(PlayerInfo[i][pNumber] == number) { id = i; }
    if(id == -1) return SCM(playerid, COLOR_GREY, "Numarul cautat nu a fost gasit.");
    if(cellOn{id} == 0) return SCM(playerid, COLOR_GREY, "Telefonul cautat este inchis");
    SCMEx(playerid, COLOR_LIGHTRED, "Police GPS: Locatia numarului de telefon %d este %s.", number, GetLocation(id));
    return 1;
}


CMD:authorizeswat(playerid, params[])
{
    new iPlayerID;
    if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/authorizeswat [playerid/PartOfName]");
    if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, iPlayerID)) return NotNearPlayerMSG(playerid);
    if(isLeader(playerid) || isHighCommand(playerid))
    {
        if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
        {
            if(PlayerInfo[iPlayerID][pRank] < 2) return SCM(playerid, COLOR_GREY, "Player-ul are rank prea mic.");
            PlayerInfo[iPlayerID][pSwat] = 1;
            format(msg, sizeof(msg), "* %s %s ti-a dat permisiuni pentru echipamentul SWAT!", GetRankName(playerid), GetNameEx(playerid));
            SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
            format(msg, sizeof(msg), "* I-ai dat lui %s permisiuni pentru echipamentrul SWAT!", GetNameEx(iPlayerID));
            SCM(playerid, COLOR_LIGHTBLUE, msg);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "Acest player nu este in factiunea ta.");
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu esti liderul!");
    return 1;
}

CMD:deauthorizeswat(playerid, params[])
{
    new iPlayerID;
    if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/deauthorizeswat [playerid/PartOfName]");
    if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, iPlayerID)) return NotNearPlayerMSG(playerid);
    if(isLeader(playerid) || isHighCommand(playerid))
    {
        if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
        {
            PlayerInfo[iPlayerID][pSwat] = 0;
            format(msg, sizeof(msg), "* %s %s ti-a luat permisiunile pentru echipamentul SWAT!", GetRankName(playerid), GetNameEx(playerid));
            SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
            format(msg, sizeof(msg), "* I-ai luat lui %s permisiunile pentru echipamentul SWAT!", GetNameEx(iPlayerID));
            SCM(playerid, COLOR_LIGHTBLUE, msg);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "Acest player nu este in factiunea ta.");
    }
    else return SCM(playerid, COLOR_LIGHTRED, "Nu esti liderul!");
    return 1;
}

CMD:impound(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsATowTruck(vehicle) && !IsACopTowTruck(vehicle)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii intr-un TowTruck");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul masinii.");
    if(!IsTrailerAttachedToVehicle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Nu remorchezi un vehicul.");
    if(VehicleInfo[TowingCar[playerid]][carOwned] == 0) return SCM(playerid, COLOR_GREY, "Poti confisca doar o masina personala.");
    if(!PlayerToPoint(30.0, playerid, 1053.5447,-352.6905,73.9922)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti la locul de confiscare.");
    new Float:vX, Float:vY, Float:vZ;
    DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
    GetVehiclePos(TowingCar[playerid], vX, vY, vZ);
    VehicleInfo[TowingCar[playerid]][carParkX] = vX;
    VehicleInfo[TowingCar[playerid]][carParkY] = vY;
    VehicleInfo[TowingCar[playerid]][carParkZ] = vZ;
    VehicleInfo[TowingCar[playerid]][carImpound] = 1;
    SCM(playerid, COLOR_LIGHTBLUE, "* Ai trimis spre impound vehiculul.");
    VehicleEngine(TowingCar[playerid], false);
    SaveVehicle(TowingCar[playerid]);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pCarKey] == TowingCar[playerid])
        {
            format(msg, sizeof(msg), "* Vehiculul %s a fost confiscat de catre %s %s.", VehicleNames[VehicleInfo[TowingCar[playerid]][carModel]-400], GetRankName(playerid), GetNameEx(playerid));
            SCM(i, COLOR_LIGHTBLUE, msg);
        }
    }
    TowingCar[playerid] = INVALID_VEHICLE_ID;
    return 1;
}

CMD:unimpound(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehID;
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerToPoint(30.0, playerid, 1053.5447,-352.6905,73.9922)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti la locul de confiscare.");
    if(sscanf(params, "i", vehID)) return SyntaxMSG(playerid, "/unimpound [vehicleid]");
    if(VehicleInfo[vehID][carOwned] == 0) return SCM(playerid, COLOR_GREY, "Poti confisca doar o masina personala.");
    //2794.7397,-2400.5776,13.6320
    VehicleInfo[vehID][carParkX] = 1038.2983;
    VehicleInfo[vehID][carParkY] = -356.9140;
    VehicleInfo[vehID][carParkZ] = 73.7141;
    VehicleInfo[vehID][carImpound] = 0;
    SetVehiclePos(vehID, 1038.2983,-356.9140,73.7141);
    SetVehicleZAngle(vehID, 90);
    SCM(playerid, COLOR_LIGHTBLUE, "* Ai scos un vehicul de la impound.");
    VehicleEngine(vehID, false);
    SaveVehicle(vehID);
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pCarKey] == vehID)
        {
            format(msg, sizeof(msg), "* Vehiculul %s a fost eliberat de catre %s %s.", VehicleNames[VehicleInfo[vehID][carModel]-400], GetRankName(playerid), GetNameEx(playerid));
            SCM(i, COLOR_LIGHTBLUE, msg);
        }
    }
    return 1;
}

CMD:ptow(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsATowTruck(vehicle) && !IsACopTowTruck(vehicle)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii intr-un TowTruck.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul masinii.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    new Float:vX, Float:vY, Float:vZ;
    new found = 0, vid = 0;
    while(vid <= GetVehiclePoolSize() && found == 0)
    {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if((floatabs(x-vX)<7.0) && (floatabs(y-vY)<7.0) && (floatabs(z-vZ)<7.0) && (vid!=GetPlayerVehicleID(playerid)))
        {
            found = 1;
            if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
            {
                TowingCar[playerid] = INVALID_VEHICLE_ID;
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            else
            {
                TowingCar[playerid] = vid;
                AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
            }
        }
    }
    if(found == 0) return SCM(playerid, COLOR_GREY, "Nu se afla vreun vehicul in raza ta");
    return 1;
}

CMD:cctv(playerid, params[])
{
    new id, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"d",id))
    {
        SyntaxMSG(playerid, "/cctv [CameraID]");
        SCM(playerid, COLOR_LIGHTBLUE, "|_____________CCTV's Control_____________|");
        for(new i = 0; i < MAX_OBJECTS; i++)
        {
            if(CCTVInfo[i][tvObjectOn] && CCTVInfo[i][tvFaction] == faction)
            {
                format(msg, sizeof(msg), "(Camera %d) %s.", i, CCTVInfo[i][tvName]);
                SCM(playerid, COLOR_GREY, msg);
            }
        }
        return 1;
    }
    if(!PlayerToPoint(5.0, playerid, 262.1426,109.1119,1004.6172)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti in camera de supraveghere.");
    if(OnCCTV{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Deja te uiti la o camera CCTV.");
    if(!CCTVInfo[id][tvObjectOn] && CCTVInfo[id][tvFaction] != faction) return SCM(playerid, COLOR_LIGHTRED, "CCTV-ul pe care-l cauti nu exista.");
    OnCCTV{playerid} = true;
    SetPlayerPos(playerid, CCTVInfo[id][tvPosX],  CCTVInfo[id][tvPosY],  CCTVInfo[id][tvPosZ]);
    SetInterior(playerid, CCTVInfo[id][tvInterior]);
    GameTextForPlayer(playerid, "~r~Se incarca...", 1000, 1);
    SetTimerEx("SetToCamera", 1000, 0, "ii", playerid, id);
    SetPVarInt(playerid, "CCTV_Show", id);
    ShowCCTV_TD(playerid);
    SCM(playerid, COLOR_WHITE, "{FFFF00}HINT{FFFFFF}: Foloseste mouse-ul pentru a misca pozitia CCTV-ului. (`/exitcctv`)");
    return 1;
}

CMD:exitcctv(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!OnCCTV{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Nu urmaresti o camera CCTV.");
    HideCCTV_TD(playerid);
    OnCCTV{playerid} = false;
    StopPlayerSpec(playerid);
    SetPlayerPos(playerid, 262.1426,109.1119,1004.6172);
    SetInterior(playerid, 10);
    DeletePVar(playerid, "CCTV_Show");
    SetTimerEx("UnFreezePlayer", 500, 0, "i", playerid);
    return 1;
}

CMD:createspike(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new Float:x, Float:y, Float:z, Float:a;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        CreateStrip(x, y, z, a);
        new location[MAX_ZONE_NAME];
        GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        format(msg, sizeof(msg), "* HQ Announcement: %s %s a pus un spikestrip in %s.", GetRankName(playerid), GetNameEx(playerid), location);
        SendFactionMessage(LSPD, COLOR_LSPD, msg);
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu trebuie sa fii intr-un vehicul.");
    }
    return 1;
}

CMD:removespike(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        DeleteClosestStrip(playerid);
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu trebuie sa fii intr-un vehicul.");
    }
    return 1;
}

CMD:removeallspikes(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    DeleteAllStrip();
    format(msg, sizeof(msg), "* HQ Announcement: Toate spikestrip-urile au fost ridicate de catre %s %s", GetRankName(playerid), GetNameEx(playerid));
    SendFactionMessage(LSPD, COLOR_LSPD, msg);
    return 1;
}

CMD:revoke(playerid, params[])
{
    new id, type[24], faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"us[24]", id, type)) return SyntaxMSG(playerid, "/revoke [playerid/PartOfName] [carlicense,weplicense,flylicense,weapons,drugs]");
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You cannot revoke yourself.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerNearPlayer(4.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(CompareStrings(type, "carlicense"))
    {
        format(msg, sizeof(msg), "i-a suspendat lui %s permisul de conducere.", GetNameWithMask(id));
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "Permisul tau de condus a fost suspendat de catre %s.", GetNameWithMask(playerid));
        SCM(id, COLOR_WHITE, msg);
        PlayerInfo[id][pCarLic] = 0;
        return 1;
    }
    if(CompareStrings(type, "weplicense"))
    {
        format(msg, sizeof(msg), "i-a suspendat lui %s permisul de port arma.", GetNameWithMask(id));
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "Permisul tau de port arma a fost suspendat de catre %s.", GetNameWithMask(playerid));
        SCM(id, COLOR_WHITE, msg);
        PlayerInfo[id][pWepLic] = 0;
        return 1;
    }
    if(CompareStrings(type, "flylicense"))
    {
        format(msg, sizeof(msg), "i-a suspendat lui %s brevetul de zbor.", GetNameWithMask(id));
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "Brevetul tau de zbor a fost suspendat de catre %s.", GetNameWithMask(playerid));
        SCM(id, COLOR_WHITE, msg);
        PlayerInfo[id][pWepLic] = 0;
        return 1;
    }
    if(CompareStrings(type, "weapons"))
    {
        format(msg, sizeof(msg), "i-a confiscat lui %s armele.", GetNameWithMask(id));
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "Armele tale au fost confiscate de catre %s.", GetNameWithMask(playerid));
        SCM(id, COLOR_WHITE, msg);
        FullResetPlayerWeapons(id);
        return 1;
    }
    if(CompareStrings(type, "drugs"))
    {
        format(msg, sizeof(msg), "i-a confiscat lui drogurile lui %s.", GetNameWithMask(id));
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "Drogurile tale au fost confiscate de catre %s.", GetNameWithMask(playerid));
        SCM(id, COLOR_WHITE, msg);
        RemovePlayerDrugs(id);
        return 1;
    }
    return 1;
}

CMD:detain(playerid, params[])
{
    new id, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/detain [playerid/PartOfName]");
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu te poti bloca pe tine insuti.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi on duty.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!IsACopCar(GetPlayerVehicleID(id))) return SCM(playerid, COLOR_INFO, "Acest jucator nu se afla intr-o masina de politie");
    if(GetIntVar(id, "isFrozen") == 0)
    {
        format(msg, sizeof(msg), "blocheaza usile asa ca %s nu poate pleca nicaieri.", GetNameWithMask(id));
        FreezePlayer(id);
    }
    else
    {
        format(msg, sizeof(msg), "ii deschide usa lui %s ca sa poata iesi.", GetNameWithMask(id));
        UnFreezePlayer(id);
    }
    ActionMessage(playerid, 15.0, msg);
    return 1;
}

CMD:arrest(playerid, params[])
{
    new id, time, fine, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"udd",id,time,fine)) return SyntaxMSG(playerid, "/arrest [playerid/PartOfName] [timp(minute)] [amenda]");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerToPoint(6.0, playerid, 221.5274,114.6393,999.0156)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti langa o celula.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
//  if(fine < 0 || fine > 1000) return SCM(playerid, COLOR_GRAD2, "Amenda trebuie sa fie intre 0 si 1000$.");
    if(time < 1 || time > 240) return SCM(playerid, COLOR_GRAD2, "Timpul trebuie sa fie intre 1 si 240 minute.");
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu te poti aresta.");
    if(PlayerInfo[id][pJailed] == 2) return SCM(playerid, COLOR_LIGHTRED, "Jucatorul este deja arestat.");
    GiveCash(id, -fine);
    FullResetPlayerWeapons(id);
    PlayerInfo[id][pJailTime2] = time*60;
    PutPlayerInCell(id);
    PlayerInfo[id][pJailed] = 2;
    PlayerInfo[id][pArrested] += 1;
    format(msg, sizeof(msg), "[Arrest] %s %s l-a arestat pe %s pentru %d minute.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(id), time);
    ARESTMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "Ai fost arestat de catre %s pentru %d minute. Cautiune: %d%.", GetName(playerid), time, fine);
    SCM(id, COLOR_LIGHTRED, msg);
    SetStringVar(playerid, "ArrestLocation", "Jail");
    SetLastArrest(playerid, id, time);
    return 1;
}

CMD:unarrest(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    new targetid;
    if(sscanf(params,"u",targetid)) return SyntaxMSG(playerid,"/unarrest [playerid/PoN]");
    if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, targetid)) return NotNearPlayerMSG(playerid);
	if(PlayerInfo[targetid][pJailed] == 1) return SCM(playerid, -1, "Acel jucator este in Admin Jail!");
    PlayerInfo[targetid][pJailed] = 0;
    PlayerInfo[targetid][pJailTime2] = 0;
    SetPlayerPos(targetid, 1553.3107, 1675.8288, 16.1953);
    format(msg, sizeof(msg), "[Arrest] %s %s l-a scos pe %s din inchisoare.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(targetid));
    ARESTMSG(COLOR_LIGHTRED, msg);
    SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 2262.7705,-86.0881,26.4535, 1.0, -1, -1, -1, -1, -1, -1);
    PlayerTextDrawHide(targetid,jail_timeleft[targetid]);
    return 1;
}

CMD:prison(playerid, params[])
{
    new id, time, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"udd",id,time)) return SyntaxMSG(playerid, "/prison [playerid/PartOfName] [time(minute)]");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerToPoint(30.0, playerid, 1769.7205,-1574.1882,1734.9430)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the prison.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
//  if(fine < 0 || fine > 1000) return SCM(playerid, COLOR_GRAD2, "The fine cannot exceed $1,000 or go under $0.");
    if(time < 1 || time > 1000) return SCM(playerid, COLOR_GRAD2, "Timpul nu poate fi mai mare de 1000 de minute sau mai mic de 1 minut.");
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You may not prison yourself.");
    if(PlayerInfo[id][pJailed] == 2) return SCM(playerid, COLOR_LIGHTRED, "Player is already arrested.");
//  GiveCash(id, -fine);
    FullResetPlayerWeapons(id);
    PlayerInfo[id][pJailTime2] = time*60;
    PutPlayerInPrisonCell(id);
    PlayerInfo[id][pJailed] = 3;
    PlayerInfo[id][pPrisoned] += 1;
    format(msg, sizeof(msg), "[Prison] %s %s l-a arestat pe %s pentru %d minut(e).", GetRankName(playerid), GetNameEx(playerid), GetNameEx(id), time);
    ARESTMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "Ai fost arestat. Timp: %d minute(s), Amenda: %d$", time);
    SCM(id, COLOR_LIGHTRED, msg);
    SetStringVar(playerid, "ArrestLocation", "Prison");
    SetLastArrest(playerid, id, time);
    return 1;
}

CMD:ticket(playerid, params[])
{
    new amount, plate[64], vehicle, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"s[64]d",plate, amount)) return SyntaxMSG(playerid, "/ticket [VehiclePlate] [TicketAmount($1,000-$4,000)]");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!FindVehicleByPlate(plate)) return SCM(playerid, COLOR_LIGHTRED, "Vehicle wasn't found.");
    if(amount < 1000 || amount > 4000) return SCM(playerid, COLOR_LIGHTRED, "The amount must be between $1,000 to $4,000");
    vehicle = GetVehicleByPlate(plate);
    if(CountVehicleTickets(vehicle) >= 10) return SCM(playerid, COLOR_LIGHTRED, "This vehicle has reached the maximum tickets (10).");
    format(msg, sizeof(msg), "* Ai eliberat cu succes o amenda in valoare de $%d pentru acest vehicul.", amount);
    SCM(playerid, COLOR_INFO, msg);
    format(msg, sizeof(msg), "elibereaza o amenda in valoare de $%d.", amount);
    ActionMessage(playerid, 15.0, msg);
    PlaceVehicleTicket(vehicle, amount);
    return 1;
}

CMD:pticket(playerid, params[])
{
    new amount, id, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"dd",id, amount)) return SyntaxMSG(playerid, "/pticket [playerid/PartOfName] [TicketAmount($1,000-$4,000)]");
    if(!CopDuty{playerid} && faction == GOV) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(amount < 1000 || amount > 4000) return SCM(playerid, COLOR_LIGHTRED, "The amount must be between $1,000 to $4,000");
    if(CountPlayerTickets(id) >= 10) return SCM(playerid, COLOR_LIGHTRED, "This player has reaches the maximum tickets, (10).");
    SCMEx(playerid, COLOR_INFO, "* Ai eliberat cu succes o amenda in valoare de $%d pe numele %s.", amount, GetNameEx(id));
    SCMEx(id, COLOR_INFO, "* %s %s te-a amendat cu $%d.", GetRankName(playerid), GetNameEx(playerid), amount);
    format(msg, sizeof(msg), "elibereaza o amenda in valoare de $%d.", amount);
    ActionMessage(playerid, 15.0, msg);
    PlacePlayerTicket(id, amount);
    return 1;
}

CMD:rb(playerid, params[])
{
    new slot, model, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"dd",slot,model))
    {
        SyntaxMSG(playerid, "/rb [slot(1-10)] [model-id]");
        SCM(playerid, COLOR_INFO, "|_______________RoadBlocks types_______________|");
        SCM(playerid, COLOR_INFO, "973, 978, 979, 1422, 1423, 1424, 1425, 1427, 1434, 1459, 19834(DO NOT CROSS), 1238(CONE) ");
        return 1;
    }
    if(!CopDuty{playerid} && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(slot > 15 || slot < 1) return SCM(playerid, COLOR_INFO, "Slot invalid.");
    if(model != 19834 && model != 973 && model != 978 && model != 979 && model != 1422 && model != 1423 && model != 1424 && model != 1425 && model != 1427 && model != 1434 && model != 1459)
        return SCM(playerid, COLOR_LIGHTRED, "Invalid model ID.");
    new Float:x, Float:y, Float:z, Float:a;
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
    if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This roadblock slot is already taken.");
    format(msg, sizeof(msg), "Roadblockul #%d a fost pus, nu uita sa-l scoti.", slot);
    SCM(playerid, COLOR_WHITE, msg);
    RoadBlocks[playerid][slot] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, a+180);
    SetPlayerPos(playerid, x, y+2, z);
    SetIntVar(playerid, "EditingRB", 1);
    SCM(playerid, COLOR_WHITE, "Poti edita pozitia roadblock-ului.");
    EditDynamicObject2(playerid, RoadBlocks[playerid][slot]);
    return 1;
}

CMD:rrb(playerid, params[])
{
    new slot, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/rrb [slot(1-10)]");
    if(!CopDuty{playerid} && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(slot > 10 || slot < 1) return SCM(playerid, COLOR_INFO, "Slot invalid.");
    if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This roadblock slot is not taken.");
    format(msg, sizeof(msg), "Roadblock #%d Successfully removed.", slot);
    SCM(playerid, COLOR_WHITE, msg);
    DestroyDynamicObject(RoadBlocks[playerid][slot]);
    RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
    return 1;
}

CMD:cuff(playerid, params[])
{
    new id, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/cuff [playerid/PartOfName]");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on-duty.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu iti poti pune singur catusele.");
    if(Cuffed{id}) return SCM(playerid, COLOR_LIGHTRED, "Jucatorul este deja incatusat.");
    GameTextForPlayer(id, "~r~Incatusat", 2500, 3);
    SetPlayerCuffed(id, 1);
    Cuffed{id} = true;
/*  if(GetPlayerSpecialAction(id) == SPECIAL_ACTION_DUCK || Tazed{id})
    {
        GameTextForPlayer(id, "~r~Cuffed", 2500, 3);
        SetPlayerCuffed(id, 1);
        Cuffed{id} = true;
    }
    else
    {
        SCM(playerid, COLOR_WHITE, "The player must be crouched/tazed.");
    }*/
    return 1;
}

CMD:uncuff(playerid, params[])
{
    new id, faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/uncuff [playerid/PartOfName]");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You may not uncuff yourself.");
    if(!Cuffed{id}) return SCM(playerid, COLOR_LIGHTRED, "Player is not cuffed.");
    GameTextForPlayer(id, "~r~UnCuffed", 2500, 3);
    SetPlayerCuffed(id, 0);
    Cuffed{id} = false;
    return 1;
}

CMD:frisk(playerid, params[])
{
    new id;
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/frisk [playerid/PartOfName]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu te poti perchezitiona singur.");
    format(msg, sizeof(msg), "il perchezitioneaza pe %s", GetNameEx(id));
    ActionMessage(playerid, 15, msg);
    SCMEx (playerid, COLOR_GREEN, "|___________Perchezitie (%s)___________|", GetNameEx(id));
    format(msg, sizeof(msg), "Bani: $%d", PlayerInfo[id][pCash]);
    SCM(playerid, COLOR_OOC, msg);
    new Player_Weapons[13], Player_Ammos[13];
    for(new i = 1;i <= 12;i++)
    {
        GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
        if(Player_Weapons[i] != 0)
        {
            new weaponName[128];
            GetWeaponName(Player_Weapons[i],weaponName,255);
            format(msg,255,"Arma: %s Munitie: %d",weaponName, Player_Ammos[i]);
            SCM(playerid,COLOR_GREY,msg);
        }
    }
    SCMEx(playerid, COLOR_OOC, "Materiale: %d", PlayerInfo[id][pWepMats]);
    SCM(playerid, COLOR_GREY, "Pentru a vedea drogurile detinute scrie '/friskdrugs'");
    SCM(playerid, COLOR_GREEN, "|__________________________|");
    return 1;
}

CMD:friskdrugs(playerid, params[])
{
    new id;
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/frisk [playerid/PartOfName]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu te poti perchezitiona singur.");
    format(msg, sizeof(msg), "il perchezitioneaza pe %s", GetNameEx(id));
    ActionMessage(playerid, 15, msg);
    ShowPlayerDrugs(id, playerid);
    return 1;
}

CMD:m(playerid, params[]) return cmd_megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    new vehicle = GetPlayerVehicleID(playerid);
    if(isnull(params)) return SyntaxMSG(playerid, "(/m)egaphone [message]");
    if(faction != LSPD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(faction == LSPD)
        if(!IsACopCar(vehicle)) return SCM(playerid, COLOR_INFO, "Nu esti intr-un vehicul care apartine LSPD");
    if(faction == LSFD)
        if(!IsAFDCar(vehicle)) return SCM(playerid, COLOR_INFO, "Nu esti intr-un vehicul care apartine LSFD");
    if(faction == GOV)
        if(!IsAGOVCar(vehicle)) return SCM(playerid, COLOR_INFO, "Nu esti intr-un vehicul care apartine GOVERNMENT");
    format(msg, sizeof(msg), "[ %s:o< %s ]", GetNameWithMask(playerid), params);
    ProxDetector(100.0, playerid, msg, COLOR_YELLOWG);
    return 1;
}

CMD:rubberbullets(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    if(!CopDuty{playerid}) return SCM(playerid, -1, "Trebuie sa fii on duty!");
    if(GetPlayerWeapon(playerid) != WEAPON_SHOTGUN) return SCM(playerid, -1, "Nu ai un shotgun in mana!");
    if(rubberbullet[playerid] == 0)
    {
        rubberbullet[playerid] = 1;
        SCM(playerid, -1, "Ti-ai incarcat arma cu gloante de cauciuc!");
        ActionMessage(playerid, 15, "isi incarca shotgun-ul cu gloante de cauciuc.");
    }
    else
    {
        rubberbullet[playerid] = 0;
        SCM(playerid, -1, "Ti-ai incarcat arma cu gloante normale!");
        ActionMessage(playerid, 15, "isi incarca shotgun-ul cu gloante normale.");
    }
    return 1;
}

CMD:tazer(playerid, params[]) { return cmd_taser(playerid, params); }

CMD:taser(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    if(TazerActive{playerid})
    {
        TazerActive{playerid} = false;
        GiveWeapon(playerid, 24, 700);
        ActionMessage(playerid, 15.0, "isi pune taser-ul in suport");
    }
//  else if(PlayerHoldingWeapon(playerid, 24))
    else
    {
        TazerActive{playerid} = true;
        GiveWeapon(playerid, 23, 100);
        ActionMessage(playerid, 15.0, "isi scoate taserul din suport");
    }
    return 1;
}

CMD:mdc(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida");
    if(!PlayerInCar(playerid) && !PlayerToPoint(40.0, playerid, 246.5048,118.9676,1004.4171)) return NotInCarMSG(playerid);
    if(!IsACopCar(vehicle) && !PlayerToPoint(40.0, playerid, 246.5048,118.9676,1004.4171)) return SCM(playerid, COLOR_INFO, "Nu esti intr-un vehicul de politie.");
    ActionMessage(playerid, 10.0, "se logheaza pe MDC.");
    format(msg, sizeof(msg), "LSPD MDC System - Logat ca %s", GetNameEx(playerid));
    ShowDialog(playerid, Show:<MDC>, DIALOG_STYLE_LIST, msg, "Cauta\nAdauga acuzatii\nAdauga avertizare licenta\nCautare nr imatriculare (( ID ))\nCautare nr imatriculare (( Plate ))\nUltimele apeluri\nUltimile arestari", "Selecteaza", "Iesi");
    return 1;
}

CMD:radar(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN, "Pentru a folosi radarul, trebuie sa ai o CAMERA in mana ( /armoury ).");
    SCM(playerid, COLOR_GREEN, "Se tine apasat CLICK-DREAPTA si se centreaza camera asupra vehiculului.");
    return 1;
}

CMD:showtickets(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Factiune Invalida.");
    if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii on duty.");
    new id;
    if(sscanf(params, "u", id)) return SyntaxMSG(playerid, "/showtickets [playerid/PoN]");
    SCMEx(playerid, COLOR_GREEN, "Amenzile lui %s:", GetName(id));
    for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
    {
        if(PlayerInfo[id][pTickets][i] != 0)
            SCMEx(playerid, COLOR_GREY, "(Slot %d) $%d", i, PlayerInfo[id][pTickets][i]);
    }
    return 1;
}
//=================================Police Commands=================================//
CMD:fine(playerid, params[])
{
    new option[7], secoption;
    if(sscanf(params,"s[7]D(-1)", option, secoption)) return SyntaxMSG(playerid, "/fine [show/pay]");
    if(CompareStrings(option, "show"))
    {
        SCM(playerid, COLOR_GREEN2, "Amenzile tale:");
        for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
        {
            if(PlayerInfo[playerid][pTickets][i] != 0)
                SCMEx(playerid, COLOR_GREY, "(Slot %d) $%d", i, PlayerInfo[playerid][pTickets][i]);
        }
    }
    if(CompareStrings(option, "pay"))
    {
        new slot;
        if(sscanf(params,"{s[7]}d",slot)) return SyntaxMSG(playerid, "/fine pay [slot]");
        if(!PlayerToPoint(10.0, playerid, 915.7710,2370.4600,246.4621)) return SCM(playerid, COLOR_LIGHTRED, "Nu esti la primarie.");
        if(PlayerInfo[playerid][pTickets][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu ai o amenda pe acest slot.");
        if(GetCash(playerid) < PlayerInfo[playerid][pTickets][slot]) return NoCashMSG(playerid);
        SCMEx(playerid, COLOR_YELLOWG, "* Ai platit amenda in valoare de %d$.", PlayerInfo[playerid][pTickets][slot]);
        GiveCash(playerid, -PlayerInfo[playerid][pTickets][slot]);
        PlayerInfo[playerid][pTickets][slot] = 0;
    }
    return 1;
}

CMD:jobpermission(playerid, params[])
{
    if(!isHighCommand(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda.");
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == LSPD || faction == LSFD || faction == GOV || faction == NEWS) return SCM(playerid, -1, "Nu poti folosi aceasta comanda");
    new pid, job[32];
    if(sscanf(params, "us[32]", pid, job)) return SyntaxMSG(playerid, "/jobpermission [playerid/PoN] [weapon/drug]");
    if(CompareStrings(job, "weapon"))
    {
        if(PlayerInfo[pid][pJob] == WEAPONDEALER)
        {
            PlayerInfo[pid][pJob] = JOBLESS;
            SCMEx(playerid, COLOR_GREY, "%s nu mai este Weapon Dealer", GetName(pid));
            SCMEx(pid, COLOR_GREY, "%s ti-a retras jobul de Weapon Dealer", GetName(playerid));
        }
        else if(PlayerInfo[pid][pJob] == JOBLESS)
        {
            PlayerInfo[pid][pJob] = WEAPONDEALER;
            SCMEx(playerid, COLOR_GREY, "I-ai acordat lui %s jobul de Weapon Dealer", GetName(pid));
            SCMEx(pid, COLOR_GREY, "%s ti-a acordat jobul de Weapon Dealer", GetName(playerid));
        }
        else if(PlayerInfo[pid][pJob] != WEAPONDEALER && PlayerInfo[pid][pJob] != JOBLESS)
            SCM(playerid, COLOR_GREEN, "Jucatorul are deja un job.");
    }
    else if(CompareStrings(job, "drug"))
    {
        if(PlayerInfo[pid][pJob] == DRUGDEALER)
        {
            PlayerInfo[pid][pJob] = JOBLESS;
            SCMEx(playerid, COLOR_GREY, "%s nu mai este Drug Dealer", GetName(pid));
            SCMEx(pid, COLOR_GREY, "%s ti-a retras jobul de Drug Dealer", GetName(playerid));
        }
        else if(PlayerInfo[pid][pJob] == JOBLESS)
        {
            PlayerInfo[pid][pJob] = DRUGDEALER;
            SCMEx(playerid, COLOR_GREY, "I-ai acordat lui %s jobul de Drug Dealer", GetName(pid));
            SCMEx(pid, COLOR_GREY, "%s ti-a acordat jobul de Drug Dealer", GetName(playerid));
        }
        else if(PlayerInfo[pid][pJob] != DRUGDEALER && PlayerInfo[pid][pJob] != JOBLESS)
            SCM(playerid, COLOR_GREEN, "Jucatorul are deja un job.");
    }
    else SCM(playerid, COLOR_GREY, "Job invalid ('weapon' / 'drug')");
    return 1;
}

CMD:fjoblist(playerid, params[])
{
    if(!isHighCommand(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda.");
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == LSPD || faction == LSFD || faction == GOV || faction == NEWS) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda.");
    SCM(playerid, COLOR_GREEN, "Lista membrilor cu joburi ilegale:");
    for(new i=0;i<=GetPlayerPoolSize();i++)
    {
        if(PlayerInfo[i][pJob] == WEAPONDEALER)
            SCMEx(playerid, COLOR_GREY, "%s %s (WEAPON DEALER)", GetRankName(i), GetName(i));
        else if(PlayerInfo[i][pJob] == DRUGDEALER)
            SCMEx(playerid, COLOR_GREY, "%s %s (DRUG DEALER)", GetRankName(i), GetName(i));
    }
    return 1;
}

CMD:takejob(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == LSPD || faction == LSFD || faction == GOV) return SCM(playerid, -1, "Nu poti avea un job deoarece esti intr-o factiune guvernamentala!");
    for(new i = 0; i < MAX_JOBS; i++)
    {
        if(PlayerToPoint(4.0, playerid, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ]))
        {
            if(JobsInfo[i][jobSideJob] == 1)
            {
                if(PlayerInfo[playerid][pSideJob] != JOBLESS) return SCM(playerid, COLOR_WHITE, "*Ai deja un sidejob. Foloseste '/quitsidejob'");
                PlayerInfo[playerid][pSideJob] = i;
                if(i == MECHANIC)
                {
                    JobMessage(playerid, "~y~TE-AI ANGAJAT CA MECANIC! ACESTA ESTE UN ~r~SIDEJOB~n~~y~ASTA INSEAMNA CA INCA POTI LUCRA LA JOBUL TAU PRINCIPAL.~n~FOLOSESTE ~w~/SIDEJOBHELP ~y~PENTRU MAI MULTE INFORMATII", 8);
                }
                else if(i == TAXI)
                {
                    JobMessage(playerid, "~y~TE-AI ANGAJAT CA TAXIMETRIST! ACESTA ESTE UN ~r~SIDEJOB~n~~y~ASTA INSEAMNA CA INCA POTI LUCRA LA JOBUL TAU PRINCIPAL.~n~FOLOSESTE ~w~/SIDEJOBHELP ~y~PENTRU MAI MULTE INFORMATII", 8);
                }
            }
            else
            {
                if(PlayerInfo[playerid][pJob] != JOBLESS) return SCM(playerid, COLOR_WHITE, "*Ai deja un job. Foloseste '/quitjob'.");
                PlayerInfo[playerid][pJob] = i;
                if(JobsInfo[i][jobRanks] > 0)
                {
                    PlayerInfo[playerid][pJobRank] = 1;
                }
                if(i == TRUCKER)
                {
                    format(msg, sizeof(msg), "~y~DE ACUM ESTI CAMIONANGIU. RANK-UL TAU ESTE ~g~%s.~n~~w~FOLOSESTE ~y~/JOBHELP ~w~PENTRU MAI MULTE INFORMATII.", GetJobRank(playerid));
                    JobMessage(playerid, msg, 8);
                }
                if(i == FARMER)
                {
                    JobMessage(playerid, "~y~TE-AI ANGAJAT CA FERMIER!~n~FOLOSESTE ~w~/JOBHELP ~y~PENTRU MAI MULTE INFORMATII", 8);
					FarmInfo[playerid][pUpdateTime] = SetTimerEx("UpdatePaddy",TIME_UPDATEPADDY,1,"i",playerid);
                }
				if(i == GARBAGE)
				{
					JobMessage(playerid, "~y~TE-AI ANGAJAT CA Gunoier!~n~FOLOSESTE ~w~/JOBHELP ~y~PENTRU MAI MULTE INFORMATII", 8);
				}
            }
            return 1;
        }
    }
    return 1;
}

CMD:leavejob(playerid, params[]) { return cmd_quitjob(playerid, params); }

CMD:quitjob(playerid, params[])
{
    new job = PlayerInfo[playerid][pJob];
    if(job == JOBLESS) return SCM(playerid, COLOR_WHITE, "Nu ai un job.");
    if(job == DRUGDEALER)
    {
        SCM(playerid, COLOR_LIGHTRED, "Ai parasit jobul de drug dealer.");
        PlayerInfo[playerid][pJob] = JOBLESS;
    }
    if(job == WEAPONDEALER)
    {
        SCM(playerid, COLOR_LIGHTRED, "Ai parasit jobul de weapon dealer.");
        PlayerInfo[playerid][pJob] = JOBLESS;
    }
    else
    {
        SCMEx(playerid, COLOR_LIGHTRED, "Ai demisionat de la jobul : %s, rank-ul tau a fost resetat.", JobsInfo[job][jobName]);
		PlayerInfo[playerid][pJob] = JOBLESS;
        if(JobsInfo[job][jobRanks] > 0)
        {
            PlayerInfo[playerid][pJobRank] = 0;
        }
    }
    return 1;
}

CMD:leavesidejob(playerid, params[]) { return cmd_quitsidejob(playerid, params); }

CMD:quitsidejob(playerid, params[])
{
    new job = PlayerInfo[playerid][pSideJob];
    if(job == JOBLESS) return SCM(playerid, COLOR_WHITE, "* Nu ai un job secundar.");
    SCMEx(playerid, COLOR_LIGHTRED, "Ai demisionat de la jobul secundar : %s.", JobsInfo[job][jobName]);
    PlayerInfo[playerid][pSideJob] = JOBLESS;
    return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
    if(LoadingTruck{playerid} > 0 && Trucking{playerid} && GetTruckStage(playerid) == 2 && GetIntVar(playerid, "PlayerCP") == 26)
    {
        PlayerTextDrawSetString(playerid, TruckerDraw[playerid], "~y~INTOARCE-TE PENTRU A CONTINUA.");
    }
    if(DroppingOff{playerid} && Trucking{playerid} && GetTruckStage(playerid) == 4 && GetIntVar(playerid, "PlayerCP") == 27)
    {
        PlayerTextDrawSetString(playerid, TruckerDraw[playerid], "~y~INTOARCE-TE PENTRU A CONTINUA.");
    }
    return 1;
}

CMD:resettrucker(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu esti intr-un vehicul!");
    new vehicle = GetPlayerVehicleID(playerid);
    foreach(new i : Player)
    {
        if(TruckVehicle[i] == vehicle)
            TruckVehicle[i] = 0;
    }
    return false;
}

CMD:truckermission(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pJob] != TRUCKER) return SCM(playerid, COLOR_WHITE, "Nu esti camionangiu.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii sofer.");
    if(VehicleInfo[vehicle][carOwned] == 0 && !IsATruckJob(vehicle)) return SCM(playerid, COLOR_WHITE, "Trebuie sa fii in vehiculul statului.");
    if(Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "Esti deja intr-o misiune.");
//    if(PlayerInfo[playerid][pPayCheckMade] >= GetMaxPayCheck(playerid)) return SCM(playerid, COLOR_LIGHTRED, "Asteapta payday-ul pentru a continua.");
    if(TruckTaken(vehicle)) return SCM(playerid, COLOR_WHITE, "Camionul este luat de altcineva.");
    Trucking{playerid} = true;
    LoadingTruck{playerid} = 0;
    DroppingOff{playerid} = false;
    TruckVehicle[playerid] = vehicle;
    SetRandomDestination(playerid);
    TruckComps[vehicle] = 0;
    TruckingMoney[playerid] = 0;
    SCM(playerid, COLOR_WHITE, "/dropoff pentru a termina misiunea mai devreme.");
    VehicleEngine(vehicle, true);
    ShowTruckText(playerid);
    return 1;
}

CMD:leavemission(playerid, params[])
{
    new vehicle = TruckVehicle[playerid];
    if(!Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "Nu esti intr-o misiune!");
    if(TruckComps[vehicle] > 0)
    {
        format(msg, sizeof(msg), "~w~YOU HAVE FAILED YOUR MISSION BY LEAVING THE MISSION~n~YOU HAVE GOT A FINE OF ~g~$%d.", (TruckComps[vehicle] * 5) / 10);
        JobMessage(playerid, msg, 6);
        PlacePlayerTicket(playerid, (TruckComps[vehicle] * 5) / 10);
    }
    else HideTruckText(playerid);
    Trucking{playerid} = false;
    DroppingOff{playerid} = false;
    LoadingTruck{playerid} = 0;
    TruckComps[vehicle] = 0;
    TruckingMoney[playerid] = 0;
    if(TruckTrailer[playerid] != INVALID_VEHICLE_ID)
    {
        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
        RespawnVehicle(TruckTrailer[playerid]);
        TruckTrailer[playerid] = INVALID_VEHICLE_ID;
    }
    if(!VehicleInfo[TruckVehicle[playerid]][carOwned])
    {
        RespawnVehicle(TruckVehicle[playerid]);
    }
    TruckVehicle[playerid] = INVALID_VEHICLE_ID;
    return 1;
}

CMD:dropoff(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(!Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "Nu esti intr-o misiune.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Nu trebuie sa fi intr-un vehicul.");
    if(VehicleInfo[vehicle][carOwned] == 0 && !IsATruckJob(vehicle)) return SCM(playerid, COLOR_WHITE, "Trebuie sa fi intr-un vehicul detinut de firma.");
    if(TruckComps[vehicle] == 0) return SCM(playerid, COLOR_GREY, "Nu ai incarcat inca materiale.");
    SetTruckStage(playerid, 3);
    LoadingTruck{playerid} = false;
    SetCheckPoint(playerid, TRUCKDROP, DropOffX[playerid], DropOffY[playerid], DropOffZ[playerid], 9.0);
    return 1;
}


CMD:updatemission(playerid, params[])
{
    if(!Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "Nu ai un job activ.");
    RemoveCheckPoint(playerid);
    if(GetTruckStage(playerid) == 1 || GetTruckStage(playerid) == 2)
    {
        SetCheckPoint(playerid, TRUCKLOAD, GatherX[playerid], GatherY[playerid], GatherZ[playerid], 9.0);
    }
    if(GetTruckStage(playerid) == 3 || GetTruckStage(playerid) == 4)
    {
        SetCheckPoint(playerid, TRUCKDROP, DropOffX[playerid], DropOffY[playerid], DropOffZ[playerid], 9.0);
    }
    if(GetTruckStage(playerid) == 5)
    {
        SetCheckPoint(playerid, TRUCKRETURN, CityVehicles[TruckVehicle[playerid]][vPosX], CityVehicles[TruckVehicle[playerid]][vPosY], CityVehicles[TruckVehicle[playerid]][vPosZ], 9.0);
    }
    return 1;
}

CMD:jobhelp(playerid, params[])
{
    new job = PlayerInfo[playerid][pJob];
    if(job == JOBLESS) return SCM(playerid, COLOR_GREY, "Nu ai un job.");
    if(job == DRUGDEALER)
    {
        SCM(playerid, COLOR_FADE1, "Job-ul tau curent este:");
        SCMEx(playerid, COLOR_FADE1, "%s.", GetJobName(job));
        SCM(playerid, COLOR_FADE2, "Comenzi:");
        SCM(playerid, COLOR_FADE3, "/buydrug - Folosesti pentru a cumpara droguri.");
        SCM(playerid, COLOR_FADE3, "/selldrug - Vinzi cuiva un drog.");
        SCM(playerid, COLOR_FADE3, "/drugmenu - Iti arata drogurile tale.");
    }
    else if(job == WEAPONDEALER)
    {
        SCM(playerid, COLOR_FADE1, "Job-ul tau curent este: Weapon Dealer");
        SCM(playerid, COLOR_FADE2, "Comenzi:");
        SCM(playerid, COLOR_FADE3, "/getmats - Folosesti pentru a cumpara materiale.");
        SCM(playerid, COLOR_FADE3, "/makeweapon - Pentru a creea o arma.");
        SCM(playerid, COLOR_FADE3, "/wepmats - Numele si pretul armelor (in materiale).");
    }
    else if(job == TRUCKER)
    {
        SCM(playerid, COLOR_FADE1, "Job-ul tau curent este:");
        SCMEx(playerid, COLOR_FADE1, "%s, Rank: %s", GetJobName(job), GetJobRank(playerid));
        SCM(playerid, COLOR_FADE2, "Comenzi:");
        SCM(playerid, COLOR_FADE3, "/truckermission - Incepi sa lucrezi.");
        SCM(playerid, COLOR_FADE3, "Trebuie sa ai masina ta personala sau sa gasesti una guvernamentala (pe strazi).");
        SCM(playerid, COLOR_FADE3, "/dropoff - Inchiei misiunile mai devreme si primesti doar cat ai lucrat.");
        SCM(playerid, COLOR_FADE3, "/updatemission - Folosesti atunci cand nu iti apare Checkpoint-ul pe minimap.");
        SCM(playerid, COLOR_FADE3, "/leavemission - Abandonezi misiunea(consecinte, primesti amenda).");
        SCMEx(playerid, COLOR_WHITE, "Ai pana acum %d ore in aceasta cariera.", PlayerInfo[playerid][pCareer]);
    }
    if(job == FARMER)
	{
		SCM(playerid, COLOR_FADE1, "Job-ul tau curent este: Fermier");
		SCM(playerid, COLOR_FADE2, "Informatii:");
		SCM(playerid, COLOR_FADE2, "Pentru a ridica/pune jos saci apasa 'N'.");
		SCM(playerid, COLOR_FADE2, "Pentru a pune/scoate saci din Walton apasa 'H'.");
		SCM(playerid, COLOR_FADE2, "Pentru a pune seminte in remorca tractorului apasa 'ALT'.");
		SCM(playerid, COLOR_FADE2, "Ca sa plantezi/recoltezi apasa 'ALT' cand esti Tractor/Harvester.");
		SCM(playerid, COLOR_WHITE, "|---------------------------------------------------------------|");
	    SCM(playerid, COLOR_FADE1, "Comenzi:");
		SCM(playerid, COLOR_FADE2, "/startsow - ca sa plantezi folosing Tractorul si remorca.");
		SCM(playerid, COLOR_FADE2, "/stopsow - ca sa te opresti din plantat si sa poti recolta.");
		SCM(playerid, COLOR_FADE2, "/stopharvest - ca sa te opreste din recoltat si sa poti transporta.");
	    SCM(playerid, COLOR_FADE3, "/transport - ca sa transporti recolta catre un depozit.");
		SCM(playerid, COLOR_FADE3, "/transport - ca sa transporti recolta catre un depozit.");
		SCM(playerid, COLOR_FADE3, "/endtransport - ca sa termini transportul si sa poti folosi iar Tractorul.");
	}
	else if(job == GARBAGE)
	{
	    SCM(playerid, COLOR_FADE1, "Your current job is: Garbage Job");
	    SCM(playerid, COLOR_FADE2, "Commands:");
	    SCM(playerid, COLOR_FADE3, "/trash load/unload - Pentru a incarca/descarca gunoi.");
	    SCM(playerid, COLOR_FADE3, "/takeuniform - Pentru a imbraca uniforma.");
		SCM(playerid, COLOR_FADE3, "Pentru a completa acest job trebuie sa gasesti cosuri de gunoi si apoi sa le golesti.");
	}
    return 1;
}

CMD:sidejobhelp(playerid, params[])
{
    new sidejob = PlayerInfo[playerid][pSideJob];
    if(sidejob == JOBLESS) return SCM(playerid, COLOR_GREY, "Nu ai un job secundar.");
    if(sidejob == MECHANIC)
    {
        SCM(playerid, COLOR_FADE1, "Job-ul tau secundar este de mecanic.");
        SCM(playerid, COLOR_FADE1, "Comenzi: /refillcar, /repaircar, /paintcar, /colorlist, /buycomp, /tow");
        SCM(playerid, COLOR_WHITE, "Comenzi: /componentlist , /checkcomponents ");
    }
    if(sidejob == TAXI)
    {
        SCM(playerid, COLOR_FADE1, "Job-ul tau secundar este de taximetrist.");
        SCM(playerid, COLOR_FADE1, "Comenzi: /taxi");
    }
    return 1;
}

CMD:checkcomponents(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi in masina ca si sofer.");
    SCMEx(playerid, COLOR_WHITE, "Componente in vehicul: %d.", VehicleInfo[vehicle][carComps]);
    return 1;
}

CMD:paintcar(playerid, params[])
{
    new id, color1, color2;
    new playerVeh = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "Nu esti mecanic.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi in TowTruck ca sofer.");
    if(!IsATowTruck(playerVeh)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi in TowTruck.");
    if(sscanf(params,"udd",id,color1,color2)) return SyntaxMSG(playerid, "/paintcar [playerid/PartOfName] [color 1] [color 2]");
    if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0) return SCM(playerid, COLOR_LIGHTRED, "Car color ID's: 0-255");
    if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu-ti poti oferi singur.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este in vehicul ca si sofer.");
    new vehicle = GetPlayerVehicleID(id);
    if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul este unul guvernamental.");
    if(VehicleInfo[playerVeh][carComps] < 45) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa ai cel putin 45 de componente pentru a vopsi masina.");
    format(msg, sizeof(msg), "ti-a oferit sa-ti repare masina %s pentru %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
    ActionMessage(playerid, 10.0, msg);
    format(msg, sizeof(msg), "* %s ti-a oferit o schimbare de vopsea, /accept repair pentru a accepta. (( Se schimba culoarea ))", GetNameWithMask(playerid));
    SCM(id, COLOR_INFO, msg);
    SetIntVar(playerid, "color1", color1);
    SetIntVar(playerid, "color2", color2);
    SetIntVar(id, "RepairFrom", playerid);
    SetIntVar(id, "RepairType", 5);
    GettingRepair{id} = true;
    return 1;
}

CMD:tow(playerid, params[])
{
    new id;
    new playerVeh = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "Nu esti mecanic");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi inauntrul unui TowTruck ca si sofer.");
    if(!IsATowTruck(playerVeh)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi in TowTruck.");
    if(IsTrailerAttachedToVehicle(playerVeh))
    {
        DetachTrailerFromVehicle(playerVeh);
        SCM(playerid, COLOR_INFO, "Aveai deja un vehicul atasat asa ca acum este detasat.");
        return 1;
    }
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/tow [playerid/PartOfName]");
    if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu-ti poti oferi singur.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(8.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este intr-un vehicul ca si sofer.");
    new vehicle = GetPlayerVehicleID(id);
    if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "This vehicle is a government vehicle.");
    format(msg, sizeof(msg), "ti-a oferit o remorcare a masinii %s pentru %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
    ActionMessage(playerid, 10.0, msg);
    format(msg, sizeof(msg), "* %s ti-a oferit o remorcare , /accept tow pentru a accepta. (( Ataseaza vehiculul de remorca ))", GetNameWithMask(playerid));
    SCM(id, COLOR_INFO, msg);
    SetIntVar(id, "RepairFrom", playerid);
    GettingRepair{id} = true;
    return 1;
}

CMD:componentlist(playerid, params[])
{
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "Nu esti un mecanic.");
    SCM(playerid, COLOR_WHITE, "|_____ Componente necesare  ______|");
    SCM(playerid, COLOR_GREY, " Reparatii : Motor(75) | Aspect(75) | Distrugeri(30/Dent) | Motor mort(75)");
    SCM(playerid, COLOR_GREY, " Vopsit - 45 components");
    SCM(playerid, COLOR_GREY, " Pentru a vizualiza cate componente ai, foloseste : /checkcomponents");
    return 1;
}

CMD:repaircar(playerid, params[])
{
    new id, type, secoption;
    new playerVeh = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "Nu esti un mecanic.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi inauntrul unui TowTruck ca si sofer.");
    if(!IsATowTruck(playerVeh)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Tow Truck.");
    if(sscanf(params,"udD(-1)",id,type,secoption))
    {
        SyntaxMSG(playerid, "/repaircar [playerid/PartOfName] [type]");
        SCM(playerid, -1, "{C0C0C0}Tip 1: {FFFFFF}Repara motorul (20 componente | Adauga viata la masina /dl)");
        SCM(playerid, -1, "{C0C0C0}Tip 2: {FFFFFF}Repara masina (30 componente | Repara caroseria)");
        SCM(playerid, -1, "{C0C0C0}Tip 3: {FFFFFF}Sterge distrugerile (40 componente/distrugere)");
        SCM(playerid, -1, "{C0C0C0}Tip 4: {FFFFFF}Repara motorul (50 componente)");
        return 1;
    }
    if(id == playerid) return SCM(playerid, COLOR_GREY, "Nu iti poti oferii servicii singur.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este intr-un vehicul ca si sofer.");
    new vehicle = GetPlayerVehicleID(id);
    if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "Acesta este un vehicul guvernamental");
    if(type == 1)
    {
        if(VehicleInfo[playerVeh][carComps] < 20) return SCM(playerid, COLOR_LIGHTRED, "Iti trebuie 20 de componente pentru a repara masina.");
        format(msg, sizeof(msg), "i-a oferit lui %s o reparatie pentru vehiculul %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "* %s ti-a oferit o reparatie a motorului, scrie /accept repair. (( Seteaza HP-ul masinii la 100 ))", GetNameWithMask(playerid));
        SCM(id, COLOR_INFO, msg);
        SetIntVar(id, "RepairFrom", playerid);
        SetIntVar(id, "RepairType", 1);
        GettingRepair{id} = true;
    }
    else if(type == 2)
    {
        if(VehicleInfo[playerVeh][carComps] < 30) return SCM(playerid, COLOR_LIGHTRED, "Iti trebuie minim 75 componente pentru aceasta actiune.");
        format(msg, sizeof(msg), "has offered to repair the bodywork of %s's %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "* %s has offered you a bodywork repair, /accept repair to accept. (( Visual Work ))", GetNameWithMask(playerid));
        SCM(id, COLOR_INFO, msg);
        SetIntVar(id, "RepairFrom", playerid);
        SetIntVar(id, "RepairType", 2);
        GettingRepair{id} = true;
    }
    else if(type == 3)
    {
        new amount;
        if(sscanf(params,"{dd}d",amount))
        {
            SCM(playerid, COLOR_LIGHTRED, "Please enter how many destroys you want to remove.");
            SCM(playerid, COLOR_GREY, "Each destroy costs 40 products.");
            return 1;
        }
        if(VehicleInfo[playerVeh][carComps] < amount * 40) return SCMEx(playerid, COLOR_LIGHTRED, "You don't have enough products, %d", amount * 30);
        if(VehicleInfo[vehicle][carDestroyed] == 0) return SCM(playerid, COLOR_WHITE, "This vehicle doesn't have any destroys to remove.");
        format(msg, sizeof(msg), "has offered to remove the (%d)destroyes from %s's %s.", amount, GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "* %s has offered you a destroys repair (%d), /accept repair to accept. (( Dents ))", GetNameWithMask(playerid), amount);
        SCM(id, COLOR_INFO, msg);
        SetIntVar(id, "RepairFrom", playerid);
        SetIntVar(id, "DentsAmount", amount);
        SetIntVar(id, "RepairType", 4);
        GettingRepair{id} = true;
    }
    else if(type == 4)
    {
        if(VehicleInfo[playerVeh][carComps] < 50) return SCM(playerid, COLOR_LIGHTRED, "You need at least 50 components to fix the dead engine.");
        if(VehicleInfo[vehicle][carBroken] == 0) return SCM(playerid, COLOR_WHITE, "This vehicle engine is not dead.");
        format(msg, sizeof(msg), "has offered to restore the engine of %s's %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
        ActionMessage(playerid, 10.0, msg);
        format(msg, sizeof(msg), "* %s has offered you a dead engine repair, /accept repair to accept. (( Dead Engine ))", GetNameWithMask(playerid));
        SCM(id, COLOR_INFO, msg);
        SetIntVar(id, "RepairFrom", playerid);
        SetIntVar(id, "RepairType", 3);
        GettingRepair{id} = true;
    }
    return 1;
}

CMD:buycomp(playerid, params[])
{
    new amount;
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "Nu esti un mecanic.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi inauntrul unui TowTruck ca si sofer.");
    if(!IsATowTruck(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Tow Truck.");
    if(!PlayerToPoint(6.0, playerid,200.0143,-252.9479,1.3800))
    {
        SCM(playerid, COLOR_LIGHTRED, "Du-te la magazinul de componente pentru a cumpara materialele necesare necesare.");
        SetCheckPoint(playerid, COMPSPOT, 200.0143,-252.9479,1.3800, 8.0);
    }
    else
    {
        if(sscanf(params,"d",amount))
        {
            SyntaxMSG(playerid, "/buycomp [amount]");
            SCM(playerid, COLOR_LIGHTRED, "Poti cumpara intre 1-100 componente.");
            SCM(playerid, COLOR_WHITE, "Fiecare componenta este multiplicata cu 10 pentru Tow Truck-ul tau.");
            return 1;
        }
        if(amount < 1 || amount > 100) return SCM(playerid, COLOR_LIGHTRED, "Poti cumpara intre 1-100 componente.");
        if(GetCash(playerid) < amount * 10) return SCMEx(playerid, COLOR_LIGHTRED, "Nu ai banii necesari, $%d.", amount * 10);
        GiveCash(playerid, -amount * 10);
        JobMessage(playerid, "~w~AI CUMPARAT CATEVA COMPONENTE PENTRU TOW TRUCK-UL TAU.", 6);
        VehicleInfo[GetPlayerVehicleID(playerid)][carComps] += amount;
    }
    return 1;
}

CMD:refillcar(playerid, params[])
{
    new id, price;
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "Nu esti un mecanic.");
    if(sscanf(params,"ud",id,price)) return SyntaxMSG(playerid, "/refillcar [playerid/PartOfName] [pret]");
    if(id == playerid) return SCM(playerid, COLOR_WHITE, "Nu iti poti face plinul singur.");
    if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi inauntrul unui TowTruck ca si sofer.");
    if(!IsATowTruck(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Tow Truck.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "Acest jucator nu este intr-un vehicul ca si sofer.");
    new vehicle = GetPlayerVehicleID(id);
    if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "Acesta este o masina guvernamentala.");
    if(Gas{vehicle} >= 100) return SCM(playerid, COLOR_WHITE, "Rezervorul este plin.");
    RefillPrice[id] = price;
    RefillOffer[id] = playerid;
    format(msg, sizeof(msg), "i-a oferit lui %s sa ii faca plinul pentru %d$.", GetNameWithMask(id), price);
    ActionMessage(playerid, 10.0, msg);
    format(msg, sizeof(msg), "* %s s-a oferit sa iti faca plinul pentru %d, foloseste /accept refill.", GetNameWithMask(playerid), price);
    SCM(id, COLOR_INFO, msg);
    return 1;
}

CMD:taxi(playerid, params[])
{
    new option[11], secoption, vehicle = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pTaxiLic] == 0) return SCM(playerid, COLOR_GRAY, "Nu ai o licenta de taxi! O poti achizitona de la Primarie.");
    if(PlayerInfo[playerid][pSideJob] != TAXI) return SCM(playerid, COLOR_WHITE, "Nu esti taximetrist!");
    if(sscanf(params,"s[11]D(-1)", option, secoption))
    {
        SyntaxMSG(playerid, "/taxi [option]");
        SCM(playerid, COLOR_GREY, "Optiuni: | duty | start | stop | fare | accept |");
        return 1;
    }
    if(CompareStrings(option, "duty"))
    {
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii intr-un Taxi/Cabbie.");
        if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii sofer.");
        if(TaxiDuty{playerid})
        {
            SCM(playerid, COLOR_YELLOWG, "[TAXI] De acum esti off duty si nu vei mai primi apeluri.");
            SetNormalColor(playerid);
            TaxiDuty{playerid} = false;
            TaxiMade[playerid] = 0;
        }
        else
        {
            SCM(playerid, COLOR_YELLOWG, "[TAXI] De acum est on duty si vei primi apeluri.");
            SetPlayerColor(playerid, TAXI_DUTY);
            TaxiDuty{playerid} = true;
            TaxiMade[playerid] = 0;
        }
    }
    if(CompareStrings(option, "start"))
    {
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul unui Taxi/Cabbie.");
        if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Taxi/Cabbie.");
        if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "Nu esti on duty.");
        if(TaxiFare{playerid} == 0) return SCM(playerid, COLOR_GREY, "Nu ai setat o tariful! (/taxi fare)");
        if(TaxiStart{playerid}) return SCM(playerid, COLOR_GREY, "Cursa a fost pornita!");
        SCM(playerid, COLOR_YELLOWG, "[TAXI] Ai pornit tura si vei taxa toti clientii ce intra in masina ta.");
        TaxiStart{playerid} = true;
    }
    if(CompareStrings(option, "fare"))
    {
        new fare;
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul unui Taxi/Cabbie.");
        if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Taxi/Cabbie.");
        if(sscanf(params,"{s[11]}d",fare)) return SyntaxMSG(playerid, "/taxi fare [amount]");
        if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "Nu esti on duty.");
        if(fare < 1 || fare > 10) return SCM(playerid, COLOR_GREY, "Tariful trebuie sa fie intre 1$ si 10$..");
        format(msg, sizeof(msg), "[TAXI] Ti-ai schimbat tariful la $%d.", fare);
        SCM(playerid, COLOR_YELLOWG, msg);
        TaxiFare{playerid} = fare;
    }
    if(CompareStrings(option, "accept"))
    {
        new id;
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul unui Taxi/Cabbie.");
        if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Taxi/Cabbie.");
        if(sscanf(params,"{s[11]}d",id)) return SyntaxMSG(playerid, "/taxi accept [playerid]");
        if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "Nu esti on duty.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(GetIntVar(id, "NeedTaxi") == 0) return SCM(playerid, COLOR_LIGHTRED, "Acest jucator nu are nevoie de un taxi!");
        format(msg, sizeof(msg), "* %s ti-a acceptat apelul, el cere %d pe secunda!", GetNameEx(playerid), TaxiFare{playerid});
        SCM(id, COLOR_YELLOWG, msg);
        SCMEx(playerid, COLOR_YELLOWG, "*Ai acceptat apelul lui %s.", GetNameEx(id));
        SCMEx(playerid, COLOR_YELLOWG, "Locatie: %s, Numar: %d", GetPlayerLocation(id), PlayerInfo[playerid][pNumber]);
    }
    if(CompareStrings(option, "stop"))
    {
        new driver = GetVehicleDriver(vehicle);
        if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fii soferul unui Taxi/Cabbie.");
        if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii intr-un Taxi/Cabbie");
        if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "Nu esti on duty.");
        if(!TaxiStart{playerid}) return SCM(playerid, COLOR_GREY, "Tariful nu a fost setat.");
        SCM(playerid, COLOR_YELLOWG, "[TAXI] Taximetrul tau s-a oprit si i-a taxat pe toti care se aflau in masina ta.");
        format(msg, sizeof(msg), "[TAXI] Taximetrul s-a oprit si a ajuns la suma de %d$.", TaxiMade[playerid]);
        SCM(playerid, COLOR_YELLOWG, msg);
        foreach(new i : Player)
        {
            if(PlayerInCar(i) && GetPlayerState(i) != PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
            {
                ChargePerson(i, driver);
            }
        }
        TaxiStart{playerid} = false;
        TaxiMade[playerid] = 0;
    }
    return 1;
}

CMD:setspawn(playerid, params[])
{
    new type;
    if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/setspawn [0-Normal,1-House,2-Faction]");
    if(type > 2 || type < 0) return SyntaxMSG(playerid, "/setspawn [0-Normal,1-House,2-Faction]");
    if(type == 0)
    {
        SCM(playerid, COLOR_YELLOWG, "SPAWN: Ai schimbat locatia spawn-ului la cea normala (Gara)");
        PlayerInfo[playerid][pSpawnType] = 0;
    }
    if(type == 1)
    {
        if(PlayerInfo[playerid][pHouseKey] == -1) return SCM(playerid, COLOR_GREY, "Nu detii o casa.");
        SCM(playerid, COLOR_YELLOWG, "SPAWN: Ai schimbat locatia spawn-ului la casa.");
        PlayerInfo[playerid][pSpawnType] = 1;
    }
    if(type == 2)
    {
        if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_GREY, "Nu esti intr-o factiune.");
        SCM(playerid, COLOR_YELLOWG, "SPAWN: Ai schimbat locatia spawn-ului la cea de factiune.");
        if(PlayerInfo[playerid][pFaction] == 1)
        {
            ShowDialog(playerid, Show:<LSPDSpawn>, DIALOG_STYLE_LIST, "LSPD - Selecteaza HQ", "HQ Pershing Square\nHQ East Los Santos", "Selecteaza", "Inchide");
        }
        else PlayerInfo[playerid][pSpawnType] = 2;
    }
    return 1;
}

Dialog:LSPDSpawn(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                SCM(playerid, COLOR_GREEN, "Ai setat spawnul la 'HQ Pershing Square'.");
                PlayerInfo[playerid][pSpawnType] = 21;
            }
            case 1:
            {
                SCM(playerid, COLOR_GREEN, "Ai setat spawnul la 'HQ East Los Santos'.");
                PlayerInfo[playerid][pSpawnType] = 22;
            }
        }
    }
    return 1;
}

CMD:opentoll(playerid, params[])
{
    new L_i_TollID;
    if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 623.9500, -1183.9774, 19.2260) || IsPlayerInRangeOfPoint(playerid, 10.0, 607.9684, -1194.2866, 19.0043)) // Richman tolls
    {
        L_i_TollID = RichmanToll;
    }
    else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 39.7039, -1522.9891, 5.1995) || IsPlayerInRangeOfPoint(playerid, 10.0, 62.7378, -1539.9891, 5.0639)) // Flint tolls
    {
        L_i_TollID = FlintToll;
    }
    else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 1795.9447, 704.2550, 15.0006) || IsPlayerInRangeOfPoint(playerid, 10.0, 1778.9886, 702.6728, 15.2574)) // LV tolls
    {
        L_i_TollID = LVToll;
    }
    else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 612.53070, 346.59592, 17.92614) || IsPlayerInRangeOfPoint(playerid, 10.0, 604.37152, 346.88141, 17.92614)) // LV tolls
    {
        L_i_TollID = BlueberryTollR;
    }
    else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, -195.2768,252.2416,12.0781) || IsPlayerInRangeOfPoint(playerid, 10.0, -199.5153,260.3405,12.0781)) // LV tolls
    {
        L_i_TollID = BlueberryTollL;
    }
    else
    {
        SCM(playerid, COLOR_LIGHTRED, "Nu esti destul de aproape de bariera!");
        return 1;
    }
    if(!Toll_TimePassedCivil(L_i_TollID, playerid))
        return 1;

    new L_sz_MessageString[156];
    if(!CopDuty{playerid})
    {
        if(aTolls[L_i_TollID][E_tLocked]) // If it's locked
        {
            ProxDetectorP(20.0, playerid, L_sz_TollStringLocked, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
            return 1;
        }
        if(GetCash(playerid) < TollCost)
        {
            SCM(playerid, COLOR_RED, L_sz_TollStringNoMoney);
            return 1;
        }
        format(L_sz_MessageString, 156, "%s ii achita %d$ vamesului.", GetNameWithMask(playerid), TollCost);
        GiveCash(playerid, -TollCost);
        ProxDetectorP(20.0, playerid, L_sz_MessageString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    ProxDetectorP(20.0, playerid, L_sz_TollStringBye, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
    SCM(playerid, COLOR_LIGHTRED, L_sz_TollStringHurryUp);
    Toll_OpenToll(L_i_TollID);
    return 1;
}

//WEAPONS - IULY

new WepDealerVeh[]={
    413, //PONY
    414, //MULE
    422, //BOBCAT
    440, //RUMPO
    456, //YANKEE
    459, //TOPFUN VAN
    482, //BURRITO
    498, //BOXVILLE 1
    573, //DUNE
    609 //BOXVILLE 2
};

forward IsWepDealerCar(vehicleid);
public IsWepDealerCar(vehicleid)
{
    for(new i=0;i<sizeof(WepDealerVeh);i++)
        if(GetVehicleModel(vehicleid) == WepDealerVeh[i]) return 1;
    return 0;
}

CMD:getmats(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != WEAPONDEALER) return SCM(playerid, -1, "Nu esti dealer de arme.");
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Trebuie sa fii intr-un Boxville.");
    new veh = GetPlayerVehicleID(playerid);
    if(!IsWepDealerCar(veh)) return SCM(playerid, -1, "Trebuie sa fii intr-o dubita!");
    new mats;
    if(sscanf(params, "i", mats)) return SCMEx(playerid, COLOR_OOC, "Syntax: /getmats [numar materiale] - {FF0000} $%d/1 MATERIAL", PRICE_MATS);
    if(mats > 6000 || mats < 500) return SCM(playerid, -1, "Poti lua intre 500 si 6000 de materiale.");
    new cash = PRICE_MATS*mats;
    new neededcash = PlayerInfo[playerid][pCash] - cash;
    if(GetCash(playerid) < cash)
    {
        format(msg, sizeof(msg), "Nu ai suficienti bani, iti mai trebuie %d$.", neededcash);
        SCM(playerid, COLOR_GREEN2, msg);
        return 1;
    }
    SCM(playerid, COLOR_GREEN2, "Trebuie sa mergi la 'Materials Loading Station' din BlueBerry! Un checkpoint a fost setat pe harta.");
    SCM(playerid, 0xFF000000, "Daca ai intrat din greseala in checkpoint-ul de la casa, foloseste comanda {FFFFFF}'/updatemats'{FF0000}.");
    SetPlayerCheckpoint(playerid, 211.2543,-31.6185,1.4704, 5);
    materials[playerid] = mats;
    SetPVarInt(playerid, "MatsStage", 1);
    return 1;
}

CMD:updatemats(playerid, params[])
{
    if(GetPVarInt(playerid, "MatsStage") == 0) return SCM(playerid, COLOR_GREY, "Nu ai dat comanda de materiale! Foloseste /getmats.");
    SCM(playerid, COLOR_GREEN2, "Trebuie sa mergi la 'Materials Loading Station' din BlueBerry! Un checkpoint a fost setat pe harta.");
    SCM(playerid, 0xFF000000, "Daca ai intrat din greseala in checkpoint-ul de la casa, foloseste comanda {FFFFFF}'/updatemats'{FF0000}.");
    SetPlayerCheckpoint(playerid, 211.2543,-31.6185,1.4704, 5);
    return 1;
}

CMD:mymats(playerid, params[])
{
    SCMEx(playerid, COLOR_GREY, "Materialele tale: %d", PlayerInfo[playerid][pWepMats]);
    return 1;
}

CMD:givemats(playerid, params[])
{
    new id, amount;
    if(sscanf(params,"ui", id, amount)) return SyntaxMSG(playerid, "/givemats [playerid/PoN] [materiale]");
    if(amount < 0) return SCM(playerid, COLOR_GREY, "Valoarea trebuie sa fie pozitiva");
    if(PlayerInfo[playerid][pWepMats] < amount) return SCM(playerid, COLOR_GREY, "Nu ai atatea materiale.");
    PlayerInfo[id][pWepMats] += amount;
    PlayerInfo[playerid][pWepMats] -= amount;
    SCMEx(playerid, COLOR_GREEN, "I-ai dat lui %s %d materiale.", GetNameEx(id), amount);
    SCMEx(id, COLOR_GREEN, "%s ti-a dat %d materiale.", GetNameEx(playerid), amount);
    return 1;
}

CMD:setmats(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    new id, amount;
    if(sscanf(params,"ui", id, amount)) return SyntaxMSG(playerid, "/givemats [playerid/PoN] [materiale]");
    if(amount < 0) return SCM(playerid, COLOR_GREY, "Valoarea trebuie sa fie pozitiva");
    PlayerInfo[id][pWepMats] = amount;
    SCMEx(playerid, COLOR_GREEN, "I-ai setat lui %s materialele la %d.", GetNameEx(id), amount);
    SCMEx(id, COLOR_GREEN, "%s ti-a setat materialele la %d.", GetNameEx(playerid), amount);
    return 1;
}

CMD:makeweapon(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != WEAPONDEALER) return SCM(playerid, -1, "Nu esti dealer de arme.");
    if(!PlayerToPoint(1.5, playerid, 150.6646,-177.2996,1.5781)) return SCM(playerid, -1, "Nu esti la locul de faut arme!");
    new weapon[64], ammo, ammo2;
    if(sscanf(params, "s[16]i", weapon, ammo)) return SyntaxMSG(playerid, "/makeweapon [weapon name(/wepmats)] [ammo]");
    if(CompareStrings(weapon, "knife"))
    {
        if(PlayerInfo[playerid][pWepMats] < KNIFE_MATS) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        if(IsMeleeSlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Slotul melee este ocupat!");
        if(PlayerInfo[playerid][pWepMats] < KNIFE_MATS) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        SCMEx(playerid, COLOR_GREEN2, "Ai facut un cutit pentru %d materiale", KNIFE_MATS);
        PlayerInfo[playerid][pWepMats] -= KNIFE_MATS;
        GiveMeleeWeapon(playerid, 4);
    }
    else if(CompareStrings(weapon, "colt45"))
    {
        new mats_needed = COLT45_MATS + ammo * COLT45_AMMO;
        if(PlayerInfo[playerid][pWepMats] < mats_needed) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        if(GetPrimaryWeapon(playerid) == 22)
        {
            ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
        }
        else if(IsPrimarySlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Slotul primar este ocupat.");
        format(msg, sizeof(msg), "Ai facut un Colt45 cu %d gloante pentru %d materiale.", ammo, mats_needed);
        SCM(playerid, COLOR_GREEN2, msg);
        if(ammo2 > 0)
        {
            format(msg, sizeof(msg), "Ai avut deja un Colt45, asa ca ti-au fost adaugate %d gloante.", ammo2);
            SCM(playerid, COLOR_GREEN2, msg);
        }
        new ammo_final = ammo+ammo2;
        PlayerInfo[playerid][pWepMats] -= COLT45_MATS;
        PlayerInfo[playerid][pWepMats] -= COLT45_AMMO * ammo;
        GivePermWeapon(playerid, 2, 22, ammo_final);
    }
    else if(CompareStrings(weapon, "deagle"))
    {
        new mats_needed = DEAGLE_MATS + ammo*DEAGLE_AMMO;
        if(PlayerInfo[playerid][pWepMats] < mats_needed) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        if(GetPrimaryWeapon(playerid) == 24)
        {
            ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
        }
        else if(IsPrimarySlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Slotul primar este ocupat.");
        format(msg, sizeof(msg), "Ai facut un Deagle cu %d gloante pentru %d materiale.", ammo, mats_needed);
        SCM(playerid, COLOR_GREEN2, msg);
        if(ammo2 > 0)
        {
            format(msg, sizeof(msg), "Ai avut deja un Colt45, asa ca ti-au fost adaugate %d gloante.", ammo2);
            SCM(playerid, COLOR_GREEN2, msg);
        }
        new ammo_final = ammo+ammo2;
        PlayerInfo[playerid][pWepMats] -= DEAGLE_MATS;
        PlayerInfo[playerid][pWepMats] -= DEAGLE_AMMO * ammo;
        GivePermWeapon(playerid, 2, 24, ammo_final);
    }
    else if(CompareStrings(weapon, "shotgun"))
    {
        new mats_needed = SHOTGUN_MATS + ammo * SHOTGUN_AMMO;
        if(PlayerInfo[playerid][pWepMats] < mats_needed) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        if(GetSecondaryWeapon(playerid) == 25)
        {
            ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
        }
        else if(IsSecondarySlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Slotul secundar este ocupat.");
        format(msg, sizeof(msg), "Ai facut un shotgun pentru %d materiale.", ammo, mats_needed);
        SCM(playerid, COLOR_GREEN2, msg);
        if(ammo2 > 0)
        {
            format(msg, sizeof(msg), "Ai avut deja un shotgun, asa ca ti-au fost adaugate %d gloante.", ammo2);
            SCM(playerid, COLOR_GREEN2, msg);
        }
        new ammo_final = ammo+ammo2;
        PlayerInfo[playerid][pWepMats] -= SHOTGUN_MATS;
        PlayerInfo[playerid][pWepMats] -= SHOTGUN_AMMO * ammo;
        GivePermWeapon(playerid, 3, 25, ammo_final);
    }
    else if(CompareStrings(weapon, "ak47"))
    {
        new mats_needed = AK47_MATS + ammo*AK47_AMMO;
        if(PlayerInfo[playerid][pWepMats] < mats_needed) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        if(GetSecondaryWeapon(playerid) == 30)
        {
            ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
        }
        else if(IsSecondarySlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Slotul secundar este ocupat.");
        format(msg, sizeof(msg), "Ai facut un AK47 pentru cu %d de gloante pentru %d materiale.", ammo, mats_needed);
        SCM(playerid, COLOR_GREEN2, msg);
        if(ammo2 > 0)
        {
            format(msg, sizeof(msg), "Ai avut deja un AK47, asa ca ti-au fost adaugate %d gloante.", ammo2);
            SCM(playerid, COLOR_GREEN2, msg);
        }
        new ammo_final = ammo+ammo2;
        PlayerInfo[playerid][pWepMats] -= AK47_MATS;
        PlayerInfo[playerid][pWepMats] -= AK47_AMMO * ammo;
        GivePermWeapon(playerid, 3, 30, ammo_final);
    }
    else if(CompareStrings(weapon, "sniper"))
    {
        new mats_needed = SNIPER_MATS + ammo*SNIPER_AMMO;
        if(PlayerInfo[playerid][pWepMats] < mats_needed) return SCM(playerid, COLOR_GREY, "Nu ai materialele necesare!");
        if(GetSecondaryWeapon(playerid) == 34)
        {
            ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
        }
        else if(IsSecondarySlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Slotul secundar este ocupat.");
        format(msg, sizeof(msg), "Ai facut un Sniper pentru cu %d de gloante pentru %d materiale.", ammo, mats_needed);
        SCM(playerid, COLOR_GREEN2, msg);
        if(ammo2 > 0)
        {
            format(msg, sizeof(msg), "Ai avut deja un Sniper, asa ca ti-au fost adaugate %d gloante.", ammo2);
            SCM(playerid, COLOR_GREEN2, msg);
        }
        new ammo_final = ammo+ammo2;
        PlayerInfo[playerid][pWepMats] -= SNIPER_MATS;
        PlayerInfo[playerid][pWepMats] -= SNIPER_AMMO * ammo;
        GivePermWeapon(playerid, 3, 34, ammo_final);
    }
    else SCM(playerid, COLOR_GREY, "Arma invalida!");
    return 1;
}

CMD:wepmats(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != WEAPONDEALER) return SCM(playerid, -1, "Nu esti dealer de arme.");
    SCMEx(playerid, COLOR_GREEN2, "________________________");
    SCMEx(playerid, COLOR_OOC, "knife: %d materiale", KNIFE_MATS);
    SCMEx(playerid, COLOR_GREY, "colt45: %d materiale", COLT45_MATS);
    SCMEx(playerid, COLOR_OOC, "deagle: %d materiale", DEAGLE_MATS);
    SCMEx(playerid, COLOR_GREY, "shotgun: %d materiale", SHOTGUN_MATS);
    SCMEx(playerid, COLOR_OOC, "ak47: %d materiale", AK47_MATS);
    SCMEx(playerid, COLOR_GREY, "sniper: %d materiale", SNIPER_MATS);
    SCMEx(playerid, COLOR_GREEN2, "________________________");
    return 1;
}

forward GiveMats(playerid);
public GiveMats(playerid)
{
    TogglePlayerControllable(playerid, true);
    SCM(playerid, -1, "Trebuie sa te intorci in Willowfield pentru a procesa materialele.");
    SetPlayerCheckpoint(playerid, 2366.8889,-2015.3506,13.6103, 4);
    SetPVarInt(playerid, "MatsStage", 2);
    return 1;
}

forward GiveMatsFinal(playerid);
public GiveMatsFinal(playerid)
{
    TogglePlayerControllable(playerid, true);
    new money = materials[playerid] * PRICE_MATS;
    GiveCash(playerid, -money);
    format(msg, sizeof(msg), "Ai primit %d materiale pentru %d$.", materials[playerid], money);
    SCM(playerid, COLOR_GREEN2, msg);
    PlayerInfo[playerid][pWepMats] += materials[playerid];
    materials[playerid] = 0;
    SavePlayerStats(playerid);
    return 1;
}

forward EditAttach(playerid, index);
public EditAttach(playerid, index)
{
    EditAttachedObject(playerid, index);
    return 1;
}

stock GetWeaponModel(weaponid)
{
    switch(weaponid)
    {
        case 1: return 331;
        case 2..8: return weaponid+331;
        case 9: return 341;
        case 10..15: return weaponid+311;
        case 16..18: return weaponid+326;
        case 22..29: return weaponid+324;
        case 30,31: return weaponid+325;
        case 32: return 372;
        case 33..45: return weaponid+324;
        case 46: return 371;
    }
    return 0;
}

CMD:attachwep(playerid, params[])
{
    if(AttachWep[playerid][wepID] == -1)
    {
        if(GetPlayerWeapon(playerid) == 0) return SCM(playerid, COLOR_GREY, "Nu tii o arma in mana.");
        new wepid, wep, ammo;
        wepid = GetPlayerWeapon(playerid);
        if(wepid == -1) return SCM(playerid, COLOR_GREY, "Nu ai o arma.");
        for(new i=0;i<=12;i++)
        {
            GetPlayerWeaponData(playerid, i, wep, ammo);
            if(wep == wepid)
            {
                AttachWep[playerid][wepID] = wep;
//              SCMEx(playerid, COLOR_GREEN, "DEBUG: wepID %d", wep);
                AttachWep[playerid][wepAmmo] = ammo;
//              SCMEx(playerid, COLOR_GREEN, "DEBUG: wepAmmo %d", ammo);
                if(HasWeapon(playerid, wep))
                {
                    if(IsMeleeWeapon(wep))
                    {
                        RemovePlayerWeapon(playerid, wep);
                        PlayerInfo[playerid][pMeleeWep] = 0;
                        AttachWep[playerid][wepGType] = 1;
                    }
                    if(IsPrimaryWeapon(wep))
                    {
                        RemovePlayerWeapon(playerid, wep);
                        PlayerInfo[playerid][pPerm1] = 0;
                        PlayerInfo[playerid][pAmmo1] = 0;
                        AttachWep[playerid][wepGType] = 2;
                    }
                    if(IsSecondaryWeapon(wep))
                    {
                        RemovePlayerWeapon(playerid, wep);
                        PlayerInfo[playerid][pPerm2] = 0;
                        PlayerInfo[playerid][pAmmo2] = 0;
                        AttachWep[playerid][wepGType] = 3;
                    }
                    AttachWep[playerid][wepType] = PERMWEAPON;
                }
                else AttachWep[playerid][wepType] = TEMPWEAPON;
//              SCMEx(playerid, COLOR_GREEN, "DEBUG: wepType %d", AttachWep[playerid][wepType]);
                for(new y=0; y<MAX_PLAYER_ATTACHED_OBJECTS; y++)
                {
                    if(!IsPlayerAttachedObjectSlotUsed(playerid, y))
                    {
                        AttachWep[playerid][wepASlot] = y;
//                      SCMEx(playerid, COLOR_GREEN, "DEBUG: wepASlot %d", y);
                        break;
                    }
                }
                RemovePlayerWeapon(playerid, AttachWep[playerid][wepID]);
                SetPlayerAttachedObject(playerid, AttachWep[playerid][wepASlot], GetWeaponModel(AttachWep[playerid][wepID]), 1);
//                SCMEx(playerid, COLOR_GREEN, "DEBUG: Wep %d(model %d) atasat pe slot %d", AttachWep[playerid][wepID], GetWeaponModel(AttachWep[playerid][wepID]), AttachWep[playerid][wepASlot]);
                SetPVarInt(playerid, "EditAtttachedWep", 1);
                SetTimerEx("EditAttach", 500, false, "ii", playerid, AttachWep[playerid][wepASlot]);
                break;
            }
        }
    }
    else
    {
        RemovePlayerAttachedObject(playerid, AttachWep[playerid][wepASlot]);
//      SCM(playerid, COLOR_GREEN, "DEBUG: Obiect sters");
        if(AttachWep[playerid][wepType] == PERMWEAPON)
        {
            if(AttachWep[playerid][wepGType] == 1) GiveMeleeWeapon(playerid, AttachWep[playerid][wepID]);
            else GivePermWeapon(playerid, AttachWep[playerid][wepGType], AttachWep[playerid][wepID], AttachWep[playerid][wepAmmo]);
        }
        else GivePlayerWeapon(playerid, AttachWep[playerid][wepID], AttachWep[playerid][wepAmmo]);
//      SCMEx(playerid, COLOR_GREEN, "DEBUG: GiveWeapon: %d %d %d", playerid, AttachWep[playerid][wepID], AttachWep[playerid][wepAmmo]);
        AttachWep[playerid][wepID] = -1;
        AttachWep[playerid][wepAmmo] = -1;
        AttachWep[playerid][wepType] = -1;
        AttachWep[playerid][wepASlot] = -1;
    }
    return 1;
}
//END OF WEAPONS - IULY

//===========================Drugs===========================//
CMD:mydrugs(playerid, params[])
{
    new id;
    if(!sscanf(params,"u", id))
    {
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        ShowPlayerDrugs(playerid, id);
    }
    else
    {
        ShowPlayerDrugs(playerid, playerid);
    }
    return 1;
}

CMD:vehdrugs(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "Aceasta comanda poate fi folosita doar in interiorul unui vehicul privat.");
    ShowVehicleDrugs(playerid, vehicle);
    return 1;
}

CMD:pd(playerid, params[]) return cmd_putdrug(playerid, params);
CMD:putdrug(playerid, params[])
{
    new slot, amount;
    if(sscanf(params,"dd",slot,amount)) return SyntaxMSG(playerid, "/putdrug [slot] [amount]");
    if(PlayerInCar(playerid))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "Aceasta comanda poate fi folosita doar in interiorul unui vehicul privat.");
        if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu ai droguri in acest slot.");
        if(GetFreeVehicleDrugSlot(vehicle) == 0) return SCM(playerid, COLOR_GREY, "Acest vehicul nu are sloturi libere.");
        if(PlayerInfo[playerid][pDrugAmount][slot] < amount) return SCM(playerid, COLOR_GREY, "Cantitate incorecta.");
        SetPlayerBubble(playerid, "pune ceva in vehicul.");
        GiveVehicleDrug(vehicle, PlayerInfo[playerid][pDrug][slot], amount);
        PlayerInfo[playerid][pDrugAmount][slot] -= amount;
        SCMEx(playerid, COLOR_YELLOWG, "*Ai pus %s in vehicul.", GetDrugName(PlayerInfo[playerid][pDrug][slot]));
        if(PlayerInfo[playerid][pDrugAmount][slot] == 0)
        PlayerInfo[playerid][pDrug][slot] = 0;
    }
    else
    {
        SCM(playerid, COLOR_GREY, "Trebuie sa fii intr-un vehicul pentru a folosi aceasta comanda!");
    }
    return 1;
}

CMD:td(playerid, params[]) return cmd_takedrug(playerid, params);
CMD:takedrug(playerid, params[])
{
    new slot, amount;
    if(sscanf(params,"dd",slot,amount)) return SyntaxMSG(playerid, "/takedrug [slot] [amount]");
    if(PlayerInCar(playerid))
    {
        new vehicle = GetPlayerVehicleID(playerid);
        if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "Aceasta comanda poate fi folosita numai in vehicule private.");
        if(VehicleInfo[vehicle][carDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu este niciun drog pe acest slot.");
        if(GetFreeDrugSlot(playerid) == 0) return SCM(playerid, COLOR_GREY, "Nu ai niciun slot liber de droguri.");
        if(VehicleInfo[vehicle][carDrugAmount][slot] < amount) return SCM(playerid, COLOR_GREY, "Cantitate incorecta.");
        SetPlayerBubble(playerid, "ia ceva din vehicul.");
        VehicleInfo[vehicle][carDrugAmount][slot] -= amount;
        GivePlayerDrug(playerid, VehicleInfo[vehicle][carDrug][slot], amount);
        SCMEx(playerid, COLOR_YELLOWG, "* Ai luat %s din vehicul.", GetDrugName(VehicleInfo[vehicle][carDrug][slot]));
        if(VehicleInfo[vehicle][carDrugAmount][slot] == 0)
        VehicleInfo[vehicle][carDrug][slot] = 0;
    }
    else
    {
        SCM(playerid, COLOR_GREY, "Trebuie sa fi intr-un vehicul pentru a folosi aceasta comanda!");
    }
    return 1;
}

CMD:givedrug(playerid, params[])
{
    new id, slot, amount, emote[128];
    if(sscanf(params,"udds[128]",id,slot,amount,emote)) return SyntaxMSG(playerid, "/givedrug [playerid/PartOfName] [slot] [amount] [emote]");
    if(playerid == id) return SCM(playerid, COLOR_GREY, "Nu iti poti da droguri tie.");
    if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu ai droguri pe acest slot.");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    if(PlayerInfo[playerid][pDrugAmount][slot] < amount) return SCM(playerid, COLOR_GREY, "Cantitate incorecta.");
    if(GetFreeDrugSlot(id) == 0) return SCM(playerid, COLOR_GREY, "Acest player nu are sloturi libere de droguri.");
    ActionMessage(playerid, 15.0, emote);
    format(msg, sizeof(msg), "* i-ai dat %s lu %s.", GetDrugName(PlayerInfo[playerid][pDrug][slot]), GetNameWithMask(id));
    SCM(playerid, COLOR_YELLOWG, msg);
    format(msg, sizeof(msg), "* %s ti-a dat %s.", GetNameWithMask(playerid), GetDrugName(PlayerInfo[playerid][pDrug][slot]));
    SCM(id, COLOR_YELLOWG, msg);
    GiveDrugFromPlayer(playerid, slot, PlayerInfo[playerid][pDrug][slot], amount, id);
    return 1;
}

CMD:dropdrug(playerid, params[])
{
    new slot, emote[128];
    if(sscanf(params,"ds[128]",slot,emote)) return SyntaxMSG(playerid, "/dropdrug [slot] [emote]");
    if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu ai droguri pe acest slot.");
    ActionMessage(playerid, 15.0, emote);
    format(msg, sizeof(msg), "* ai aruncat pe jos %s din slotul %d.", GetDrugName(PlayerInfo[playerid][pDrug][slot]), slot);
    SCM(playerid, COLOR_YELLOWG, msg);
    RemovePlayerDrug(playerid, slot);
    return 1;
}

CMD:drughelp(playerid, params[])
{
    SCM(playerid, COLOR_GREEN2, "______________________DRUGHELP______________________");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /mydrugs - iti arata drogurile tale");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /usedrug - foloseste un drog din slotul selectat");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /givedrug - ii poti da cuiva droguri");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /vehdrugs - iti arata drogurile din masina in care esti");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /putdrug - pune drogurile in casa/masina");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /takedrug - ia drogurile din casa/masina");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /plantseed - planteaza un boschete (iti trebuie 5 seminte)");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /pickplant - ridica o planta crescuta");
    SCM(playerid, COLOR_GREY, "** DRUGHELP ** /bakecocaine - pentru a face cocaina");
    return 1;
}

CMD:asetdrug(playerid, params[])
{
    new id, slot, drug, amount;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
    if(sscanf(params,"uddd",id,slot,drug,amount))
    {
        SyntaxMSG(playerid, "/asetdrug [playerid/PartOfName] [slot] [drugID] [amount]");
        SCM(playerid, COLOR_WHITE, "Drugs: 1-Crack,2-Cocaine,3-Marijuana,4-Heroin");
        return 1;
    }
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(slot > 20 || slot < 1) return SCM(playerid, COLOR_WHITE, "Slot is, 1-20.");
    SCMEx(playerid, COLOR_WHITE, "You have set %s drug slot %d to %s, amount: %d.", GetNameEx(id), slot, GetDrugName(drug), amount);
    SCMEx(id, COLOR_WHITE, "Administratorul %s ti-a setat pe slotul %d drogul : %s, cantitate: %d.", GetNameEx(playerid), slot, GetDrugName(drug), amount);
    format(msg, sizeof(msg), "Administratorul %s i-a setat lui %s pe slotul %d cantitatea de %d grame de %s.", GetName(playerid), GetName(id), amount, GetDrugName(drug));
    AMSG(COLOR_LIGHTRED, msg);
    PlayerInfo[id][pDrug][slot] = drug;
    PlayerInfo[id][pDrugAmount][slot] = amount;
    return 1;
}
//===========================Drugs===========================//

//===========================Drug Dealer===========================//
CMD:bakecocaine(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != DRUGDEALER) return SCM(playerid, COLOR_GREY, "Nu esti dealer de droguri!");
    if(!PlayerToPoint(3.0, playerid, -47.6538,28.6958,6.4844)) return SCM(playerid, COLOR_GREY, "Nu esti la locul de procesare!");
//  if(sscanf(params, "s[16]", type)) return SyntaxMSG(playerid, "/bakecocaine");
    if(PlayerInfo[playerid][pPowder] < 2) return SCMEx(playerid, COLOR_GREEN2, "Iti mai trebuie %d grame de Cocaine Powder pentru reteta!", 2-PlayerInfo[playerid][pPowder]);
    if(PlayerInfo[playerid][pAlcohol] < 2) return SCMEx(playerid, COLOR_GREEN2, "Iti mai trebuie %d grame de Alcool pentru reteta!", 2-PlayerInfo[playerid][pAlcohol]);
    if(PlayerInfo[playerid][pSoda] < 5) return SCMEx(playerid, COLOR_GREEN2, "Iti mai trebuie %d grame de Soda pentru reteta!", 5-PlayerInfo[playerid][pSoda]);
    new slot = GetFreeDrugSlot(playerid);
    PlayerInfo[playerid][pDrug][slot] = 1;
    PlayerInfo[playerid][pDrugAmount][slot] = 7;
    PlayerInfo[playerid][pPowder] -= 2;
    PlayerInfo[playerid][pPowder] -= 2;
    PlayerInfo[playerid][pPowder] -= 5;
    SCM(playerid, COLOR_GRAY, "Ai primit 7 grame de crack cocaine");
    return 1;
}

CMD:drugmenu(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != DRUGDEALER) return SCM(playerid, COLOR_LIGHTRED, "Nu esti dealer de droguri.");
    if(!PlayerToPoint(3.0, playerid, -392.1880,-1439.1407,26.3389)) return SCM(playerid, COLOR_GREY, "Nu esti la ferma de droguri.");
    ShowDialog(playerid, Show:<DrugMenu>, DIALOG_STYLE_LIST, "Dealer de droguri", ""EMBED_WHITE"Cumpara seminte\nCumpara soda\nCumpara cocaina\nCumpara alcool", "Selecteaza", "Inchide");
    return 1;
}

CMD:give(playerid, params[])
{
    new option[16], secoption, thirdoption, id, amount;
    if(sscanf(params,"s[16]D(-1)D(-1)",option,secoption,thirdoption))
    {
        SyntaxMSG(playerid, "/give [option]");
        SCM(playerid, COLOR_LIGHTRED, "OPTIONS: seeds | soda | powder | alcohol");
        return 1;
    }
    if(CompareStrings(option, "seeds"))
    {
        if(sscanf(params,"{s[16]}ud",id,amount)) return SyntaxMSG(playerid, "/give seeds [playerid/PartOfName] [amount]");
        if(id == playerid) return SCM(playerid, COLOR_GREY, "Imposibil.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(amount < 1 || amount > PlayerInfo[playerid][pSeeds]) return SCM(playerid, COLOR_GREY, "Canitate Invalida.");
        PlayerInfo[playerid][pSeeds] -= amount;
        PlayerInfo[id][pSeeds] += amount;
        SCMEx(playerid, COLOR_YELLOWG, "I-ai dat lui %s seminte (Cantitate: %d).", GetNameWithMask(id), amount);
        SCMEx(id, COLOR_YELLOWG, "%s ti-a dat %d seminte.", GetNameWithMask(playerid), amount);
    }
    else if(CompareStrings(option, "soda"))
    {
        if(sscanf(params,"{s[16]}ud",id,amount)) return SyntaxMSG(playerid, "/give soda [playerid/PartOfName] [amount]");
        if(id == playerid) return SCM(playerid, COLOR_GREY, "Imposibil.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(amount < 1 || amount > PlayerInfo[playerid][pSoda]) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        PlayerInfo[playerid][pSoda] -= amount;
        PlayerInfo[id][pSoda] += amount;
        SCMEx(playerid, COLOR_YELLOWG, "I-ai dat lui %s soda (Cantitate: %d).", GetNameWithMask(id), amount);
        SCMEx(id, COLOR_YELLOWG, "%s ti-a dat %d soda.", GetNameWithMask(playerid), amount);
    }
    else if(CompareStrings(option, "powder"))
    {
        if(sscanf(params,"{s[16]}ud",id,amount)) return SyntaxMSG(playerid, "/give powder [playerid/PartOfName] [amount]");
        if(id == playerid) return SCM(playerid, COLOR_GREY, "Imposibil.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(amount < 1 || amount > PlayerInfo[playerid][pPowder]) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        PlayerInfo[playerid][pPowder] -= amount;
        PlayerInfo[id][pPowder] += amount;
        SCMEx(playerid, COLOR_YELLOWG, "I-ai dat lui %s powder (Cantitate: %d).", GetNameWithMask(id), amount);
        SCMEx(id, COLOR_YELLOWG, "%s ti-a dat %d powder.", GetNameWithMask(playerid), amount);
    }
    else if(CompareStrings(option, "alcohol"))
    {
        if(sscanf(params,"{s[16]}ud",id,amount)) return SyntaxMSG(playerid, "/give alcohol [playerid/PartOfName] [amount]");
        if(id == playerid) return SCM(playerid, COLOR_GREY, "Imposibil.");
        if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
        if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
        if(amount < 1 || amount > PlayerInfo[playerid][pAlcohol]) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        PlayerInfo[playerid][pAlcohol] -= amount;
        PlayerInfo[id][pAlcohol] += amount;
        SCMEx(playerid, COLOR_YELLOWG, "I-ai dat lui %s alcool (Cantitate: %d).", GetNameWithMask(id), amount);
        SCMEx(id, COLOR_YELLOWG, "%s ti-a dat %d alcool.", GetNameWithMask(playerid), amount);
    }
    else
    {
        SyntaxMSG(playerid, "/give [option]");
        SCM(playerid, COLOR_LIGHTRED, "OPTIONS: seeds | soda | powder | alcohol");
    }
    return 1;
}

Dialog:DrugMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: ShowDialog(playerid, Show:<SeedMenu>, DIALOG_STYLE_INPUT, "Dealer de Droguri", "Introdu numarul de seminte pe care vrei sa il cumperi"EMBED_LIGHTBLUE"$5 pe bucata.", "Cumpara", "<<<");
            case 1: ShowDialog(playerid, Show:<SodaMenu>, DIALOG_STYLE_INPUT, "Dealer de Droguri", "Introdu cantitatea de bicarbonat de sodiu pe care vrei sa o cumperi:\n"EMBED_LIGHTBLUE"$7", "Cumpara", "<<<");
            case 2: ShowDialog(playerid, Show:<PowderMenu>, DIALOG_STYLE_INPUT, "Dealer de Droguri", "Introdu cantitatea de pudra de cocaina pe care vrei sa o cumperi:\n"EMBED_LIGHTBLUE"$15", "Cumpara", "<<<");
            case 3: ShowDialog(playerid, Show:<AlcoholMenu>, DIALOG_STYLE_INPUT, "Dealer de Droguri", "Introdu cantiatea de spirt pe care vrei sa o cumperi:\n"EMBED_LIGHTBLUE"$20", "Cumpara", "<<<");
        }
    }
    return 1;
}

Dialog:SeedMenu(playerid, response, listitem, inputtext[])
{
    new amount, price;
    if(response)
    {
        if(sscanf(inputtext,"d",amount)) return ShowDialog(playerid, Show:<SeedMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_YELLOW"Introdu cantitatea de seminte pe care doresti sa o cumperi:", "Cumpara", "<<<");
        if(amount < 1) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        price = amount * 5;
        if(GetCash(playerid) < price) return SCMEx(playerid, COLOR_GREY, "[ERROR]: Pretul pentru %d seminte este de %d.", amount, price);
        SCMEx(playerid, COLOR_FADE2, "{C0C0C0}Ai cumparat cu succes {FFFFFF}%d {C0C0C0}seminte, ar fi bine sa le plantezi.", amount);
        GiveCash(playerid, -price);
        PlayerInfo[playerid][pSeeds] += amount;
    }
    else ShowDialog(playerid, Show:<DrugMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_WHITE"Cumpara seminte "EMBED_GREEN"$5 = 1\n"EMBED_WHITE"Cumpara bicarbonat de sodiu "EMBED_GREEN"$7 = 1\n"EMBED_WHITE"Cumpara pudra de cocaina "EMBED_GREEN"$15 = 1\n"EMBED_WHITE"Cumpara spirt "EMBED_GREEN"$20 = 1", "Select", "Iesi");
    return 1;
}

Dialog:SodaMenu(playerid, response, listitem, inputtext[])
{
    new amount, price;
    if(response)
    {
        if(sscanf(inputtext,"d",amount)) return ShowDialog(playerid, Show:<SeedMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_YELLOW"Introdu cantitatea de bicarbonat de sodiu pe care doresti sa o cumperi:", "Cumpara", "<<<");
        if(amount < 1) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        price = amount * 7;
        if(GetCash(playerid) < price) return SCMEx(playerid, COLOR_GREY, "[ERROR]: Pretul pentru cantitatea de %d grame de bicarbonat de sodiu este de %d.", amount, price);
        SCMEx(playerid, COLOR_FADE2, "{C0C0C0}Ai cumparat cu succes {FFFFFF}%d {C0C0C0} grame de bicarbonat de sodiu, '/mydrugs' pentru mai multe informatii.", amount);
        GiveCash(playerid, -price);
        PlayerInfo[playerid][pSoda] += amount;
    }
    else ShowDialog(playerid, Show:<DrugMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_WHITE"Cumpara seminte "EMBED_GREEN"$200 = 1\n"EMBED_WHITE"Cumpara bicarbonat de sodiu "EMBED_GREEN"$7 = 1\n"EMBED_WHITE"Cumpara pudra de cocaina "EMBED_GREEN"$15 = 1\n"EMBED_WHITE"Cumpara spirt "EMBED_GREEN"$20 = 1", "Select", "Iesi");
    return 1;
}

Dialog:PowderMenu(playerid, response, listitem, inputtext[])
{
    new amount, price;
    if(response)
    {
        if(sscanf(inputtext,"d",amount)) return ShowDialog(playerid, Show:<SeedMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_YELLOW"Introdu cantitatea de pudra de cocaina pe care doresti sa o cumperi", "Cumpara", "<<<");
        if(amount < 1) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        price = amount * 15;
        if(GetCash(playerid) < price) return SCMEx(playerid, COLOR_GREY, "[ERROR]: Pretul pentru cantitatea de %d grame de pudra de cocaina este de %d.", amount, price);
        SCMEx(playerid, COLOR_FADE2, "{C0C0C0}Ai cumparat cu succes {FFFFFF}%d {C0C0C0} grame de pudra de cocaina, '/mydrugs' pentru mai multe informatii.", amount);
        GiveCash(playerid, -price);
        PlayerInfo[playerid][pPowder] += amount;
    }
    else ShowDialog(playerid, Show:<DrugMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_WHITE"Cumpara seminte "EMBED_GREEN"$200 = 1\n"EMBED_WHITE"Cumpara bicarbonat de sodiu "EMBED_GREEN"$7 = 1\n"EMBED_WHITE"Cumpara pudra de cocaina "EMBED_GREEN"$15 = 1\n"EMBED_WHITE"Cumpara spirt "EMBED_GREEN"$20 = 1", "Select", "Iesi");
    return 1;
}

Dialog:AlcoholMenu(playerid, response, listitem, inputtext[])
{
    new amount, price;
    if(response)
    {
        if(sscanf(inputtext,"d",amount)) return ShowDialog(playerid, Show:<SeedMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_YELLOW"Introdu cantitatea de spirt pe care doresti sa o cumperi:", "Cumpara", "<<<");
        if(amount < 1) return SCM(playerid, COLOR_GREY, "Cantitate invalida.");
        price = amount * 20;
        if(GetCash(playerid) < price) return SCMEx(playerid, COLOR_GREY, "[ERROR]: Pretul pentru cantitatea de %d ml de spirt este de%d.", amount, price);
        SCMEx(playerid, COLOR_FADE2, "{C0C0C0}Ai cumparat cu succes {FFFFFF}%d {C0C0C0} ml de spirt, '/mydrugs' pentru mai multe informatii.", amount);
        GiveCash(playerid, -price);
        PlayerInfo[playerid][pAlcohol] += amount;
    }
    else ShowDialog(playerid, Show:<DrugMenu>, DIALOG_STYLE_LIST, "Drug Dealing Menu", ""EMBED_WHITE"Cumpara seminte "EMBED_GREEN"$200 = 1\n"EMBED_WHITE"Cumpara bicarbonat de sodiu "EMBED_GREEN"$7 = 1\n"EMBED_WHITE"Cumpara pudra de cocaina "EMBED_GREEN"$15 = 1\n"EMBED_WHITE"Cumpara spirt "EMBED_GREEN"$20 = 1", "Select", "Iesi");
    return 1;
}

CMD:plantseed(playerid, params[])
{
    if(PlayerInfo[playerid][pSeeds] < 5) return SCM(playerid, COLOR_GREEN2, "Iti trebuie minim 5 seminte pentru o planta.");
    if(PlayerInCropArea(playerid)) return SCM(playerid, COLOR_GREY, "Stai prea aproape de o alta planta.");
    if(PlantingTime{playerid} > 0) return SCM(playerid, COLOR_LIGHTRED, "Deja plantezi.");
    FreezePlayer(playerid);
    OnPlayAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
    SCM(playerid, COLOR_YELLOW2, "Ai inceput sa plantezi seminte. Dureaza 30 de secunde!");
//  SetTimerEx("PlatSeed", 30000, false, "i", playerid);
    new plant = GetNextPlantID();
    new Float:x = PlayerPosX(playerid), Float:y = PlayerPosY(playerid), Float:z = PlayerPosZ(playerid)-2.5;
    format(CropsInfo[plant][pPlanter], MAX_PLAYER_NAME, "%s", GetName(playerid));
    CropsInfo[plant][pGrowTime] = 0;
    CropsInfo[plant][pMade] = 0;
    CropsInfo[plant][pX] = x;
    CropsInfo[plant][pY] = y;
    CropsInfo[plant][pZ] = z;
    CropsInfo[plant][pPlanted] = 1;
    CropsInfo[plant][pObject] = CreateDynamicObject(3409, x, y, z, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
    format(msg, sizeof(msg), ""EMBED_YELLOW"MINUTE: %d\nGENERAT: %d", 0, 0);
    CropsInfo[plant][pLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z+2.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    SCM(playerid, COLOR_YELLOWG, "Ai plantat o samanta de Marijuana. Ai grija ca oricine poate lua planta.");
    PlayerInfo[playerid][pSeeds] -= 5;
    AddSeedToFile(plant, GetName(playerid), x, y, z);
    UnFreezePlayer(playerid);
    StopPlayerAnims(playerid);
    return 1;
}

forward PlantSeeds(playerid);
public PlantSeeds(playerid)
{
    new plant = GetClosestPlantID(playerid);
    GivePlayerDrug(playerid, DRUG_MARIJUANA, CropsInfo[plant][pMade]);
    SCMEx(playerid, COLOR_YELLOWG, "Ai cules cu success planta, ai obtinut: %d grame.", CropsInfo[plant][pMade]);
    UnFreezePlayer(playerid);
    StopPlayerAnims(playerid);
    DestroyCrop(plant);
    RemoveVar(playerid, "PickingPlant");
    return 1;
}

CMD:pickplant(playerid, params[])
{
    new plant = GetClosestPlantID(playerid);
    if(plant == -1) return SCM(playerid, COLOR_GREY, "Nu te aflii langa nici o planta.");
    if(CropsInfo[plant][pMade] == 0) return SCM(playerid, COLOR_GREY, "Aceasta planta nu a produs nimic.");
    if(GetPVarInt(playerid, "PickingPlant") == 1) return SCM(playerid, COLOR_LIGHTRED, "Deja culegi o planta!");
    SetPVarInt(playerid, "PickingPlant", 1);
    OnPlayAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
    SCM(playerid, COLOR_YELLOW2, "Ai inceput sa culegi planta.");
    SetTimerEx("PlantSeeds", 30000, false, "i", playerid);
    return 1;
}

CMD:usedrug(playerid, params[])
{
    new slot = GetFreeDrugSlot(playerid);
    if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/usedrug [slot]");
    if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu ai droguri pe acest slot.");
    //PlayerInfo[playerid][pDrug][slot] = drug;
    PlayerInfo[playerid][pDrugAmount][slot] -= 1;
    if(PlayerInfo[playerid][pDrugAmount][slot] == 0)
    PlayerInfo[playerid][pDrug][slot] = 0;
    if(!strcmp(GetDrugName(PlayerInfo[playerid][pDrug][slot]), "Marijuana"))
    {
        SetPlayerDrunkLevel(playerid, 40000);
        format(msg, sizeof(msg), "a luat niste %s", GetDrugName(PlayerInfo[playerid][pDrug][slot]));
        SetPlayerBubble(playerid, msg);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
        SetTimerEx("ResetDrugEffect",300000,0,"d",playerid);
    }
    else if(!strcmp(GetDrugName(PlayerInfo[playerid][pDrug][slot]), "Crack"))
    {
        SetPlayerDrunkLevel(playerid, 50000);
        format(msg, sizeof(msg), "a luat niste %s", GetDrugName(PlayerInfo[playerid][pDrug][slot]));
        SetPlayerBubble(playerid, msg);
        SetPlayerWeather(playerid, -67);
        SetTimerEx("ResetDrugEffect",300000,0,"d",playerid);
    }
    else if(!strcmp(GetDrugName(PlayerInfo[playerid][pDrug][slot]), "Cocaine"))
    {
        SetPlayerDrunkLevel(playerid, 50000);
        format(msg, sizeof(msg), "a luat niste %s", GetDrugName(PlayerInfo[playerid][pDrug][slot]));
        SetPlayerBubble(playerid, msg);
        SetPlayerWeather(playerid, -66);
        SetTimerEx("ResetDrugEffect",300000,0,"d",playerid);
    }
    return 1;
}
//===========================Drug Dealer===========================//

CMD:servertime(playerid, params[])
{
    SCMEx(playerid, COLOR_YELLOWG, "Data si ora: %s, %s.", GetFullDate(), GetNameEx(playerid));
    return 1;
}
/* =================== PlayerCommands =================== */
/* =================== HelperCommands =================== */
CMD:tduty(playerid, params[]) { return cmd_mduty(playerid, params); }
CMD:mduty(playerid, params[])
{
    if(!isTester(playerid)) return NotAuthMSG(playerid);
    if(GetIntVar(playerid, "TesterDuty") == 1)
    {
        RemoveVar(playerid, "TesterDuty");
        format(msg, sizeof(msg), "[MODERATOR] {DABB3E}%s nu mai este duty ca moderator!", GetName(playerid));
        StaffMSG(COLOR_RED, msg);
        if(CopDuty{playerid}) SetPlayerColor(playerid, LSPD_DUTY);
        else if(MedicDuty{playerid})    SetPlayerColor(playerid, LSFD_DUTY);
        else SetNormalColor(playerid);
    }
    else
    {
        SetIntVar(playerid, "TesterDuty", 1);
        format(msg, sizeof(msg), "[MODERATOR] {DABB3E}%s este acum duty ca si moderator!", GetName(playerid));
        StaffMSG(COLOR_RED, msg);
        SetPlayerColor(playerid, 0xa52a2aff);
    }
    return 1;
}

CMD:ahelpme(playerid, params[]) { return cmd_checkhelp(playerid, params); }

CMD:ahelp(playerid, params[]) { return cmd_checkhelp(playerid, params); }

CMD:accepthelp(playerid, params[]) { return cmd_checkhelp(playerid, params); }

CMD:checkhelp(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/(a)ccept(help) [playerid/PartOfName]");
    if(GetIntVar(pid, "JustHelped") == 0) return SCM(playerid, COLOR_INFO, "Acest jucator nu are nevoie de ajutor.");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "Salut, eu sunt %s si iti voi raspunde in cateva momente la intrebare.", GetNameEx(playerid));
    SCM(pid, COLOR_YELLOWG, msg);
    format(msg, sizeof(msg), "[HELPME] {DABB3E}%s i-a acceptat cererea de ajutor lui %s.", GetName(playerid), GetName(pid));
    StaffMSG(COLOR_RED, msg);
    SetPVarInt(pid, "JustHelped", 0);
    return 1;
}

CMD:togtchat(playerid, params[])
{
    if(CheckAdmin(playerid, 1)) return NotAuthMSG(playerid);
    new string[128];
    if(TesterChat{playerid})
    {
        format(string, sizeof(string), "** %s a inchis chatul OOC al moderatorilor!", GetName(playerid));
        SendStaffMessage(COLOR_GREEN2, string);
        TesterChat{playerid} = false;
    }
    else if(!TesterChat{playerid})
    {
        format(string, sizeof(string), "** %s a deschis chatul OOC al moderatorilor!", GetName(playerid));
        SendStaffMessage(COLOR_GREEN2, string);
        TesterChat{playerid} = true;
    }
    return 1;
}

/* =================== HelperCommands =================== */

forward ResetTimers();
public ResetTimers()
{
    KillTimer(onemintimer);
    KillTimer(globalsaving);
    KillTimer(checkstatus);
	KillTimer(cheatTimer);
    KillTimer(truckertimer);
    KillTimer(checkgastimer);
    KillTimer(antiafk);
    KillTimer(trashbintimer);
    KillTimer(checkbintimer);
    KillTimer(speedtimer);

    speedtimer = SetTimer("SpeedTimer", 300, 1);
    checkstatus = SetTimer("CheckStatus", 1000, 1);
	cheatTimer = SetTimer("CheatTimer", 5000, 1);
    onemintimer = SetTimer("OneMinuteTimer", 60000, 1);
    antiafk = SetTimer("AntiAFK", 60000, 1);
    globalsaving = SetTimer("GlobalSaving", 1800000, 1);
    truckertimer = SetTimer("TruckerTimer", 1000, 1);
    checkgastimer = SetTimer("CheckGas", VEHICLES_GAS_TIMER, 1);
    checkbintimer = SetTimer("CheckBins", 30000, 1);
    trashbintimer = SetTimer("BinTimer", 240000, 1);
    print("Timerele au fost resetatie (30 minute)");
}

/* =================== AdminCommands =================== */
CMD:addbot_idc(playerid, params[])
{
    SetPlayerScore(strval(params), 1);
    SetPlayerColor(strval(params), COLOR_WHITE);
    return 1;
}

COMMAND:resettimers(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    KillTimer(onemintimer);
    KillTimer(globalsaving);
    KillTimer(checkstatus);
	KillTimer(cheatTimer);
    KillTimer(truckertimer);
    KillTimer(checkgastimer);
    KillTimer(antiafk);
    KillTimer(trashbintimer);
    KillTimer(checkbintimer);
    KillTimer(speedtimer);

    speedtimer = SetTimer("SpeedTimer", 300, 1);
    checkstatus = SetTimer("CheckStatus", 1000, 1);
	cheatTimer = SetTimer("CheatTimer", 5000, 1);
    onemintimer = SetTimer("OneMinuteTimer", 60000, 1);
    antiafk = SetTimer("AntiAFK", 60000, 1);
    globalsaving = SetTimer("GlobalSaving", 1800000, 1);
    truckertimer = SetTimer("TruckerTimer", 1000, 1);
    checkgastimer = SetTimer("CheckGas", VEHICLES_GAS_TIMER, 1);
    checkbintimer = SetTimer("CheckBins", 30000, 1);
    trashbintimer = SetTimer("BinTimer", 240000, 1);
    format(msg, sizeof(msg), "AdmWarn: %s a resetat timerele `OneMinuteTimer`, `GlobalSaving`, `CheckStatus`, `TruckerTimer` si 'AntiAFK'!", GetName(playerid));
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}

COMMAND:respawn(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new type[32];
    if(sscanf(params,"s[32]",type)) return SyntaxMSG(playerid, "/respawn [trucker/rent/taxi/ocsd/ocfa/gov/farmer/trash]");
    if(CompareStrings(type, "trucker"))
    {
        format(msg, sizeof(msg), "AdmCmd: %s a respawnat toate vehiculele de Trucker neocupate.", GetName(playerid));
        SCMALL(COLOR_LIGHTRED, msg);
        for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
        {
            if(!IsAnyPlayerInVehicle(veh) && IsATruckJob(veh))
            {
                SetVehicleToRespawn(veh);
                Gas{veh} = 100;
                foreach(new i : Player)
                {
                    if(GetPVarInt(i, "RentVehKey") == veh)
                    {
                        FixVehicle(GetIntVar(i, "RentVehKey"));
                        RemoveVar(i, "RentedCar");
                        RemoveVar(i, "RentVehKey");
                    }
                }
            }
        }
    }
    else if(CompareStrings(type, "rent"))
    {
        format(msg, sizeof(msg), "AdmCmd: %s a respawnat toate vehiculele de inchiriat neocupate.", GetName(playerid));
        SCMALL(COLOR_LIGHTRED, msg);
        for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
        {
            if(!IsAnyPlayerInVehicle(veh) && IsARentCar(veh))
            {
                SetVehicleToRespawn(veh);
                Gas{veh} = 100;
				foreach(new i : Player)
                {
                    if(GetPVarInt(i, "RentVehKey") == veh)
                    {
						SCM(i, COLOR_LIGHTRED, "[SYSTEM]: Daca nu mai folosesti masina de rent dai /unrentcar !");
                    }
                }
            }
        }
    }
	else if(CompareStrings(type, "trash"))
	{
	    format(msg, sizeof(msg), "AdmCmd: %s a respawnat toate vehiculele de trash.", GetName(playerid));
		SCMALL(COLOR_LIGHTRED, msg);
		for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
	    {
	        if(!IsAnyPlayerInVehicle(veh) && CityVehicles[veh][vType] == GARBAGE_CAR)
	        {
	            SetVehicleToRespawn(veh);
	            Gas{veh} = 100;
			}
		}
	}
	else if(CompareStrings(type, "farmer"))
	{
	    format(msg, sizeof(msg), "AdmCmd: %s a respawnat toate vehiculele de fermier.", GetName(playerid));
		SCMALL(COLOR_LIGHTRED, msg);
		for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
	    {
	        if(!IsAnyPlayerInVehicle(veh) && CityVehicles[veh][vType] == FARMER_CAR)
	        {
	            SetVehiclePos(veh, CityVehicles[veh][vPosX], CityVehicles[veh][vPosY], CityVehicles[veh][vPosZ]);
                SetVehicleZAngle(veh, CityVehicles[veh][vPosA]);
	            Gas{veh} = 100;
			}
		}
		for(new i=0;i<10;i++)
		{
			if(IsValidObject(FarmInfo[playerid][pPaddyHarvestInVehicleObject][i]))
			{
				DestroyObject(FarmInfo[playerid][pPaddyHarvestInVehicleObject][i]);
				FarmInfo[playerid][pPaddyHarvestInVehicle] = 0;
			}
		}
	}
    else if(CompareStrings(type, "taxi"))
    {
        format(msg, sizeof(msg), "AdmCmd: %s a respawnat toate vehiculele de Taxi neocupate.", GetName(playerid));
        SCMALL(COLOR_LIGHTRED, msg);
        for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
        {
            if(!IsAnyPlayerInVehicle(veh) && CityVehicles[veh][vType] == TAXI_CAR)
            {
                SetVehicleToRespawn(veh);
                Gas{veh} = 100;
            }
        }
    }
    else if(CompareStrings(type, "ocsd"))
    {
        format(msg, sizeof(msg), "(( ** HQ Announcement: %s a respawnat toate vehiculele factiunii neocupate. ))", GetName(playerid));
        SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
        SCM(playerid, COLOR_LIGHTRED, "Ai respawnat vehiculele factiunii OCSD.");
        for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
        {
            if(!IsAnyPlayerInVehicle(veh) && IsACopCar(veh))
            {
                SetVehicleToRespawn(veh);
                Gas{veh} = 100;
                Delete3DTextLabel(veicolo_callsign_testo[veh]);
                veicolo_callsign_status[veh] = 0;
            }
        }
    }
    else if(CompareStrings(type, "ocfa"))
    {
        format(msg, sizeof(msg), "(( ** HQ Announcement: %s a respawnat toate vehiculele factiunii neocupate. ))", GetName(playerid));
        SendFactionMessage(LSFD, COLOR_LIGHTRED, msg);
        SCM(playerid, COLOR_LIGHTRED, "Ai respawnat vehiculele factiunii OCFA.");
        for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
        {
            if(!IsAnyPlayerInVehicle(veh) && IsAFDCar(veh))
            {
                SetVehicleToRespawn(veh);
                Gas{veh} = 100;
                Delete3DTextLabel(veicolo_callsign_testo[veh]);
                veicolo_callsign_status[veh] = 0;
            }
        }
    }
    else if(CompareStrings(type, "gov"))
    {
        format(msg, sizeof(msg), "(( ** HQ Announcement: %s a respawnat toate vehiculele factiunii neocupate. ))", GetName(playerid));
        SendFactionMessage(GOV, COLOR_LIGHTRED, msg);
        SCM(playerid, COLOR_LIGHTRED, "Ai respawnat vehiculele factiunii GOV.");
        for(new veh = 1; veh <= GetVehiclePoolSize(); veh++)
        {
            if(!IsAnyPlayerInVehicle(veh) && IsAGOVCar(veh))
            {
                SetVehicleToRespawn(veh);
                Gas{veh} = 100;
                Delete3DTextLabel(veicolo_callsign_testo[veh]);
                veicolo_callsign_status[veh] = 0;
            }
        }
    }
    else return SCM(playerid, COLOR_GREY, "Optiune invalida!");
    return 1;
}

CMD:clearfarms(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	foreach(new i : Player)
	{
		for(new j=0;j<MAX_PADDYS;j++)
		{
			if(FarmInfo[i][pPaddyUsed][j] == 1 && FarmInfo[i][pPaddyWithered][j] == 1)
			{
				DestroyPaddy(i,j);
			}
			if(FarmInfo[i][pPaddyHarvestUsed][j] == 1 && FarmInfo[i][pPaddyWithered][j] == 1)
			{
				DestroyPaddyHarvest(i,j);
			}
		}
	}
	SCM(playerid, -1, "[SERVER]: Toti sacii de la ferme au fost stersi!");
	return 1;
}

CMD:aspeedlimit(playerid, params[])
{
    if(debugmode[playerid] == 0) { SCM(playerid, COLOR_GREY, "DebugMode este dezactivat.");}
    new speed;
    if(sscanf(params, "i", speed)) return SyntaxMSG(playerid, "/speedlimit [viteza(maxim 120km/h)]");
    if(speed > 120) return SCM(playerid, COLOR_GREY, "Viteza trebuie sa fie maxim 120km/h");
    speedlimit[playerid] = speed;
    SCMEx(playerid, COLOR_GREEN, "[AUTOPILOT] Viteza maxima a fost setata la %dkm/h.", speed);
    return 1;
}

CMD:speedlimit(playerid, params[])
{
//  SCMEx(playerid, COLOR_GREEN, "[AUTOPILOT] Viteza maxima a fost setata la %dkm/h.", speed);
    ShowDialog(playerid, Show:<SpeedLimit>, DIALOG_STYLE_LIST, "{FFFFFF}Selecteaza limita de viteza", "{FF0000}Dezactiveaza\n{FFFFFF}20km/h\n35-40km/h\n50-60km/h\n80km/h\n90-95km/h\n100-110km/h", "Teleport", "Anuleaza");
    return 1;
}

Dialog:SpeedLimit(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: {
                speedlimit[playerid] = 0;
                SCM(playerid, COLOR_GREEN, "Ai dezactiat limita de viteza.");}
            case 1: {
                speedlimit[playerid] = 0.1;
                SCM(playerid, COLOR_GREEN, "Ai setat limita de viteza la 20km/h.");}
            case 2: {
                speedlimit[playerid] = 0.2;
                SCM(playerid, COLOR_GREEN, "Ai setat limita de viteza la 35-40km/h.");}
            case 3: {
                speedlimit[playerid] = 0.3;
                SCM(playerid, COLOR_GREEN, "Ai setat limita de viteza la 50-60km/h.");}
            case 4: {
                speedlimit[playerid] = 0.4;
                SCM(playerid, COLOR_GREEN, "Ai setat limita de viteza la 80km/h.");}
            case 5: {
                speedlimit[playerid] = 0.5;
                SCM(playerid, COLOR_GREEN, "Ai setat limita de viteza la 90-95km/h.");}
            case 6: {
                speedlimit[playerid] = 0.6;
                SCM(playerid, COLOR_GREEN, "Ai setat limita de viteza la 100-110km/h.");}
        }
    }
    return 1;
}

COMMAND:gotopos(playerid, params[])
{
    if(CheckAdmin(playerid, ADMIN_LEVEL_1))
    {
        new Float:PosX, Float:PosY, Float:PosZ;
        if(sscanf(params, "fff", PosX, PosY, PosZ)) return SendClientMessage(playerid, COLOR_GRAD1, "FOLOSESTE: /gotopos x, y, z");
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), PosX, PosY, PosZ);
            }
            else
            {
                SetPlayerPos(playerid, PosX, PosY, PosZ);
            }
            SendClientMessage(playerid, COLOR_GREEN2, "Succes!");
            SetPlayerInterior(playerid,0);
        }
    }
    return 1;
}

CMD:doorcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ADOORCMDS ** /makedoor /doorenter /doorexit /whatdoor /editdoor /removedoor /serverdoors /gotodoor /showdoors");
    return 1;
}
CMD:labelcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ALABELCMDS ** /addlabel /whatlabel /renamelabel /removelabel /serverlabels /gotolabel");
    return 1;
}
CMD:telecmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ATELECMDS ** /teles /maketele /removetele /serverteles");
    return 1;
}
CMD:vehiclecmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AVEHCMDS ** /makevehicle /removevehicle /whatvehicle /showvehicles");
    SCM(playerid, COLOR_OOC, "** AVEHCMDS ** /avehiclepark /editvehicle /areparkvehicle /servervehicles /vehtypes");
    return 1;
}
CMD:atmcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AATMCMDS ** /makeatm /removeatm /editatm /showatms /serveratms");
    return 1;
}
CMD:objectcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AOBJECTCMDS ** /removeobject /serverobjects /editobject /makeobject /whatobject /showobjects /gotoobject");
    return 1;
}
CMD:movedoorcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AMOVEDOORCMDS ** /makemovedoor /removemovedoor /editmovedoor /whatmovedoor /showmovedoors");
    return 1;
}
CMD:cctvcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ACCTVCMDS ** /makecctv /removecctv /editcctv /cctvfaction /cctvinfo /showcctvs /whatcctv");
    return 1;
}
CMD:gatecmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AGATECMDS ** /makegate /removegate /editgate /gatesound /gatesoundlength /whatgate /showgates");
    return 1;
}
CMD:gstationcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AGSTATIONCMDS ** /makegstation /removegstation /editgstation /showstations /servergstations");
    return 1;
}
CMD:housecmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AHOUSECMDS ** /makehouse /removehouse /edithouse /houseenter /houseexit /asellhouse /gotohouse /serverhouses");
    return 1;
}
CMD:foodstallcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AFOODCMDS ** /makefoodstall /removefoodstall /editfoodstall /serverfoodstalls /showstalls");
    return 1;
}
CMD:bankcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ABANKCMDS ** /makebank /removebank /serverbanks /whatbank /showbanks /renamebank");
    return 1;
}
CMD:infocmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AINFOCMDS ** /makeinfo /removeinfo /whatinfo /serverinfos /editinfo /showinfos");
    return 1;
}
CMD:dealercmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ADELAERCMDS ** /makeds /removeds /showdealers");
    return 1;
}
CMD:businesscmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** ABIZCMDS ** /makebusiness /removebusiness /editbusiness /businessenter /gotobusiness /serverbusinesses /asellbusiness");
    SCM(playerid, COLOR_OOC, "** ABIZCMDS ** /businessint /businessexit /biztypes /whatbusiness /showbusinesses");
    return 1;
}
CMD:factioncmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AFACTIONCMDS ** /makefaction /factionspawn /factioncolor /factionname /factionrankamount /factiontype /factionshortname");
    SCM(playerid, COLOR_OOC, "** AFACTIONCMDS ** /factionjoinrank /factionrankname /factionleaderrank /factionuniform /makeleader /serverfactions /reloadfactions");
    return 1;
}
CMD:factiondoorcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AFACTIONCMDS ** /makefactiondoor /factiondoorexit /factiondoorenter /whatfactiondoor /editfactiondoor /removefactiondoor");
    SCM(playerid, COLOR_OOC, "** AFACTIONCMDS ** /serverfactiondoors /gotofactiondoor /showfactiondoors /factiondoorenterangle /factiondoorexitangle");
    return 1;
}
CMD:parkmetercmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** APARKMETERCMDS ** /makeparkmeter /editparkmeter /removeparkmeter /dupparkmeter /showmeters");
    return 1;
}
CMD:jobcmds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREEN2, "_________________________________________________________");
    SCM(playerid, COLOR_GREY, "** AJOBCMDS ** /makejob /removejob /jobname /jobrankname /jobrankamount /jobhighrank /movejob");
    return 1;
}
CMD:mcmds(playerid, params[])
{
    SCM(playerid, COLOR_GREEN2, "_______________MCMDS_____________");
    SCM(playerid, COLOR_GREY, "** TCMDS ** /ahelp /t /mduty /revive");
    SCM(playerid, COLOR_GREY, "** TCMDS ** /mute /unmute /freeze /unfreeze");
    return 1;
}

CMD:acmds(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(CheckAdmin(playerid, ADMIN_LEVEL_1))
    {
        SCM(playerid, COLOR_GREEN2, "________________________________________ACMDS_______________________________________________________");
        SCM(playerid, COLOR_OOC, "** ACMDS ** ABUZUL COMENZILOR DUCE LA PIERDEREA FUNCTIEI.");
        SCM(playerid, COLOR_GREY, "** ADMIN 1 ** /respawn /gotopos /gotoidle /gotobank /gotodmv /gotosf /gotols /gotodill /gotolsair /gotobb /gotomg /gotopc /gotofc ");
        SCM(playerid, COLOR_GREY, "** ADMIN 1 ** /aduty /clearchat /whatcar /getcar /gotocar /gethere /goto /freeze /unfreeze /slap /telemenu /ajail /aunjail /a /kick");
        SCM(playerid, COLOR_GREY, "** ADMIN 1 ** /setskin /ao /announce /setint /setvw /skinmenu /getip /ban /banip /mute /unmute /reportlist /areport /spec /speccar /specoff");
        SCM(playerid, COLOR_GREY, "** ADMIN 1 ** /mark /gotomark /revive /apark /checkhackers /disarm /sethp /getworld /aengine /showawarns");
    }
    if(CheckAdmin(playerid, ADMIN_LEVEL_2))
    {
        SCM(playerid, COLOR_GREY, "** ADMIN 2 ** /down /up /getincar /noooc /unban /unbanip /adminwarn /showpms /nopms /showpmoff /tod /weather /weatherall");
        SCM(playerid, COLOR_GREY, "** ADMIN 2 ** /backupall /backup /setarmour /setfuel");
    }
    if(CheckAdmin(playerid, ADMIN_LEVEL_3))
    {
        SCM(playerid, COLOR_GREY, "** ADMIN 3 ** /aremoveplant /plantinfo /showplants");
    }
    if(CheckAdmin(playerid, ADMIN_LEVEL_4))
    {
        SCM(playerid, COLOR_GREY, "** INGAME LEAD ** /togglea /togglet /x /y /z");
    }
    if(CheckAdmin(playerid, ADMIN_LEVEL_5))
    {
        SCM(playerid, COLOR_GREY, "** LEAD ADMIN ** /bikepermission /makeleader");
    }
    if(CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
    {
        SCM(playerid, COLOR_GREY, "** MANAGEMENT ** /givemoney /makeadmin /makemoderator /removemoderator /setstat /makedonator /changefight");
    }
    if(CheckAdmin(playerid, BIG_ADMIN_LEVEL))
    {
        SCM(playerid, COLOR_GREY, "** DEVELOPER ** /gmx /doorcmds /labelcmds /telecmds /vehiclecmds /atmcmds /objectcmds /movedoorcmds /cctvcmds /gatecmds /gstationcmds");
        SCM(playerid, COLOR_GREY, "** DEVELOPER ** /housecmds /foodstallcmds /bankcmds /infocmds /dealercmds /businesscmds /factioncmds /factiondoorcmds /parkmetercmds");
        SCM(playerid, COLOR_GREY, "** DEVELOPER ** /jobcmds /debugmode /getvarinfo /getpvarinfo /aveh /destroymycar /destroycar /carmenu /wepmenu /givegun /changename");
    }
    return 1;
}

CMD:showawarns(playerid, params[])
{
    if(GetPVarInt(playerid, "AWarnSpam") == 0)
    {
        SCM(playerid, COLOR_GREY, "Ai activat 'AdminWarns'. De acum vei vedea playerii care fac BunnyHop.");
        SetPVarInt(playerid, "AWarnSpam[]", 1);
    }
    else if(GetPVarInt(playerid, "AWarnSpam") == 1)
    {
        SCM(playerid, COLOR_GREY, "Ai dezactivat 'AdminWarns'. Nu vei mai primi informatii despre playeri.");
        SetPVarInt(playerid, "AWarnSpam[]", 0);
    }
    return 1;
}

CMD:debugmode(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(debugmode[playerid] == 1) debugmode[playerid] = 0;
    else debugmode[playerid] = 1;
    SCMEx(playerid, COLOR_WHITE, "Debug mode a fost setat la '%d'.", debugmode[playerid]);
    return 1;
}

CMD:dslist(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(debugmode[playerid] == 0) return SCM(playerid, COLOR_GREY, "Debug mode este oprit ('/debugmode')");
    new model;
    for(new i=1;i<sizeof(CarsPrices);i++)
    {
        model = CarsPrices[i][dCarModel];
        SCMEx(playerid, COLOR_GREY, "%s | %d | %d | %d", VehicleNames[model-400], CarsPrices[i][dStoc], CarsPrices[i][dCarPrice], model);
    }
    return 1;
}

CMD:getvarinfo(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(debugmode[playerid] == 0) return SCM(playerid, COLOR_GREY, "Debug mode este oprit ('/debugmode')");
    new var[64];
    if(sscanf(params, "s[64]", var)) return SyntaxMSG(playerid, "/getvarinfo [varname]");
    SCMEx(playerid, COLOR_WHITE, "GetPVar: %s - %d", var, GetPVarInt(playerid, var));
    return 1;
}

CMD:getpvarinfo(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(debugmode[playerid] == 0) return SCM(playerid, COLOR_GREY, "Debug mode este oprit ('/debugmode')");
    new var[64], i;
    if(sscanf(params, "us[64]", i, var)) return SyntaxMSG(playerid, "/getpvarinfo [playerid] [varname]");
    SCMEx(playerid, COLOR_WHITE, "GetPVar: %s - %d", var, GetPVarInt(i, var));
    return 1;
}

CMD:aduty(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(!isAdminDuty(playerid))
    {
        format(msg,sizeof(msg),"{FF9900}[ADMIN]{DABB3E} %s este acum disponibil ca administrator.", GetName(playerid));
        AMSG(COLOR_YELLOW, msg);
        SetIntVar(playerid, "AdminDuty", 1);
        SetPlayerHealth(playerid, 999);
        SetPlayerColor(playerid,0xFF660000);
        return 1;
    }
    else if(isAdminDuty(playerid))
    {
        format(msg,sizeof(msg),"{FF9900}[ADMIN]{DABB3E} %s este acum indisponibil ca administrator.", GetName(playerid));
        AMSG(COLOR_YELLOW, msg);
        RemoveVar(playerid, "AdminDuty");
        SetPlayerHealth(playerid, 100);
        if(CopDuty{playerid}) SetPlayerColor(playerid, 0x8c8cfeff);
        else if(MedicDuty{playerid}) SetPlayerColor(playerid, LSFD_DUTY);
        else SetNormalColor(playerid);
        return 1;
    }
    return 1;
}

CMD:gotoidle(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 2041.3197,-1725.3167,13.5469);
        }
        else
        {
            SetPlayerPos(playerid, 2041.3197,-1725.3167,13.5469);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotobank(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 589.1414,-1236.3564,17.8549);
        }
        else
        {
            SetPlayerPos(playerid, 589.1414,-1236.3564,17.8549);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotodmv(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1289.2375,-1550.2369,13.5469);
        }
        else
        {
            SetPlayerPos(playerid, 1289.2375,-1550.2369,13.5469);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotosf(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, -1425.8301,-292.1371,14.1484);
        }
        else
        {
            SetPlayerPos(playerid, -1425.8301,-292.1371,14.1484);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotolv(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1698.4470,1451.6608,10.7764);
        }
        else
        {
            SetPlayerPos(playerid, 1698.4470,1451.6608,10.7764);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotols(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1529.9833,-1672.8074,13.3828);
        }
        else
        {
            SetPlayerPos(playerid, 1529.9833,-1672.8074,13.3828);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotodill(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 666.7778,-622.6543,16.3359);
        }
        else
        {
            SetPlayerPos(playerid, 666.7778,-622.6543,16.3359);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotolsair(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1644.5897,-2326.0889,13.5469);
        }
        else
        {
            SetPlayerPos(playerid, 1644.5897,-2326.0889,13.5469);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotobb(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 274.0677,-172.2005,1.5705);
        }
        else
        {
            SetPlayerPos(playerid, 274.0677,-172.2005,1.5705);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotomg(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1332.8735,287.3829,19.5547);
        }
        else
        {
            SetPlayerPos(playerid, 1332.8735,287.3829,19.5547);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotopc(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 2275.8015,-64.3581,26.5091);
        }
        else
        {
            SetPlayerPos(playerid, 2275.8015,-64.3581,26.5091);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:gotofc(playerid)
{
    if(CheckAdmin(playerid, 1))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, -87.2244,1124.1403,19.7422);
        }
        else
        {
            SetPlayerPos(playerid, -87.2244,1124.1403,19.7422);
        }
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
    }
    return 1;
}

CMD:ss(playerid, params[])
{
    if(GetPVarInt(playerid, "SSTextDraw") == 0) {
        PlayerTextDrawShow(playerid, SSTextDraw[playerid]);
        SetPVarInt(playerid, "SSTextDraw", 1);
    }
    else {
        PlayerTextDrawHide(playerid, SSTextDraw[playerid]);
        SetPVarInt(playerid, "SSTextDraw", 0);
    }
    return 1;
}

CMD:flush(playerid, params[])
{
    for(new i=1;i<=50;i++)
        SendClientMessage(playerid, COLOR_WHITE, "");
    return 1;
}

CMD:cc(playerid, params[])
{
    return cmd_clearchat(playerid, params);
}

CMD:clearchat(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    for(new i = 0; i <= 200; i++)
    {
        SCMALL(COLOR_WHITE, " ");
    }
    new string[128];
    format(string, sizeof(string), "OOC: Chat-ul a fost sters de catre administratorul %s.", GetName(playerid));
    SCMALL(COLOR_LIGHTRED, string);
    return 1;
}

CMD:down(playerid, params[])
{
    new amount, Float:x, Float:y, Float:z;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/down [blocks]");
    GetPlayerPos(playerid, x, y ,z);
    SetPlayerPos(playerid, x, y, z-amount);
    return 1;
}

CMD:up(playerid, params[])
{
    new amount, Float:x, Float:y, Float:z;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/up [blocks]");
    GetPlayerPos(playerid, x, y ,z);
    SetPlayerPos(playerid, x, y, z+amount);
    return 1;
}

CMD:aveh(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new type,color,color2,Float:cPos[4];
    if(sscanf(params, "iii", type,color,color2)) return  SyntaxMSG(playerid, "/aveh [model] [color] [color]");
    if(spawnVehicle[playerid] != 0) return SCM(playerid, -1, "Ai spawnat un vehicul, '/destroymycar'");
    if(type < 400 || type > 611) return SCM(playerid,COLOR_RED, "ID-urile sunt intre 400 - 611!");
    if(color> 255 || color< 0) return SCM(playerid, 0xFFFFFF, "Culoarea masinilor intre: 0-255");
    if(color2> 255 || color2< 0) return SCM(playerid, 0xFFFFFF, "Culoarea masinilor intre: 0-255");
    GetPlayerPos(playerid, cPos[0], cPos[1], cPos[2]);
    GetPlayerFacingAngle(playerid, cPos[3]);
    new veh = CreateVehicle(type, cPos[0], cPos[1]-3, cPos[2], cPos[3], color, color2, -1);
    adminVeh{veh} = true;
    spawnVehicle[playerid] = veh;
    return 1;
}

CMD:destroymycar(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(msg, sizeof(msg), "Ai distrus masina cu ID-ul: %d.", spawnVehicle[playerid]);
    SCM(playerid, -1, msg);
    adminVeh{spawnVehicle[playerid]} = false;
    DestoryCar(spawnVehicle[playerid]);
    spawnVehicle[playerid] = 0;
    return 1;
}

CMD:whatcar(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    format(msg, sizeof(msg), "ID-ul vehiculului este %d.", GetPlayerVehicleID(playerid));
    SCM(playerid, COLOR_GRAD4, msg);
    return 1;
}

CMD:destroycar(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    format(msg, sizeof(msg), "Ai distrus vehiculul cu ID-ul: %d.", GetPlayerVehicleID(playerid));
    SCM(playerid, COLOR_GRAD4, msg);
    DestoryCar(GetPlayerVehicleID(playerid));
    return 1;
}

CMD:entercar(playerid, params[])
{
    return cmd_getincar(playerid, params);
}

CMD:getincar(playerid, params[])
{
    new vehicle;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/getincar [vehicleid]");
    if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "Nu exista un asemenea vehicul.");
    PutPlayerInVehicle(playerid, vehicle, 0);
    return 1;
}

CMD:getcar(playerid, params[])
{
    new vehicle, Float:x, Float:y, Float:z;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/getcar [vehicleid]");
    if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "Nu exista un asemenea vehicul.");
    GetPlayerPos(playerid, x, y, z);
    SetVehiclePos(vehicle, x, y+4, z);
    SetVehicleVirtualWorld(vehicle, GetWorld(playerid));
    LinkVehicleToInterior(vehicle, GetInterior(playerid));
    return 1;
}

CMD:gotocar(playerid, params[])
{
    new vehicle, Float:x, Float:y, Float:z;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/gotocar [vehicleid]");
    if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "Nu exista un asemenea vehicul.");
    GetVehiclePos(vehicle, x, y, z);
    PutPlayer(playerid, x+1, y+1, z);
    return 1;
}

CMD:gethere(playerid, params[])
{
    new pid, Float:x, Float:y, Float:z;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/gethere [playerid/PoN]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(PlayerInfo[playerid][pAdmin] < 9999 && PlayerInfo[pid][pAdmin] == 9999) return SCM(playerid, COLOR_GREY, "Nu poti face asta.");
    if(PlayerInfo[pid][pJailed] != 0) return SCM(playerid, COLOR_GREY, "Jucatorul este in Admin-Jail/Jail.");
    GetPlayerPos(playerid, x, y, z);
    PutPlayer(pid, x+1, y+1, z);
    SetInterior(pid,GetInterior(playerid));
    SetWorld(pid,GetWorld(playerid));
    if(HouseEntered[playerid] != -1) { HouseEntered[pid] = HouseEntered[playerid]; }
    if(BizEntered[playerid] != -1) { BizEntered[pid] = BizEntered[playerid]; }
    ServerMSG(pid, "Ai fost teleportat!");
    return 1;
}

CMD:securitymode(playerid, params[])
{
    if(!PlayerIsOn(playerid)) return NotConnectedMSG(playerid);
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(SecurityMode[playerid] == true)
    {
        SCM(playerid, COLOR_OOC, "Security Mode a fost oprit!");
        SecurityMode[playerid] = false;
    }
    else
    {
        SCM(playerid, COLOR_OOC, "Security Mode a fost activat!");
        SecurityMode[playerid] = true;
    }
    return 1;
}

CMD:goto(playerid, params[])
{
    new pid, Float:x, Float:y, Float:z;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/goto [playerid/PoN]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    GetPlayerPos(pid, x, y, z);
    PutPlayer(playerid, x+1, y+1, z);
    SetInterior(playerid,GetInterior(pid));
    SetWorld(playerid,GetWorld(pid));
    if(HouseEntered[pid] != -1) { HouseEntered[playerid] = HouseEntered[pid]; }
    if(BizEntered[pid] != -1) { BizEntered[playerid] = BizEntered[pid]; }
    ServerMSG(playerid, "Ai fost teleportat!");
    return 1;
}

CMD:freeze(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/freeze [playerid/PoN]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(PlayerInfo[pid][pAdmin] > 0 && PlayerInfo[playerid][pHelper] == 1) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda pe un admin.");
    if(isFrozen(pid)) return SCM(playerid, -1, "Jucatorul este deja blocat.");
    GameTextForPlayer(pid, "~r~AI FOST BLOCAT", 2000, 3);
    FreezePlayer(pid);
    format(msg, sizeof(msg), "AdmCmd: %s a fost blocat de catre %s.", GetName(pid), GetName(playerid));
    LOCALAMSG(pid, 20, COLOR_LIGHTRED, msg);
    return 1;
}

CMD:unfreeze(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/unfreeze [playerid/PoN]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(PlayerInfo[pid][pAdmin] > 0 && PlayerInfo[playerid][pHelper] == 1) return SCM(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda pe un admin.");
    if(GetIntVar(pid, "JustDied") == 1 || PlayerInfo[pid][pDied] == 1 || GetIntVar(pid, "LoggedInDead") == 1) return SCM(playerid, COLOR_WHITE, "Jucatorul este inconstient, foloseste /revive.");

    GameTextForPlayer(pid, "~g~AI FOST DEBLOCAT", 2000, 3);
    UnFreezePlayer(pid);
    format(msg, sizeof(msg), "AdmCmd: %s a fost deblocat de catre %s.", GetName(pid), GetName(playerid));
    LOCALAMSG(pid, 20, COLOR_LIGHTRED, msg);
    return 1;
}

CMD:slap(playerid, params[])
{
    new targetid,Float:slx, Float:sly, Float:slz;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",targetid)) return SyntaxMSG(playerid, "/slap [playerid/PoN]");
    if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
    GetPlayerPos(targetid, slx, sly, slz);
    SetPlayerPos(targetid, slx, sly, slz+5);
    PlayerPlaySound(targetid, 1130, slx, sly, slz+5);
    format(msg, sizeof(msg), "AdmCmd: %s a primit slap de la %s",GetName(targetid) ,GetName(playerid));
    LOCALAMSG(targetid, 20, COLOR_LIGHTRED, msg);
    return 1;
}

CMD:telemenu(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new telestring[1550], part[40];
    format(telestring, sizeof(telestring), "{FFFFFF}%s", OrTeleports[0]);
    for(new OrT = 1; OrT < sizeof(OrTeleports); OrT++)
    {
        format(part, sizeof(part), "\n%s", OrTeleports[OrT]);
        strcat(telestring, part, sizeof(telestring));
    }
    ShowDialog(playerid, Show:<Teles>, DIALOG_STYLE_LIST, "Select a teleport location", telestring, "Teleport", "Anuleaza");
    return 1;
}

CMD:ajail(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new targetid, time, reason[128];
    if(sscanf(params,"uds[128]",targetid,time,reason)) return SyntaxMSG(playerid,"/ajail [playerid/PoN] [Minute] [motiv]");
    if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
    if(time <= 0) return SCM(playerid, COLOR_GREY, "Timpul trebuie sa fie mai mare de 0!");
    format(query, sizeof(query), "INSERT INTO `ajails` (player, victim, minutes, reason, data) VALUES ('%s', '%s', %d, '%s', '%s')", GetName(playerid), GetName(targetid), time, reason, GetFullDate());
    mysql_function_query(dbHandle, query, false, "", "");
    PlayerInfo[targetid][pJailed] = 1;
    PlayerInfo[targetid][pJailTime] = time*60;
    SCM(targetid, COLOR_YELLOWG, "Ai primit ajail!");
    SetSpawnInfo(targetid, 0, PlayerInfo[targetid][pSkin], 2576.7861,2712.2004,22.9507, 1.0, -1, -1, -1, -1, -1, -1);
    SetPlayerPos(targetid,  2576.7861,2712.2004,22.9507);
    //SetPlayerSpawn(targetid);
    if(time >= 20) format(msg, sizeof(msg), "AdmCmd: %s a primit admin-jail de la %s timp de %d de minute. Motiv: %s", GetName(targetid), GetName(playerid), time, reason);
    if(time < 20 && time != 1) format(msg, sizeof(msg), "AdmCmd: %s a primit admin-jail de la %s timp de %d minute. Motiv: %s", GetName(targetid), GetName(playerid), time, reason);
    if(time == 1) format(msg, sizeof(msg), "AdmCmd: %s a primit admin-jail de la %s timp de un minut, Motiv: %s", GetName(targetid), GetName(playerid), reason);
    LOCALAMSG(targetid, 20, COLOR_LIGHTRED, msg);
    return 1;
}

CMD:aunjail(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new targetid;
    if(sscanf(params,"u",targetid)) return SyntaxMSG(playerid,"/aunjail [playerid/PoN]");
    if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
    PlayerInfo[targetid][pJailed] = 0;
    PlayerInfo[targetid][pJailTime] = 0;
    PlayerInfo[targetid][pJailTime2] = 0;
    SetPlayerPos(targetid, 1553.3107, 1675.8288, 16.1953);
    format(msg, sizeof(msg), "AdmCmd: %s a fost scos din Ajail de catre %s.", GetName(targetid), GetName(playerid));
    LOCALAMSG(targetid, 20, COLOR_LIGHTRED, msg);
    SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 2262.7705,-86.0881,26.4535, 1.0, -1, -1, -1, -1, -1, -1);
    PlayerTextDrawHide(targetid,jail_timeleft[targetid]);
    return 1;
}

CMD:t(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] == 0 && !CheckAdmin(playerid, 1)) return NotAuthMSG(playerid);
    if ((!tchat) && !CheckAdmin(playerid, 1)) return SCM(playerid, COLOR_GRAD2, "AdmCmd: Chatul moderatorilor a fost inchis de catre un admin!");
    if(isnull(params)) return SyntaxMSG(playerid, "/t(ester chat) [text]");
    new prefix[16];
    if(CheckAdmin(playerid, 1))
        prefix = "ADMIN";
    if(PlayerInfo[playerid][pHelper] > 0)
        prefix = "MODERATOR";
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "* [%s] %s: %.*s ...", prefix, GetName(playerid), pos, params);
        SendStaffMessage(0x33aa3300, msg);
        format(msg, sizeof(msg), "*  ... %s", params[pos]);
        SendStaffMessage(0x33aa3300, msg);
    }
    else
    {
        format(msg, sizeof(msg), "* [%s] %s: %s", prefix, GetName(playerid), params);
        SendStaffMessage(0x33aa3300, msg);
    }
    return 1;
}

CMD:a(playerid, params[]) return cmd_adminchat(playerid, params);
CMD:adminchat(playerid, params[])
{
    new str1[128], str2[128];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if ((!achat) && !CheckAdmin(playerid, ADMIN_LEVEL_1)) return SCM(playerid, COLOR_GRAD2, "AdmCmd: Admin chat-ul a fost dezactivat de catre un admin!");
    if(isnull(params)) return SyntaxMSG(playerid, "/adminchat [text]");
    new name[128];
    format(name, sizeof(name), "%s", GetName(playerid));
    if(PlayerInfo[playerid][pFName] == 1) { new fnamestr[64]; format(fnamestr, sizeof(fnamestr), " (%s)", PlayerInfo[playerid][pForumName]); strcat(name, fnamestr); }
    new shownlevel = PlayerInfo[playerid][pAdmin];
    if(shownlevel == 9999) shownlevel = 2014;
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(str1, sizeof(str1), "[Admin %d] %s: %.*s ...", shownlevel, name, pos, params);
        format(str2, sizeof(str2), "... %s", params[pos]);
        AMSG(COLOR_YELLOWG, str1);
        AMSG(COLOR_YELLOWG, str2);
        return 1;
    }
    else
    {
        format(str1, sizeof(str1), "[Admin %d] %s: %s", shownlevel, name, params);
        AMSG(COLOR_YELLOWG, str1);
    }
    return 1;
}

CMD:kick(playerid, params[])
{
    new pid, reason[256];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"us[256]",pid,reason)) return SyntaxMSG(playerid, "/kick [playerid/PoN] [reason]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    format(query, sizeof(query), "INSERT INTO `kicks` (player, victim, reason, data) VALUES ('%s', '%s', '%s', '%s')", GetName(playerid), GetName(pid), reason, GetFullDate());
    mysql_function_query(dbHandle, query, false, "", "");
    format(msg, sizeof(msg), "AdmCmd: %s a primit kick de la %s, motiv: %s", GetName(pid), GetName(playerid), reason);
    KickWithMSG(pid, msg);
    return 1;
}

CMD:kickNPC(playerid, params[])
{
    new pid, reason[256];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"us[256]",pid,reason)) return SyntaxMSG(playerid, "/kickNPC [playerid/PoN] [reason]");
    format(msg, sizeof(msg), "AdmCmd: %s a primit kick de la %s, motiv: %s", GetName(pid), GetName(playerid), reason);
    KickWithMSG(pid, msg);
    return 1;
}

CMD:mkick(playerid, params[])
{
    new pid, reason[256];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",pid,reason)) return SyntaxMSG(playerid, "/kick2 [playerid] [reason]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    format(query, sizeof(query), "INSERT INTO `kicks` (player, victim, reason, data) VALUES ('%s', '%s', '%s', '%s')", GetName(playerid), GetName(pid), reason, GetFullDate());
    mysql_function_query(dbHandle, query, false, "", "");
    format(msg, sizeof(msg), "AdmCmd: %s a primit kick din mIRC, motiv: %s", GetName(pid), reason);
    KickWithMSG(pid, msg);
    return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"ui", targetid, skinid)) return SyntaxMSG(playerid, "/setskin [pplayerid/PoNlayerid] [SkinModel]");
    if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
    if(skinid > 311) return SCM(playerid, COLOR_GREY, "SkinID must be 0-311");
    SetSkin(targetid, skinid);
    format(msg, 256, "AdmCmd: Lui %s i-a fost schimbat skin-ul in %d, de catre %s.", GetName(targetid), skinid, GetName(playerid));
    AMSG(COLOR_LIGHTRED,msg);
    return 1;
}

CMD:givemoney(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new id, amount;
    if(sscanf(params,"ud",id,amount)) return SyntaxMSG(playerid, "/givemoney [playeriplayerid/PoNd] [amount]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg,sizeof(msg),"AdmCmd: %s i-a dat lui %s, $%d.", GetName(playerid), GetName(id), amount);
    AMSG(COLOR_LIGHTRED, msg);
    GiveCash(id, amount);
    return 1;
}

CMD:setmoney(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new id, amount;
    if(sscanf(params,"ud",id,amount)) return SyntaxMSG(playerid, "/setmoney [playerid/PoN] [amount]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg,sizeof(msg),"AdmCmd: %s i-a setat banii lui %s , $%d cash.", GetName(playerid), GetName(id), amount);
    AMSG(COLOR_LIGHTRED, msg);
    SetCash(id, amount);
    return 1;
}

CMD:addlabel(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new color, info[256], lid, virworld, gametext, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"ds[256]d",color,info,gametext)) return SyntaxMSG(playerid, "/addlabel [color] [description] [gametext(1/0)] (1-white|2-red|3-yellow|4-green|5-blue|6-black|7-orange)");
    lid = GetNextLabelID();
    virworld = GetWorld(playerid);
    switch(color)
    {
        case 1:
            color = 0xFFFFFFFF;
        case 2:
            color = 0xFF0000FF;
        case 3:
            color = 0xFFFF00FF;
        case 4:
            color = 0x808000FF;
        case 5:
            color = 0x0000FFFF;
        case 6:
            color = 0x000000FF;
        case 7:
            color = 0xFF8000FF;
        default:
            color = 0xFFFFFFFF;
    }
    GetPlayerPos(playerid, X, Y, Z);
    AddLabelToFile(lid, info, virworld, color, gametext, X, Y, Z);
    LabelsInfo[lid][tLabelX] = X;
    LabelsInfo[lid][tLabelY] = Y;
    LabelsInfo[lid][tLabelZ] = Z;
    LabelsInfo[lid][tColor] = color;
    LabelsInfo[lid][tLabelOn] = 1;
    LabelsInfo[lid][tVirtualWorld] = virworld;
    LabelsInfo[lid][tGameText] = gametext;
    format(LabelsInfo[lid][tInfo],256,"%s",info);
    if(gametext == 0)
    {
        LabelsInfo[lid][tLabel] = CreateDynamic3DTextLabel(info, color, X, Y, Z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
    }
    LabelsInfo[lid][tPickUp] = CreateDynamicPickup(1239, 1, X, Y, Z, -1, -1, -1, 100.0);
    format(msg, sizeof(msg), "A new 3D Text Label Has Been dynamically added. Description: \"%s\". color %d",info,color);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:serverlabels(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `labels`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Labels");
    return 1;
}

CMD:removelabel(playerid,params[])
{
    new LabelID;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    LabelID = GetClosestLabelID(playerid);
    DestroyDynamic3DTextLabel(Text3D:LabelsInfo[LabelID][tLabel]);
    DestroyDynamicPickup(LabelsInfo[LabelID][tPickUp]);
    LabelsInfo[LabelID][tLabelX] = 0;
    LabelsInfo[LabelID][tLabelY] = 0;
    LabelsInfo[LabelID][tLabelZ] = 0;
    LabelsInfo[LabelID][tColor] = 0;
    LabelsInfo[LabelID][tLabelOn] = 0;
    LabelsInfo[LabelID][tVirtualWorld] = 0;
    LabelsInfo[LabelID][tGameText] = 0;
    format(LabelsInfo[LabelID][tInfo],256,"");
    format(query, sizeof(query), "DELETE FROM `labels` WHERE `id` = %d",LabelsInfo[LabelID][tID]);
    mysql_function_query(dbHandle, query, true, "OnLabelRemove", "i", LabelID);
    format(msg,sizeof(msg),"You've destroyed 3DLabel id: %d!",LabelID);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:whatlabel(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < sizeof(LabelsInfo); i++)
    {
        if (PlayerToPoint(3, playerid, LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
        {
            format(tt, sizeof(tt), "You're standing near label: [Normal ID: %d] [MySQL ID: %d].", i,LabelsInfo[i][tID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:editlabel(playerid, params[])
{
    new type, text[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[128]",type,text)) return SyntaxMSG(playerid, "/editlabel [(1-Text,2-VirWorld,3-GameText)] [new text]");
    new input = strval(text);

    if(type == 1)
    {
        for(new i = 0; i < sizeof(LabelsInfo); i++)
        {
            if (PlayerToPoint(3, playerid,LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
            {
                format(query, sizeof(query), "UPDATE `labels` SET `labeltext` = '%s' WHERE `id` = %d", text, LabelsInfo[i][tID]);
                mysql_function_query(dbHandle, query, true, "OnLabelRenamed", "is", i,text);
                return 1;
            }
        }
    }
    if(type == 2)
    {
        for(new i = 0; i < sizeof(LabelsInfo); i++)
        {
            if (PlayerToPoint(3, playerid,LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
            {
                format(query, sizeof(query), "UPDATE `labels` SET `virworld` = %d WHERE `id` = %d", input, LabelsInfo[i][tID]);
                mysql_function_query(dbHandle, query, false, "", "");
                LabelsInfo[i][tVirtualWorld] = input;
                DestroyDynamic3DTextLabel(Text3D:LabelsInfo[i][tLabel]);
                LabelsInfo[i][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[i][tInfo], LabelsInfo[i][tColor], LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, input, -1, -1, 100.0);
                return 1;
            }
        }
    }
    if(type == 3)
    {
        for(new i = 0; i < sizeof(LabelsInfo); i++)
        {
            if (PlayerToPoint(3, playerid,LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
            {
                format(query, sizeof(query), "UPDATE `labels` SET `gametext` = %d WHERE `id` = %d", input, LabelsInfo[i][tID]);
                mysql_function_query(dbHandle, query, false, "", "");
                LabelsInfo[i][tGameText] = input;
                if(input == 0)
                {
                    DestroyDynamic3DTextLabel(Text3D:LabelsInfo[i][tLabel]);
                    LabelsInfo[i][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[i][tInfo], LabelsInfo[i][tColor], LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[i][tVirtualWorld], -1, -1, 100.0);
                }
                else
                {
                    DestroyDynamic3DTextLabel(Text3D:LabelsInfo[i][tLabel]);
                }
                return 1;
            }
        }
    }
    return 1;
}

CMD:gotolabel(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotolabel [Label-ID]");
    if(!LabelsInfo[id][tLabelOn]) return SCM(playerid, -1, "Invalid label id.");
    PutPlayer(playerid, LabelsInfo[id][tLabelX], LabelsInfo[id][tLabelY], LabelsInfo[id][tLabelZ]);
    SetWorld(playerid, LabelsInfo[id][tVirtualWorld]);
    return 1;
}

CMD:gotodoor(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotodoor [Door-ID]");
    if(!DoorInfo[id][dDoorOn]) return SCM(playerid, -1, "Invalid doorid.");
    SetInterior(playerid, DoorInfo[id][dEnterInterior]);
    PutPlayer(playerid, DoorInfo[id][dEnterX], DoorInfo[id][dEnterY], DoorInfo[id][dEnterZ]);
    return 1;
}

CMD:removedoor(playerid,params[])
{
    new DoorID;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",DoorID)) return SyntaxMSG(playerid, "/removedoor [Door-ID]");
    if(!DoorInfo[DoorID][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
    DestroyDynamic3DTextLabel(Text3D:DoorInfo[DoorID][dExitLabel]);
    DestroyDynamicPickup(DoorInfo[DoorID][dPickUp]);
    format(query, sizeof(query), "DELETE FROM `doors` WHERE `id` = %d",DoorInfo[DoorID][dID]);
    mysql_function_query(dbHandle, query, true, "OnDoorRemove", "i", DoorID);
    format(msg,sizeof(msg),"You've destroyed Door id: %d!",DoorID);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:serverdoors(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `doors`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Doors");
    return 1;
}

CMD:editdoor(playerid, params[])
{
    new text[256], type, exitstr[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editdoor [type(1-Info,2-VirWorld)] [new text]");
    new virworld = strval(text);

    if(type == 1)
    {
        for(new i = 0; i < sizeof(DoorInfo); i++)
        {
            if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
            {
                format(query, sizeof(query), "UPDATE `doors` SET `info` = '%s' WHERE `id` = %d", text, DoorInfo[i][dID]);
                mysql_function_query(dbHandle, query, false, "", "");
                format(DoorInfo[i][dInfo],256,"%s",text);
                return 1;
            }
        }
    }
    if(type == 2)
    {
        for(new i = 0; i < sizeof(DoorInfo); i++)
        {
            if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
            {
                format(query, sizeof(query), "UPDATE `doors` SET `virtualworld` = %d WHERE `id` = %d", virworld, DoorInfo[i][dID]);
                mysql_function_query(dbHandle, query, false, "", "");
                DoorInfo[i][dVirtualWorld] = virworld;
                DestroyDynamic3DTextLabel(Text3D:DoorInfo[i][dExitLabel]);
                format(exitstr, sizeof(exitstr), ""EMBED_WHITE"["EMBED_YELLOW"Door %d"EMBED_WHITE"]\n/exit", i);
                DoorInfo[i][dExitLabel] = CreateDynamic3DTextLabel(exitstr, -1, DoorInfo[i][dExitX], DoorInfo[i][dExitY], DoorInfo[i][dExitZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
                return 1;
            }
        }
    }
    return 1;
}

CMD:whatdoor(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < sizeof(DoorInfo); i++)
    {
        if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
        {
            format(tt, sizeof(tt), "You're standing near door: [Normal ID: %d] [MySQL ID: %d].", i,DoorInfo[i][dID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:makedoor(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new info[256], interior, doorid, virworld, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"ds[128]",virworld,info)) return SyntaxMSG(playerid, "/makedoor [exit-virtual-world] [info]");
    doorid = GetNextDynamicDoorID();
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    AddDoorToFile(doorid, info, virworld, interior, X, Y, Z);
    DoorInfo[doorid][dEnterX] = X;
    DoorInfo[doorid][dEnterY] = Y;
    DoorInfo[doorid][dEnterZ] = Z;
    DoorInfo[doorid][dExitX] = 0.0000;
    DoorInfo[doorid][dExitY] = 0.0000;
    DoorInfo[doorid][dExitZ] = 0.0000;
    DoorInfo[doorid][dEnterInterior] = interior;
    DoorInfo[doorid][dVirtualWorld] = virworld;
    format(DoorInfo[doorid][dInfo],256,"%s",info);
    DoorInfo[doorid][dDoorOn] = 1;
    DoorInfo[doorid][dPickUp] = CreateDynamicPickup(1239, 1, X, Y, Z, -1, -1, -1, 100.0);
    format(msg, sizeof(msg), "A new door was added, [doortext: %s, Position: %f, %f, %f]",info,X, Y, Z);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:doorexit(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new interior, doorid, Float:X, Float:Y, Float:Z, exitstr[256];
    if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/doorexit [doorid]");
    if(!DoorInfo[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
    DestroyDynamic3DTextLabel(Text3D:DoorInfo[doorid][dExitLabel]);
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    AddDoorExit(doorid, interior, X, Y, Z);
    DoorInfo[doorid][dExitX] = X;
    DoorInfo[doorid][dExitY] = Y;
    DoorInfo[doorid][dExitZ] = Z;
    DoorInfo[doorid][dExitInterior] = interior;
    format(exitstr, sizeof(exitstr), ""EMBED_WHITE"["EMBED_YELLOW"Door %d"EMBED_WHITE"]\n/exit", doorid);
    DoorInfo[doorid][dExitLabel] = CreateDynamic3DTextLabel(exitstr, -1, X, Y, Z, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DoorInfo[doorid][dVirtualWorld], -1, -1, 100.0);
    format(msg, sizeof(msg), "Door exit was changed, %f, %f, %f",X,Y,Z);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:doorenter(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new interior, doorid, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/doorenter [doorid]");
    if(!DoorInfo[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    AddDoorEnter(doorid, interior, X, Y, Z);
    DoorInfo[doorid][dEnterX] = X;
    DoorInfo[doorid][dEnterY] = Y;
    DoorInfo[doorid][dEnterZ] = Z;
    DoorInfo[doorid][dExitInterior] = interior;
    DestroyDynamicPickup(DoorInfo[doorid][dPickUp]);
    DoorInfo[doorid][dPickUp] = CreateDynamicPickup(1239, 1, DoorInfo[doorid][dEnterX], DoorInfo[doorid][dEnterY], DoorInfo[doorid][dEnterZ], -1, -1, -1, 100.0);
    format(msg, sizeof(msg), "Door enter was changed, %f, %f, %f",X,Y,Z);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:showdoors(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(DoorInfo); i++)
    {
        if(DoorInfo[i][dDoorOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, DoorInfo[i][dInfo]);
        }
    }
    ShowDialog(playerid,Show:<AdminDoors>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Doors:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:togglea(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
    if (!achat)
    {
        achat = true;
        format(msg, sizeof(msg), "Admin Chatul a fost activat de catre %s", GetName(playerid));
        AMSG(COLOR_LIGHTRED, msg);
    }
    else
    {
        achat = false;
        format(msg, sizeof(msg), "Admin Chatul a fost dezactivat de catre %s", GetName(playerid));
        AMSG(COLOR_LIGHTRED, msg);
    }
    return 1;
}

CMD:togglet(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
    if(!tchat)
    {
        tchat = true;
        format(msg, sizeof(msg), "Moderator Chat a fost activat de catre %s", GetName(playerid));
        SendStaffMessage(COLOR_LIGHTRED, msg);
    }
    else
    {
        tchat = false;
        format(msg, sizeof(msg), "Moderator Chat a fost dezactivat de catre %s", GetName(playerid));
        SendStaffMessage(COLOR_LIGHTRED, msg);
    }
    return 1;
}

CMD:noooc(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    new string[128];
    if (!noooc)
    {
        noooc = true;
        format(string, sizeof(string), "Chat-ul OOC a fost dezactivat de catre %s", GetName(playerid));
        SCMALL(COLOR_GRAD2, string);
    }
    else
    {
        noooc = false;
        format(string, sizeof(string), "Chat-ul OOC a fost activat de catre %s", GetName(playerid));
        SCMALL(COLOR_GRAD2, string);
    }
    return 1;
}

CMD:ao(playerid, params[]) return cmd_aooc(playerid, params);
CMD:aooc(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(isnull(params)) return SyntaxMSG(playerid, "/aooc [admin ooc chat]");
    new name[128];
    format(name, sizeof(name), "%s", GetName(playerid));
    if(PlayerInfo[playerid][pFName] == 1) { new fnamestr[64]; format(fnamestr, sizeof(fnamestr), " (%s)", PlayerInfo[playerid][pForumName]); strcat(name, fnamestr); }
    if(strlen(params) > MAXLEN)
    {
        new pos = MAXLEN;
        if(pos < MAXLEN-1) pos = MAXLEN;
        format(msg, sizeof(msg), "[AOOC] %s: %.*s ...", name, pos, params);
        SCMALL(0xF97804FF,msg);
        format(msg, sizeof(msg), " ... %s", params[pos]);
        SCMALL(0xF97804FF,msg);
    }
    else
    {
        format(msg, sizeof(msg), "[AOOC] %s: %s", name, params);
        SCMALL(0xF97804FF,msg);
    }
    return 1;
}

CMD:announce(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(isnull(params)) return SyntaxMSG(playerid, "/announce [announcement]");
    format(msg, sizeof(msg), "~w~%s", params);
    GameTextForAll(msg, 5000, 4);
    format(msg, sizeof(msg), "AdmWarn: Ultimul anunt a fost pus de %s.", GetName(playerid));
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}

CMD:setint(playerid, params[])
{
    return cmd_setinterior(playerid, params);
}

CMD:setinterior(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new pid, int;
    if(sscanf(params,"ud",pid,int)) return SyntaxMSG(playerid, "/setinterior [playerid/PoN] [interior]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "You've changed %s's interior to %d.", GetName(pid), int);
    SCM(playerid, COLOR_YELLOWG, msg);
    SetInterior(pid, int);
    return 1;
}

CMD:setvw(playerid, params[])
{
    return cmd_setworld(playerid, params);
}

CMD:setworld(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new pid, wid;
    if(sscanf(params,"ud",pid,wid)) return SyntaxMSG(playerid, "/setworld [playerid/PoN] [worldid]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "You've changed %s's virtual world to %d.", GetName(pid), wid);
    SCM(playerid, COLOR_YELLOWG, msg);
    SetWorld(pid, wid);
    return 1;
}

CMD:fixchar(playerid, params[])
{
    if(HouseEntered[playerid] != -1)
    {
        new h = HouseEntered[playerid];
        SetInterior(playerid, HouseInfo[h][hInterior]);
        SetWorld(playerid, HouseInfo[h][hWorld]);
    }
    else if(BizEntered[playerid] != -1)
    {
        new b = BizEntered[playerid];
        SetInterior(playerid, BizInfo[b][bizInterior]);
        SetWorld(playerid, BizInfo[b][bizWorld]);
    }
    else if(DoorEntered[playerid] != -1)
    {
        new d = DoorEntered[playerid];
        SetInterior(playerid, DoorInfo[d][dExitInterior]);
        SetWorld(playerid, DoorInfo[d][dVirtualWorld]);
    }
    else
    {
        SetWorld(playerid, 0);
        SetInterior(playerid, 0);
    }
    PlaySound(playerid, 1138);
}

CMD:skinmenu(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    ShowSkinMenu(playerid);
    return 1;
}

CMD:carmenu(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    ShowVehicleMenu(playerid);
    return 1;
}

CMD:wepmenu(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    ShowWeaponsMenu(playerid);
    return 1;
}

CMD:teles(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    new string[1200];
    for(new i = 0; i < sizeof(HouseInteriors); i++)
    {
        if(HouseInteriors[i][aTeleOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, HouseInteriors[i][aMapName]);
        }
    }
    ShowDialog(playerid,Show:<AdminTeles>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Teleports:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:maketele(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new mapname[256], interior, teleid, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"ds[128]",teleid,mapname)) return SyntaxMSG(playerid, "/maketele [What-ID] [MapName]");
    if(HouseInteriors[teleid][aTeleOn]) return SCM(playerid, -1, "This teleport is already being used.");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    AddTeleToFile(teleid, mapname,interior, X, Y, Z);
    HouseInteriors[teleid][aPosX] = X;
    HouseInteriors[teleid][aPosY] = Y;
    HouseInteriors[teleid][aPosZ] = Z;
    HouseInteriors[teleid][aInterior] = interior;
    format(HouseInteriors[teleid][aMapName],256,"%s",mapname);
    HouseInteriors[teleid][aTeleOn] = 1;
    format(msg, sizeof(msg), "A new teleport was added, [mapname: %s, Position: %f, %f, %f]",mapname,X, Y, Z);
    return SCM(playerid, COLOR_GREEN2, msg);
}

CMD:removetele(playerid,params[])
{
    new teleid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",teleid)) return SyntaxMSG(playerid, "/removetele [Tele-ID]");
    if(HouseInteriors[teleid][aTeleOn])
    {
        format(query, sizeof(query), "DELETE FROM `ateles` WHERE `id` = %d",HouseInteriors[teleid][atID]);
        mysql_function_query(dbHandle, query, true, "OnTeleportRemove", "i", teleid);
        format(msg,sizeof(msg),"You've destroyed teleport id: %d!",teleid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Teleport Does Not Exist!");
    }
    return 1;
}

CMD:serverteles(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `ateles`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Admin teles");
    return 1;
}

CMD:editobject(playerid,params[])
{
    new objectid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/editobject [Object-ID]");
    if(GetIntVar(playerid, "EditingObject") == 1) return SCM(playerid, COLOR_FADE1, "You are already editing.");
    if(ObjectsInfo[objectid][oObjectOn] && IsValidDynamicObject(ObjectsInfo[objectid][oObject]))
    {
        SetIntVar(playerid, "EditingObject", 1);
        SetIntVar(playerid, "ObjectEditing", objectid);
        EditDynamicObject(playerid, ObjectsInfo[objectid][oObject]);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Dynamic Object Does Not Exist!");
    }
    return 1;
}

CMD:removeobject(playerid,params[])
{
    new objectid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removeobject [Object-ID]");
    if(ObjectsInfo[objectid][oObjectOn])
    {
        format(query, sizeof(query), "DELETE FROM `objects` WHERE `id` = %d",ObjectsInfo[objectid][oID]);
        mysql_function_query(dbHandle, query, true, "OnObjectRemove", "i", objectid);
        format(msg,sizeof(msg),"You've destroyed dynamic object id: %d!",objectid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Dynamic Object Does Not Exist!");
    }
    return 1;
}

CMD:whatobject(playerid, params[])
{
    new tt[128];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new Float:x, Float:y, Float:z;
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        GetDynamicObjectPos(i, x, y, z);
        if (PlayerToPoint(3, playerid, x, y, z))
        {
            format(tt, sizeof(tt), "You're standing near dynamic object: [Normal ID: %d] [MySQL ID: %d].", i,ObjectsInfo[i][oID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:gotoobject(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new id, Float:x, Float:y, Float:z;
    if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotoobject [objectid]");
    if(!IsValidDynamicObject(id)) return SCM(playerid, COLOR_LIGHTRED, "Invalid object id.");
    GetDynamicObjectPos(id, x, y, z);
    PutPlayer(playerid, x, y, z);
    SCM(playerid, COLOR_WHITE, "Ai fost teleportat!");
    return 1;
}

CMD:showobjects(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[4000];
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
    {
        if(ObjectsInfo[i][oObjectOn])
        {
            format(string, sizeof(string), "%s\n%d)%s" ,string, i, ObjectsInfo[i][oName]);
        }
    }
    ShowDialog(playerid,Show:<ShowObjects>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Objects:"EMBED_RED"",string,"O","K");
    return 1;
}

CMD:makeobject(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new objectid, modelid, interior, name[256], Float:X, Float:Y, Float:Z;
    if(sscanf(params,"ds[256]",modelid,name)) return SyntaxMSG(playerid, "/makeobject [Object-ID] [Description]");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    objectid = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, GetWorld(playerid), -1, -1, 200.0);
    ObjectsInfo[objectid][oModel] = modelid;
    ObjectsInfo[objectid][oPosX] = X;
    ObjectsInfo[objectid][oPosY] = Y;
    ObjectsInfo[objectid][oPosZ] = Z;
    ObjectsInfo[objectid][oPosRX] = 0.0;
    ObjectsInfo[objectid][oPosRY] = 0.0;
    ObjectsInfo[objectid][oPosRZ] = 0.0;
    ObjectsInfo[objectid][oObjectOn] = 1;
    ObjectsInfo[objectid][oInterior] = interior;
    ObjectsInfo[objectid][oVirtualWorld] = GetWorld(playerid);
    format(ObjectsInfo[objectid][oName], 256, "%s", name);
    ObjectsInfo[objectid][oObject] = objectid;
    AddObjectToFile(objectid, modelid, interior, GetWorld(playerid), X, Y, Z, name);
    format(msg, sizeof(msg), "A new dynamic object was added, [ModelID: %d, Description: %s]",modelid, ObjectsInfo[objectid][oName]);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:dupobject(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new objectid, objectid2, modelid, name[256];
    if(sscanf(params,"dds[256]",objectid2,modelid,name)) return SyntaxMSG(playerid, "/dupobject [What-ID] [Object-ID] [Description]");
    objectid = CreateDynamicObject(modelid, ObjectsInfo[objectid2][oPosX], ObjectsInfo[objectid2][oPosY], ObjectsInfo[objectid2][oPosZ], ObjectsInfo[objectid2][oPosRX], ObjectsInfo[objectid2][oPosRY], ObjectsInfo[objectid2][oPosRZ], ObjectsInfo[objectid2][oVirtualWorld], -1, -1, 200.0);
    ObjectsInfo[objectid][oModel] = modelid;
    ObjectsInfo[objectid][oPosX] = ObjectsInfo[objectid2][oPosX];
    ObjectsInfo[objectid][oPosY] = ObjectsInfo[objectid2][oPosY];
    ObjectsInfo[objectid][oPosZ] = ObjectsInfo[objectid2][oPosZ];
    ObjectsInfo[objectid][oPosRX] = ObjectsInfo[objectid2][oPosRX];
    ObjectsInfo[objectid][oPosRY] = ObjectsInfo[objectid2][oPosRY];
    ObjectsInfo[objectid][oPosRZ] = ObjectsInfo[objectid2][oPosRZ];
    ObjectsInfo[objectid][oObjectOn] = 1;
    ObjectsInfo[objectid][oInterior] = ObjectsInfo[objectid2][oInterior];
    ObjectsInfo[objectid][oVirtualWorld] = ObjectsInfo[objectid2][oVirtualWorld];
    format(ObjectsInfo[objectid][oName], 256, "%s", name);
    ObjectsInfo[objectid][oObject] = objectid;
    AddObjectToFile(objectid, modelid, ObjectsInfo[objectid2][oInterior], ObjectsInfo[objectid2][oVirtualWorld], ObjectsInfo[objectid2][oPosX], ObjectsInfo[objectid2][oPosY], ObjectsInfo[objectid2][oPosZ], name);
    format(msg, sizeof(msg), "A new dynamic object was duplicated, [OtherID: %d, New ID: %d, Model: %d, Description: %s]",objectid2, objectid, modelid, name);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:serverobjects(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `objects`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic objects");
    return 1;
}

CMD:makeadmin(playerid, params[])
{
    new pid, level;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dd",pid, level)) return SyntaxMSG(playerid, "/makeadmin [playerid] [level]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(debugmode[pid] != 1 && level >= BIG_ADMIN_LEVEL) return SCM(playerid, COLOR_GREY, "Jucatorul nu este developer!");
    PlayerInfo[pid][pAdmin] = level;
    format(msg, sizeof(msg), "AdmCmd: %s i-a dat lui %s admin level %d.", GetName(playerid), GetName(pid), level);
    AMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "Admin %s te-a promovat la gradul de administratot level %d.", GetName(playerid), level);
//  format(msg, sizeof(msg), "AINFO: Acum ai acces la comanda (/acmds)");
    SCM(pid, COLOR_GRAD3, msg);
    SCM(pid, COLOR_GRAD3, "AINFO: Acum ai acces la comanda /acmds.");
    SCM(pid, COLOR_GRAD3, "AINFO: Nu uita sa folosesti comanda /setforumname !");
    return 1;
}

CMD:makemoderator(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",pid)) return SyntaxMSG(playerid, "/makemoderator [playerid]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    PlayerInfo[pid][pHelper] = 1;
    format(msg, sizeof(msg), "AdmCmd: %s l-a promovat pe %s la gradul de moderator.", GetName(playerid), GetName(pid));
    AMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "%s te-a promovat la gradul de moderator.", GetName(playerid));
    SCM(pid, COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "TINFO: Acum ai acces la comanda /tcmds!");
    SCM(pid, COLOR_GREY, msg);
    return 1;
}

CMD:removemoderator(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",pid)) return SyntaxMSG(playerid, "/removemoderator [playerid]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    PlayerInfo[pid][pHelper] = 0;
    format(msg, sizeof(msg), "AdmCmd: %s i-a restras lui %s gradul de moderator.", GetName(playerid), GetName(pid));
    AMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "%s ti-a retras gradul de moderator.", GetName(playerid));
    SCM(pid, COLOR_LIGHTRED, msg);
    return 1;
}

CMD:getgun(playerid, params[])
{
    new gunid, ammo;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dd",gunid,ammo)) return SyntaxMSG(playerid, "/getgun [gunid] [ammo]");
    GiveWeapon(playerid, gunid, ammo);
    format(msg, sizeof(msg), "Ai spawnat o arma! ("EMBED_RED"%s)", GetWeaponNameEx(gunid));
    SCM(playerid, COLOR_YELLOWG, msg);
    format(msg, sizeof(msg), "AdmCmd: %s has just given to himself a weapon. (%s, Ammo: %d)", GetName(playerid), GetWeaponNameEx(gunid), ammo);
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}

CMD:getip(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new ip[128],pid;
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/getip [playerid/PoN]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    GetPlayerIp(pid, ip, sizeof(ip));
    format(msg, sizeof(msg), "IP-ul lui %s[ID:%d]: %s", GetName(pid), pid, ip);
    SCM(playerid, COLOR_GRAD6, msg);
    return 1;
}

CMD:ban(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new id, reason[128];
    if(sscanf(params,"us[128]",id,reason)) return SyntaxMSG(playerid, "/ban [playerid/PartOfName] [motiv]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    gpci(id,playerserial,sizeof(playerserial));
    PlayerInfo[id][pBanned] = 1;
    format(msg, sizeof(msg), "AdmCmd: %s a fost banat de catre %s. Motiv: %s.", GetName(id), GetName(playerid), reason);
    format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial, admin, date) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')", GetName(id),reason, GetPlayerIP(id), playerserial, GetName(playerid), GetFullDate());
    LOCALAMSG(id, 20, COLOR_LIGHTRED, msg);
    mysql_function_query(dbHandle, query, false, "", "");
    SetTimerEx("BanPlayer2", 2000, false, "i", id);
//  mysql_function_query(dbHandle, query, true, "BanWithMSGEx", "iss", id, msg);
	#if defined debugOn
		printf(query);
	#endif
    return 1;
}

forward BanPlayer2(playerid);
public BanPlayer2(playerid)
{
    BanEx(playerid, "BANNED");
    return 1;
}

CMD:unban(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    new name[MAX_PLAYER_NAME];
    if(sscanf(params,"s[128]",name)) return SyntaxMSG(playerid, "/unban [Firstname_Lastname]");
    format(msg, sizeof(msg), "AdmCmd: %s l-a debanat pe %s.", GetName(playerid), name);
    SCM(playerid, COLOR_LIGHTRED,msg);
    format(msg, sizeof(msg), "unbanip %s", name);
    SendRconCommand(msg);
    SendRconCommand("reloadbans");
    format(query, sizeof(query), "DELETE FROM `bans` WHERE `name` = '%s'", name);
    mysql_function_query(dbHandle, query, false, "", "");
    format(query, sizeof(query), "UPDATE `users` SET `banned` = %d WHERE `name` = '%s'", 0, name);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:banip(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    new ip[128],pIP[128];
    gpci(playerid,playerserial,sizeof(playerserial));
    if(sscanf(params,"s[128]",ip)) return SyntaxMSG(playerid, "/banip [IP]");
    format(msg, sizeof(msg), "AdmCmd: %s a banat IP-ul %s.", GetName(playerid), ip);
    AMSG(COLOR_LIGHTRED, msg);
    foreach(new i : Player)
    {
        GetPlayerIp(i, pIP, sizeof(pIP));
        if(CompareStrings(ip, pIP))
        {
            format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP) VALUES ('%s', '%s', '%s', '%s')", GetName(i), "BanIP", pIP, playerserial);
            mysql_function_query(dbHandle, query, false, "", "");
            format(msg, sizeof(msg), "[SERVER]: IP-ul tau (%s) a fost banat pe acest server!", pIP);
            KickEx2(i, msg);
            return 1;
        }
    }
    format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP, playerSerial) VALUES ('%s', '%s', '%s', '%s')", "BanIP", "BanIP", pIP, playerserial);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:unbanip(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    new ip[128];
    if(sscanf(params,"s[128]",ip)) return SyntaxMSG(playerid, "/banip [IP]");
    format(msg, sizeof(msg), "AdmCmd: %s a debanat IP-ul %s.", GetName(playerid), ip);
    AMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "unbanip %s", ip);
    SendRconCommand(msg);
    SendRconCommand("reloadbans");
    format(query, sizeof(query), "DELETE FROM `bans` WHERE `playerIP` = '%s'", ip);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:mute(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    new pid, time;
    if(sscanf(params,"ui",pid, time)) return SyntaxMSG(playerid, "/mute [playerid/PoN] [minute]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    SetIntVar(pid, "Muted", 1);
    if(time >= 20) format(msg, sizeof(msg), "AdmCmd: %s a primit mute de la %s pentru %d de minute.", GetName(pid), GetName(playerid), time);
    if(time < 20 && time != 1) format(msg, sizeof(msg), "AdmCmd: %s a primit mute de la %s pentru %d minute.", GetName(pid), GetName(playerid), time);
    if(time == 1) format(msg, sizeof(msg), "AdmCmd: %s a primit mute de la %s pentru un minut.", GetName(pid), GetName(playerid), time);
//  ProxDetector(20, pid, msg, COLOR_LIGHTRED);
//  AMSG(COLOR_LIGHTRED, msg);
    LOCALAMSG(pid, 20, COLOR_LIGHTRED, msg);
    mutetimer[pid] = SetTimerEx("UnMute", time*60000, false, "i", pid);
    return 1;
}

forward UnMute(playerid);
public UnMute(playerid)
{
    SetPVarInt(playerid, "Muted", 0);
    SCM(playerid, COLOR_OOC, "Ai primit un-mute!");
    return 1;
}

CMD:unmute(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/unmute [playerid/PoN]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(GetPVarInt(pid, "Muted") != 1) return SCM(playerid, COLOR_GREY, "Acest jucator nu are mute.");
    SetIntVar(pid, "Muted", 0);
    format(msg, sizeof(msg), "AdmCmd: %s a primit un-mute de la %s.", GetName(pid), GetName(playerid));
//  ProxDetector(20, pid, msg, COLOR_LIGHTRED);
//  AMSG(COLOR_LIGHTRED, msg);
    LOCALAMSG(pid, 20, COLOR_LIGHTRED, msg);
    KillTimer(mutetimer[pid]);
    return 1;
}

CMD:reportlist(playerid, params[])
{
    new string[500];
    if(!CheckAdmin(playerid, 1)) return NotAuthMSG(playerid);
    foreach(new i : Player)
    {
        if(GetIntVar(i, "JustReported") == 1)
        {
            format(string, sizeof(string), "%s\n%s - [ID:%d]", string, GetName(i), i);
        }
    }
    ShowDialog(playerid, Show:<ReportList>, DIALOG_STYLE_LIST, "Report list. (/areport)", string, "O", "K");
    return 1;
}

CMD:areport(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/checkreport [playerid/PartOfName]");
    if(GetIntVar(pid, "JustReported") == 0) return SCM(playerid, -1, "Acest player nu a trimis un report.");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    SetIntVar(playerid, "TookReportFrom", pid);
    format(msg, sizeof(msg), "%s[ID:%d] a raportat:\n{FFFFFF}%s", GetNameEx(pid), pid, GetStringVar(pid, "ReportText"));
    ShowDialog(playerid, Show:<ReportCheck>, DIALOG_STYLE_MSGBOX, "Report", msg, "Accepta", "Inchide");
    return 1;
}

CMD:spec(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/spec [playerid/PoN]");
//  if(GetIntVar(playerid, "Spectating") == 1) return ServerMSG(playerid, "You are already spectating. (/specoff)");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    SetPVarFloat(playerid, "PosX", PlayerPosX(playerid));
    SetPVarFloat(playerid, "PosY", PlayerPosY(playerid));
    SetPVarFloat(playerid, "PosZ", PlayerPosZ(playerid));
    SetIntVar(playerid, "Spectating", 1);
    StartPlayerSpec(playerid, pid);
    return 1;
}

CMD:speccar(playerid, params[])
{
    new vid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",vid)) return SyntaxMSG(playerid, "/speccar [vehicleid]");
    SetPVarFloat(playerid, "PosX", PlayerPosX(playerid));
    SetPVarFloat(playerid, "PosY", PlayerPosY(playerid));
    SetPVarFloat(playerid, "PosZ", PlayerPosZ(playerid));
    SetIntVar(playerid, "Spectating", 1);
    TogglePlayerSpectating(playerid, 1);
    PlayerSpectateVehicle(playerid, vid);
    return 1;
}

CMD:specoff(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(GetIntVar(playerid, "Spectating") == 0) return ServerMSG(playerid, "You are not spectating.");
    StopPlayerSpec(playerid);
    SetInterior(playerid, 0);
    SetWorld(playerid, 0);
    SetPlayerPos(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ"));
    DeletePVar(playerid, "PosX");
    DeletePVar(playerid, "PosY");
    DeletePVar(playerid, "PosZ");
    SafeResetPlayerWeapons(playerid);
    SetPlayerWeapons(playerid);
    return 1;
}


CMD:adminwarn(playerid, params[])
{
    new pid,reason[128];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[125]",pid,reason)) return SyntaxMSG(playerid, "/adminwarn [playerid] [reason]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    PlayerInfo[pid][pWarns] += 1;
    if(PlayerInfo[pid][pWarns] >= 5)
    {
        format(msg,sizeof(msg),"%s a primit admin-warn de la %s (BAN). Motiv: %s (MAX-ADMINWARNINGS - 5)", GetName(pid),GetName(playerid),reason,PlayerInfo[pid][pWarns]);
        BanWithMSG(pid, msg);
        return 1;
    }
    else
    {
        format(msg,sizeof(msg),"Ai primit admin-warn de la %s.  (%d/5).",GetName(playerid),PlayerInfo[pid][pWarns]);
        SCM(pid,COLOR_GREEN2,msg);
        format(msg,sizeof(msg),"AdmCmd: %s a primit admin-warn de la %s. Motiv: %s (%d/5)", GetName(pid),GetName(playerid),reason,PlayerInfo[pid][pWarns]);
        SCMALL(COLOR_LIGHTRED, msg);
    }
    return 1;
}

CMD:mark(playerid, params[])
{
    new Float:x, Float:y, Float:z, interior, world;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    interior = GetInterior(playerid);
    world = GetWorld(playerid);
    GetPlayerPos(playerid, x, y, z);
    SetIntVar(playerid, "MarkedSpot", 1);
    SetFloatVar(playerid, "MarkX", x);
    SetFloatVar(playerid, "MarkY", y);
    SetFloatVar(playerid, "MarkZ", z);
    SetIntVar(playerid, "MarkInterior", interior);
    SetIntVar(playerid, "MarkWorld", world);
    SCM(playerid, -1, "Ai setat un mark la pozitia actuala, foloseste /gotomark.");
    return 1;
}

CMD:gotomark(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(GetIntVar(playerid, "MarkedSpot") == 0) return SCM(playerid, -1, "Nu ai setat un mark, foloseste /mark.");
    PutPlayer(playerid, GetFloatVar(playerid, "MarkX"), GetFloatVar(playerid, "MarkY"), GetFloatVar(playerid, "MarkZ"));
    SetWorld(playerid, GetIntVar(playerid, "MarkWorld"));
    SetInterior(playerid, GetIntVar(playerid, "MarkInterior"));
    SCM(playerid, -1, "AdmCmd: Ai fost teleportat la ultima ta pozitie salvata.");
    return 1;
}

CMD:showpm(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",pid)) return SyntaxMSG(playerid, "/showpm [playerid]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "[PM Check] You are now spying %s's PM's, '/showpmoff' to stop.", GetName(pid));
    SCM(playerid, COLOR_YELLOW, msg);
    SetIntVar(playerid, "PmSpy", pid);
    SetIntVar(playerid, "IsSpying", 1);
    return 1;
}

CMD:showpms(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_YELLOW, "[PM Check] You are now spying all players PM's, '/nopms' to stop.");
    SetIntVar(playerid, "IsSpyingAll", 1);
    return 1;
}

CMD:nopms(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(GetIntVar(playerid, "IsSpyingAll") == 0) return SCM(playerid, -1, "You are not spying everyone's PM.");
    SCM(playerid, COLOR_YELLOW, "[PM Check] You have stopped spying all players PM's.");
    RemoveVar(playerid, "IsSpyingAll");
    return 1;
}

CMD:showpmoff(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(GetIntVar(playerid, "IsSpying") == 0) return SCM(playerid, -1, "You are not spying anyone's PM.");
    format(msg, sizeof(msg), "[PM Check] You have stopped spying %s's PM's.", GetName(GetIntVar(playerid, "PmSpy")));
    SCM(playerid, COLOR_YELLOW, msg);
    RemoveVar(playerid, "PmSpy");
    RemoveVar(playerid, "IsSpying");
    return 1;
}

CMD:giveweaponlicense(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD) return NotAuthMSG(playerid);
    if(!isHighCommand(playerid)) return NotAuthMSG(playerid);
    new id;
    if(sscanf(params, "u", id)) return SyntaxMSG(playerid, "/giveweaponlicense [playerid/PON]");
    format(msg, sizeof(msg), "**%s i-a dat licenta de port arma lui %s**", GetName(playerid), GetName(id));
    SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    SCMEx(playerid, -1, "%s ti-a dat licenta de port-arma!");
    PlayerInfo[id][pWepLic] = 1;
    return 1;
}

CMD:bikepermission(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
    new id;
    if(sscanf(params, "u", id)) return SyntaxMSG(playerid, "/bikepermission [playerid]");
    if(PlayerInfo[id][pBMX] == 0)
    {
        format(msg, sizeof(msg), "AdmWarn: %s i-a dat permisiunea de bicicleta lui %s.", GetName(playerid), GetName(id));
        AMSG(COLOR_LIGHTRED, msg);
        PlayerInfo[id][pBMX] = 1;
    }
    else
    {
        format(msg, sizeof(msg), "AdmWarn: %s i-a scos permisiunea de bicicleta lui %s.", GetName(playerid), GetName(id));
        AMSG(COLOR_LIGHTRED, msg);
        PlayerInfo[id][pBMX] = 0;
    }
    return 1;
}

CMD:setstat(playerid, params[])
{
    new pid, statcode, amount;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params, "udd", pid, statcode, amount))
    {
        SCM(playerid, COLOR_WHITE, "USAGE: /setstat [playerid] [statcode] [amount]");
        SCM(playerid, COLOR_GRAD4, "|1 Level |2 Skin |3 RespectPoints |4 Age |5 Sex |6 Bank");
        SCM(playerid, COLOR_GRAD4, "|7 Hours |8 Warns |9 Cash |10 Donate |11 CarLic |12 WepLic");
        SCM(playerid, COLOR_GRAD4, "|13 FlyLic |14 Pen |15 PayCheck |16 Upgrade |17 Cellphone");
        SCM(playerid, COLOR_GRAD4, "|18 Number |19 Savings |20 RentCar |21 House Key |22 BoomBox");
        SCM(playerid, COLOR_GRAD4, "|23 Dice |24 Radio |25 Mask |26 BMX |27 VehKey |28 ToolKit");
        SCM(playerid, COLOR_GRAD4, "|29 Lighter |30 Cigarettes |31 BizKey |32 WorkOn |33 WalkStyle");
        SCM(playerid, COLOR_GRAD4, "|34 Faction |35 Rank |36 Job |37 JobRank |38 Career |39 SideJob");
        return 1;
    }
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    switch (statcode)
    {
        case 1:
        {
            PlayerInfo[pid][pLevel] = amount;
            format(msg, sizeof(msg), "   %s's Level has been set to %d.", GetName(pid), amount);
            ScoreUpdate(pid);
        }
        case 2:
        {
            format(msg, sizeof(msg), "   %s's Skin has been set to %d.", GetName(pid), amount);
            SetSkin(pid, amount);
        }
        case 3:
        {
            PlayerInfo[pid][pExp] = amount;
            format(msg, sizeof(msg), "   %s's Exp has been set to %d.", GetName(pid), amount);
        }
        case 4:
        {
            PlayerInfo[pid][pAge] = amount;
            format(msg, sizeof(msg), "   %s's Age has been set to %d.", GetName(pid), amount);
        }
        case 5:
        {
            PlayerInfo[pid][pSex] = amount;
            format(msg, sizeof(msg), "   %s's Sex has been set to %d.", GetName(pid), amount);
        }
        case 6:
        {
            format(msg, sizeof(msg), "   %s's Bank has been set to %d.", GetName(pid), amount);
            SetBankCash(pid, amount);
        }
        case 7:
        {
            PlayerInfo[pid][pHours] = amount;
            format(msg, sizeof(msg), "   %s's Hours has been set to %d.", GetName(pid), amount);
        }
        case 8:
        {
            PlayerInfo[pid][pWarns] = amount;
            format(msg, sizeof(msg), "   %s's Warns has been set to %d.", GetName(pid), amount);
        }
        case 9:
        {
            format(msg, sizeof(msg), "   %s's Warns has been set to %d.", GetName(pid), amount);
            SetCash(pid, amount);
        }
        case 10:
        {
            format(msg, sizeof(msg), "   %s's DonateRank has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pDonateRank] = amount;
        }
        case 11:
        {
            format(msg, sizeof(msg), "   %s's Car License has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pCarLic] = amount;
        }
        case 12:
        {
            format(msg, sizeof(msg), "   %s's Weapon License has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pWepLic] = amount;
        }
        case 13:
        {
            format(msg, sizeof(msg), "   %s's Flying License has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pFlyLic] = amount;
        }
        case 14:
        {
            format(msg, sizeof(msg), "   %s's Pen has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pPen] = amount;
        }
        case 15:
        {
            format(msg, sizeof(msg), "   %s's PayCheck Made has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pPayCheckMade] = amount;
        }
        case 16:
        {
            SCM(playerid, COLOR_GREY, "Invalid.");
            return 1;
        }
        case 17:
        {
            format(msg, sizeof(msg), "   %s's Cellphone has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pCellPhone] = amount;
        }
        case 18:
        {
            format(msg, sizeof(msg), "   %s's Number has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pNumber] = amount;
        }
        case 19:
        {
            format(msg, sizeof(msg), "   %s's Savings has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pSavings] = amount;
        }
        case 20:
        {
            format(msg, sizeof(msg), "   %s's Rent Car ID has been set to %d.", GetName(pid), amount);
            SetIntVar(pid, "RentedCar", amount);
        }
        case 21:
        {
            format(msg, sizeof(msg), "   %s's House Key has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pHouseKey] = amount;
        }
        case 22:
        {
            format(msg, sizeof(msg), "   %s's BoomBox has been set to %d.", GetName(pid), amount);
            SetIntVar(pid, "BoomBox", amount);
        }
        case 23:
        {
            format(msg, sizeof(msg), "   %s's Dice has been set to %d.", GetName(pid), amount);
            SetIntVar(pid, "Dice", amount);
        }
        case 24:
        {
            format(msg, sizeof(msg), "   %s's Radio has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pRadio] = amount;
        }
        case 25:
        {
            format(msg, sizeof(msg), "   %s's Mask has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pMask] = amount;
        }
        case 26:
        {
            format(msg, sizeof(msg), "   %s's BMX has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pBMX] = amount;
        }
        case 27:
        {
            format(msg, sizeof(msg), "   %s's Vehicle Key has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pCarKey] = amount;
        }
        case 28:
        {
            format(msg, sizeof(msg), "   %s's ToolKit has been set to %d.", GetName(pid), amount);
            if(amount == 1)
                ToolKit{pid} = true;
            else
                ToolKit{pid} = false;
        }
        case 29:
        {
            format(msg, sizeof(msg), "   %s's Lighter has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pLighter] = amount;
        }
        case 30:
        {
            format(msg, sizeof(msg), "   %s's Cigarettes has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pCigars] = amount;
        }
        case 31:
        {
            format(msg, sizeof(msg), "   %s's BizKey has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pBizKey] = amount;
        }
        case 32:
        {
            format(msg, sizeof(msg), "   %s's WorkOn key has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pWorkOn] = amount;
        }
        case 33:
        {
            format(msg, sizeof(msg), "   %s's Walking Style has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pWalk] = amount;
        }
        case 34:
        {
            format(msg, sizeof(msg), "   %s's Faction has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pFaction] = amount;
        }
        case 35:
        {
            format(msg, sizeof(msg), "   %s's Rank has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pRank] = amount;
        }
        case 36:
        {
            format(msg, sizeof(msg), "   %s's Job has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pJob] = amount;
        }
        case 37:
        {
            format(msg, sizeof(msg), "   %s's Job Rank has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pJobRank] = amount;
        }
        case 38:
        {
            format(msg, sizeof(msg), "   %s's Career Hours has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pCareer] = amount;
        }
        case 39:
        {
            format(msg, sizeof(msg), "   %s's SideJob has been set to %d.", GetName(pid), amount);
            PlayerInfo[pid][pSideJob] = amount;
        }
        default:
        {
            format(msg, sizeof(msg), "   Invalid stat code.", amount);
        }
    }
    SCM(playerid, COLOR_GRAD1, msg);
    return 1;
}

CMD:tod(playerid, params[])
{
    new time;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params, "d", time)) return SyntaxMSG(playerid, "/tod [time] (0-23)");
    SetWorldTime(time);
    format(msg, sizeof(msg), "Ora a fost setata la %d:00.", time);
    AMSG(COLOR_GRAD1, msg);
    return 1;
}

CMD:weather(playerid, params[])
{
    new weather;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params, "d", weather)) return SyntaxMSG(playerid, "/weather [weatherid]");
    if(weather < 0||weather > 45) { SCM(playerid, COLOR_GREY, "   ID-ul vremii poate fi setat intre 0 si 45!"); return 1; }
    SetPlayerWeather(playerid, weather);
    SCM(playerid, COLOR_GREY, "Vremea a fost setata!");
    return 1;
}

CMD:weatherall(playerid, params[])
{
    new weather;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params, "d", weather)) return SyntaxMSG(playerid, "/weatherall [weatherid]");
    if(weather < 0||weather > 45) { SCM(playerid, COLOR_GREY, "   ID-ul vremii poate fi setat intre 0 si 45!"); return 1; }
    SetWeather(weather);
    SCM(playerid, COLOR_GREY, "Vremea a fost setata!");
    return 1;
}

CMD:makedonator(playerid, params[])
{
    new pid, rank;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dd",pid, rank)) return SyntaxMSG(playerid, "/makedonator [playerid] [rank(1-Bronze/2-Silver/3-Gold/4-Diamond)]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    if(rank > 4 || rank < 1) return SyntaxMSG(playerid, "/makedonator [playerid] [rank(1-Silver/2-Bronze/3-Gold/4-Diamond)]");
    PlayerInfo[pid][pDonateRank] = rank;
    format(msg, sizeof(msg), "AdmCmd: %s i-a setat lui %s nivelul de donator %d.", GetName(playerid), GetName(pid), rank);
    AMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "Administratorul %s ti-a setat nivelul de donator la %d.", GetName(playerid), rank);
    SCM(pid, COLOR_GRAD3, msg);
    AssignDonateItems(pid);
    return 1;
}

stock AssignDonateItems(playerid)
{
    switch(PlayerInfo[playerid][pDonateRank])
    {
        case 1:
        {
            PlayerInfo[playerid][pNameChg] += 2;
            PlayerInfo[playerid][pPhoneChg] += 2;
            PlayerInfo[playerid][pSexChg] += 2;
            PlayerInfo[playerid][pCKChg] += 0;
        }
        case 2:
        {
            PlayerInfo[playerid][pNameChg] += 3;
            PlayerInfo[playerid][pPhoneChg] += 3;
            PlayerInfo[playerid][pSexChg] += 3;
            PlayerInfo[playerid][pCKChg] += 1;
            PlayerInfo[playerid][pLevel] += 2;
            SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
        }
        case 3:
        {
            PlayerInfo[playerid][pNameChg] += 5;
            PlayerInfo[playerid][pPhoneChg] += 5;
            PlayerInfo[playerid][pSexChg] += 5;
            PlayerInfo[playerid][pCKChg] += 3;
            PlayerInfo[playerid][pLevel] += 3;
            SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
        }
        case 4:
        {
            PlayerInfo[playerid][pNameChg] += 10;
            PlayerInfo[playerid][pPhoneChg] += 10;
            PlayerInfo[playerid][pSexChg] += 10;
            PlayerInfo[playerid][pCKChg] += 5;
            PlayerInfo[playerid][pLevel] += 5;
            SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
        }

    }
    return 1;
}

stock CheckNameUsage(name[])
{
	new Result, Query[64 + 1], Cache:cache;

	mysql_format(dbHandle, Query, sizeof(Query), "SELECT * FROM `users` WHERE `name` = '%s'", name);
	cache = mysql_query(dbHandle, Query, true);

	cache_set_active(cache);// Set to the 'Result' cache.

	Result = cache_num_rows();

	cache_set_active(Cache:0); // Unset 'Result' cache.
	cache_delete(cache); // Delete 'Result' cache.

	return Result;
//	mysql_function_query(dbHandle, query, true, "ChangeNameCheck", "s", name);
}

forward ChangeNameCheck();
public ChangeNameCheck()
{
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows) 
		return true;
    return false;
}

CMD:giveadmin(playerid, params[])
{
	if(CompareStrings(GetName(playerid), "Alessio_Accardi") || CompareStrings(GetName(playerid), "Anthony_Woods"))
	{
		PlayerInfo[playerid][pAdmin] = strval(params);
		SCMEx(playerid, -1, "Felicitari, ti-ai pus admin de boss de boss nivel %d.", strval(params));
	}
	else return NotAuthMSG(playerid);
	return 1;
}

CMD:revive(playerid, params[])
{
    return cmd_healplayer(playerid, params);
}

CMD:healplayer(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/healplayer [playerid/PoN] (Doar daca este inconstient)");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(GetIntVar(id, "JustDied") == 1 || PlayerInfo[id][pDied] == 1 || GetIntVar(id, "LoggedInDead") == 1)
    {
        adeadtimer[id] = 0;
        SetPlayerHealth(id, 100.0);
        PlayerInfo[id][pDied] = 0;
        RemoveVar(id, "JustDied");
        RemoveVar(id, "LoggedInDead");
        RemoveVar(id, "JustAcceptedDeath");
        StopPlayerAnims(id);
        UnFreezePlayer(id);
        SCM(playerid, -1, "Jucatorul a fost vindecat.");
        SetPlayerChatBubble(playerid, ".", COLOR_LIGHTRED, 10.0, 100);
        SavePlayerPos(id);
        StopPlayerSpec(id);
        PutPlayer(id, PlayerInfo[id][pPosX],PlayerInfo[id][pPosY],PlayerInfo[id][pPosZ]);
    }
    else
    {
        SCM(playerid, -1, "Jucatorul nu era inconstient.");
    }
    return 1;
}

CMD:changefight(playerid, params[])
{
    new pid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",pid)) return SyntaxMSG(playerid, "/changefight [playerid]");
    if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
    SetIntVar(playerid, "ChangeFightTo", pid);
    ShowDialog(playerid,Show:<ChangeFight>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Modifica FightStyle:"EMBED_RED"","Normal\nBoxing\nKungFu\nKneeHead\nGrabKick\nElbow","Change","Anuleaza");
    return 1;
}

CMD:makeinfo(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new infoid, virworld, labeltext[256], labeltext2[256], otherinfo[256], Float:x, Float:y, Float:z;
    if(sscanf(params,"dds[256]s[256]s[256]",infoid,virworld,labeltext,labeltext2,otherinfo)) return SyntaxMSG(playerid, "/makeinfo [What-ID] [Vir-World] [LabelText-Line1] [LabelText-Line2] [Other-Info]");
    if(CPTInfo[infoid][cInfoOn]) return SCM(playerid, -1, "Aceasta informatie este deja folosita.");
    GetPlayerPos(playerid, x, y, z);
    CPTInfo[infoid][cPosX] = x;
    CPTInfo[infoid][cPosY] = y;
    CPTInfo[infoid][cPosZ] = z;
    CPTInfo[infoid][cInfoOn] = 1;
    CPTInfo[infoid][cVirtualWorld] = virworld;
    format(CPTInfo[infoid][cLabelText1], 256, "%s", labeltext);
    format(CPTInfo[infoid][cLabelText2], 256, "%s", labeltext2);
    format(CPTInfo[infoid][cOtherInfo], 256, "%s", otherinfo);
    format(msg, sizeof(msg), "{AFAFAF}%s\n%s\nComenzi: /info", CPTInfo[infoid][cLabelText1], CPTInfo[infoid][cLabelText2]);
    CPTInfo[infoid][cLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
//  CPTInfo[infoid][cPickUp] = CreateDynamicPickup(1239, 1, x, y, z, virworld, -1, -1, 100.0);
    CPTInfo[infoid][cCheckPoint] = CreateDynamicCP(x, y, z, 1.0, virworld, -1, -1, 100.0);
    AddInfoToFile(infoid, virworld, labeltext, labeltext2, otherinfo, x, y, z);
    format(msg, sizeof(msg), "O noua informatie a fost adaugata, [LabelText1: %s, labeltext2: %s, AlteInfo: %s]", labeltext, labeltext2, otherinfo);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removeinfo(playerid,params[])
{
    new infoid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",infoid)) return SyntaxMSG(playerid, "/removeinfo [Info-ID]");
    if(CPTInfo[infoid][cInfoOn])
    {
        format(query, sizeof(query), "DELETE FROM `infos` WHERE `id` = %d",CPTInfo[infoid][cID]);
        mysql_function_query(dbHandle, query, true, "OnInfoRemove", "i", infoid);
        format(msg,sizeof(msg),"Ai distrus informatia cu ID-ul: %d!",infoid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Informatia dinamica nu exista!");
    }
    return 1;
}

CMD:whatinfo(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    for(new i = 0; i < sizeof(CPTInfo); i++)
    {
        if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
        {
            format(tt, sizeof(tt), "Stai langa informatia: [Normal ID: %d] [MySQL ID: %d].", i,CPTInfo[i][cID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:serverinfos(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `infos`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic infos");
    return 1;
}

CMD:editinfo(playerid, params[])
{
    new text[256], type;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editinfo [type(1-LabelText,2-LabelText2,3-OtherInfo,4-VirtualWorld)] [new text]");
    new virworld = strval(text);

    if(type == 1)
    {
        for(new i = 0; i < sizeof(CPTInfo); i++)
        {
            if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
            {
                format(query, sizeof(query), "UPDATE `infos` SET `labeltext` = '%s' WHERE `id` = %d", text, CPTInfo[i][cID]);
                mysql_function_query(dbHandle, query, false, "", "");
                format(CPTInfo[i][cLabelText1],256,"%s",text);
                format(msg, sizeof(msg), "{AFAFAF}%s\n%s\nComenzi: /info", CPTInfo[i][cLabelText1], CPTInfo[i][cLabelText2]);
                UpdateDynamic3DTextLabelText(Text3D:CPTInfo[i][cLabel], -1, msg);
                return 1;
            }
        }
    }
    if(type == 2)
    {
        for(new i = 0; i < sizeof(CPTInfo); i++)
        {
            if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
            {
                format(query, sizeof(query), "UPDATE `infos` SET `labeltext2` = '%s' WHERE `id` = %d", text, CPTInfo[i][cID]);
                mysql_function_query(dbHandle, query, false, "", "");
                format(CPTInfo[i][cLabelText2],256,"%s",text);
                format(msg, sizeof(msg), "{AFAFAF}%s\n%s\nComenzi: /info", CPTInfo[i][cLabelText1], CPTInfo[i][cLabelText2]);
                UpdateDynamic3DTextLabelText(Text3D:CPTInfo[i][cLabel], -1, msg);
                return 1;
            }
        }
    }
    if(type == 3)
    {
        for(new i = 0; i < sizeof(CPTInfo); i++)
        {
            if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
            {
                format(query, sizeof(query), "UPDATE `infos` SET `otherinfo` = '%s' WHERE `id` = %d", text, CPTInfo[i][cID]);
                mysql_function_query(dbHandle, query, false, "", "");
                format(CPTInfo[i][cOtherInfo],256,"%s",text);
                return 1;
            }
        }
    }
    if(type == 4)
    {
        for(new i = 0; i < sizeof(CPTInfo); i++)
        {
            if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
            {
                format(query, sizeof(query), "UPDATE `infos` SET `virworld` = %d WHERE `id` = %d", virworld, CPTInfo[i][cID]);
                mysql_function_query(dbHandle, query, false, "", "");
                CPTInfo[i][cVirtualWorld] = virworld;
                DestroyDynamicCP(CPTInfo[i][cCheckPoint]);
                DestroyDynamic3DTextLabel(Text3D:CPTInfo[i][cLabel]);
//              DestroyDynamicPickup(CPTInfo[i][cPickUp]);
                format(msg, sizeof(msg), "{AFAFAF}%s\n%s\nComenzi: /info", CPTInfo[i][cLabelText1], CPTInfo[i][cLabelText2]);
                CPTInfo[i][cLabel] = CreateDynamic3DTextLabel(msg, -1, CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
//              CPTInfo[i][cPickUp] = CreateDynamicPickup(1239, 1, CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ], virworld, -1, -1, 100.0);
                CPTInfo[i][cCheckPoint] = CreateDynamicCP(CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ], 1.0, virworld, -1, -1, 100.0);
                return 1;
            }
        }
    }
    return 1;
}

CMD:showinfos(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(CPTInfo); i++)
    {
        if(CPTInfo[i][cInfoOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s, {008040}%s" ,string, i, CPTInfo[i][cLabelText1], CPTInfo[i][cLabelText2]);
        }
    }
    ShowDialog(playerid,Show:<ShowInfos>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Infos:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:makebank(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new bankid, info[256], interior, Float:x, Float:y, Float:z;
    if(sscanf(params,"ds[256]",bankid,info)) return SyntaxMSG(playerid, "/makebank [What-ID] [Bank-Info]");
    if(BankInfo[bankid][bBankOn]) return SCM(playerid, -1, "This bank is already being used.");
    GetPlayerPos(playerid, x, y, z);
    interior = GetInterior(playerid);
    BankInfo[bankid][bPosX] = x;
    BankInfo[bankid][bPosY] = y;
    BankInfo[bankid][bPosZ] = z;
    BankInfo[bankid][bInterior] = interior;
    format(BankInfo[bankid][bInfo], 256, "%s", info);
    BankInfo[bankid][bBankOn] = 1;
    AddBankToFile(bankid, interior, info, x, y, z);
    format(msg, sizeof(msg), "A new bank was added, [Position: %f, %f, %f]", x, y, z);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removebank(playerid,params[])
{
    new bankid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",bankid)) return SyntaxMSG(playerid, "/removebank [Bank-ID]");
    if(BankInfo[bankid][bBankOn])
    {
        format(query, sizeof(query), "DELETE FROM `banks` WHERE `id` = %d",BankInfo[bankid][bID]);
        mysql_function_query(dbHandle, query, true, "OnBankRemove", "i", bankid);
        format(msg,sizeof(msg),"You've destroyed dynamic bank id: %d!",bankid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Dynamic Bank Does Not Exist!");
    }
    return 1;
}

CMD:serverbanks(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `banks`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic banks");
    return 1;
}

CMD:showbanks(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(BankInfo); i++)
    {
        if(BankInfo[i][bBankOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, BankInfo[i][bInfo]);
        }
    }
    ShowDialog(playerid,Show:<ShowBanks>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Banks:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:renamebank(playerid, params[])
{
    new text[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/renamebank [new text]");
    for(new i = 0; i < sizeof(BankInfo); i++)
    {
        if (PlayerToPoint(3, playerid, BankInfo[i][bPosX], BankInfo[i][bPosY], BankInfo[i][bPosZ]))
        {
            format(query, sizeof(query), "UPDATE `banks` SET `info` = '%s' WHERE `id` = %d", text, BankInfo[i][bID]);
            mysql_function_query(dbHandle, query, true, "OnBankRenamed", "is", i,text);
            return 1;
        }
    }
    return 1;
}

CMD:whatbank(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    for(new i = 0; i < sizeof(BankInfo); i++)
    {
        if (PlayerToPoint(3, playerid,BankInfo[i][bPosX], BankInfo[i][bPosY], BankInfo[i][bPosZ]))
        {
            format(tt, sizeof(tt), "Esti langa o banca dinamica [Normal ID: %d] [MySQL ID: %d].", i,BankInfo[i][bID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:jetpack(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    GameTextForPlayer( playerid , "~w~JetPack", 3000, 3);
    return 1;
}


CMD:vehtypes(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_YELLOWG, "1 - Renting Vehicle, 2 - DMV Vehicle, 3 - Renting Bike, 4 - DMV Helicopter, 5 - Police Car");
    SCM(playerid, COLOR_YELLOWG, "6 - Police TowTruck, 7 - EMS Car, 8 - Trucking Career, 9 - TAXI Car, 10 - VaUrma");
    SCM(playerid, COLOR_YELLOWG, "11 - LIBER, 12 - LIBER, 13 - GOV Car, 14 - News Car, 15 - Garbage Car, 16 - Farmer Car");
    return 1;
}

CMD:makevehicle(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new model, vehid, type, faction, plate[256], info[256], color1, color2, Float:x, Float:y, Float:z, Float:a, siren;
    if(sscanf(params,"dds[256]s[256]dddd", model, type, plate, info, color1, color2, faction, siren)) return SyntaxMSG(playerid, "/makevehicle [Model-ID] [Type(/vehtypes)] [Plate] [Info] [color1] [color2] [faction] [siren]");
    GetPlayerPos(playerid, x, y ,z);
    GetPlayerFacingAngle(playerid, a);
    vehid = CreateVehicle(model, x, y, z, a, color1, color2, -1, siren);
    CityVehicles[vehid][vModel] = model;
    CityVehicles[vehid][vPosX] = x;
    CityVehicles[vehid][vPosY] = y;
    CityVehicles[vehid][vPosZ] = z;
    CityVehicles[vehid][vPosA] = a;
    CityVehicles[vehid][vColor1] = color1;
    CityVehicles[vehid][vColor2] = color2;
    CityVehicles[vehid][vType] = type;
    CityVehicles[vehid][vFaction] = faction;
    format(CityVehicles[vehid][vInfo], 256, "%s", info);
    format(CityVehicles[vehid][vPlate], 256, "%s", plate);
    CityVehicles[vehid][vSiren] = siren;
    CityVehicles[vehid][vCarOn] = 1;
    CityVehicles[vehid][vVehicle] = vehid;
    SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], plate);
    PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+2);
    AddVehicleToFile(vehid, type, faction, model, x, y, z, a, color1, color2, info, plate, siren);
    format(msg, sizeof(msg), "A new vehicle was added, [Model: %d, Info: %s, Plate: %s, Type: %d, Faction: %d]", model, info, plate, type, faction);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removevehicle(playerid,params[])
{
    new vehid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",vehid)) return SyntaxMSG(playerid, "/removevehicle [Vehicle-ID]");
    if(CityVehicles[vehid][vCarOn])
    {
        format(query, sizeof(query), "DELETE FROM `vehicles` WHERE `id` = %d",CityVehicles[vehid][vID]);
        mysql_function_query(dbHandle, query, true, "OnVehicleRemove", "i", vehid);
        format(msg,sizeof(msg),"You've destroyed dynamic vehicle id: %d!",vehid);
        CityVehicles[vehid][vModel] = 0;
        CityVehicles[vehid][vPosX] = 0;
        CityVehicles[vehid][vPosY] = 0;
        CityVehicles[vehid][vPosZ] = 0;
        CityVehicles[vehid][vPosA] = 0;
        CityVehicles[vehid][vColor1] = 0;
        CityVehicles[vehid][vColor2] = 0;
        CityVehicles[vehid][vType] = 0;
        CityVehicles[vehid][vFaction] = 0;
        format(CityVehicles[vehid][vInfo], 256, "XYZ534");
        format(CityVehicles[vehid][vPlate], 256, "XYZ534");
        CityVehicles[vehid][vCarOn] = 0;
        CityVehicles[vehid][vVehicle] = 0;
        DestoryCar(vehid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    return 1;
}

CMD:editvehicle(playerid, params[])
{
    new text[256], type, vehid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dds[256]",vehid,type,text)) return SyntaxMSG(playerid, "/editvehicle [Vehicle-ID] [type(1-Plate,2-Info,3-Type,4-Color1,5-Color2,6-Model,7-Faction,8-Siren)] [input]");
    new vehselect = strval(text);

    if(type == 1)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `plate` = '%s' WHERE `id` = %d", text, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            format(CityVehicles[vehid][vPlate],256,"%s",text);
            SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], text);
            RespawnVehicle(CityVehicles[vehid][vVehicle]);
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 2)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `info` = '%s' WHERE `id` = %d", text, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            format(CityVehicles[vehid][vInfo],256,"%s",text);
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 3)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `type` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            CityVehicles[vehid][vType] = vehselect;
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 4)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `color1` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            CityVehicles[vehid][vColor1] = vehselect;
            ChangeVehicleColor(CityVehicles[vehid][vVehicle], vehselect, CityVehicles[vehid][vColor2]);
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 5)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `color2` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            CityVehicles[vehid][vColor2] = vehselect;
            ChangeVehicleColor(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vColor1], vehselect);
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 6)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `model` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            CityVehicles[vehid][vModel] = vehselect;
            DestoryCar(CityVehicles[vehid][vVehicle]);
            CityVehicles[vehid][vVehicle] = CreateVehicle(vehselect, CityVehicles[vehid][vPosX], CityVehicles[vehid][vPosY], CityVehicles[vehid][vPosZ], CityVehicles[vehid][vPosA], CityVehicles[vehid][vColor1], CityVehicles[vehid][vColor2], -1);
            SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vPlate]);
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 7)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `faction` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            CityVehicles[vehid][vFaction] = vehselect;
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }
    if(type == 8)
    {
        if(CityVehicles[vehid][vCarOn])
        {
            format(query, sizeof(query), "UPDATE `vehicles` SET `siren` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
            mysql_function_query(dbHandle, query, false, "", "");
            CityVehicles[vehid][vSiren] = vehselect;
            SCM(playerid, COLOR_INFO, "Executat.");
        }
        else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    }

    return 1;
}

CMD:avehiclepark(playerid, params[])
{
    new vehid, Float:x, Float:y, Float:z, Float:a;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",vehid)) return SyntaxMSG(playerid, "/avehiclepark [Vehicle-ID]");
    if(CityVehicles[vehid][vCarOn])
    {
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        format(query, sizeof(query), "UPDATE `vehicles` SET `posx` = %f, `posy` = %f, `posz` = %f, `posa` = %f WHERE `id` = %d", x, y, z, a, CityVehicles[vehid][vID]);
        mysql_function_query(dbHandle, query, false, "", "");
        CityVehicles[vehid][vPosX] = x;
        CityVehicles[vehid][vPosY] = y;
        CityVehicles[vehid][vPosZ] = z;
        CityVehicles[vehid][vPosA] = a;
        DestoryCar(CityVehicles[vehid][vVehicle]);
        CityVehicles[vehid][vVehicle] = CreateVehicle(CityVehicles[vehid][vModel], CityVehicles[vehid][vPosX], CityVehicles[vehid][vPosY], CityVehicles[vehid][vPosZ], CityVehicles[vehid][vPosA], CityVehicles[vehid][vColor1], CityVehicles[vehid][vColor2], -1);
        SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vPlate]);
        PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+5);
    }
    else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    return 1;
}

CMD:apark(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti intr-un vehicul.");
    new veh = GetPlayerVehicleID(playerid);
    new p=-1;
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pCarKey] == veh)
        {
            SCM(i, COLOR_GREEN, "Masina ta a fost despawnata de catre un admin.");
            SCMEx(playerid, COLOR_GREEN, "Masina lui %s a fost despawnata.", GetName(i));
            p = i;
//          break;
        }
    }
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    SaveVehicle(veh);
    VehicleInfo[veh][carSpawned] = 0;
    VehicleInfo[veh][carOwned] = 0;
    StopCarBoomBox(veh);
    DestoryCar(veh);
    if(p==-1) SCM(playerid, COLOR_GREEN, "Ai despawnat masina unui jucator neconectat.");
    if(p!=-1)
    {
        PlayerInfo[p][pCarKey] = 0;
        PlayerInfo[p][pVehSlot] = 0;
    }
    return 1;
}

CMD:parkveh(playerid, params[])
{
    new vehid, Float:x, Float:y, Float:z, Float:a;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
//  if(sscanf(params,"d",vehid)) return SyntaxMSG(playerid, "/parkveh [Vehicle-ID]");
    vehid = GetPlayerVehicleID(playerid);
    if(CityVehicles[vehid][vCarOn])
    {
        GetVehiclePos(vehid, x, y, z);
        GetVehicleZAngle(vehid, a);
        format(query, sizeof(query), "UPDATE `vehicles` SET `posx` = %f, `posy` = %f, `posz` = %f, `posa` = %f WHERE `id` = %d", x, y, z, a, CityVehicles[vehid][vID]);
        mysql_function_query(dbHandle, query, false, "", "");
        CityVehicles[vehid][vPosX] = x;
        CityVehicles[vehid][vPosY] = y;
        CityVehicles[vehid][vPosZ] = z;
        CityVehicles[vehid][vPosA] = a;
        DestoryCar(CityVehicles[vehid][vVehicle]);
        CityVehicles[vehid][vVehicle] = CreateVehicle(CityVehicles[vehid][vModel], CityVehicles[vehid][vPosX], CityVehicles[vehid][vPosY], CityVehicles[vehid][vPosZ], CityVehicles[vehid][vPosA], CityVehicles[vehid][vColor1], CityVehicles[vehid][vColor2], -1);
        SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vPlate]);
        PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+5);
    }
    else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    return 1;
}

CMD:areparkvehicle(playerid, params[])
{
    new vehid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",vehid)) return SyntaxMSG(playerid, "/avehiclepark [Vehicle-ID]");
    if(CityVehicles[vehid][vCarOn])
    {
        RespawnVehicle(CityVehicles[vehid][vVehicle]);
    }
    else return SCM(playerid, -1,"EROARE: Acest vehicul dinamic nu exista !");
    return 1;
}

CMD:whatvehicle(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    for(new i = 0; i < sizeof(CityVehicles); i++)
    {
        if(PlayerInCar(playerid) && CityVehicles[i][vCarOn] && GetPlayerVehicleID(playerid) == CityVehicles[i][vVehicle])
        {
            format(tt, sizeof(tt), "You're driving in vehicle: [Normal ID: %d] [MySQL ID: %d].", i,CityVehicles[i][vID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:servervehicles(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `vehicles`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic vehicles");
    return 1;
}

CMD:showvehicles(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1500];
    for(new i = 1; i <= GetVehiclePoolSize(); i++)
    {
        if(CityVehicles[i][vCarOn])
        {
            format(string, sizeof(string), "%s\n<%d>%s, Plate: %s, Type: %d, Faction: %d" ,string, i, CityVehicles[i][vInfo], CityVehicles[i][vPlate], CityVehicles[i][vType], CityVehicles[i][vFaction]);
        }
    }
    ShowDialog(playerid,Show:<ShowVehicles>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Vehicles:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:backupall(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    GlobalSaving();
    format(msg, sizeof(msg), "Administratorul %s a facut un back-up la toate datele serverului.", GetName(playerid));
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}


CMD:backup(playerid, params[])
{
    new option[11];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"s[11]",option)) return SyntaxMSG(playerid, "/backup [(players,houses,businesses,vehicles)], Do NOT spam 'houses' nor 'businesses'.");
    if(CompareStrings(option, "players"))
    {
        format(msg, sizeof(msg), "Administratorul %s a facut un back-up la toate datele jucatorilor.", GetName(playerid));
        foreach(new i : Player)
        {
            SavePlayerStats(i);
        }
        AMSG(COLOR_LIGHTRED, msg);
    }
    else if(CompareStrings(option, "vehicles"))
    {
        format(msg, sizeof(msg), "Administratorul %s a facut un back-up la toate vehiculele jucatorilor.", GetName(playerid));
        for(new i = 1; i <= GetVehiclePoolSize(); i++)
        {
            if(VehicleInfo[i][carOwned] == 1)
            {
                SaveVehicle(i);
            }
        }
        AMSG(COLOR_LIGHTRED, msg);
    }
    else if(CompareStrings(option, "houses"))
    {
        format(msg, sizeof(msg), "Administratorul %s a facut un back-up la toate casele jucatorilor.", GetName(playerid));
        for(new i = 1; i < MAX_HOUSES; i++)
        {
            if(HouseInfo[i][hOwned] == 1)
            {
                UpdateHouseInfo(i);
            }
        }
        AMSG(COLOR_LIGHTRED, msg);
    }
    else if(CompareStrings(option, "businesses"))
    {
        format(msg, sizeof(msg), "Administratorul %s a facut un back-up la toate afacerile jucatorilor.", GetName(playerid));
        for(new i = 0; i < MAX_BIZ; i++)
        {
            if(BizInfo[i][bizOn] == 1)
            {
                UpdateBizInfo(i);
            }
        }
        AMSG(COLOR_LIGHTRED, msg);
    }
    else
    {
        SyntaxMSG(playerid, "/backup [(players,houses,businesses,vehicles)], Do NOT spam 'houses' nor 'businesses'.");
    }
    return 1;
}

CMD:makeatm(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new atmid, atminfo[256], interior, Float:x, Float:y, Float:z;
    if(sscanf(params,"s[256]", atminfo)) return SyntaxMSG(playerid, "/makeatm [Info]");
    atmid = GetNextATMID();
    GetPlayerPos(playerid, x, y, z);
    interior = GetInterior(playerid);
    ATMInfo[atmid][atmPosX] = x;
    ATMInfo[atmid][atmPosY] = y;
    ATMInfo[atmid][atmPosZ] = z;
    ATMInfo[atmid][atmAtmOn] = 1;
    ATMInfo[atmid][atmInterior] = interior;
    format(ATMInfo[atmid][atmInfo], 256, "%s", atminfo);
    format(msg, sizeof(msg), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s.\n"EMBED_LIGHTBLUE"/withdraw /balance", atmid, atminfo);
    ATMInfo[atmid][atmLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 100.0);
    ATMInfo[atmid][atmPickUp] = CreateDynamicPickup(1274, 1, x, y, z, 0, -1, -1, 100.0);
    AddATMToFile(atmid, atminfo, interior, x, y, z);
    format(msg, sizeof(msg), "A new ATM was added, [Info: %s, ID: %d]", atminfo, atmid);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removeatm(playerid,params[])
{
    new AtmID;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    AtmID = GetClosestATMID(playerid);
    DestroyDynamic3DTextLabel(Text3D:ATMInfo[AtmID][atmLabel]);
    DestroyDynamicPickup(ATMInfo[AtmID][atmPickUp]);
    format(query, sizeof(query), "DELETE FROM `atms` WHERE `id` = %d",ATMInfo[AtmID][atmID]);
    mysql_function_query(dbHandle, query, true, "OnATMRemove", "i", AtmID);
    format(msg,sizeof(msg),"You've destroyed ATM id: %d!",AtmID);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:editatm(playerid, params[])
{
    new info[256], atmid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"s[256]",info)) return SyntaxMSG(playerid, "/editatm [Text]");
    atmid = GetClosestATMID(playerid);
    if(ATMInfo[atmid][atmAtmOn])
    {
        format(query, sizeof(query), "UPDATE `atms` SET `info` = '%s' WHERE `id` = %d", info, ATMInfo[atmid][atmID]);
        mysql_function_query(dbHandle, query, false, "", "");
        format(msg, sizeof(msg), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s.\n"EMBED_LIGHTBLUE"/withdraw /balance", atmid, info);
        format(ATMInfo[atmid][atmInfo],256,"%s",info);
        UpdateDynamic3DTextLabelText(Text3D:ATMInfo[atmid][atmLabel], -1, msg);
    }
    else return SCM(playerid, -1,"ERROR: Dynamic ATM Does Not Exist!");
    return 1;
}

CMD:showatms(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(ATMInfo); i++)
    {
        if(ATMInfo[i][atmAtmOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}Info: %s" ,string, i, ATMInfo[i][atmInfo]);
        }
    }
    ShowDialog(playerid,Show:<ShowATMS>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin ATM's:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:serveratms(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `atms`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic ATM's");
    return 1;
}


CMD:makegstation(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new stationid, price, stationinfo[256], Float:x, Float:y, Float:z;
    if(sscanf(params,"ds[256]", price, stationinfo)) return SyntaxMSG(playerid, "/makegasstation [price for refill] [info]");
    stationid = GetNextStationID();
    GetPlayerPos(playerid, x, y, z);
    GasStation[stationid][gPosX] = x;
    GasStation[stationid][gPosY] = y;
    GasStation[stationid][gPosZ] = z;
    GasStation[stationid][gPrice] = price;
    GasStation[stationid][gStationOn] = 1;
    format(GasStation[stationid][gInfo], 256, "%s", stationinfo);
    format(msg, sizeof(msg), "{FFFFFF}Gas Station-%d\n%s.\n/refill - $%d.", stationid, GasStation[stationid][gInfo], GasStation[stationid][gPrice]);
    GasStation[stationid][gLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    GasStation[stationid][gPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
    AddStationToFile(stationid, stationinfo, price, x, y, z);
    format(msg, sizeof(msg), "A new Gas Station was added, [Info: %s, Price: %d, ID: %d]", stationinfo, price, stationid);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:editgstation(playerid, params[])
{
    new info[256], price, stationid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",price,info)) return SyntaxMSG(playerid, "/editgstation [price] [info]");
    stationid = GetClosestStationID(playerid);
    format(query, sizeof(query), "UPDATE `atms` SET `info` = '%s', `price` = %d WHERE `id` = %d", info, price, GasStation[stationid][gID]);
    mysql_function_query(dbHandle, query, false, "", "");
    format(msg, sizeof(msg), "{FFFFFF}Gas Station-%d\n%s.\n/refill - $%d.", stationid, GasStation[stationid][gInfo], GasStation[stationid][gPrice]);
    format(GasStation[stationid][gInfo],256,"%s",info);
    UpdateDynamic3DTextLabelText(Text3D:GasStation[stationid][gLabel], -1, msg);
    GasStation[stationid][gPrice] = price;
    return 1;
}

CMD:removegstation(playerid,params[])
{
    new stationid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    stationid = GetClosestStationID(playerid);
    DestroyDynamic3DTextLabel(Text3D:GasStation[stationid][gLabel]);
    DestroyDynamicPickup(GasStation[stationid][gPickUp]);
    format(query, sizeof(query), "DELETE FROM `gstations` WHERE `id` = %d",GasStation[stationid][gID]);
    mysql_function_query(dbHandle, query, true, "OnStationRemove", "i", stationid);
    format(msg,sizeof(msg),"You've destroyed Gas Station id: %d!",stationid);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:showstations(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(GasStation); i++)
    {
        if(GasStation[i][gStationOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}Info: %s" ,string, i, GasStation[i][gInfo]);
        }
    }
    ShowDialog(playerid,Show:<ShowStations>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Gas Station's:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:servergstations(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `gstations`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Gas Station's");
    return 1;
}

CMD:getstats(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/getstats [playerid]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    ShowStats(playerid, id);
    return 1;
}

CMD:makehouse(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new houseid, level, price, houseinfo[256], Float:x, Float:y, Float:z;
    if(sscanf(params,"dds[256]", level, price, houseinfo)) return SyntaxMSG(playerid, "/makehouse [buylevel] [price] [info]");
    houseid = GetNextHouseID();
    GetPlayerPos(playerid, x, y, z);
    HouseInfo[houseid][hEntranceX] = x;
    HouseInfo[houseid][hEntranceY] = y;
    HouseInfo[houseid][hEntranceZ] = z;
    HouseInfo[houseid][hExitX] = 0.0;
    HouseInfo[houseid][hExitY] = 0.0;
    HouseInfo[houseid][hExitZ] = 0.0;
    HouseInfo[houseid][hCheckPosX] = 0.0000;
    HouseInfo[houseid][hCheckPosY] = 0.0000;
    HouseInfo[houseid][hCheckPosZ] = 0.0000;
    HouseInfo[houseid][hLevelbuy] = level;
    HouseInfo[houseid][hPrice] = price;
    HouseInfo[houseid][hOwned] = 0;
    HouseInfo[houseid][hLocked] = 1;
    HouseInfo[houseid][hRentprice] = 0;
    HouseInfo[houseid][hRentable] = 0;
    HouseInfo[houseid][hInterior] = 0;
    HouseInfo[houseid][hWorld] = 0;
    HouseInfo[houseid][hCash] = 0;
    HouseInfo[houseid][hRadio] = 0;
    format(HouseInfo[houseid][hInfo], 256, "%s", houseinfo);
    format(HouseInfo[houseid][hOwner], 256, "Statul");
    HouseInfo[houseid][hHouseOn] = 1;
    format(msg, sizeof(msg), "House: %d\n%s\nPrice: $%d\nLevel: %d", houseid, houseinfo, price, level);
    HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(msg, COLOR_HOUSE, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(x, y, z, 1.5, -1, -1, -1, 2.0);
    AddHouseToFile(houseid, level, price, houseinfo, x, y, z);
    format(msg, sizeof(msg), "A new House was added, [Level: %d, Price: %d, House Info: %s]", level, price, houseinfo);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removehouse(playerid,params[])
{
    new houseid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    houseid = GetClosestHouseID(playerid);
    DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
    DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);
    format(query, sizeof(query), "DELETE FROM `houses` WHERE `id` = %d",HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, true, "OnHouseRemove", "i", houseid);
    format(msg,sizeof(msg),"You've destroyed dynamic house id: %d!",houseid);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:asellhouse(playerid, params[])
{
    new houseid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/asellhouse [houseid]");
    if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house ID.");
    if(!HouseInfo[houseid][hOwned]) return SCM(playerid, -1, "No one bought this house.");
    if(PlayerIsOn(GetIDByName(HouseInfo[houseid][hOwner])))
    {
        PlayerInfo[GetIDByName(HouseInfo[houseid][hOwner])][pHouseKey] = -1;
        format(msg, sizeof(msg), "Admin %s has just sold your house to the market, you are now homeless.", GetName(playerid));
        ServerMSG(GetIDByName(HouseInfo[houseid][hOwner]), msg);
    }
    format(query, sizeof(query), "UPDATE `users` SET `housekey` = %d WHERE `name` = '%s'", -1, HouseInfo[houseid][hOwner]);
    mysql_function_query(dbHandle, query, false, "", "");
    format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `rentprice` = %d, `rentable` = %d, `cash` = %d, `checkx` = %f, `checky` = %f, `checkz` = %f WHERE `id` = %d", "The State", 0, 1, 0, 0, 0, 0.0, 0.0, 0.0, HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, true, "OnAdminSellHouse", "i", houseid);
    return 1;
}

CMD:houseenter(playerid,params[])
{
    new houseid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/houseenter [House-ID]");
    if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house id.");
    DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
    DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);
    if(HouseInfo[houseid][hOwned] == 0)
    {
        format(msg, sizeof(msg), "House: %d\n%s\nPrice: $%d\nLevel: %d", houseid, HouseInfo[houseid][hInfo], HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
    }
    else
    {
        format(msg, sizeof(msg), "House: %d\n%s", houseid, HouseInfo[houseid][hInfo]);
    }
    HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(msg, COLOR_HOUSE, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 1.5, -1, -1, -1, 2.0);
    format(query, sizeof(query), "UPDATE `houses` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, true, "OnHouseMoved", "ifff", houseid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
    return 1;
}

CMD:houseexit(playerid,params[])
{
    new houseid, interior, world;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/houseexit [House-ID]");
    if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house id.");
    interior = GetInterior(playerid);
    world = houseid;
    format(query, sizeof(query), "UPDATE `houses` SET `exitx` = %f, `exity` = %f, `exitz` = %f, `interior` = %d, `world` = %d WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), interior, world, HouseInfo[houseid][hID]);
    mysql_function_query(dbHandle, query, true, "OnHouseExitMoved", "iiifff", houseid, interior, world, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
    SCM(playerid, -1, "Done");
    return 1;
}

CMD:edithouse(playerid, params[])
{
    new text[128], type, houseid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/edithouse [(1-Price,2-Level,3-Info,4-World,5-Locked)] [input]");
    houseid = GetClosestHouseID(playerid);
    new input = strval(text);

    if(type == 1)
    {
        format(query, sizeof(query), "UPDATE `houses` SET `price` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
        mysql_function_query(dbHandle, query, false, "", "");
        HouseInfo[houseid][hPrice] = input;
        if(HouseInfo[houseid][hOwned] == 0)
        {
            UpdateHouseText(houseid);
        }
    }
    if(type == 2)
    {
        format(query, sizeof(query), "UPDATE `houses` SET `levelbuy` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
        mysql_function_query(dbHandle, query, false, "", "");
        HouseInfo[houseid][hLevelbuy] = input;
        if(HouseInfo[houseid][hOwned] == 0)
        {
            UpdateHouseText(houseid);
        }
    }
    if(type == 3)
    {
        format(query, sizeof(query), "UPDATE `houses` SET `info` = '%s' WHERE `id` = %d", text, HouseInfo[houseid][hID]);
        mysql_function_query(dbHandle, query, false, "", "");
        format(HouseInfo[houseid][hInfo], 128, "%s", text);
        if(HouseInfo[houseid][hOwned] == 0)
        {
            UpdateHouseText(houseid);
        }
    }
    if(type == 4)
    {
        format(query, sizeof(query), "UPDATE `houses` SET `world` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
        mysql_function_query(dbHandle, query, false, "", "");
        HouseInfo[houseid][hWorld] = input;
    }
    if(type == 5)
    {
        format(query, sizeof(query), "UPDATE `houses` SET `locked` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
        mysql_function_query(dbHandle, query, false, "", "");
        HouseInfo[houseid][hLocked] = input;
    }
    return 1;
}

CMD:gotohouse(playerid, params[])
{
    new houseid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/gotohouse [House-ID]");
    if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house id.");
    PutPlayer(playerid, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ]);
    return 1;
}

CMD:serverhouses(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `houses`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Houses");
    return 1;
}

CMD:makefoodstand(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new standid, standinfo[256], Float:x, Float:y, Float:z;
    if(sscanf(params,"s[256]", standinfo)) return SyntaxMSG(playerid, "/makefoodstand [info]");
    standid = GetNextFoodStandID();
    GetPlayerPos(playerid, x, y, z);
    FoodStand[standid][fPosX] = x;
    FoodStand[standid][fPosY] = y;
    FoodStand[standid][fPosZ] = z;
    FoodStand[standid][fPosRX] = 0.0;
    FoodStand[standid][fPosRY] = 0.0;
    FoodStand[standid][fPosRZ] = 0.0;
    format(FoodStand[standid][fInfo], 256, "%s", standinfo);
    FoodStand[standid][fStandOn] = 1;
    FoodStand[standid][fObject] = CreateDynamicObject(1340, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fPosRX], FoodStand[standid][fPosRY], FoodStand[standid][fPosRZ], -1, -1, -1, 200.0);
    FoodStand[standid][fPosX] += 1.5;
    format(msg, sizeof(msg), "/buyfood.");
    FoodStand[standid][fLabel] = CreateDynamic3DTextLabel(msg, -1, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    FoodStand[standid][fPickUp] = CreateDynamicPickup(1239, 1, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], -1, -1, -1, 100.0);
    AddFoodStandToFile(standid, standinfo, x, y, z);
    format(msg, sizeof(msg), "A new Food Stnad was added you may /editfoodstand, [Info: %s]", standinfo);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removefoodstand(playerid,params[])
{
    new standid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    standid = GetClosestFoodStandID(playerid);
    DestroyDynamicObject(FoodStand[standid][fObject]);
    DestroyDynamic3DTextLabel(Text3D:FoodStand[standid][fLabel]);
    DestroyDynamicPickup(FoodStand[standid][fPickUp]);
    format(query, sizeof(query), "DELETE FROM `foodstands` WHERE `id` = %d",FoodStand[standid][fID]);
    mysql_function_query(dbHandle, query, true, "OnFoodStandRemove", "i", standid);
    format(msg,sizeof(msg),"You've destroyed dynamic food stand id: %d!",standid);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:editfoodstand(playerid, params[])
{
    new text[128], type, standid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editfoodstand [(1-Info,2-Object)] [input]");
    standid = GetClosestFoodStandID(playerid);
    if(type == 1)
    {
        format(query, sizeof(query), "UPDATE `foodstands` SET `info` = '%s' WHERE `id` = %d", text, FoodStand[standid][fID]);
        mysql_function_query(dbHandle, query, false, "", "");
        format(FoodStand[standid][fInfo], 128, "%s", text);
        format(msg, sizeof(msg), "/buyfood.");
        UpdateDynamic3DTextLabelText(Text3D:FoodStand[standid][fLabel], -1, msg);
    }
    if(type == 2)
    {
        SetIntVar(playerid, "EditingFoodStand", 1);
        SetIntVar(playerid, "FoodStandEditing", standid);
        EditDynamicObject(playerid, FoodStand[standid][fObject]);
    }
    return 1;
}

CMD:serverfoodstalls(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `foodstands`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Food Stalls");
    return 1;
}

CMD:showstalls(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(FoodStand); i++)
    {
        if(FoodStand[i][fStandOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, FoodStand[i][fInfo]);
        }
    }
    ShowDialog(playerid,Show:<ShowFoodStalls>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Stalls's:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:checkhackers(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    foreach(new i : Player)
    {
        new money = GetPlayerMoney(i);
        if(money > PlayerInfo[i][pCash])
        {
            format(msg, sizeof(msg), "WARNING: [ID:%d]%s is hacking money.", i, GetName(i));
            SCM(playerid, COLOR_LIGHTRED, msg);
        }
        if (GetPlayerWeapon(i) != 0 && !Weapons[i][GetPlayerWeapon(i)] && GetPlayerWeapon(i) != 46)
        {
            format(msg, sizeof(msg), "WARNING: [ID:%d]%s is hacking weapons.", i, GetName(i));
            SCM(playerid, COLOR_LIGHTRED, msg);
        }
    }
    return 1;
}

CMD:givegun(playerid, params[])
{
    new id, slot, wepid, ammo, wepname[128];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"uddd", id, slot, wepid, ammo)) return SyntaxMSG(playerid, "/givegun [playerid] [WepSlot (1-Melee,2-Primary,3-Secondary)] [WepID] [Ammo]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(wepid >= 35 && wepid <= 40 || wepid >= 42 && wepid <= 46) return SCM(playerid, -1, "[ERROR]: You may not give him these weapons.");
    if(slot == 1 && !IsMeleeWeapon(wepid)) return SCM(playerid, -1, "[ERROR]: Invalid melee weapon, (1-15).");
    if(slot == 2 && !IsPrimaryWeapon(wepid)) return SCM(playerid, -1, "[ERROR]: Invalid primary weapon, (22-24).");
    if(slot == 3 && !IsSecondaryWeapon(wepid)) return SCM(playerid, -1, "[ERROR]: Invalid secondary weapon, (25/28-32).");
    GetWeaponName(wepid, wepname, sizeof(wepname));
    if(slot == 1)
    {
        GiveMeleeWeapon(id, wepid);
    }
    else if(slot == 2)
    {
        GivePermWeapon(id, 2, wepid, ammo);
    }
    else if(slot == 3)
    {
        GivePermWeapon(id, 3, wepid, ammo);
    }
    format(msg, sizeof(msg), "[SERVER]: I-ai dat lui %s o arma permanenta, Arma: %s, Munitie: %d. [Se va spawna cu ea de acum].", GetName(id), wepname, ammo);
    SCM(playerid, COLOR_GREEN2, msg);
    format(msg, sizeof(msg), "[SERVER]: Admin %s ti-a dat o arma permanenta, Arma: %s, Munitie: %d. [Te vei spawna cu ea acum].", GetName(playerid), wepname, ammo);
    SCM(id, COLOR_GREEN2, msg);
    format(msg, sizeof(msg), "AdmCmd: %s i-a dat lui %s o arma permanenta. (%s, Munitie: %d)", GetName(playerid), GetName(id), wepname, ammo);
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}


CMD:makeds(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new dealerid, info[128], Float:x, Float:y, Float:z;
    if(sscanf(params,"s[128]",info)) return SyntaxMSG(playerid, "/makeds [info]");
    dealerid = GetNextDealerShipID();
    GetPlayerPos(playerid, x, y, z);
    DealersInfo[dealerid][dealerPosX] = x;
    DealersInfo[dealerid][dealerPosY] = y;
    DealersInfo[dealerid][dealerPosZ] = z;
    DealersInfo[dealerid][dealerOn] = 1;
    format(DealersInfo[dealerid][dealerInfo], 128, "%s", info);
    DealersInfo[dealerid][dealerPickUp] = CreateDynamicPickup(1239, 2, x, y, z, -1, -1, -1, 100.0);
    AddDealerShipToFile(dealerid, info, x, y, z);
    SCM(playerid, COLOR_GREEN2, "A new dealership was added.");
    return 1;
}

CMD:removeds(playerid,params[])
{
    new dealerid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    dealerid = GetClosestDealerShip(playerid);
    if(DealersInfo[dealerid][dealerOn])
    {
        format(query, sizeof(query), "DELETE FROM `dealerships` WHERE `id` = %d",DealersInfo[dealerid][dealerID]);
        mysql_function_query(dbHandle, query, true, "OnDealerShipRemove", "i", dealerid);
        format(msg,sizeof(msg),"You've destroyed dynamic dealership id: %d!",dealerid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    return 1;
}

CMD:showdealers(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(DealersInfo); i++)
    {
        if(DealersInfo[i][dealerOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, DealersInfo[i][dealerInfo]);
        }
    }
    ShowDialog(playerid,Show:<ShowDealerships>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Dealerships:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:masked(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREY, "Masked Online:");
    new MaxPlayers = GetPlayerPoolSize();
    for(new i = 0; i <= MaxPlayers; i++)
    {
        if(PlayerIsOn(i))
        {
            if(maskOn{i})
            {
                format(msg, 256, "(ID:%d)%s - Mask ID: %d", i, GetName(i), GetMaskID(i));
                SCM(playerid, COLOR_GREY, msg);
            }
        }
    }
    return 1;
}

CMD:disarm(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/disarm [playerid/PartOfName]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "Admin %s ti-a confiscat armele.", GetName(playerid));
    SCM(id, COLOR_INFO, msg);
    format(msg, sizeof(msg), "I-ai luat armele lui %s.", GetName(id));
    SCM(playerid, COLOR_INFO, msg);
    FullResetPlayerWeapons(id);
    return 1;
}

CMD:disarm2(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/disarm [playerid/PartOfName]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "I-ai luat armele lui %s.", GetName(id));
    SCM(playerid, COLOR_INFO, msg);
    FullResetPlayerWeapons(id);
    return 1;
}

CMD:makeparkmeter(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new parkid, parkinfo[256], Float:x, Float:y, Float:z;
    if(sscanf(params,"s[256]", parkinfo)) return SyntaxMSG(playerid, "/makeparkmeter [info]");
    parkid = GetNextParkMeterID();
    GetPlayerPos(playerid, x, y, z);
    ParkMeters[parkid][parkPosX] = x;
    ParkMeters[parkid][parkPosY] = y;
    ParkMeters[parkid][parkPosZ] = z;
    ParkMeters[parkid][parkPosRX] = 0.0;
    ParkMeters[parkid][parkPosRY] = 0.0;
    ParkMeters[parkid][parkPosRZ] = 0.0;
    format(ParkMeters[parkid][parkName], 256, "%s", parkinfo);
    ParkMeters[parkid][parkOn] = 1;
    ParkMeters[parkid][parkObject] = CreateDynamicObject(1270, ParkMeters[parkid][parkPosX], ParkMeters[parkid][parkPosY], ParkMeters[parkid][parkPosZ], 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
    format(msg, sizeof(msg), "{3333FF}%d minute", 0);
    ParkMeters[parkid][parkArea] = CreateDynamicSphere(ParkMeters[parkid][parkPosX], ParkMeters[parkid][parkPosY], ParkMeters[parkid][parkPosZ], 1.5, -1, -1, -1);
    ParkMeters[parkid][parkLabel] = CreateDynamic3DTextLabel(msg, -1, ParkMeters[parkid][parkPosX], ParkMeters[parkid][parkPosY], ParkMeters[parkid][parkPosZ]+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    AddParkMeterToFile(parkid, parkinfo, x, y, z);
    format(msg, sizeof(msg), "A new Park Meter was added you may /editparkmeter, [Info: %s]", parkinfo);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:dupparkmeter(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new parkid, oldid, parkinfo[256], Float:x, Float:y, Float:z;
    if(sscanf(params,"ds[256]", oldid, parkinfo)) return SyntaxMSG(playerid, "/dupparkmeter [What-ID] [info]");
    if(!ParkMeters[oldid][parkOn]) return SCM(playerid, -1, "Invalid Park Meter ID.");
    parkid = GetNextParkMeterID();
    GetPlayerPos(playerid, x, y, z);
    ParkMeters[parkid][parkPosX] = ParkMeters[oldid][parkPosX]+2;
    ParkMeters[parkid][parkPosY] = ParkMeters[oldid][parkPosY];
    ParkMeters[parkid][parkPosZ] = ParkMeters[oldid][parkPosZ];
    ParkMeters[parkid][parkPosRX] = ParkMeters[oldid][parkPosRX];
    ParkMeters[parkid][parkPosRY] = ParkMeters[oldid][parkPosRY];
    ParkMeters[parkid][parkPosRZ] = ParkMeters[oldid][parkPosRZ];
    format(ParkMeters[parkid][parkName], 256, "%s", parkinfo);
    ParkMeters[parkid][parkOn] = 1;
    ParkMeters[parkid][parkObject] = CreateDynamicObject(1270, ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ], ParkMeters[oldid][parkPosRX], ParkMeters[oldid][parkPosRY], ParkMeters[oldid][parkPosRZ], -1, -1, -1, 200.0);
    format(msg, sizeof(msg), "{3333FF}%d minute", 0);
    ParkMeters[parkid][parkArea] = CreateDynamicSphere(ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ], 1.5, -1, -1, -1);
    ParkMeters[parkid][parkLabel] = CreateDynamic3DTextLabel(msg, -1, ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ]+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    AddParkMeterToFile(parkid, parkinfo, ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ]);
    format(msg, sizeof(msg), "A new Park Meter was added you may /editparkmeter, [Info: %s]", parkinfo);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:showmeters(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < MAX_PARK_METERS; i++)
    {
        if(ParkMeters[i][parkOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, ParkMeters[i][parkName]);
        }
    }
    ShowDialog(playerid,Show:<ShowParkMeters>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Park Meter's:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:editparkmeter(playerid, params[])
{
    new text[128], type, parkid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editparkmeter [(1-Info,2-Object)] [input]");
    parkid = GetClosestParkMeter(playerid);
    if(type == 1)
    {
        format(query, sizeof(query), "UPDATE `parkmeters` SET `name` = '%s' WHERE `id` = %d", text, ParkMeters[parkid][parkID]);
        mysql_function_query(dbHandle, query, false, "", "");
        format(ParkMeters[parkid][parkName], 128, "%s", text);
    }
    if(type == 2)
    {
        SetIntVar(playerid, "EditingParkMeter", 1);
        SetIntVar(playerid, "ParkMeterEditing", parkid);
        EditDynamicObject(playerid, ParkMeters[parkid][parkObject]);
    }
    return 1;
}

CMD:whatparkmeter(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < MAX_PARK_METERS; i++)
    {
        if (PlayerToPoint(3, playerid,ParkMeters[i][parkPosX], ParkMeters[i][parkPosY], ParkMeters[i][parkPosZ]))
        {
            format(tt, sizeof(tt), "You're standing near park meter: [Normal ID: %d] [MySQL ID: %d].", i,ParkMeters[i][parkID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:removeparkmeter(playerid,params[])
{
    new parkid;
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    parkid = GetClosestParkMeter(playerid);
    DestroyDynamicObject(ParkMeters[parkid][parkObject]);
    DestroyDynamic3DTextLabel(Text3D:ParkMeters[parkid][parkLabel]);
    format(query, sizeof(query), "DELETE FROM `parkmeters` WHERE `id` = %d",ParkMeters[parkid][parkID]);
    mysql_function_query(dbHandle, query, true, "OnParkMeterRemove", "i", parkid);
    format(msg,sizeof(msg),"You've destroyed dynamic park meter id: %d!",parkid);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:biztypes(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_INFO, "1: Restaurant 2: Casino 3: 24/7 4: Ammunation 5: Clothes Store 6: Bar/Club 7: Sex Shop");
    SCM(playerid, COLOR_INFO, "8: Boxing Club 9: Electronic Store 10: Tattoo 11: Disco 12: Betting Place 13: Barber Shop");
    return 1;
}

CMD:showbusinesses(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(BizInfo); i++)
    {
        if(BizInfo[i][bizOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, BizInfo[i][bizInfo]);
        }
    }
    ShowDialog(playerid,Show:<AdminBusinesses>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Business(s):"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:whatbusiness(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < MAX_BIZ; i++)
    {
        if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
        {
            format(tt, sizeof(tt), "You're standing near business: [Normal ID: %d] [MySQL ID: %d].", i,BizInfo[i][bizID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}


CMD:makebusiness(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new bizid, level, price, type, Float:x, Float:y, Float:z;
    if(sscanf(params,"ddd", level, price, type)) return SyntaxMSG(playerid, "/makebusiness [buylevel] [price] [type(/biztypes)]");
    if(type > 14 || type < 1) return SCM(playerid, COLOR_INFO, "Types, 1-14.");
    bizid = GetNextBizID();
    GetPlayerPos(playerid, x, y, z);
    BizInfo[bizid][bizPosX] = x;
    BizInfo[bizid][bizPosY] = y;
    BizInfo[bizid][bizPosZ] = z;
    BizInfo[bizid][bizExitX] = 0.0;
    BizInfo[bizid][bizExitY] = 0.0;
    BizInfo[bizid][bizExitZ] = 0.0;
    BizInfo[bizid][bizLevelbuy] = level;
    BizInfo[bizid][bizPrice] = price;
    BizInfo[bizid][bizOwned] = 0;
    BizInfo[bizid][bizLocked] = 0;
    BizInfo[bizid][bizInterior] = 0;
    BizInfo[bizid][bizWorld] = bizid;
    BizInfo[bizid][bizCash] = 0;
    BizInfo[bizid][bizEntrance] = 0;
    BizInfo[bizid][bizRadioOn] = 0;
    BizInfo[bizid][bizRadio] = 0;
    format(BizInfo[bizid][bizOwner], 256, "The State");
    format(BizInfo[bizid][bizName], 256, "Business");
    SetBizType(bizid, type);
    BizInfo[bizid][bizOn] = 1;
    BizInfo[bizid][bizPickUp] = CreateDynamicPickup(1273, 1, x, y, z, -1, -1, -1, 100.0);
    AddBizToFile(bizid, level, price, type, BizInfo[bizid][bizOwner], BizInfo[bizid][bizName], BizInfo[bizid][bizEnterMSG], BizInfo[bizid][bizInfo], x, y, z);
    format(msg, sizeof(msg), "A new Business was added, [Level: %d, Price: %d, Type: %s]", level, price, BizInfo[bizid][bizInfo]);
    SCM(playerid, COLOR_GREEN2, msg);
    format(msg, sizeof(msg), "Enter Message: %s", BizInfo[bizid][bizEnterMSG]);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removebusiness(playerid,params[])
{
    new bizid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    bizid = GetClosestBizID(playerid);
    DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);
    if(PlayerIsOn(GetIDByName(BizInfo[bizid][bizOwner])))
    {
        PlayerInfo[GetIDByName(BizInfo[bizid][bizOwner])][pBizKey] = -1;
        format(msg, sizeof(msg), "Admin %s has just sold your business to the market.", GetName(playerid));
        SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
        if(BizInfo[bizid][bizCash] > 0)
        {
            format(msg, sizeof(msg), "As you had money in your cashbox you got it back, $%d.", BizInfo[bizid][bizCash]);
            SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
            GiveCash(GetIDByName(BizInfo[bizid][bizOwner]), BizInfo[bizid][bizCash]);
        }
    }
    else
    {
        format(query, sizeof(query), "UPDATE `users` SET `bizkey` = %d WHERE `name` = '%s'", -1, BizInfo[bizid][bizOwner]);
        mysql_function_query(dbHandle, query, false, "", "");
        if(BizInfo[bizid][bizCash] > 0)
        {
            format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s'", BizInfo[bizid][bizOwner]);
            mysql_function_query(dbHandle, query, true, "GivePlayerBizMoney", "ii", BizInfo[bizid][bizCash], bizid);
        }
    }
    format(query, sizeof(query), "DELETE FROM `business` WHERE `id` = %d",BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, true, "OnBizRemove", "i", bizid);
    format(msg,sizeof(msg),"You've destroyed dynamic business id: %d!",bizid);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:asellbusiness(playerid, params[])
{
    new bizid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/asellbusiness [bizid]");
    if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business ID.");
    if(!BizInfo[bizid][bizOwned]) return SCM(playerid, -1, "No one bought this business.");
    if(PlayerIsOn(GetIDByName(BizInfo[bizid][bizOwner])))
    {
        PlayerInfo[GetIDByName(BizInfo[bizid][bizOwner])][pBizKey] = -1;
        format(msg, sizeof(msg), "Admin %s has just sold your business to the market.", GetName(playerid));
        SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
        if(BizInfo[bizid][bizCash] > 0)
        {
            format(msg, sizeof(msg), "As you had money in your cashbox you got it back, $%d.", BizInfo[bizid][bizCash]);
            SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
            GiveCash(GetIDByName(BizInfo[bizid][bizOwner]), BizInfo[bizid][bizCash]);
        }
    }
    else
    {
        format(query, sizeof(query), "UPDATE `users` SET `bizkey` = %d WHERE `name` = '%s'", -1, BizInfo[bizid][bizOwner]);
        mysql_function_query(dbHandle, query, false, "", "");
        if(BizInfo[bizid][bizCash] > 0)
        {
            format(query, sizeof(query), "SELECT `cash` FROM `users` WHERE `name` = '%s'", BizInfo[bizid][bizOwner]);
            mysql_function_query(dbHandle, query, true, "GivePlayerBizMoney", "ii", BizInfo[bizid][bizCash], bizid);
        }
    }
    format(query, sizeof(query), "UPDATE `business` SET `owner` = '%s', `owned` = %d, `locked` = %d, `cash` = %d, `entrance` = %d WHERE `id` = %d", "The State", 0, 1, 0, 0, BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, true, "OnAdminSellBusiness", "i", bizid);
    return 1;
}

CMD:serverbusinesses(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `business`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Businesses");
    return 1;
}

CMD:businessenter(playerid,params[])
{
    new bizid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/businessenter [Biz-ID]");
    if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business id.");
    DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);
    BizInfo[bizid][bizPickUp] = CreateDynamicPickup(1273, 1, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), -1, -1, -1, 100.0);
    format(query, sizeof(query), "UPDATE `business` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, false, "", "");
    BizInfo[bizid][bizPosX] = PlayerPosX(playerid);
    BizInfo[bizid][bizPosY] = PlayerPosY(playerid);
    BizInfo[bizid][bizPosZ] = PlayerPosZ(playerid);
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:businessexit(playerid,params[])
{
    new bizid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/businessexit [Biz-ID]");
    if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business id.");
    format(query, sizeof(query), "UPDATE `business` SET `exitx` = %f, `exity` = %f, `exitz` = %f, `interior` = %d WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), GetInterior(playerid), BizInfo[bizid][bizID]);
    mysql_function_query(dbHandle, query, false, "", "");
    BizInfo[bizid][bizExitX] = PlayerPosX(playerid);
    BizInfo[bizid][bizExitY] = PlayerPosY(playerid);
    BizInfo[bizid][bizExitZ] = PlayerPosZ(playerid);
    BizInfo[bizid][bizInterior] = GetInterior(playerid);
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:gotobusiness(playerid, params[])
{
    new bizid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/gotobusiness [Biz-ID]");
    if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business id.");
    PutPlayer(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
    return 1;
}

CMD:editbusiness(playerid, params[])
{
    new text[128], type, bizid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editbusiness [(1-Price,2-Level,3-Type,4-Name,5-Entrance,6-Cash,7-Lock,8-VW)] [input]");
    bizid = GetClosestBizID(playerid);
    if(bizid == -1) return SCM(playerid, COLOR_LIGHTRED, "Not near any business.");
    new input = strval(text);
    if(type == 1)
    {
        format(query, sizeof(query), "UPDATE `business` SET `price` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        BizInfo[bizid][bizPrice] = input;
    }
    else if(type == 2)
    {
        format(query, sizeof(query), "UPDATE `business` SET `levelbuy` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        BizInfo[bizid][bizLevelbuy] = input;
    }
    else if(type == 3)
    {
        SetBizType(bizid, input);
        format(query, sizeof(query), "UPDATE `business` SET `type` = %d, `info` = '%s', `entermsg` = '%s' WHERE `id` = %d", input, BizInfo[bizid][bizInfo],BizInfo[bizid][bizEnterMSG],  BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 4)
    {
        format(query, sizeof(query), "UPDATE `business` SET `name` = '%s' WHERE `id` = %d", text, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        format(BizInfo[bizid][bizName], 128, "%s", text);
    }
    else if(type == 5)
    {
        format(query, sizeof(query), "UPDATE `business` SET `entrance` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        BizInfo[bizid][bizEntrance] = input;
    }
    else if(type == 6)
    {
        format(query, sizeof(query), "UPDATE `business` SET `cash` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        BizInfo[bizid][bizCash] = input;
    }
    else if(type == 7)
    {
        format(query, sizeof(query), "UPDATE `business` SET `lock` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        BizInfo[bizid][bizLocked] = input;
    }
    else if(type == 8)
    {
        format(query, sizeof(query), "UPDATE `business` SET `world` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
        mysql_function_query(dbHandle, query, false, "", "");
        BizInfo[bizid][bizWorld] = input;
    }
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:businessint(playerid, params[])
{
    new bizid, int;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",int))
    {
        SyntaxMSG(playerid, "/businessint [id (1-48)]");
        SCM(playerid, COLOR_WHITE, "1: Marcos Bistro (Eat) - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Eat) - 4: Cluckin Bell (Eat)");
        SCM(playerid, COLOR_WHITE, "5: Well Stacked Pizza (Eat) - 6: Rusty Browns Dohnuts (Eat) - 7: Jays Diner (Eat) - 8: Pump Truck Stop Diner (Eat)");
        SCM(playerid, COLOR_WHITE, "9: Alhambra (Drink) - 10: Mistys (Drink) - 11: Lil' Probe Inn (Drink) - 12: Exclusive (Clothes) - 13: Binco (Clothes)");
        SCM(playerid, COLOR_WHITE, "14: ProLaps (Clothes) - 15: SubUrban (Clothes) - 16: Victim (Clothes) - 17: Zip (Clothes) - 18: Redsands Casino");
        SCM(playerid, COLOR_WHITE, "19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Gun) - 26: Jizzy's (Drink)");
        SCM(playerid, COLOR_WHITE, "27-32: 24-7's (Buy) - 33: Advertising/Phone Network - 34: Bothel - 35: Four Dragons Casino 36: Bikers Garage 37: Ganton gym");
        SCM(playerid, COLOR_WHITE, "38: Tattoo 1 39: Tatto 2 40: Tatto 3 41: Crack Den 42: Zero RC shop 43: Record Studio 44: LS Court Room 45: Meat Factory 46: Betting Place");
        SCM(playerid, COLOR_WHITE, "47: Barber Shop 48: Pleasure Domes");
        return 1;
    }
    bizid = GetClosestBizID(playerid);
    if(int < 1 || int > 48) return SCM(playerid, COLOR_GREY, "ERROR: Interior ID's 1-48");
    SetBusinessInterior(playerid, bizid, int);
    return 1;
}

CMD:makefaction(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, name[64], short[24], color, type, rankamount, chaton;
    if(sscanf(params,"ds[64]ddds[24]d", factionid, name, color, type, rankamount, short, chaton)) return SyntaxMSG(playerid, "/makefaction [factionid] [name] [color] [type] [rankamount] [ShortName] [chaton(1/0)]");
    format(Factions[factionid][fName], 128, "%s", name);
    format(Factions[factionid][fShortName], 128, "%s", short);
    Factions[factionid][fType] = type;
    Factions[factionid][fRankAmount] = rankamount;
    Factions[factionid][fChatON] = chaton;
    Factions[factionid][fON] = 1;
    format(msg, sizeof(msg), "A new faction was added, [FactionID: %d, Name: %s, Type: %d, Rankamount: %d, ShortName: %s, Chaton: %d]", factionid, name, type, rankamount, short, chaton);
    SCM(playerid, COLOR_GREEN2, msg);
    SCM(playerid, COLOR_GREEN2, "You can /factioncmds for more help.");
    AddFactionToFile(factionid, name, color, type, rankamount, chaton);
    return 1;
}

CMD:factionspawn(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, Float:x, Float:y, Float:z;
    if(sscanf(params,"d", factionid)) return SyntaxMSG(playerid, "/factionspawn [factionid]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    GetPlayerPos(playerid, x, y, z);
    new interior = GetInterior(playerid);
    Factions[factionid][fX] = x;
    Factions[factionid][fY] = y;
    Factions[factionid][fZ] = z;
    Factions[factionid][fSpawnInt] = interior;
    format(msg, sizeof(msg), "You have changed faction %d spawn to your position.", factionid);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `spawnx` = %f, `spawny` = %f, `spawnz` = %f, `spawnint` = %d WHERE `id` = %d", x, y , z, interior, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factionuniform(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, Float:x, Float:y, Float:z;
    if(sscanf(params,"d", factionid)) return SyntaxMSG(playerid, "/factionuniform [factionid] (Changed the uniform position to yours)");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    GetPlayerPos(playerid, x, y, z);
    Factions[factionid][fUniformX] = x;
    Factions[factionid][fUniformY] = y;
    Factions[factionid][fUniformZ] = z;
    format(msg, sizeof(msg), "You have changed faction %d uniform to your position.", factionid);
    SCM(playerid, COLOR_GREEN2, msg);
    DestroyDynamicPickup(Factions[factionid][fPickUp]);
    Factions[factionid][fPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
    format(query, sizeof(query), "UPDATE `factions` SET `uniformx` = %f, `uniformy` = %f, `uniformz` = %f WHERE `id` = %d", x, y , z, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factioncolor(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, color;
    if(sscanf(params,"dd", factionid, color)) return SyntaxMSG(playerid, "/factioncolor [factionid] [color]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    Factions[factionid][fColor] = color;
    format(msg, sizeof(msg), "You have changed faction %d color to %d.", factionid, color);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `color` = %d WHERE `id` = %d", color, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factionshortname(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, shortname[64];
    if(sscanf(params,"ds[64]", factionid, shortname)) return SyntaxMSG(playerid, "/factionshortname [factionid] [name]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    format(Factions[factionid][fShortName], 128, "%s", shortname);
    format(msg, sizeof(msg), "You have changed faction %d short name to %s.", factionid, shortname);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `shortname` = '%s' WHERE `id` = %d", shortname, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factionname(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, name[64];
    if(sscanf(params,"ds[64]", factionid, name)) return SyntaxMSG(playerid, "/factioname [factionid] [name]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    format(Factions[factionid][fName], 128, "%s", name);
    format(msg, sizeof(msg), "You have changed faction %d name to %s.", factionid, name);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `name` = '%s' WHERE `id` = %d", name, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factionrankamount(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, amount;
    if(sscanf(params,"dd", factionid, amount)) return SyntaxMSG(playerid, "/factionrankamount [factionid] [amount]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    Factions[factionid][fRankAmount] = amount;
    format(msg, sizeof(msg), "You have changed faction %d rank amount to %d.", factionid, amount);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `rankamount` = %d WHERE `id` = %d", amount, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factiontype(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, type;
    if(sscanf(params,"dd", factionid, type)) return SyntaxMSG(playerid, "/factiontype [factionid] [type]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    Factions[factionid][fType] = type;
    format(msg, sizeof(msg), "You have changed faction %d type to %d.", factionid, type);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `type` = %d WHERE `id` = %d", type, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factionjoinrank(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, rank;
    if(sscanf(params,"dd", factionid, rank)) return SyntaxMSG(playerid, "/factionjoinrank [factionid] [rank]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    Factions[factionid][fJoinRank] = rank;
    format(msg, sizeof(msg), "You have changed faction %d join rank to %d.", factionid, rank);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `joinrank` = %d WHERE `id` = %d", rank, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:factionleaderrank(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, rank;
    if(sscanf(params,"dd", factionid, rank)) return SyntaxMSG(playerid, "/factionleaderrank [factionid] [rank]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    Factions[factionid][fLeaderRank] = rank;
    format(msg, sizeof(msg), "You have changed faction %d leader rank to %d.", factionid, rank);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `factions` SET `leaderrank` = %d WHERE `id` = %d", rank, Factions[factionid][fID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:serverfactions(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    SCM(playerid, COLOR_GREY, "--Factions--");
    for(new i = 0; i < MAX_FACTIONS; i++)
    {
        if(Factions[i][fON])
        {
            SCMEx(playerid, COLOR_YELLOWG, "[Faction ID: %d] Name: %s, Short Name: %s.", i, Factions[i][fName], Factions[i][fShortName]);
        }
    }
    return 1;
}

CMD:reloadfactions(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    for(new factionid=1;factionid<=MAX_FACTIONS;factionid++)
    {
            Factions[factionid][fID] = -1;
            format(Factions[factionid][fName], 128, "INVALID");
            Factions[factionid][fX] = 0;
            Factions[factionid][fY] = 0;
            Factions[factionid][fZ] = 0;
            Factions[factionid][fSpawnInt] = 0;
            format(Factions[factionid][fRank1], 128, "INVALID");
            format(Factions[factionid][fRank2], 128, "INVALID");
            format(Factions[factionid][fRank3], 128, "INVALID");
            format(Factions[factionid][fRank4], 128, "INVALID");
            format(Factions[factionid][fRank5], 128, "INVALID");
            format(Factions[factionid][fRank6], 128, "INVALID");
            format(Factions[factionid][fRank7], 128, "INVALID");
            format(Factions[factionid][fRank8], 128, "INVALID");
            format(Factions[factionid][fRank9], 128, "INVALID");
            format(Factions[factionid][fRank10], 128, "INVALID");
            format(Factions[factionid][fRank11], 128, "INVALID");
            format(Factions[factionid][fRank12], 128, "INVALID");
            format(Factions[factionid][fRank13], 128, "INVALID");
            format(Factions[factionid][fRank14], 128, "INVALID");
            format(Factions[factionid][fRank15], 128, "INVALID");
            format(Factions[factionid][fRank16], 128, "INVALID");
            format(Factions[factionid][fRank17], 128, "INVALID");
            format(Factions[factionid][fRank18], 128, "INVALID");
            format(Factions[factionid][fRank19], 128, "INVALID");
            format(Factions[factionid][fRank20], 128, "INVALID");
            Factions[factionid][fJoinRank] = 0;
            Factions[factionid][fType] = 0;
            Factions[factionid][fRankAmount] = 0;
            Factions[factionid][fChatON] = 0;
            Factions[factionid][fColor] = 0;
            Factions[factionid][fUniformX] = 0;
            Factions[factionid][fUniformY] = 0;
            Factions[factionid][fUniformZ] = 0;
            Factions[factionid][fLeaderRank] = 0;
            format(Factions[factionid][fShortName], 128, "INVALID");
            Factions[factionid][fON] = 0;
            DestroyDynamicPickup(Factions[factionid][fPickUp]);
    }
    LoadDynamicFactions();
    return 1;
}

CMD:makeleader(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
    new id, faction;
    if(sscanf(params,"ud",id,faction)) return SyntaxMSG(playerid, "/makeleader [playerid] [factionid(/factions)]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "AdmCmd: %s i-a dat liderul factiunii %s lui %s.", GetName(playerid), GetShortFactionName(faction), GetName(id));
    AMSG(COLOR_LIGHTRED, msg);
    format(msg, sizeof(msg), "Administratorul %s ti-a dat lider la factiunea %s.", GetName(playerid), GetShortFactionName(faction));
    SCM(id, COLOR_LIGHTRED, msg);
    PlayerInfo[id][pRank] = Factions[faction][fLeaderRank];
    PlayerInfo[id][pFaction] = faction;
    PlayerInfo[id][pBadgeNumber] = randomEx(23465, 99999);
    return 1;
}

CMD:factionrankname(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new factionid, rank, name[64];
    if(sscanf(params,"dds[64]", factionid, rank, name)) return SyntaxMSG(playerid, "/factionrankname [factionid] [rank(1-20)] [name]");
    if(!Factions[factionid][fON]) return SCM(playerid, -1, "Factiune Invalida.");
    format(msg, sizeof(msg), "You have set faction ID: %d's Rank: %d's name to: %s", factionid, rank, name);
    SCM(playerid, COLOR_GREEN2, msg);
    if(rank == 1)
    {
        format(Factions[factionid][fRank1], 128, "%s", name);
    }
    else if(rank == 2)
    {
        format(Factions[factionid][fRank2], 128, "%s", name);
    }
    else if(rank == 3)
    {
        format(Factions[factionid][fRank3], 128, "%s", name);
    }
    else if(rank == 4)
    {
        format(Factions[factionid][fRank4], 128, "%s", name);
    }
    else if(rank == 5)
    {
        format(Factions[factionid][fRank5], 128, "%s", name);
    }
    else if(rank == 6)
    {
        format(Factions[factionid][fRank6], 128, "%s", name);
    }
    else if(rank == 7)
    {
        format(Factions[factionid][fRank7], 128, "%s", name);
    }
    else if(rank == 8)
    {
        format(Factions[factionid][fRank8], 128, "%s", name);
    }
    else if(rank == 9)
    {
        format(Factions[factionid][fRank9], 128, "%s", name);
    }
    else if(rank == 10)
    {
        format(Factions[factionid][fRank10], 128, "%s", name);
    }
    else if(rank == 11)
    {
        format(Factions[factionid][fRank11], 128, "%s", name);
    }
    else if(rank == 12)
    {
        format(Factions[factionid][fRank12], 128, "%s", name);
    }
    else if(rank == 13)
    {
        format(Factions[factionid][fRank13], 128, "%s", name);
    }
    else if(rank == 14)
    {
        format(Factions[factionid][fRank14], 128, "%s", name);
    }
    else if(rank == 15)
    {
        format(Factions[factionid][fRank15], 128, "%s", name);
    }
    else if(rank == 16)
    {
        format(Factions[factionid][fRank16], 128, "%s", name);
    }
    else if(rank == 17)
    {
        format(Factions[factionid][fRank17], 128, "%s", name);
    }
    else if(rank == 18)
    {
        format(Factions[factionid][fRank18], 128, "%s", name);
    }
    else if(rank == 19)
    {
        format(Factions[factionid][fRank19], 128, "%s", name);
    }
    else if(rank == 20)
    {
        format(Factions[factionid][fRank20], 128, "%s", name);
    }
    SaveFaction(factionid);
    return 1;
}

CMD:makefactiondoor(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new info[256], faction, doorid, vehicle, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"ds[128]d", faction, info, vehicle)) return SyntaxMSG(playerid, "/makefactiondoor [factionid(/factions)] [info] [withvehicle(1/0)]");
    doorid = GetNextFactionDoorID();
    GetPlayerPos(playerid, X, Y, Z);
    new interior = GetInterior(playerid);
    FactionDoors[doorid][dEnterX] = X;
    FactionDoors[doorid][dEnterY] = Y;
    FactionDoors[doorid][dEnterZ] = Z;
    FactionDoors[doorid][dExitX] = 0.0000;
    FactionDoors[doorid][dExitY] = 0.0000;
    FactionDoors[doorid][dExitZ] = 0.0000;
    FactionDoors[doorid][dEnterInterior] = interior;
    FactionDoors[doorid][dFaction] = faction;
    FactionDoors[doorid][dWithVehicle] = vehicle;
    format(FactionDoors[doorid][dInfo],256,"%s",info);
    FactionDoors[doorid][dDoorOn] = 1;
    FactionDoors[doorid][dLocked] = 1;
    FactionDoors[doorid][dPickUp] = CreateDynamicPickup(1239, 2, X, Y, Z, -1, -1, -1, 100.0);
    AddFactionDoorToFile(doorid, vehicle, interior, faction, info, X, Y, Z);
    format(msg, sizeof(msg), "A new faction door was added, [info: %s, Faction: %d]",info, faction);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:factiondoorexitangle(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new doorid, Float:a;
    if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorexitangle [doorid]");
    if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
    GetPlayerFacingAngle(playerid, a);
    FactionDoors[doorid][dExitAngle] = a;
    format(query, sizeof(query), "UPDATE `factiondoors` SET `exitangle` = %f WHERE `id` = %d", a, FactionDoors[doorid][dID]);
    mysql_function_query(dbHandle, query, false, "", "");
    format(msg, sizeof(msg), "Faction Door vehicle angle was changed, %f",a);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:factiondoorenterangle(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new doorid, Float:a;
    if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorenterangle [doorid]");
    if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
    GetPlayerFacingAngle(playerid, a);
    FactionDoors[doorid][dEnterAngle] = a;
    format(query, sizeof(query), "UPDATE `factiondoors` SET `enterangle` = %f WHERE `id` = %d", a, FactionDoors[doorid][dID]);
    mysql_function_query(dbHandle, query, false, "", "");
    format(msg, sizeof(msg), "Faction Door vehicle angle was changed, %f",a);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:factiondoorenter(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new interior, doorid, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorenter [doorid]");
    if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    AddFactionDoorEnter(doorid, interior, X, Y, Z);
    FactionDoors[doorid][dEnterX] = X;
    FactionDoors[doorid][dEnterY] = Y;
    FactionDoors[doorid][dEnterZ] = Z;
    FactionDoors[doorid][dEnterInterior] = interior;
    DestroyDynamicPickup(FactionDoors[doorid][dPickUp]);
    FactionDoors[doorid][dPickUp] = CreateDynamicPickup(1239, 2, X, Y, Z, -1, -1, -1, 100.0);
    format(msg, sizeof(msg), "Faction Door enter was changed, %f, %f, %f",X,Y,Z);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:factiondoorexit(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new interior, doorid, Float:X, Float:Y, Float:Z;
    if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorexit [doorid]");
    if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Usa nu exista!");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    AddFactionDoorExit(doorid, interior, X, Y, Z);
    FactionDoors[doorid][dExitX] = X;
    FactionDoors[doorid][dExitY] = Y;
    FactionDoors[doorid][dExitZ] = Z;
    FactionDoors[doorid][dExitInterior] = interior;
    format(msg, sizeof(msg), "Iesirea usii factiunii a fost schimbata, %f, %f, %f",X,Y,Z);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removefactiondoor(playerid,params[])
{
    new DoorID;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",DoorID)) return SyntaxMSG(playerid, "/removefactiondoor [Door-ID]");
    if(!FactionDoors[DoorID][dDoorOn]) return SCM(playerid, -1,"ERROR: Usa nu exista!");
    DestroyDynamicPickup(FactionDoors[DoorID][dPickUp]);
    format(query, sizeof(query), "DELETE FROM `factiondoors` WHERE `id` = %d",FactionDoors[DoorID][dID]);
    mysql_function_query(dbHandle, query, true, "OnFactionDoorRemove", "i", DoorID);
    format(msg,sizeof(msg),"Ai sters usa factiunii cu ID-ul: %d!",DoorID);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:editfactiondoor(playerid, params[])
{
    new text[256], type;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editfactiondoor [type(1-Info,2-VirWorld,3-Faction)] [new text]");
    new doorid = GetClosestFactionDoorID(playerid);
    if(doorid == -1) return SCM(playerid, COLOR_LIGHTRED, "Nu esti langa vreo usa de factiune.");
    new input = strval(text);
    if(type == 1)
    {
        format(query, sizeof(query), "UPDATE `factiondoors` SET `info` = '%s' WHERE `id` = %d", text, FactionDoors[doorid][dID]);
        mysql_function_query(dbHandle, query, false, "", "");
        format(FactionDoors[doorid][dInfo],256,"%s",text);
    }
    else if(type == 2)
    {
        format(query, sizeof(query), "UPDATE `factiondoors` SET `world` = %d WHERE `id` = %d", input, FactionDoors[doorid][dID]);
        mysql_function_query(dbHandle, query, false, "", "");
        FactionDoors[doorid][dVirtualWorld] = input;
    }
    else if(type == 3)
    {
        format(query, sizeof(query), "UPDATE `factiondoors` SET `faction` = %d WHERE `id` = %d", input, FactionDoors[doorid][dID]);
        mysql_function_query(dbHandle, query, false, "", "");
        FactionDoors[doorid][dFaction] = input;
    }
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:whatfactiondoor(playerid, params[])
{
    new tt[256];
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < MAX_FACTION_DOORS; i++)
    {
        if (PlayerToPoint(3, playerid,FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]))
        {
            format(tt, sizeof(tt), "Stai langa o usa de factiune: [Normal ID: %d] [MySQL ID: %d].", i,FactionDoors[i][dID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:showfactiondoors(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[1024];
    for(new i = 0; i < sizeof(FactionDoors); i++)
    {
        if(FactionDoors[i][dDoorOn])
        {
            format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, FactionDoors[i][dInfo]);
        }
    }
    ShowDialog(playerid,Show:<AdminFactionDoors>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Faction Doors:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:serverfactiondoors(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    format(query, sizeof(query), "SELECT * FROM `factiondoors`");
    mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Faction doors");
    return 1;
}

CMD:gotofactiondoor(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotofactiondoor [Door-ID]");
    if(!FactionDoors[id][dDoorOn]) return SCM(playerid, -1, "Aceasta usa dinamica nu exista.");
    SetInterior(playerid, FactionDoors[id][dEnterInterior]);
    PutPlayer(playerid, FactionDoors[id][dEnterX], FactionDoors[id][dEnterY], FactionDoors[id][dEnterZ]);
    return 1;
}

CMD:makemovedoor(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new objectid, modelid, faction, interior, name[256], Float:X, Float:Y, Float:Z;
    if(sscanf(params,"dds[256]",modelid,faction,name)) return SyntaxMSG(playerid, "/makemovedoor [Model-ID] [Faction(/factions)] [Description]");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    objectid = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, GetWorld(playerid), -1, -1, 200.0);
    Doors[objectid][doorModel] = modelid;
    Doors[objectid][doorPosX] = X;
    Doors[objectid][doorPosY] = Y;
    Doors[objectid][doorPosZ] = Z;
    Doors[objectid][doorPosRX] = 0.0;
    Doors[objectid][doorPosRY] = 0.0;
    Doors[objectid][doorPosRZ] = 0.0;
    Doors[objectid][doorObjectOn] = 1;
    Doors[objectid][doorInterior] = interior;
    Doors[objectid][doorFaction] = faction;
    Doors[objectid][doorOpened] = 0;
    Doors[objectid][doorVirtualWorld] = GetWorld(playerid);
    format(Doors[objectid][doorName], 256, "%s", name);
    Doors[objectid][doorObject] = objectid;
    AddMoveDoorToFile(objectid, modelid, faction, interior, GetWorld(playerid), X, Y, Z, name);
    format(msg, sizeof(msg), "O noua usa dinamica a fost creeata, [ObjectID: %d, ModelID: %d, Description: %s]",objectid,modelid, Doors[objectid][doorName]);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:dupmovedoor(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new objectid, doorid, modelid, faction, interior, name[256];
    if(sscanf(params,"ddds[256]",doorid,modelid,faction,name)) return SyntaxMSG(playerid, "/dupmovedoor [Door-ID] [Model-ID] [Faction(/factions)] [Description]");
    if(!Doors[doorid][doorObjectOn]) return SCM(playerid, COLOR_WHITE, "ERROR: Aceasta usa dinamica nu exista!");
    interior = GetInterior(playerid);
    objectid = CreateDynamicObject(modelid, Doors[doorid][doorPosX], Doors[doorid][doorPosY], Doors[doorid][doorPosZ], Doors[doorid][doorPosRX], Doors[doorid][doorPosRY], Doors[doorid][doorPosRZ], Doors[doorid][doorVirtualWorld], -1, -1, 200.0);
    Doors[objectid][doorModel] = modelid;
    Doors[objectid][doorPosX] = Doors[doorid][doorPosX];
    Doors[objectid][doorPosY] = Doors[doorid][doorPosY];
    Doors[objectid][doorPosZ] = Doors[doorid][doorPosZ];
    Doors[objectid][doorPosRX] = Doors[doorid][doorPosRX];
    Doors[objectid][doorPosRY] = Doors[doorid][doorPosRY];
    Doors[objectid][doorPosRZ] = Doors[doorid][doorPosRZ];
    Doors[objectid][doorObjectOn] = 1;
    Doors[objectid][doorInterior] = interior;
    Doors[objectid][doorFaction] = faction;
    Doors[objectid][doorOpened] = 0;
    Doors[objectid][doorVirtualWorld] = Doors[doorid][doorVirtualWorld];
    format(Doors[objectid][doorName], 256, "%s", name);
    Doors[objectid][doorObject] = objectid;
    AddMoveDoorToFile(objectid, modelid, faction, interior, Doors[doorid][doorVirtualWorld], Doors[doorid][doorPosX], Doors[doorid][doorPosY], Doors[doorid][doorPosZ], name);
    format(msg, sizeof(msg), "O noua usa dinamica a fost duplicata [ObjectID: %d, ModelID: %d, Description: %s]",objectid, modelid, Doors[objectid][doorName]);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:removemovedoor(playerid,params[])
{
    new objectid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removemovedoor [Object-ID]");
    if(Doors[objectid][doorObjectOn])
    {
        format(query, sizeof(query), "DELETE FROM `movedoors` WHERE `id` = %d",Doors[objectid][doorID]);
        mysql_function_query(dbHandle, query, true, "OnMoveDoorRemove", "i", objectid);
        format(msg,sizeof(msg),"Ai distrus usa dinamica cu ID-ul: %d!",objectid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Aceasta usa dinamica nu exista!");
    }
    return 1;
}

CMD:editmovedoor(playerid,params[])
{
    new objectid, type, Float:input;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ddf",objectid, type, input)) return SyntaxMSG(playerid, "/editmovedoor [Object-ID] [type(1-Object,2-OpenSpeed,3-MoveX,4-MoveY,5-MoveZ] [input]");
    if(!Doors[objectid][doorObjectOn] && !IsValidDynamicObject(Doors[objectid][doorObject])) return SCM(playerid, -1,"ERROR: Aceasta usa dinamica nu exista!");
    if(type == 1)
    {
        if(GetIntVar(playerid, "EditingMoveDoor") == 1) return SCM(playerid, COLOR_FADE1, "Deja editezi.");
        SetIntVar(playerid, "EditingMoveDoor", 1);
        SetIntVar(playerid, "ObjectEditing", objectid);
        EditDynamicObject(playerid, Doors[objectid][doorObject]);
    }
    else if(type == 2)
    {
        Doors[objectid][doorOpenSpeed] = input;
        format(query, sizeof(query), "UPDATE `movedoors` SET `openspeed` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 3)
    {
        Doors[objectid][doorMoveX] = input;
        format(query, sizeof(query), "UPDATE `movedoors` SET `movex` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 4)
    {
        Doors[objectid][doorMoveY] = input;
        format(query, sizeof(query), "UPDATE `movedoors` SET `movey` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 5)
    {
        Doors[objectid][doorMoveZ] = input;
        format(query, sizeof(query), "UPDATE `movedoors` SET `movez` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:whatmovedoor(playerid, params[])
{
    new tt[128];
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < sizeof(Doors); i++)
    {
        if (PlayerToPoint(3, playerid,Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ]))
        {
            format(tt, sizeof(tt), "Stai langa o usa dinamica: [Normal ID: %d] [MySQL ID: %d].", i,Doors[i][doorID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:showmovedoors(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[4000];
    for(new i = 0; i < sizeof(Doors); i++)
    {
        if(Doors[i][doorObjectOn])
        {
            format(string, sizeof(string), "%s\n%d)%s" ,string, i, Doors[i][doorName]);
        }
    }
    ShowDialog(playerid,Show:<ShowMoveDoors>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Move Objects:"EMBED_RED"",string,"O","K");
    return 1;
}

//==============================================
CMD:makegate(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new modelid, faction, name[256], Float:X, Float:Y, Float:Z, Float:speed, Float:movex, Float:movey, Float:movez;
    if(sscanf(params,"ddffffs[256]",modelid,faction,speed,movex,movey,movez,name)) return SyntaxMSG(playerid, "/makegate [Model-ID] [Faction(/factions)] [OpenSpeed] [Move-X] [Move-Y] [Move-Z] [Description]");
    GetPlayerPos(playerid, X, Y, Z);
    new interior = GetInterior(playerid);
    new Float:Angle;
    GetPlayerFacingAngle(playerid, Angle);
    new objectid = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, Angle, GetWorld(playerid), -1, -1, 200.0);
    Gates[objectid][gateModel] = modelid;
    Gates[objectid][gatePosX] = X;
    Gates[objectid][gatePosY] = Y;
    Gates[objectid][gatePosZ] = Z;
    Gates[objectid][gateOpenSpeed] = speed;
    Gates[objectid][gateMoveX] = movex;
    Gates[objectid][gateMoveY] = movey;
    Gates[objectid][gateMoveZ] = movez;
    Gates[objectid][gateMoveRX] = 0.0;
    Gates[objectid][gateMoveRY] = 0.0;
    Gates[objectid][gateMoveRZ] = Angle;
    Gates[objectid][gatePosRX] = 0.0;
    Gates[objectid][gatePosRY] = 0.0;
    Gates[objectid][gatePosRZ] = 0.0;
    Gates[objectid][gateSound] = 0;
    Gates[objectid][gateSoundLength] = 0;
    Gates[objectid][gateObjectOn] = 1;
    Gates[objectid][gateInterior] = interior;
    Gates[objectid][gateFaction] = faction;
    Gates[objectid][gateOpened] = 0;
    Gates[objectid][gateVirtualWorld] = GetWorld(playerid);
    format(Gates[objectid][gateName], 256, "%s", name);
    Gates[objectid][gateObject] = objectid;
    AddGateToFile(objectid, modelid, faction, interior, GetWorld(playerid), X, Y, Z, speed, movex, movey, name);
    format(msg, sizeof(msg), "O noua poarta dinamica a fost adugata, [ModelID: %d, Description: %s]",modelid, name);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:editgate(playerid,params[])
{
    new objectid, type, Float:input;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ddf",objectid, type, input)) return SyntaxMSG(playerid, "/editgate [Object-ID] [type(1-Object,2-OpenSpeed,3-MoveX,4-MoveY,5-MoveZ,6-MoveRX,7-MoveRY,8-MoveRZ)] [input]");
    if(!Gates[objectid][gateObjectOn] && !IsValidDynamicObject(Gates[objectid][gateObject])) return SCM(playerid, -1,"ERROR: Dynamic Gate Does Not Exist!");
    if(type == 1)
    {
        if(GetIntVar(playerid, "EditingGate") == 1) return SCM(playerid, COLOR_FADE1, "Deja editezi.");
        SetIntVar(playerid, "EditingGate", 1);
        SetIntVar(playerid, "ObjectEditing", objectid);
        EditDynamicObject(playerid, Gates[objectid][gateObject]);
    }
    else if(type == 2)
    {
        Gates[objectid][gateOpenSpeed] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `openspeed` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 3)
    {
        Gates[objectid][gateMoveX] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `movex` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 4)
    {
        Gates[objectid][gateMoveY] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `movey` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 5)
    {
        Gates[objectid][gateMoveZ] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `movez` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 6)
    {
        Gates[objectid][gateMoveRX] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `moverx` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 7)
    {
        Gates[objectid][gateMoveRY] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `movery` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    else if(type == 8)
    {
        Gates[objectid][gateMoveRZ] = input;
        format(query, sizeof(query), "UPDATE `gates` SET `moverz` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, false, "", "");
    }
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:gatesound(playerid, params[])
{
    new objectid, sound;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dd",objectid, sound)) return SyntaxMSG(playerid, "/gatesound [Object-ID] [sound-id]");
    if(!Gates[objectid][gateObjectOn] && !IsValidDynamicObject(Gates[objectid][gateObject])) return SCM(playerid, -1,"ERROR: Aceasta poarta dinamica nu exista!");
    Gates[objectid][gateSound] = sound;
    format(query, sizeof(query), "UPDATE `gates` SET `sound` = %d WHERE `id` = %d", sound, Gates[objectid][gateID]);
    mysql_function_query(dbHandle, query, false, "", "");
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:gatesoundlength(playerid, params[])
{
    new objectid, length;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dd",objectid, length)) return SyntaxMSG(playerid, "/gatesoundlength [Object-ID] [length]");
    if(!Gates[objectid][gateObjectOn] && !IsValidDynamicObject(Gates[objectid][gateObject])) return SCM(playerid, -1,"ERROR: Aceasta poarta dinamica nu exista!");
    Gates[objectid][gateSoundLength] = length;
    format(query, sizeof(query), "UPDATE `gates` SET `soundlength` = %d WHERE `id` = %d", length, Gates[objectid][gateID]);
    mysql_function_query(dbHandle, query, false, "", "");
    SCM(playerid, COLOR_INFO, "Executat.");
    return 1;
}

CMD:whatgate(playerid, params[])
{
    new tt[128];
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new Float:x, Float:y, Float:z;
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(Gates[i][gateObjectOn])
        {
            GetDynamicObjectPos(i, x, y, z);
            if (PlayerToPoint(4.0, playerid, x, y, z))
            {
                format(tt, sizeof(tt), "Stai langa o poarta dinamica: [Normal ID: %d] [MySQL ID: %d].", i, Gates[i][gateID]);
                SCM(playerid, -1, tt);
                return 1;
            }
        }
    }
    return 1;
}

CMD:removegate(playerid,params[])
{
    new objectid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removegate [Object-ID]");
    if(Gates[objectid][gateObjectOn])
    {
        format(query, sizeof(query), "DELETE FROM `gates` WHERE `id` = %d",Gates[objectid][gateID]);
        mysql_function_query(dbHandle, query, true, "OnGateRemove", "i", objectid);
        format(msg,sizeof(msg),"Ai distrus poarta dinamica cu ID-ul: %d!",objectid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Aceasta poarta dinamica nu exista!");
    }
    return 1;
}

CMD:showgates(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[4000];
    for(new i = 0; i < sizeof(Gates); i++)
    {
        if(Gates[i][gateObjectOn])
        {
            format(string, sizeof(string), "%s\n%d)%s" ,string, i, Gates[i][gateName]);
        }
    }
    ShowDialog(playerid,Show:<ShowGates>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Porti administrative dinamice:"EMBED_RED"",string,"O","K");
    return 1;
}

CMD:makecctv(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new objectid, faction, interior, name[256], Float:X, Float:Y, Float:Z;
    if(sscanf(params,"ds[256]",faction,name)) return SyntaxMSG(playerid, "/makecctv [faction(/factions)] [Description]");
    GetPlayerPos(playerid, X, Y, Z);
    interior = GetInterior(playerid);
    objectid = CreateDynamicObject(1886, X, Y, Z, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
    CCTVInfo[objectid][tvFaction] = faction;
    CCTVInfo[objectid][tvPosX] = X;
    CCTVInfo[objectid][tvPosY] = Y;
    CCTVInfo[objectid][tvPosZ] = Z;
    CCTVInfo[objectid][tvPosRX] = 0.0;
    CCTVInfo[objectid][tvPosRY] = 0.0;
    CCTVInfo[objectid][tvPosRZ] = 0.0;
    CCTVInfo[objectid][tvObjectOn] = 1;
    CCTVInfo[objectid][tvInterior] = interior;
    CCTVInfo[objectid][tvVirtualWorld] = GetWorld(playerid);
    format(CCTVInfo[objectid][tvName], 256, "%s", name);
    CCTVInfo[objectid][tvObject] = objectid;
    AddCameraToFile(objectid, faction, interior, GetWorld(playerid), X, Y, Z, name);
    format(msg, sizeof(msg), "Un nou CCTV dinamic a fost adaugat, [FactionID: %d, Descriere: %s]",faction, CCTVInfo[objectid][tvName]);
    SCM(playerid, COLOR_GREEN2, msg);
    return 1;
}

CMD:editcctv(playerid,params[])
{
    new objectid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/editcctv [Object-ID]");
    if(GetIntVar(playerid, "EditingCCTV") == 1) return SCM(playerid, COLOR_FADE1, "Deja editezi.");
    if(CCTVInfo[objectid][tvObjectOn] && IsValidDynamicObject(CCTVInfo[objectid][tvObject]))
    {
        SetIntVar(playerid, "EditingCCTV", 1);
        SetIntVar(playerid, "ObjectEditing", objectid);
        EditDynamicObject(playerid, CCTVInfo[objectid][tvObject]);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Acest CCTV dinamic nu exista!");
    }
    return 1;
}

CMD:showcctvs(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new string[4000];
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(CCTVInfo[i][tvObjectOn])
        {
            format(string, sizeof(string), "%s\n%d)%s" ,string, i, CCTVInfo[i][tvName]);
        }
    }
    ShowDialog(playerid,Show:<ShowCCTVs>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin CCTV's:"EMBED_RED"",string,"O","K");
    return 1;
}

CMD:cctvfaction(playerid,params[])
{
    new objectid, faction;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"dd",objectid, faction)) return SyntaxMSG(playerid, "/cctvfaction [Object-ID] [FactionID(/faction)]");
    if(CCTVInfo[objectid][tvObjectOn] && IsValidDynamicObject(CCTVInfo[objectid][tvObject]))
    {
        CCTVInfo[objectid][tvFaction] = faction;
        format(query, sizeof(query), "UPDATE `cctvs` SET `faction` = %d WHERE `id` = %d", faction, CCTVInfo[objectid][tvID]);
        mysql_function_query(dbHandle, query, false, "", "");
        SCM(playerid, COLOR_INFO, "Executat.");
    }
    else
    {
        SCM(playerid, -1,"ERROR: Acest CCTV dinamic nu exista!");
    }
    return 1;
}


CMD:removecctv(playerid,params[])
{
    new objectid;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removecctv [Object-ID]");
    if(CCTVInfo[objectid][tvObjectOn])
    {
        format(query, sizeof(query), "DELETE FROM `cctvs` WHERE `id` = %d", CCTVInfo[objectid][tvID]);
        mysql_function_query(dbHandle, query, true, "OnCameraRemove", "i", objectid);
        format(msg,sizeof(msg),"Ai distrus CCTV-ul cu ID-ul: %d!",objectid);
        SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
        SCM(playerid, -1,"ERROR: Acest CCTV dinamic nu exista!");
    }
    return 1;
}

CMD:whatcctv(playerid, params[])
{
    new tt[128];
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

    for(new i = 0; i < sizeof(CCTVInfo); i++)
    {
        if (PlayerToPoint(3, playerid,CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ]))
        {
            format(tt, sizeof(tt), "Stai langa un CCTV dinamic: [Normal ID: %d] [MySQL ID: %d].", i,CCTVInfo[i][tvID]);
            SCM(playerid, -1, tt);
            return 1;
        }
    }
    return 1;
}

CMD:cctvinfo(playerid,params[])
{
    new objectid, text[64];
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"ds[64]",objectid,text)) return SyntaxMSG(playerid, "/cctvinfo [Object-ID] [New Text]");
    if(CCTVInfo[objectid][tvObjectOn] && IsValidDynamicObject(CCTVInfo[objectid][tvObject]))
    {
        format(CCTVInfo[objectid][tvName], 128, "%s", text);
        format(query, sizeof(query), "UPDATE `cctvs` SET `info` = '%s' WHERE `id` = %d", text, CCTVInfo[objectid][tvID]);
        mysql_function_query(dbHandle, query, false, "", "");
        SCM(playerid, COLOR_INFO, "Executat.");
    }
    else
    {
        SCM(playerid, -1,"ERROR: Acest CCTV nu exista!");
    }
    return 1;
}

CMD:makejob(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new jobid, name[64], rankamount, sidejob, highrank, Float:x, Float:y, Float:z;
    if(sscanf(params,"ds[64]ddd", jobid, name, sidejob, rankamount, highrank)) return SyntaxMSG(playerid, "/makejob [jobid] [name] [sidejob(1/0)] [rankamount] [highrank]");
    x = PlayerPosX(playerid); y = PlayerPosY(playerid); z = PlayerPosZ(playerid);
    format(JobsInfo[jobid][jobName], 128, "%s", name);
    JobsInfo[jobid][jobRanks] = rankamount;
    JobsInfo[jobid][jobHighRank] = highrank;
    JobsInfo[jobid][jobX] = x;
    JobsInfo[jobid][jobY] = y;
    JobsInfo[jobid][jobZ] = z;
    JobsInfo[jobid][jobSideJob] = sidejob;
    JobsInfo[jobid][jobOn] = 1;
    JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1314, 1, x, y, z, -1, -1, -1, 100.0);
    if(JobsInfo[jobid][jobSideJob] == 1)
        format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"SIDE JOB"EMBED_GREEN"]");
    else
        format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"JOB"EMBED_GREEN"]");
    JobsInfo[jobid][jobLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    format(msg, sizeof(msg), "Un nou job a fost adaugat, [JobID: %d, Nunme: %s, Rankamount: %d, HighRank: %d]", jobid, name, rankamount, highrank);
    SCM(playerid, COLOR_GREEN2, msg);
    AddJobToFile(jobid, name, sidejob, rankamount, highrank, x, y, z);
    return 1;
}

CMD:movejob(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new jobid, Float:x, Float:y, Float:z;
    if(sscanf(params,"d", jobid)) return SyntaxMSG(playerid, "/movejob [jobid] (Muta locatia comenzii /takejob)");
    if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Job invalid.");
    GetPlayerPos(playerid, x, y, z);
    JobsInfo[jobid][jobX] = x;
    JobsInfo[jobid][jobY] = y;
    JobsInfo[jobid][jobZ] = z;
    format(msg, sizeof(msg), "Ai schimbat pozitia jobului cu ID %d.", jobid);
    SCM(playerid, COLOR_GREEN2, msg);
    DestroyDynamicPickup(JobsInfo[jobid][jobPickUp]);
    DestroyDynamic3DTextLabel(Text3D:JobsInfo[jobid][jobLabel]);
    JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1314, 1, x, y, z, -1, -1, -1, 100.0);
    JobsInfo[jobid][jobLabel] = CreateDynamic3DTextLabel(""EMBED_GREEN"["EMBED_RED"JOB"EMBED_GREEN"]", -1, x, y, z+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    format(query, sizeof(query), "UPDATE `jobs` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", x, y , z, JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:jobrankname(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new jobid, rank, name[64];
    if(sscanf(params,"dds[64]", jobid, rank, name)) return SyntaxMSG(playerid, "/jobrankname [jobid] [rank(1-10)] [name]");
    if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Invalid job.");
    format(msg, sizeof(msg), "Ai modificat job-ul cu ID-ul: %d's Rank: %d's in: %s", jobid, rank, name);
    SCM(playerid, COLOR_GREEN2, msg);
    if(rank == 1)
    {
        format(JobsInfo[jobid][jobRank1], 128, "%s", name);
    }
    else if(rank == 2)
    {
        format(JobsInfo[jobid][jobRank2], 128, "%s", name);
    }
    else if(rank == 3)
    {
        format(JobsInfo[jobid][jobRank3], 128, "%s", name);
    }
    else if(rank == 4)
    {
        format(JobsInfo[jobid][jobRank4], 128, "%s", name);
    }
    else if(rank == 5)
    {
        format(JobsInfo[jobid][jobRank5], 128, "%s", name);
    }
    else if(rank == 6)
    {
        format(JobsInfo[jobid][jobRank6], 128, "%s", name);
    }
    else if(rank == 7)
    {
        format(JobsInfo[jobid][jobRank7], 128, "%s", name);
    }
    else if(rank == 8)
    {
        format(JobsInfo[jobid][jobRank8], 128, "%s", name);
    }
    else if(rank == 9)
    {
        format(JobsInfo[jobid][jobRank9], 128, "%s", name);
    }
    else if(rank == 10)
    {
        format(JobsInfo[jobid][jobRank10], 128, "%s", name);
    }
    SaveJob(jobid);
    return 1;
}

CMD:jobrankamount(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new jobid, amount;
    if(sscanf(params,"dd", jobid, amount)) return SyntaxMSG(playerid, "/jobrankamount [jobid] [suma]");
    if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Job invalid.");
    JobsInfo[jobid][jobRanks] = amount;
    format(msg, sizeof(msg), "Ai schimbat numarul de rank-uri din factiunea %d in %d.", jobid, amount);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `jobs` SET `ranks` = %d WHERE `id` = %d", amount, JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:jobhighrank(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new jobid, rank;
    if(sscanf(params,"dd", jobid, rank)) return SyntaxMSG(playerid, "/jobhighrank [jobid] [rank]");
    if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Job invalid.");
    JobsInfo[jobid][jobHighRank] = rank;
    format(msg, sizeof(msg), "Ai schimbat cel mai mare rank din factiunea %d in %d.", jobid, rank);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `jobs` SET `highrank` = %d WHERE `id` = %d", rank, JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:removejob(playerid,params[])
{
    new JobID;
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",JobID)) return SyntaxMSG(playerid, "/removejob [Job-ID]");
    if(!JobsInfo[JobID][jobOn]) return SCM(playerid, -1,"ERROR: Job-ul nu exista!");
    DestroyDynamicPickup(JobsInfo[JobID][jobPickUp]);
    DestroyDynamic3DTextLabel(Text3D:JobsInfo[JobID][jobLabel]);
    format(query, sizeof(query), "DELETE FROM `jobs` WHERE `id` = %d",JobsInfo[JobID][jobID]);
    mysql_function_query(dbHandle, query, true, "OnJobRemove", "i", JobID);
    format(msg,sizeof(msg),"Ai distrus job-ul dinamic cu ID-ul: %d!",JobID);
    SCM(playerid, COLOR_YELLOWG, msg);
    return 1;
}

CMD:jobname(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new jobid, name[64];
    if(sscanf(params,"ds[64]", jobid, name)) return SyntaxMSG(playerid, "/jobname [jobid] [nume]");
    if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Job invalid.");
    format(JobsInfo[jobid][jobName], 128, "%s", name);
    format(msg, sizeof(msg), "Ai schimbat numele jobului din %d in %s.", jobid, name);
    SCM(playerid, COLOR_GREEN2, msg);
    format(query, sizeof(query), "UPDATE `jobs` SET `name` = '%s' WHERE `id` = %d", name, JobsInfo[jobid][jobID]);
    mysql_function_query(dbHandle, query, false, "", "");
    return 1;
}

CMD:setarmour(playerid, params[])
{
    new id,armour;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    if(sscanf(params,"ud",id,armour)) return SyntaxMSG(playerid, "/setarmour [playerid/PartOfName] [armour(1-100)]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "AdmCmd: Admin %s ti-a setat armura la %d.", GetNameEx(playerid), armour);
    SCM(id, COLOR_GREY, msg);
    format(msg, sizeof(msg), "*I-ai setat lui %s armura la %d", GetNameEx(id), armour);
    SCM(playerid, COLOR_WHITE, msg);
    SetPlayerArmour(id, armour);
    return 1;
}

CMD:sethp(playerid, params[])
{
    new id,hp;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"ud",id,hp)) return SyntaxMSG(playerid, "/sethp [playerid/PartOfName] [hp(1-100)]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    format(msg, sizeof(msg), "AdmCmd: Admin %s ti-a setat viata la %d.", GetNameEx(playerid), hp);
    SCM(id, COLOR_GREY, msg);
    format(msg, sizeof(msg), "*HP: %s HP to %d", GetNameEx(id), hp);
    SCM(playerid, COLOR_WHITE, msg);
    SetPlayerHealth(id, hp);
    return 1;
}

CMD:setfuel(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
    new veh, fuel;
    if(sscanf(params, "ii", veh, fuel)) return SyntaxMSG(playerid, "/setfuel [vehicleid] [fuel(0-100)]");
    if(fuel > 100 || fuel < 0) return SCM(playerid, COLOR_GREY, "Valoarea 'fuel' trebuie sa fie intre 0 si 100.");
    Gas{veh} = fuel;
    SCMEx(playerid, COLOR_GREEN, "Vehicul %d: %d litri de combustibil.", veh, fuel);
    return 1;
}

CMD:aremoveplant(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/aremoveplant [plantID]");
    if(!CropsInfo[id][pPlanted]) return SCM(playerid, COLOR_WHITE, "Planta nu exista.");
    SCMEx(playerid, COLOR_LIGHTRED, "Ai sters planta cu ID: %d", id);
    DestroyCrop(id);
    return 1;
}

CMD:plantinfo(playerid, params[])
{
    new plant = GetClosestPlantID(playerid);
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    if(plant == -1) return SCM(playerid, COLOR_WHITE, "Nu stai langa o planta.");
    SCMEx(playerid, COLOR_LIGHTBLUE, "Plant ID: %d, Autor: %s.", plant, CropsInfo[plant][pPlanter]);
    return 1;
}

CMD:showplants(playerid, params[])
{
    new zone[MAX_ZONE_NAME];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    new string[500];
    for(new i = 0; i < MAX_PLANTS; i++)
    {
        if(CropsInfo[i][pPlanted])
        {
            GetCoords2DZone(CropsInfo[i][pX], CropsInfo[i][pY], zone, MAX_ZONE_NAME);
            format(string, sizeof(string), "%s\n<%d>%s" ,string, i, zone);
        }
    }
    ShowDialog(playerid,Show:<ShowPlants>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Plants:"EMBED_RED"",string,"Teleport","Anuleaza");
    return 1;
}

CMD:changename(playerid, params[])
{
    new id,name[MAX_PLAYER_NAME];
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    if(sscanf(params,"us[64]",id,name)) return SyntaxMSG(playerid, "/changename [playerid/PartOfName] [new name]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(CheckNameUsage(name)) return SCM(playerid, -1, "Numele este deja folosit!");
    //-------------------------------------------------------------------------------------------------------------
    format(query, sizeof(query), "UPDATE `users` SET `name` = '%s' WHERE `name` = '%s'", name, GetName(id));
    mysql_function_query(dbHandle, query, false, "", "");
    //-------------------------------------------------------------------------------------------------------------
//  if(PlayerInfo[id][pHouseKey] != -1 && strcmp(GetName(id), HouseInfo[PlayerInfo[id][pHouseKey]][hOwner], true) == 0)
    if(PlayerInfo[id][pHouseKey] != -1)
    {
        format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
        mysql_function_query(dbHandle, query, false, "", "");
        format(HouseInfo[PlayerInfo[id][pHouseKey]][hOwner], MAX_PLAYER_NAME, "%s", name);
        UpdateHouseInfo(PlayerInfo[id][pHouseKey]);
        UpdateHouseText(PlayerInfo[id][pHouseKey]);
    }
    //-------------------------------------------------------------------------------------------------------------
    if(PlayerInfo[id][pBizKey] != -1)
    {
        format(query, sizeof(query), "UPDATE `business` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
        mysql_function_query(dbHandle, query, false, "", "");
        format(BizInfo[PlayerInfo[id][pBizKey]][bizOwner], MAX_PLAYER_NAME, "%s", name);
        UpdateBizInfo(PlayerInfo[id][pBizKey]);
    }
    //-------------------------------------------------------------------------------------------------------------
    UpdatePlayerVehicles(id);
    //-------------------------------------------------------------------------------------------------------------
    for(new i = 1; i <= GetVehiclePoolSize(); i++)
    {
        if(CompareStrings(VehicleInfo[i][carOwner], GetName(id)))
        {
            format(VehicleInfo[i][carOwner], MAX_PLAYER_NAME, "%s", name);
        }
    }
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
    mysql_function_query(dbHandle, query, false, "", "");
    //-------------------------------------------------------------------------------------------------------------
    format(msg, sizeof(msg), "AdmCmd: Numele lui %s a fost schimbat in %s, de catre %s.", GetName(id), name, GetName(playerid));
    AMSG(COLOR_LIGHTRED, msg);
    SCMEx(id, COLOR_LIGHTBLUE, "NameINFO: Numele tau a fost schimbat din %s in %s de catre %s.", GetName(id), name, GetName(playerid));
    SetPlayerName(id, name);
    GlobalSaving();
    return 1;
}

CMD:getworld(playerid, params[])
{
    new id;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/getworld [playerid]");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    SCMEx(playerid, COLOR_WHITE, "%s virtualworld: %d.",GetName(id), GetWorld(id));
    return 1;
}

CMD:aengine(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu esti intr-un vehicul!");
    new vehicleid = GetPlayerVehicleID(playerid);
    ToggleVehicleEngine(vehicleid, playerid);
    return 1;
}

CMD:go(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
    new Float:x, Float:y, Float:z;
    if(sscanf(params,"fff", x, y ,z)) return SyntaxMSG(playerid, "/go [Pos X] [Pos Y] [Pos Z]");
    PutPlayer(playerid, x, y ,z);
    return 1;
}

CMD:x(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
    new Float:x;
    if(sscanf(params,"f", x)) return SyntaxMSG(playerid, "/x [Pos X]");
    PutPlayer(playerid, PlayerPosX(playerid)+x, PlayerPosY(playerid), PlayerPosZ(playerid));
    return 1;
}

CMD:y(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
    new Float:y;
    if(sscanf(params,"f", y)) return SyntaxMSG(playerid, "/y [Pos Y]");
    PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid)+y, PlayerPosZ(playerid));
    return 1;
}

CMD:z(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
    new Float:z;
    if(sscanf(params,"f", z)) return SyntaxMSG(playerid, "/z [Pos Z]");
    PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+z);
    return 1;
}

CMD:weapondamage(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    DisplayWeaponDamage(playerid);
    return 1;
}

CMD:payday(playerid, params[])
{
    if(!CheckAdmin(playerid, BIG_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    foreach(new i : Player)
    {
        PayDay(i);
    }
    return 1;
}
/* =================== AdminCommands =================== */

CMD:gmx(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
    format(msg, sizeof(msg), "Serverul se restarteaza, va rugam asteptati!");
    SCMALL(COLOR_LIGHTRED, msg);
    GameModeRehash();
    return 1;
}

//============================================ Security Mode ==============================================//

CMD:checkweapons(playerid, params[])
{
    new weapon;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params,"i", weapon)) return SyntaxMSG(playerid, "/checkweapons [Weapon ID]");
    
    new weapons[13][2];
    
    foreach(new i : Player)
    {
        for (new j = 0; j <= 12; j++)
        {
            GetPlayerWeaponData(i, j, weapons[j][0], weapons[j][1]);
            
            if(weapons[j][0] == weapon)
            {
                SCMEx(playerid, COLOR_LIGHTRED, "%s(ID:%d) are arma %s, verifica-l!", GetName(i), i, GetWeaponNameEx(weapon));
                
                break;
            }
        }
    }
    return 1;
}

CMD:displaycoords(playerid, params[])
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	SCMEx(playerid, COLOR_WHITE, "Coordonate: %f %f %f", pos[0], pos[1], pos[2]);
	return 1;
}

CMD:checkserials(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans`");
    mysql_tquery(dbHandle, query, "LoadPlayerSerials");
    
    return 1;
}
//============================== Farmer Job CMDS =========================//
CMD:farmerinfo(playerid,params[])
{
	format(msg, sizeof(msg),"Farmer Job, Versiunea 1.0\n");
	ShowPlayerDialog(playerid,1323,0,"Farmer Job Info",msg,"Inchide","");
	return 1;
}

CMD:transport(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(FarmInfo[playerid][pVehicleHire]) == 478 && GetPlayerVehicleID(playerid) == FarmInfo[playerid][pVehicleHire])
	{
        if(FarmInfo[playerid][pPaddyHarvestInVehicle] > 0)
   	    {
   	        SetPlayerCheckpoint(playerid,FJPosTransport,5.0);
			SCM(playerid, -1, "[FarmerJob]: Du-te si livreaza recolta la depozit.");
			SCM(playerid, -1, "[FarmerJob]: Nu uita sa te intorci cu Walton-ul la ferma si sa folosesti /endtransport.");
			SetPVarInt(playerid, "Transporting", 1);
   	    }
   	    else
   	    {
   	    	SendClientMessage(playerid,-1,"[FarmerJob]: Nu ai ce livra!");
   	    }
	}
	return 1;
}

CMD:endtransport(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	if(job == FARMER)
	{
		if(GetIntVar(playerid, "Transporting") == 0) return SCM(playerid, -1, "[FarmerJob]: Nu te alfii in procesul de transportare!");
		FarmInfo[playerid][pHasHireVehicle] = 0;
		SetPVarInt(playerid, "Transporting", 0);
		SetVehicleToRespawn(FarmInfo[playerid][pVehicleHire]);
	}
	else
	{
		SCM(playerid, -1, "Nu esti fermier!");
	}
	return 1;
}

CMD:startsow(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	new vehicle = GetPlayerVehicleID(playerid);
	new string[128], Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(job == FARMER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 531 && CityVehicles[vehicle][vType] == FARMER_CAR)
		{
			if(GetIntVar(playerid, "Sowing") == 1) return SCM(playerid, -1, "[FarmerJob]: Deja plantezi!");
			new trailer = GetClosestTrailer(playerid);
			if(GetVehicleModel(trailer) == 610)
			{
				SetPVarInt(playerid, "Sowing", 1);
				FarmInfo[playerid][pHasHireVehicle] = 1;
				FarmInfo[playerid][pVehicleHire] = vehicle;
				FarmInfo[playerid][pTrailerVehicleHire] = trailer;
				//FarmInfo[playerid][pTrailerVehicleHire] = CreateVehicle(610, X, Y+2, Z, 0.0, -1, -1, 90000);
				SetTimerEx("AttachTrailer",1000,0,"ii",FarmInfo[playerid][pVehicleHire],FarmInfo[playerid][pTrailerVehicleHire]);
				FarmInfo[playerid][pPaddyInTrailer] = 0;
				format(string,sizeof(string),"Proprietar: %s\n Seminte: {4cff00}%d",GetName(playerid),FarmInfo[playerid][pPaddyInTrailer]);
				FarmInfo[playerid][pTrailerText] = CreateDynamic3DTextLabel(string,-1, X, Y+2, Z,5.0,INVALID_PLAYER_ID,FarmInfo[playerid][pTrailerVehicleHire]);
			}
			else
			{
				SCM(playerid, -1, "Nu sunt remorci pe langa tine sau trebuie sa te apropii mai mult de remorca.");
			}
		}
		else
		{
			SCM(playerid, -1, "[FarmerJob]: Trebuie sa fi intr-un tractor ca sa incepi plantarea.");
		}
	}
	else
	{
		SCM(playerid, -1, "[FarmerJob]: Nu esti fermier!");
	}
	return 1;
}

CMD:stopsow(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	if(job == FARMER)
	{
		if(GetIntVar(playerid, "Sowing") == 0) return SCM(playerid, -1, "[FarmerJob]: Nu te aflii in procesul de plantare!");
		FarmInfo[playerid][pHasHireVehicle] = 0;
		SetPVarInt(playerid, "Sowing", 0);
        new vehicle = FarmInfo[playerid][pTrailerVehicleHire];
		SetVehicleToRespawn(FarmInfo[playerid][pVehicleHire]);
		if(IsValidVehicle(vehicle))
		{
			DestroyDynamic3DTextLabel(FarmInfo[playerid][pTrailerText]);
			FarmInfo[playerid][pPaddyInTrailer] = 0;
            SetVehiclePos(vehicle, CityVehicles[vehicle][vPosX], CityVehicles[vehicle][vPosY], CityVehicles[vehicle][vPosZ]);
            SetVehicleZAngle(vehicle, CityVehicles[vehicle][vPosA]);
			//SetVehicleToRespawn(FarmInfo[playerid][pTrailerVehicleHire]);
			//DestroyVehicle(FarmInfo[playerid][pTrailerVehicleHire]);
		}
	}
	else
	{
		SCM(playerid, -1, "Nu esti fermier!");
	}
	return 1;
}

CMD:stopharvest(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	if(job == FARMER)
	{
		if(GetIntVar(playerid, "Harvesting") == 0) return SCM(playerid, -1, "[FarmerJob]: Nu te alfii in procesul de recoltare!");
		FarmInfo[playerid][pHasHireVehicle] = 0;
		SetPVarInt(playerid, "Harvesting", 0);
		SetVehicleToRespawn(FarmInfo[playerid][pVehicleHire]);
	}
	else
	{
		SCM(playerid, -1, "Nu esti fermier!");
	}
	return 1;
}
//============================== Farmer Job CMDS =========================//

//============================== Garbage Job CMDS =========================//

CMD:trash(playerid, params[])
{
	new option[24], secondoption;
	new vehicleid = GetNearestVehicle(playerid), Float:x, Float:y, Float:z;
	if(PlayerInfo[playerid][pJob] != GARBAGE) return SCM(playerid, -1, "Nu ai jobul de gunoier!");
	if(IsValidVehicle(vehicleid) && GetVehicleModel(vehicleid) == 408)
	{
		GetVehicleBoot(vehicleid, x, y, z);
	}
	if(sscanf(params, "s[24]D(-1)", option, secondoption))
	{
		SCM(playerid, COLOR_YELLOW3, "_____________________________________________");
		SyntaxMSG(playerid, "/trash [usage]");
		SCM(playerid, COLOR_GRAD2, "[Actiuni] load, unload");
		SCM(playerid, COLOR_YELLOW3, "_____________________________________________");
		return 1;
	}
	if(!strcmp(option, "load", true))
	{
		for(new i=0; i < MAX_TRASHBINS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, BinInfo[i][binX], BinInfo[i][binY], BinInfo[i][binZ]))
			{
                if(trash[playerid] == 20)
                {
                    SetPVarInt(playerid, "GarbageFull", 1);
                    SCM(playerid, COLOR_GREY, "[JOB]: Trebuie sa te intorci la groapa de gunoi pentru a descarca masina.");
                    SetPlayerCheckpoint(playerid, 2402.4753,90.8707,27.1285, 4.0);
                    return 1;
                }
				if(BinInfo[i][TrashPicked] == 1) return SCM(playerid, COLOR_GRAD1, "Acest cos de gunoi este gol. Revino mai tarziu.");
				ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.0, 0, 0, 0, 0,0); // nhatlenkieu1
				SetPVarInt(playerid,"HasTrash",1);
				SetTimerEx("CarrySack",1000,0,"i",playerid);
				SetPlayerAttachedObject(playerid, 9, 1265, 1, 0.170999, 0.363000, 0.000000, 0.000000, 93.700012, 0.000000, 0.713000, 0.650000, 1.000000, 0, 0);
				SetPlayerCheckpoint(playerid, x, y, z, 2);
				BinInfo[i][TrashPicked] = 1;
			}
		}
	}
	if(!strcmp(option, "unload", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z))
		{
			if(GetPVarInt(playerid, "HasTrash") == 1)
			{
				if(trash[playerid] < 20)
                {
                    ApplyAnimation(playerid, "CARRY", "PUTDWN105", 4.0, 0, 0, 0, 0,0); // datxuongkieu2
    				RemovePlayerAttachedObject(playerid,9);
    				SetPVarInt(playerid,"HasTrash",0);
                    RemoveCheckPoint(playerid);
                    trash[playerid] ++;
                    GiveCash(playerid, 15);
					PlaySound(playerid, 1138);
                }
                if(trash[playerid] == 20)
                {
                    SetPVarInt(playerid, "GarbageFull", 1);
                    SCM(playerid, COLOR_GREY, "Trebuie sa te intorci la groapa de gunoi pentru a descarca masina");
                    SetPlayerCheckpoint(playerid, 2108.7170, -1977.7446, 13.5468, 4.0);
                }				
			}
			else
			{
				SCM(playerid, -1, "Nu ai gunoi!");
			}
		}
		else
		{
			SCM(playerid, -1, "Trebuie sa te aflii in spatele masinii de gunoi!");
		}
	}
	return 1;
}

CMD:takeuniform(playerid, params[])
{
	if(!PlayerToPoint(2.0, playerid, 2195.5798, -1973.2034, 13.5589)) return SCM(playerid, -1, "Trebuie sa te aflii la locul pentru Uniforma de gunoier!");
	if(PlayerInfo[playerid][pJob] != GARBAGE) return SCM(playerid, -1, "Nu ai jobul de gunoier!");
	if(GetPVarInt(playerid, "TrashUniform") == 0)
	{
		SetPVarInt(playerid, "TrashUniform", 1);
		SetPlayerSkin(playerid, 16);
		SCM(playerid, -1, "[JOB]: Ti-ai pus uniforma. Foloseste /takeuniform iar pentru a da-o jos.");
		format(msg, sizeof(msg), "1.Urca-te in masina si cauta cosurile de gunoi pe la case. Goleste-le folosind ('/trash load si /trash unload').\n2.Atentie! Masina trebuie sa ramana intacta sau nu iti vei primi toti banii.");
        SCM(playerid, COLOR_GREEN, msg);
	}
	else
	{
		SetPVarInt(playerid, "TrashUniform", 0);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		SCM(playerid, -1, "[JOB]: Ti-ai dat jos uniforma.");
	}
	return 1;
}
//============================== Garbage Job CMDS =========================//

//SPRAYTAG SYSTEM - START
stock IntToHex(int)
{
    new
        str[15];
    format(str, sizeof(str), "%x", int);
    return str;
}

stock HexToInt(hex)
{
    new
        str[15];
    format(str, sizeof(str), "%i", hex);
    return strval(str);
}

function GetNextSprayID()
{
    for(new i=0;i<=MAX_SPRAYS;i++)
        if(SprayInfo[i][sOn] != 0) return i;
    return -1;
}

function CreateSpray(id, text[], owner[], Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ, size, msize, bold, color, playerid)
{
    
    SprayInfo[id][sObject] = CreateObject(19353, X, Y, Z, RX, 0.0, 0.0);
    SetObjectMaterialText(SprayInfo[id][sObject], text, 0, msize, "Arial", size, bold, color, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    SprayInfo[id][sOn] = 1;
    SprayInfo[id][sX] = X;
    SprayInfo[id][sY] = Y;
    SprayInfo[id][sZ] = Z;
    SprayInfo[id][sRX] = RX;
    SprayInfo[id][sSize] = size;
    format(SprayInfo[id][sText], 64, "%s", text);
    format(SprayInfo[id][sOwner], 64, "%s", owner);

    format(query, sizeof(query), "INSERT INTO `spraytags` (text, x, y, z, rx, ry, rz, owner, size, msize, bold, color) VALUES ('%s', %f, %f,%f,%f, %f, %f, '%s', %d, %d, %d, %d)", text,X,Y,Z,RX,RY,RZ,owner,size,msize,bold,HexToInt(color));
    mysql_function_query(dbHandle, query, false, "", "");
    if(playerid != -1)
    {
        SetPVarInt(playerid, "SprayTag", id);
        EditObject2(playerid, SprayInfo[id][sObject]);
    }
    return 1;
}

stock LoadSpray()
{
    format(query, sizeof(query), "SELECT * FROM `spraytags` WHERE `id` > 0");
    mysql_function_query(dbHandle, query, true, "OnLoadSpray", "");
    return 1;
}

function OnLoadSpray()
{
    new rows, fields, total = 0;
    new text[64], owner[64];
    new Float:X, Float:Y, Float: Z, Float:RX, Float:RY, Float:RZ;
    new size, msize, bold, color;
    cache_get_data(rows, fields);
    if(rows)
    {
        while(total < rows)
        {
            new id = GetNextSprayID();
            cache_get_row(total, 1, text, dbHandle, 128);
            X = cache_get_row_float(total, 2);
            Y = cache_get_row_float(total, 3);
            Z = cache_get_row_float(total, 4);
            RX = cache_get_row_float(total, 5);
            RY = cache_get_row_float(total, 6);
            RZ = cache_get_row_float(total, 7);
            cache_get_row(total, 8, owner, dbHandle, 128);
            size = cache_get_row_int(total, 9);
            msize = cache_get_row_int(total, 10);
            bold = cache_get_row_int(total, 11);
            color = cache_get_row_int(total, 12);
            CreateSpray(id, text, owner, X, Y, Z, RX, RY, RZ, size, msize, bold, color, -1);
        }
    }
}


CMD:spraytag(playerid, params[])
{
    new text[64], size, msize, bold, color;
    if(sscanf(params, "iixs[64]", size, bold, color, text)) return SyntaxMSG(playerid, "/spraytag [size (6-32)] [bold(1/0)] [color (HEX - 0xRRGGBBOO] [text]");
    if(size < 1 || size > 3) return SyntaxMSG(playerid, "/spraytag [size (1-3)] [bold(1/0)] [color (HEX - 0xRRGGBBOO] [text]");
    if(bold != 0 && bold != 1) return SyntaxMSG(playerid, "/spraytag [size (1-3)] [bold(1/0)] [color (HEX - 0xRRGGBBOO)] [text]");
    new id = GetNextSprayID();
    new Float:X, Float:Y, Float: Z, Float:R;
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, R);
	if(size < 10) msize = 10;
    else
    {
        msize = (size%10)*10;
        printf("MSIZE = %d", msize);
    }

    CreateSpray(id, text, GetName(playerid), X+1, Y, Z, 0, 0, R, size, msize, bold, color, playerid);
    return 1;
}
//SPRAYTAG SYSTEM - END

//TRAILER SYSTEM CMD
stock FindNearbyTrailer(id, idtype)
{
	new Float:x1, Float:y1, Float:z1;
	new Float:x2, Float:y2, Float:z2;
	if(idtype==1) GetPlayerPos(id,x1,y1,z1);
    else GetVehiclePos(id,x1,y1,z1);	
	for(new i=1; i<=GetVehiclePoolSize(); i++)
	{
		GetVehiclePos(i,x2,y2,z2);
		if(floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) ) < 6)
			return i;
	}
	return -1;
}

CMD:trailer(playerid, params[])
{
	new vehid, trailerid;
	vehid = GetPlayerVehicleID(playerid);
	if(IsTrailerAttachedToVehicle(vehid))
	{
		DetachTrailerFromVehicle(vehid);
		SCM(playerid, COLOR_GREY, "Trailer-ul a fost decuplat.");
	}
	else
	{
		trailerid = FindNearbyTrailer(vehid, 2);
		if(trailerid != -1)
		{
			AttachTrailerToVehicle(trailerid, vehid);
			SCM(playerid, COLOR_GREY, "Trailer-ul a fost atasat.");
		}
		else
			SCM(playerid, COLOR_GREY, "Nu ai nici-un trailer in jur!");
	}
	
}

CMD:entertrailer(playerid, params[])
{
	new trailerid;
	trailerid = FindNearbyTrailer(playerid, 1);
	if(trailerid != -1 && InTrailer[playerid]==-1)
	{
		SetPlayerVirtualWorld(playerid, playerid);
		SetPlayerInterior(playerid, 1);
		SetPlayerPos(playerid, 1.808619, 32.384357, 1199.593750);
		InTrailer[playerid]=trailerid;
	}
	else
		SCM(playerid, COLOR_GREY, "Nu esti langa o rulota!");
}

CMD:exittrailer(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	if(InTrailer[playerid])
	{
		GetVehiclePos(InTrailer[playerid], x, y, z);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, x+2, y+2, z);
		InTrailer[playerid]=-1;
	}
	else
	{
		SCM(playerid, COLOR_GREY, "Nu esti intr-o rulota!");
	}
}